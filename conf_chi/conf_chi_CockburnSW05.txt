ABSTRACT Speed dependent automatic zooming  is a promising refinement to scrolling in which documents are automatically zoomed-out as the scroll rate increases.
By automatically zooming, the visual flow rate is reduced enabling rapid scrolling without motion blur.
In order to aid SDAZ calibration we theoretically and empirically scrutinise human factors of the speed/zoom relationship.
We then compare user performance with four alternative text-document scrolling systems, two of which employ automatic zooming.
One of these systems, which we term `DDAZ', is based on van Wijk and Nuij's recent and important theory that calculates optimal pan/zoom paths between known locations in 2D space.
Participants in our evaluation  completed scrolling tasks most rapidly when using SDAZ, followed by DDAZ, normal scrollbars, and traditional rate-based scrolling.
Workload assessments and preferences strongly favoured SDAZ.
We finish by examining issues for consideration in commercial deployments.
Categories & Subject Descriptors: : Interfaces--Input devices and strategies.
General Terms: Human Factors; Experimentation.
Keywords: Scrolling, automatic zooming, visual flow, rate control INTRODUCTION Scrolling and panning allow users to move through information spaces that are too large for convenient display within a single window.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Since this study, several scrolling enhancements have been deployed in mainstream desktop environments.
Examples include scroll-wheel mice and rate-based scrolling in which scroll-speed is a function of the distance dragged with the middle mouse button.
This paper scrutinises a promising scrolling refinement called `speed-dependent automatic zooming' or SDAZ.
SDAZ automatically zooms away from the document as the scrolling velocity increases: the faster you scroll, the `higher' you fly .
Although SDAZ was first formally described by Igarashi and Hinckley in 2000  a similar concept was used in the computer game `Grand Theft Auto' in 1997.
The game gave users a plan view of their car in a city street, which automatically zoomed to show progressively more city blocks on acceleration.
The need for zooming in the game is clear: without it, the rate of display change  exceeds that the human visual system can process, inducing `motion blur'.
Zooming-out decreases the rate of pixel movement, allowing higher speeds in the information space without overloading the visual system.
Standard desktop systems suffer similar problems: when seeking a visual target users wish to find it quickly, but the faster they scroll the greater the impact of motion-blur.
Contemporary software developers are grappling with the close relationship between scrolling, panning and zooming as demonstrated by systems such as Adobe Reader 6 which includes a `Dynamic Zoom' tool that allows a single mouse to control simultaneous panning and zooming.
Igarashi and Hinckley's preliminary evaluation of SDAZ  found that it allowed comparable performance to other scrolling techniques.
In our previous work  we found positive results for SDAZ, both in user performance and in subjective preferences, when compared to document and map navigation using traditional scrollbars.
More recently, van Wijk and Nuij  proposed an adaptation of SDAZ based on a strong theory that yields optimal animations in pan/zoom space.
Their formulae calculate a smooth and efficient camera flight between two x,y coordinates, each at different zoom levels.
Results showed that while the scroll wheel did not improve performance, rate-based scrolling with the mouse and keyboard mounted joysticks improved performance by 31% and 35% over the standard mouse.
More recently, Hinckley et al.
Results indicated that scrolling with the ScrollPoint's isometric joystick was comparatively poor over short distances, but that it performed equally well to the best scroll wheel acceleration setting for long distances.
Interestingly, they also showed that the acquisition of offscreen targets with scrolling is reliably modelled by Fitts' Law , which is normally applied only to targets within a single visible field.
Speed and zoom coupling Igarashi and Hinckley  described five systems that automatically modify zoom-level with scrolling speed--a web browser, a map viewer, an image browser, a dictionary, and a sound editor.
Only the web browser and map viewer were evaluated as the other applications did not seem promising.
Their evaluation  showed similar performance between SDAZ and traditional interfaces.
They stressed the desirability of further and larger scale evaluations.
Tan, Robertson and Czerwinski  produced positive results for coupling zoom level  with movement speed.
Participants were able to acquire and move targets in a 3D virtual world more rapidly when using a `speed-coupled flying and orbiting' interface than when using more traditional mechanisms for 3D navigation.
This result builds on that of Ware and Fleet  who showed improved user performance in 3D `fly-by' navigation when speed was automatically coupled to flying altitude .
Our previous evaluation  showed positive results for SDAZ .
We re-implemented and evaluated interfaces similar to the web-browser and map-browser demonstrated by Igarashi and Hinckley.
Our OpenGL interfaces provided high frame-rates and fluid interaction with real documents and maps, rather than the synthesized ones used in Igarashi and Hinckley's study.
Results showed that SDAZ significantly out-performed traditional interfaces.
Although the results are positive, there are validity concerns arising from the fact that neither of the competing interfaces supported rate-based scrolling.
There is a risk that rather than scrutinising the impact of automatic zooming, the experiments actually discriminated between rate-based scrolling and traditional scrollbars.
Because SDAZ is essentially rate-based scrolling 
Until now the scrolling theory has not been empirically tested.
This paper describes our attempts to better understand human perceptual foundations of systems that automatically change zoom-level with scroll speed.
We review human-factors of visual processing and use it to predict a perceptual relationship between speed and zoom.
These predictions are compared with empirical results , and the results are used to calibrate a text-based SDAZ system.
We also implement and test van Wijk and Nuij's three suggestions for theoretically-based automatic zooming, and we empirically compare performance  of the most promising system with three other scrolling interfaces--our calibrated SDAZ system, normal scrollbars, and traditional rate-based scrolling.
Finally, we discuss issues involved in developing commercial deployments of SDAZ.
BACKGROUND Document editors and browsers such as Microsoft Word and Adobe Reader support a wide range of tools for scrolling.
For example, Word's vertical scrollbar has been extended  to include shortcuts for scrolling to semantic items such as pages, sections, tables, figures, and keywords.
Zooming is another standard user interface feature that influences scrolling behaviour because it alters the proportion of the document displayed within each window.
The `Dynamic Zoom' feature of Acrobat Reader 6 is an interesting exploitation of the scroll/zoom relationship.
It allows simultaneous control of scrolling and zooming by binding scroll-wheel actions to zooming while dragging the mouse with the wheel depressed controls rate-based scrolling.
Despite the availability of sophisticated tools such as these, the extent to which they are used remains largely unexplored.
Scrolling studies Zhai et al.
Optimal Pan-Zoom Paths In recent work, van Wijk and Nuij  present a theoretical analysis of panning and zooming in 2D information spaces.
Their formulae calculate optimal cameras paths that produce smooth and efficient animations between discrete start and finish locations in `zoom/pan space' .
V constrains the `information flow' and is measured in units of screen-widths per second.
The second parameter  is a measure of the humanperceptual trade-off between zooming and panning, with higher values of  producing animations with more zooming, and lower values producing relatively more panning.
Interestingly to us, van Wijk and Nuij suggest three schemes for deploying their formulae within scrolling variants of speed-dependent automatic zooming.
Although primarily intended for navigation between pre-determined locations in pan/zoom space they suggest adaptations allowing their formulae to work with scrolling where the final destination is normally dynamically determined by the user.
None of these schemes were empirically tested, but van Wijk and Nuij's theoretical analysis is inspiring.
We implemented all three of their suggested scrolling systems, as described below.
Human processing of visual flow When scrolling and zooming, users must visually track moving targets.
Research into human visual perception shows that visual signals are summated over a period of approximately 120-125ms in daylight .
Visual blurring of moving objects is dramatically less than might be expected from a 120ms `exposure' time .
Morgan and Benton  showed that images can move across the retina at up to 3 degrees per second without an effect on image acuity.
At higher speeds moving images are stabilised on the retina by tracking them with `smoothpursuit' conjugate eye movements .
Smooth-pursuit eyetracking of objects succeeds up to angular velocities of approximately 100 per second .
These values are used in our theoretical approximation of SDAZ calibration.
CALIBRATING THE BEHAVIOUR OF AUTOMATIC ZOOMING All scrolling systems are controlled through a mapping from the user's manipulation of the input device to the resultant scrolling behaviour.
In first-order control, such as that in ratebased scrolling, the mapping is from position  to speed--as the mouse is displaced further, the scroll speed increases.
Igarashi and Hinckley used an inverse relationship between speed and scale, shown in Equations 1 & 2: v0 is a predefined speed below which no zooming occurs, s0 is a predefined minimum scale, d0 is the mouse movement required before zooming begins, and d1 is a predefined maximum mouse movement beyond which further displacement has no effect on speed or zoom.
Neither Igarashi & Hinckley nor Cockburn & Savage report the values for their constants, and both papers report that several heuristics are applied to limit the adverse affects of rapid changes in zoom-level.
In our experience, `tweaking' the calibration of the device-speed-zoom relationship is one of the hardest parts of implementing SDAZ systems.
In order to aid SDAZ calibration we theoretically and empirically analyse the maximum visual flow rates at various levels of magnification.
Theoretical limits of smooth-pursuit Smooth-pursuit visual tracking is limited by the angular rate that objects move before the eyes, which is dependent on the speed of object movement and the distance between the object and the viewer.
In all the experiments described in this paper viewers sat approximately 50cm from a 19inch Compaq monitor, giving a viewport size of 35x27cm and angular dimensions at the eye of 42x31.
To simplify discussion of visual flow rates at different levels of magnification, we discriminate between screen movement rate  and document movement rate , both measured in cm/sec.
The screen movement rate is the speed that pixels move across the screen, while the document movement rate is the speed the document moves in 3D space.
At 100% magnification , the screen and document movement rates are identical.
By applying the 100/sec limit of the smooth-pursuit visual system  to the screen viewing distance of 50cm, gives an upper-bound for SMR of 87cm/sec.
The topmost line of Figure 2 shows the theoretical document movement rates corresponding to the limit of smooth pursuit at different levels of magnification, calculated using Equation 5.
People's ability to track and identify data such as items of text is likely to be substantially lower than the upper-bound of visual tracking.
We assume that targets must remain onscreen long enough for users to carry out three actions: initiate the smooth-pursuit visual system , visually process the image or read the text , and recognise the target .
For simplicity, we assume that these steps are competed in series, however, in reality some are likely to be completed in parallel.
Blohm and Schreiber  estimate that initiating the smooth pursuit visual system, InitSPTime, takes between 100-150ms.
Reading a three-word heading takes approximately 600ms assuming reading speeds of approximately 280 words per minute .
Once the heading is processed, it must be recognised as the target, RecogTime, for which we use Card et al.
Summing these values gives an estimated time of 950ms for reading and identifying a moving three letter heading.
Finally, these limiting onscreen times can be converted into document and screen movement rates using equations 5 and 6, where AppSize is the height of the application window:
Apparatus The experiment ran on Athlon 2200+ computers with 512MB of RAM running Windows XP, outputting to 19inch Compaq monitors at 1024x768 resolution, driven by Geforce 4 ti4600 video cards.
All software was written in C/OpenGL and it was executed in full-screen game mode at 70fps.
Input was provided through an optical Logitech three button mouse.
The interface used for the tasks was our SDAZ document browser , but with automatic zooming disabled.
Documents were displayed within a maximised window at one of four magnification levels .
At 100% magnification all document text was clearly legible.
At the 25% level the target text  was `barely legible', basing the assessment of legibility on Tullis et al.
Full font metrics used in the experiment are described by Savage .
Scroll speed was controlled through rate-based scrolling with a linear relationship between mouse displacement and velocity.
The maximum document movement rate was set to exceed the theoretical limit for the smooth pursuit visual system, and was attained at a mouse displacement of 170pixels.
Only vertical scrolling was supported.
Scroll speeds were logged by software at 100ms intervals.
Two A4 documents were used in the tasks.
For practice tasks  the document was a 32 page scientific report, and for logged tasks it was a 157 page Masters thesis.
Method and Procedure The participants' tasks involved scrolling in a specified direction  for an image or a two/three word text heading.
Each task was cued within a small window in the upper-right hand corner of the screen.
Example image and heading tasks are "locate the first bar-graph up from here" and "locate the `Mapping Attributes' heading down from here".
Assuming a maximised window size of 27cm vertically, Figure 2 plots the estimated maximum document scroll rates for tracking and identifying three word text headings.
Empirical analysis The empirical analysis, like the theoretical approximation above, attempts to answer the question "how fast is too fast for comfortable perception when scrolling at different magnification levels?"
Participants were asked to find either images or two/three word headings within a document set at a specific magnification level.
Software continually logged their scrolling velocity.
Rather than ask participants to set a maximum scroll speed, we wished to observe their natural scrolling behaviour and use that to characterise their maximum scrolling speeds.
Following the practice tasks all participants completed two tasks of each type  at all four levels of magnification.
The logged scroll-speed provides the source data for our analysis, but our interest lies with the maximum comfortable document movement rate at each magnification level, and not the mean speed.
For this reason the analysed dependent measure is the upperquartile  of the scroll-rate per task.
To inspect this decision we plotted the scroll-rates for five pre-test participants together with the upper-quartile measure .
The plots assured us that the UQ measure was successfully approximating the fastest sustained scroll-speed.
Participants Twenty volunteer second-year Computer Science students participated in the study .
We collected a variety of background demographics including their experience with computer games.
Results The upper-quartile scroll speeds per task were analysed in a 4x2 repeated-measures analysis of variance  for factors magnification-level and target-type.
Although the existence/absence of statistically reliable differences between levels of these factors is interesting, it is not our primary objective.
The primary objective is to characterise the maximum comfortable scroll speeds at various levels of magnification.
Over all magnification levels, the mean UQ document scroll-rate was 71.2cm/sec .
As expected, there is a reliable difference between UQ scroll-rates at different levels of magnification , which essentially means that decreasing magnification allows users to scroll the document more quickly.
There was no reliable difference between the means for locating images and text headings , which suggests that a single calibration value may be robust for different target types.
Regression analysis shows accurate modelling through an inverse relationship between document movement rate and magnification: DMR=6593/, R2=0.97, p<.05.
Figure 2 shows the theoretical and measured mean document movement rates at different levels of magnification.
It also shows the limiting rates for smoothpursuit and the calculated line of best fit for the means.
Our system constrains maximum and minimum magnifications to 100% and 10%.
Document movement rate is set by a linear mapping with cursor displacement.
A maximum displacement of 170pixels corresponds to a maximum document movement rate of 112cm/sec .
Three further parameters are necessary to constrain the rate of change of magnification.
Without these constraints there can be disturbingly rapid zooming during the onset of scrolling, when changing scroll direction, and when terminating scrolling.
Igarashi and Hinckley also described these constraints, but did not provide parameter values.
The three parameters and recommended values  are as follows: * Maximum ascent rate--this parameter prevents the excessive decrease in magnification  that can be caused by a sudden large mouse-drag movement.
We recommend 150mag/sec, where mag is measured in magnification percentage.
This constraint is very important.
Users frequently scroll in one direction only to rapidly change direction on identifying a candidate target, characterised by "there it is, whoops overshot, bring it back".
This rate is best set higher than the maximum descent rate as the user typically wants to `look at the target as fast as possible'.
We also evaluated standard rate-based scrolling and traditional scrollbars for baseline comparison.
We implemented all three of van Wijk and Nuij's suggestions, based on the formulae they present in Equation 9 and Section 5.1 of their paper.
Full details of these formulae are beyond the scope of this paper, but we refer precisely to them to aid those wishing to replicate our study.
The three techniques differ in how user input is sampled, resulting in markedly different interaction experiences: * Positional sampling, which we term DDAZ for `dispacement dependent automatic zooming'.
The location of a virtual cursor is periodically sampled  and input to the formulae.
The user's experience is that they control and move a virtual scroll-thumb, and after each discrete thumb movement a pan/zoom animation quickly moves between the original and new document locations.
While this works well for discrete movements it causes substantial `view bouncing' if the user attempts to sustain a smooth and continuous scroll speed.
The values recommended by van Wijk and Nuij for parameters V and  resulted in scrolling speeds that were far too slow for our preliminary testers.
We increased V from 0.9 to 1.5, but left  at the recommended value of 1.42. van Wijk and Nuij note that parameter modification may be necessary to compensate for lag in DDAZ.
The velocity of the virtual cursor is continually sampled and input into the formulae.
Mouse control of this technique proved awkward and counter-intuitive.
For example, it seems reasonable to expect a single large but fast upwards mouse movement to scroll a substantial distance towards the beginning of the document.
However, as the formulae induce more zooming than panning during initial motion, the resultant effect is a rapid zoom-out and back in with little scrolling.
We discarded VDAZ from this study, but intend to investigate its effectiveness with rate-control input devices  in the future.
DDAZ suffers from a lag between user action and resultant view animation.
VDAZ suffers from a lack of fine position control and an excess of mouse movement.
CDAZ combines the two techniques in an attempt to ease their deficiencies.
In our experience, however, the technique is awkward to use, with several trial users complaining that it was `unpredictable'.
Of the three van Wijk & Nuij systems we felt that DDAZ was a viable competitor to SDAZ.
The discarded variants may improve with isometric input devices, but we wanted to focus on mouse input as it remains the de-facto standard pointing device.
Evaluation This evaluation compares visual-search scrolling performance using traditional scrollbars, rate-based scrolling, DDAZ and SDAZ.
The rate-based, DDAZ and SDAZ interfaces were all controlled by dragging with the left mouse button.
The traditional scrollbar interface was the only one that required a visible GUI component to be directly manipulated--before beginning to scroll the users had to acquire the scroll-thumb, trough, or arrow.
A video demonstrating the interfaces and the experimental method is available at: www.cosc.canterbury.ac.nz/~andy/tuning-ntesting.wmv Apparatus The experiment ran on Athlon 1600+ computers with 256MB of RAM running Linux 9, outputting to 19inch Compaq monitors at 1280x1024 resolution, driven by Geforce 2MX video cards.
The systems ran in full-screen game mode at 70fps.
Input was through an optical Logitech three button mouse.
All interfaces were created from the same core C/OpenGL program.
Method and Procedure Similar to the calibration experiment, the participants' tasks involved vertically scrolling through a document seeking document section headings.
Tasks were cued within a window  which showed the text of the target heading, the direction of the target from the starting location , and a picture-preview of the target within the document.
The middle third was revealed by horizontal yellow lines across the screen.
Each new task was automatically presented by software when the preceding task was complete.
Participants were encouraged to carefully study the cued target prior to clicking the "OK" button to begin each task.
Software timed all tasks and logged scroll-speed and zoomlevel at 100ms intervals.
All participants used all four interface types in a random order, with training for each interface immediately preceding the logged tasks.
Training consisted of five minutes undirected browsing, followed by six practice tasks that were cued in precisely the same way as the logged ones.
The documents used for practice and logged tasks were both manuals for Sony digital camcorders with the index and table of contents removed, as follows: practice tasks, 40 pages for model DSR2000; logged tasks, 137 pages for the model DSR-500WSL.
Nine logged tasks were completed with each interface: three at each of short, medium, and long distances, which had targets four, ten and twenty pages from the starting location respectively.
Participants were not informed that targets were a discrete level of distance away, and the order of exposure to the various distances was random per task.
While we expected most tasks to be completed fairly rapidly, we anticipated that users would sometimes become lost in the relatively long document .
To avoid data from `lost' tasks skewing the results we planned to cap task completion at 30seconds, replacing lost tasks with the 30second value.
Participants were allowed to continue searching for up to two minutes per task, after which the experimenter pressed a key-sequence to advance to the next task.
In the results we analyse capped data, the number of capped tasks per interface, and log-transformed uncapped data.
Log-transformation for uncapped tasks is used to stabilise the naturally wide variance of performance in `lost' tasks.
Prior to beginning the experiment we collected background demographics of the participants, particularly scrutinising game-playing experience.
After completing all tasks with each interface the participants completed NASA-TLX worksheets  to rate the associated workload.
They were also asked to comment on the interface.
At the end of the experiment they were asked to rank the interfaces by overall preference.
Participants Twenty seven undergraduate Computer Science students participated in the study .
None had previous experience with automatic zooming interfaces.
We classified fifteen participants who played interactive computer games for less than one hour per week as `nongamers' and twelve as `gamers' with between one and 30 hours of play per week.
Experimental Design The primary dependent variable is task completion time: the time taken to place the target heading within the middle third of the screen.
We analysed this data using a 4x3x2 mixed factors ANOVA.
Within-subjects factor `interfacetype' has four levels: scrollbars, rate-based, DDAZ and SDAZ.
Within-subjects factor `distance' has three levels: short, medium and long for tasks that are 4, 10 and 20 pages from the starting location.
Between-subjects factor `gaming' has two levels: gamer and non-gamer.
Subjective measures of workload and overall preference are also analysed.
Results Target acquisition Of the 972 tasks , 14 were abandoned after 120 seconds: 7 with DDAZ, 5 with Ratebased, 2 with Scrollbars and none with SDAZ.
Data from these tasks are discarded.
The analyses of capped tasks and of logtransformed uncapped tasks reveal the same results in terms of statistical significance.
Figure 5 shows mean performance across all factors for uncapped analyses.
However, the thirty second time-cap introduces a potential confound: if, for instance, SDAZ allowed faster acquisition for successful tasks, but encouraged participants to become lost, this would not be apparent from the comparison of capped means.
Inspecting the number of capped tasks shows that SDAZ also had the lowest proportion  followed by DDAZ , scrollbars 
We had suspected that gamers might be better able to handle the combination of panning and zooming in SDAZ and DDAZ than non-gamers, but the absence of an interaction provides no supporting evidence, suggesting that the utility of automatic zooming extends beyond those familiar with rapidly interactive systems.
No other interactions were significant in either capped or uncapped analyses.
Subjective workload assessments and preferences After using each interface the participants used the NASATLX worksheets to rate six dimensions of `workload' using 5-point Likert scales.
Responses show that SDAZ received the lowest  mean workload assessment on all dimensions, with statistical differences between the four interfaces  on all dimensions except Mental Effort .
Despite the relatively good task acquisition performance of DDAZ it was rated poorly under most workload measures.
Overall preferences for the interfaces  were strongly in favour of SDAZ.
Sixty seven percent of participants ranked it first, and 89% ranked it first or second; none ranked it last.
DDAZ, by comparison, performed poorly, with 81% ranking it either worst or 2nd worst.
Several of the participants explained that they disliked DDAZ because it was "too bouncy", "too difficult to maintain a constant level of zoom", "annoying to have to keep moving the mouse to scroll", and "bad with fine adjustments".
SDAZ also received several negative comments, with one participant commenting that "sometimes it's not easy on the eyes" and another stating "initially it kept haring off all over the place".
Three comments provide insight into a SDAZ usability issue that we wish to further investigate: "sluggish for short distances", "hard to stop once you overshoot", and helpfully "required a lot of concentration to slow down because you want to make sure it doesn't go the other way".
These comments suggest that the parameter setting for Maximum Descent Rate may need further investigation.
Precise positioning also remains tricky with SDAZ, and with rate-based scrolling in general, because displacement maps to velocity rather than location.
Despite its relatively poor target acquisition performance rate-based scrolling was the second preferred interface, with 63% of participants ranking it first or second.
Comments showed that users found the physical load to be low because they did not having to continually move the mouse or acquire the scrollbar.
Like SDAZ, several participants noted the problem of precise position control caused by the displacement to speed mapping.
Finally, several participants commented that the rate-based system induced eyestrain, suggesting that zooming is not the sole cause of the eyestrain reported with SDAZ and DDAZ.
DISCUSSION Results of the experiment suggest that for visual search tasks our calibrated implementation of speed-dependent automatic zooming outperforms other scrolling techniques.
Both automatic zooming techniques  had lower mean task times than traditional scrolling interfaces.
Subjective preferences and workload assessments were strongly in favour of SDAZ.
This raises the question, should major software vendors include SDAZ in their systems?
And if they do, how should they do it, and what implementation issues are they likely to encounter?
If SDAZ is included in document browsers/editors such as Adobe Reader or Microsoft Word it should be provided as an optional behaviour of rate-based scrolling.
Our experiments indicate that SDAZ enhances rate-based scrolling, but many users will dislike the visual effect of automatic zooming.
Anecdotal evidence suggests that ratebased scrolling already polarises users' opinions with many loving it and many others hating it.
Similar polarisation is evident in users' reaction to the visual `fisheye' effect present in MacOsX's `Dock' icon-panel.
If provided, SDAZ should be enabled and disabled through a check-box similar to Adobe Reader's toggle for `Dynamic Zoom'.
System performance is another critical issue.
SDAZ needs to be rapidly and smoothly animated to work effectively.
Acrobat Reader's `Dynamic Zoom' barely achieves this, despite using extensive clipping and text-greeking to reduce rendering times.
Our SDAZ system relies on graphics hardware acceleration to achieve high frame rates, but despite the fact that almost all desktop computers include powerful graphics cards few office systems exploit them.
Our study of visual flow yields calibration settings based on `average' performance settings, but expert users are likely to want to adjust the settings.
Such an interface is non-trivial because of the relatively complex mapping from mouse displacement to scroll speed to zoom level.
Figure 6 shows our current solution, which allows all parameters to be adjusted via two direct-manipulation graphs, and four other parameter entry widgets.
The customisation interface lies on a transparent window above the document browser,
A commercial deployment would almost certainly want to hide such a complex set of parameter settings behind an `advanced' button, preferring to allow users to select between named pre-compiled parameter settings such as "zoom early", "zoom late", etc.
Finally, the scrolling interfaces compared in our experiment either supported no zooming  or automatic zooming .
The question remains whether users would prefer and perform better when given separate, parallel controls for scroll and zoom.
Prior studies have shown that bimanual separation of controls for scrolling and zooming can improve over onehanded input .
Similar results have been shown for bimanual separation of scrolling and pointing .
We recently completed a study comparing SDAZ with bimanual control of rate-based scrolling  and manual zooming .
Participants  performed significantly better using SDAZ, rated workload dramatically lower with SDAZ, and strongly preferred it.
Full details of this experiment will follow.
CONCLUSIONS The results of this paper strongly suggest that scrolling performance in visual search tasks can be improved by systems that automatically zoom away from the document as scrolling speed increases.
Calibrating the relationship between speed and zoom is complex, and the identification of parameters and associated values should aid others wanting to implement speed-dependent automatic zooming interfaces.
There are many areas for further work.
These include analysis of 2D scrolling through document types such as maps and images, and investigation of how different implementations of SDAZ compare when controlled through alternative input devices such as isometric joysticks.
ACKNOWLEDGMENTS Thanks to the experiment participants and to the anonymous reviewers for their helpful comments REFERENCES 1.
Blohm, G. and Schreiber, C. The Smooth Pursuit System, www.auto.ucl.ac.be/EYELAB/neurophysio/ perception_action/SP.html 2002.
Bourgeois, F. and Guiard, Y., Multiscale Pointing: Facilitating Pan-Zoom Coordination.
Byrne, M., John, B., Wehrle, N. and Crow, D., The Tangled Web We Wove: A Taskonomy of WWW Use.
The Psychology of Human-Computer Interaction.
Cockburn, A. and Savage, J., Comparing SpeedDependent Automatic Zooming with Traditional Scroll, Pan and Zoom Methods.
Eckert, M. and Buchsbaum, G. The Significance of Eye Movements and Image Acceleration for Coding Television Image Sequences.
Fitts, P. The Information Capacity of the Human Motor System in Controlling the Amplitude of Movement.
Journal of Experimental Psychology, 47.
Hart, S. and Staveland, L. Development of NASA-TLX : Results of Empirical and Theoretical Research.
