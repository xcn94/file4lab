However for the most part these projects and many other ones like them are ones in which participants have a shared idea of what they are trying to achieve.
Be it an encyclopedia or an operating system there is a shared goal that all participants are working towards.
We seek to look at the design of systems that allow individuals, in this case programmers, to pursue independent goals yet still be able to help each other along the way.
We refer to this form of collaboration as loosely bound cooperation.
We introduce a programming environment entitled Share that is designed to encourage loosely bound cooperation between individuals within communities of practice through the sharing of code.
Loosely bound cooperation refers to the opportunity community members have to assist and share resources with one another while maintaining their autonomy and independent practice.
We contrast this model with forms of collaboration that enable large numbers of distributed individuals to collaborate on large scale works where they are guided by a shared vision of what they are collectively trying to achieve.
We hypothesize that providing fine-grained, publicly visible attribution of code sharing activity within a community can provide socially motivated encouragement for code sharing.
We present an overview of the design of our tool and the objectives that guided its design and a discussion of a small-scale deployment of our prototype among members of a particular community of practice.
Booch and Brown define a collaborative development environment  as a "virtual space wherein all the stakeholders of a project - even if distributed by time or distance - may negotiate, brainstorm, discuss, share knowledge, and generally labor together to carry out some task" .
This definition highlights the focus present in the collaborative development literature on collaboration organized along the axis of a single project or shared task.
We see similar opportunities for collaboration, oriented not around shared goals, but rather shared resources within online communities.
In the social computing literature, Benkler  surveys various examples of distributed collaboration, two core examples he discusses are Wikipedia and the development of GNU/Linux.
As in the description of collaboration given above, participants in these systems are bound together by a shared vision of what they are trying to achieve.
Though they may have different reasons for participating, the goal of what they are working on, while co-created, is singular.
To contrast, an example of a system that is constructed from more individualistic goals is delicious.com .
Rather than store web bookmarks locally on your computer, delicious.com allows you to store your bookmarks on their servers thus allowing you to access them from any computer with internet access.
This goal is an individually oriented one -- a user wants better access to their bookmarks.
However in the context of a network of users, delicious.com is able to leverage this self-motivated behavior to provide added value for all users of the service.
By allowing users to tag their bookmarks and by making them publicly searchable, delicious.com effectively provides a human filter on the larger internet.
Communities mediated by networked technology present opportunities for greater interplay between the individual and socio-contextual aspects of creative endeavor.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
CHI 2010: Sharing Content and Searches nature of the bookmarks allows one to discover other users who are interested in similar web resources and see what else they are looking at.
Wash & Rader  describe this extra value as a side effect of the individually motivated action to save bookmarks to a central server.
In this system, users are not explicitly collaborating with each other, they are pursuing their own goals, however the service creates a form of cooperation between users.
The challenge we observe in the sphere of software development is that of how to support collaboration in the context of these new forms of radically distributed, often do-it-yourself, web-based communities.
What does a CDE look like for individuals working on distinct projects?
What are the factors that would encourage developers working on distinct projects to cooperate?
If they are no longer trying to coordinate activity around a single project, what benefits may they gain from collaborating in the first place?
There is very little binding `collaborators' using DZone.
Programmers also cooperate with each other on forums and question & answer sites such as StackOverflow .
Although these individuals do not share projects, by answering each others questions they do cooperate with each other.
StackOverflow has built an elaborate reputation and reward system of points and badges that keep users engaged in the community.
This problem of motivation is one that we think is particularly important in the context of loosely bound cooperation.
What makes individuals with little in common willing to help each other?
How can we design systems that reward this kind of behavior?
We believe that visualizations of community activity targeted at the community in question can play a role in motivating participation.
Hill et al  introduce the notion of visible computational wear that allows digital artifacts to reveal their interaction and suggest that this `wear' can help "mediate coordination and cooperation" by showing co-workers information on their use of the artifact.
Erickson and Kellogg  extend this work to larger social systems with their notion of socially translucent systems that support visibility, awareness and accountability.
Gilbert and Karahalios  also suggest that visualization can play a role in rewarding community production in open source software projects.
We believe that collaboration within these web-based communities can be supported within a framework of what we term loosely bound cooperation.
We hope to encapsulate in this framework the much weaker ties between members of the community , as well the diversity of goals present among members of the community.
We define loosely bound cooperation as "a form of collaboration, often indirect, among members of a community that leaves them free to pursue their distinct individual goals, yet enables them to help each other along the way".
Characteristics of loosely bound cooperation include: * Participants do not have particular obligations  to each other.
Loosely bound cooperation does not disrupt their ability to pursue these goals * Cooperation is often indirect and emerges primarily from artifacts produced out of the goals of the participants.
We do not exclude more direct forms of assistance but rather emphasize a continuum of cooperative behavior that range from the very disconnected to the more engaged.
Their shared practice provides the context for cooperation to take place and suggests artifacts that may be commonly useful to cooperators.
We already see examples of loosely bound cooperation between software developers when we consider snippet sharing sites such as gist.github.com  or DZone Snippets .
These sites allow programmers to post code snippets online and share them with others.
We propose a novel programming environment geared towards supporting loosely bound cooperation between programmers within communities of practice ; our prototype is initially targeted at programmers using the Processing programming language , a language geared towards multimedia artists, designers and others interested in using code as a central part of their creative practice.
We chose Processing because we feel that the domain of computational art and design would be ideal for our exploration, as artists have strong individual goals, yet share a common toolset.
The Processing community also has a rich history of cooperation and open working practice.
The primary method of cooperation that our tool supports is the sharing of code.
Our tool shares all the code written in it with all members of the community as well as tracks its reuse, providing fine-grained attribution of where code came from as well as publicly visualizing the network of links created from the patterns of re-appropriation.
In summary the system provides: * Automatic Code Sharing.
As code is written it is automatically distributed to all other users of the system.
As code is re-appropriated its movement is tracked making it possible to see where any of the content in a particular file came from.
CHI 2010: Sharing Content and Searches * Visualizing Relationships.
The environment provides an interactive visualization of the entities within the system  and the relationships between them.
Our hypothesis is that we can leverage public display of attribution to provide reward for, and motivate to participation in, code-sharing based cooperation between individuals who are in pursuit of independent goals.
However, the result of incorporating a number of components from distinct projects into a new work generally does not create a new `version' of an existing project, and the process provided by GitHub does not support this aspect of code sharing practice that may be going on within a community of programmers.
Similar to our comparison with Scratch, we seek to examine a design that enables code reuse at a finer level of granularity than that of an entire project.
OpenProcessing.org , is a community website for users of the Processing language to upload their works  and put them on display for other visitors of the site.
However unlike our work no explicit link is maintained to those who borrow code; unless the downloader leaves a comment, an uploader does not know if their code gets reused and likely cannot see how it was re-appropriated.
Additionally we feel that OpenProcessing and other sites like it are set up more as exhibition spaces as opposed to workspaces; we will address this point further in our description of design goals below.
Our work is also informed by empirical research on the motivations of open source programmers.
Among others, Ghosh , Lakhani & Wolf , Raymond , and Lerner & Tirole  have investigated individuals' motivations for participating in open source software.
They have all identified socially oriented factors -- i.e.
Importantly for us they all report that reputation or peer recognition for ones' contributions are strong motivating factors in encouraging participation.
Share tries to capitalize on these factors to encourage code sharing among developers working on distinct projects.
Jazz  is an example CDE that provides support for adhoc teams organized around particular projects.
It provides features such as chat, screen sharing, and status indicators to aid communication between software developers as well as awareness of team member activities and changes to source code.
Jazz and other CDE's such as Microsoft Visual Studio Team System , Netbeans   as well as studies on distributed software development such as that by Gutwin, Penner and Schneider  all focus on software `teams' and `groups' whose members have a strong need to maintain close awareness of what each other is doing.
In the space we are exploring there are no teams and the usefulness of features such as traditional instant messaging can be called into question as the participants do not have direct dependent relationships and are under no obligation to help each other.
Scratch  is a programming language and community geared towards children that provides encouragement to share one's work.
Youth are able to upload and download projects to and from the central Scratch website.
When youth create projects based on those of others, the website automatically marks these projects as remixes, thus providing attribution for the original author.
MonroyHernandez  describes the ways in which the design of the Scratch website encourages participation in communal exchange.
The Scratch website encourages uploading work to the site by highlighting works across various popularity metrics.
Placing these projects prominently on the home page provides great reward for projects that successfully engage with other members of the community.
However Scratch only allows for a project to have one `ancestor', there is no easy way for an individual to incorporate code from multiple projects and if they are able to do so the system does not recognize the multiple contributions to a project.
GitHub  is a commercial code hosting service built upon the open source distributed version control system Git.
The environment and its mores should feel like a comfortable place for work in progress as opposed to being a place just for finished work.
As much as possible we want to allow individuals, should they so desire, to work completely disengaged from the concept of working within a community -- yet still be contributing to it.
At the same time we want to provide a smooth continuum for increased engagement with the community.
Thus interaction in Share is asynchronous and individuals are able to work online or offline.
Share is built using a client-server architecture with almost all the computation happening on the client.
The server acts to provide authentication for clients and as a database through which documents and data files associated with projects are transferred.
The client, a desktop application, is where the user does all of their programming.
Share's server component consists of two main parts: a CouchDB database and a small ruby web application that controls authentication when pushing documents to the server.
Apache CouchDB  is an HTTP accessible, schemaless, document-oriented database; CouchDB's document model fit well with the nature of our underlying data, and its web friendly architecture makes it amenable to easy integration with the client side components.
The file browser allows users to look through other users' projects, and shows a description panel that displays metadata such as how big the project is , how many incoming links  and outgoing links  the project has, how many times it has been bookmarked as well as a screenshot from the application if the user has uploaded one.
We also parse the comment at the top of the main file in a project to use as a description.
The text is written to an XML based format that lets us persist and restore the attribution information.
This representation allows very fine-grained representation  of where code came from.
This allows the editor to perform code highlighting based on the human source of the code, as in fig.
2 where the background color of the text is determined by which user it came from .
Upon startup colors are assigned to all users in the system and persist throughout a coding session, that color will consistently be used to represent that user, his projects and his code throughout the software.
This sourcehighlighting mode can be toggled on and off.
Another advantage of tracking reuse at this level of granularity is that it enables users to also see what was changed in a copied snippet.
This could potentially be useful to beginners trying to understand which parts of code to tweak to make it work in a different context.
The editor is at the core of Share's functionality, it provides a means to edit code and also the mechanism to track the movement of code.
Our code editor records attributes on each character of text such as which user wrote it, what document it originated from and in the case of code that was pasted in, the time and date that it was pasted.
Share provides fulltext search of all the code in the repository through the use of the Lucene fulltext search engine  as well as a per-project comment thread accessible from the code editor.
Share also allows individuals to bookmark projects that they find interesting.
A more complete description of these and other subsystems can be found in .
As the user clicks on nodes they are smoothly animated to the center and more distant nodes move closer to the center and additional nodes added, allowing the user to progressively move closer and closer to the leaves of the original tree .
This visualization is also aimed at supporting discovery of previously unknown resources.
As you can see in fig.
3 there are a lot of nodes displayed that are only indirectly related to the selected  node, while we did not implement any filtering to control the number of nodes shown in the visualization this would become necessary as more projects were created in the tool.
One could use any number of metrics to filter out incidentally related nodes, including recency of edits, code similarity, popularity metrics and so on.
It thus shows elements that are only one step away from the selected node.
The network browser is an interactive visualization of the relationships between the projects and users Share.
It acts as a form of visible  reputation, as one can easily tell whether a project has contributed code to a lot of other projects.
Given any project or user, a spanning tree is built of that entities' relationships in the overall network graph.
The process of creating the tree from the more general graph potentially eliminates some of the links within the graph, however we feel that this representation more clearly shows the elements that are most closely related to the selected node.
In this visualization successive rings display entities directly related to those on the inner ring.
Arrowheads point in the direction that code traveled and the thickness of the arrow is proportional to the relative proportion of borrowed code in the borrowing project.
We use color to relate project icons to the icons of their creator.
Share ships with the Processing compiler and runtime, however it is architected in such a manner that it can easily support other programming languages.
When a user is running one of their own projects, our preprocessor for Processing code also adds a little bit of code to the project to enable the user to press a single key that will take a screenshot of their project and upload it to the server, this is used to generate the preview images shown in the file browser.
For such a visually oriented community as the one we were targeting it was an important part of helping users explore each others work.
April 10-15, 2010, Atlanta, GA, USA At the end of the competition, participants were asked to fill out a questionnaire on various aspects of their experience; eleven of the sixteen participants completed the survey.
The investigator also interacted with the participants throughout the course of the event.
The results discussed in this section come from two main sources, the metadata on code-sharing collected by the software  and the participants' responses to the questionnaire .
One of the issues in a system like Share is that when a user runs another's sketch they are essentially running code from a stranger on the Internet.
All programs run from Share are run in a sandbox managed by the Java Virtual Machine , the security policy we set when launching projects restricts them to a much safer set of operations.
The chief limitations of the prototype as currently implemented revolve around scalability of the visualization and possibly the ability of users to find useful source code as the repository of projects grows in size.
Future work would seek to investigate how these parts of the application could scale, however we are confident that solutions can be found.
Programmers successfully find code on the Internet everyday, indeed it was this experience of `programmingby-google' that partially inspired the authors to create this project.
In addition to the full text search of the entire repository that we currently provide, research in code recommender systems such Codebroker  suggest that recommender technology could be used to both provide better search results and in pruning nodes in the visualization to favor displaying more semantically related projects.
In order to evaluate our design we hosted a themed design/ programming competition that was entirely electronically mediated.
The purpose of the competition structure and theme was to scaffold the creation a small scale community of practice that would provide the loose associations and shared interests we would expect to see in larger communities of practice but do so in a manner that makes a shorter timeframe analysis practical.
Participants in our competition were asked to create works `Inspired by Pong', this was the only constraint given with respect to creative work.
They were allowed a two week period over which to work on their submissions.
We felt that the two week period would be sufficiently long to make apparent the asynchronous nature of interaction we designed Share to support.
Of the sixteen participants that participated in the competition, eleven submitted pieces for consideration by the judges .
While prizes  were offered as incentive for extended participation and while a competition was used to recruit and encourage participants to actively use our software, a proviso was made that would award smaller prizes  to participants whose code was used in winning submissions.
This meant that a person borrowing ones' code simply increases ones' chances of winning something, and was very much in keeping with the cooperative spirit of Share.
Individuals from the Processing community were recruited over the Internet and invited to volunteer for the study.
This does imply some self-selection bias with regards to willingness to share code, however we do not feel that this is a problem as we explicitly situate our work within the sharing economy, that is to say we are not contrasting it with proprietary models but rather aim to support those already participating in sharing economies.
The participants were physically distributed across different parts of the world, including Europe, Asia and the USA.
An Internet Relay Chat  server was set up for the participants to use, however due to time zone differences, there were never that many people in the chat room at once.
The chat room served as a source of live technical support, both for programming techniques and issues with the software itself.
Participants ranged across all levels of experience from newcomers to programming to long term experts; and included hobbyists, students in art, design and architecture as well as professional designers and artists.
65 projects were produced by the 16 participants over the two week period, 12 of these were removed from this analysis because they were duplicate projects created by their owners to overcome implementation bugs in the software , thus 53 projects were used in this analysis, with each user creating an average of 3.31 projects .
These projects include the main submissions the participants were working on as well as many small sketches to test a particular idea or piece of code.
We include these `side' sketches because we feel that they are an important part of the process of coding, and a valuable piece of what users get to see when looking at each others work.
Our presentation of this data is mainly to indicate the level of activity in Share over the two-week period.
Across all 53 projects the average percent of borrowed code in each project was 13.9%.
With 32.1% of projects having at least one incoming link  and 60.4% having at least one incoming or outgoing link .
5, the distribution of borrowed code follows a power law distribution.
Figure 6 shows the distribution of code borrowing activity across the 16 participants.
The data suggests that a number of participants  made a deliberate strategy of `remixing' others work, or at the very least found a very good base from which to continue their projects.
We can also look at the data from projects that have at least one incoming or outgoing link .
These measures do overestimate the `usefulness' of the code base .
32 of the 53 projects have at least one incoming or outgoing link and form 5 connected components in the overall graph.
The average percentage of code borrowed from other users among these projects is 21.0%, the distribution is the same as the one in fig.
5 except that is has a shorter `tail'.
This data indicates that there was reasonable usage of the features provided by Share and is in line with what we would expect; given that the projects are independent we would not actually expect to see large percentages of borrowed code in most cases.
In terms of what kind of code was reused, we observed the code for constructing the basic mechanics of a Pong game spread the most among projects; these include things like collision detection and physics simulations or the code used to control the `paddles' common to pong games.
Also a number of techniques particular to small sets of projects would originate from a particular user and spread to a few others, this included calculations for geometry and movement on circular paths .
It's stimulating to see it travel around."
The @saw tag was useful for me, because it allowed me to write notes for myself so that I would remember where I saw an idea and how they implemented it."
It is also a good way to see how helpful/useful the stuff you produce is."
There is also pragmatic value in seeing what had been done with it as one can keep an eye out for improvements.
The display of attribution also increases the sense of community and reduces anxiety around issues of `stealing' other peoples' code.
Our hypothesis was that automatic tracking and attribution of code would lower barriers to sharing code and provide encouragement to share code with others.
The data and quotes in this section come from the eleven responses to the survey that we received.
Our survey focused on a number of different aspects of participants' experience using Share.
CHI 2010: Sharing Content and Searches something people are doing already, i.e.
We asked users directly whether they felt that the attribution features of Share lowered their barriers to sharing code, their responses to this question on a 5 point Likert scale are displayed in fig 7.
In addition to being able to see where their code went, users reported that Share reduced their barriers to sharing code because the continual and automatic uploading of their code reduced the anxiety burden of making their work visible to others.
We had asked users about what prevented them from sharing code prior to using our tool and one common response was a feeling that their code was not `good enough' to be shown to other people.
Share takes this burden out of the users hands and a number of users were grateful for this.
With regard to using the visualization to track the movement of other peoples' code, 6 out of 11 respondents said they found it useful.
The main use of the visualization with regard to other peoples' code was seeing what code was popular within the community and thus warranted further investigation, respondents also found watching the changes in the network visualization gratifying as a sign of the presence of other users thus increasing the sense of community among participants.
Positive responses include: "Well, when I saw that a lot of people were borrowing from a particular , I'd check out that person's code, because there must be something cool in there if that many people are using it."
I was more interested by sketches that had connections over sketches that hadn't  it's something I liked, to see day after day, the network building itself."
The negative responses to this question were not very detailed, with respondents saying that they simply did not use the feature that much.
Users suggested that the visualization could have been more helpful if it more quickly allowed for an individual to get more information about that project other than what it was connected to.
The end of the last comment quoted above does point to an opportunity to encode more information about a project in the visualization itself, possibly through parameterizing the design of the icons representing projects with project related features.
Something we did not see was the use of the network visualization to discover previously unknown resources, this is not too surprising due to the small number of participants.
There was little that could not be discovered by browsing through the lists in the file browser.
We suspect that the utility of the network visualization in this regard would increase as the size of the community using Share grows.
When asked to elaborate on how it resulted in increased productivity or creativity, we received the expected response that simply having a repository of code to draw from helped people get started more quickly, or otherwise more quickly solve their own problems.
Participants also enjoyed seeing how others approached the same problem and found some inspiration for their own work.
While we are unsure if this last point is more an effect of the competition's pong constraint, making it more likely to see something that gives you an idea; we are confident that it would be similarly useful in less constrained settings.
Participant elaborations included: "I'm a very beginner and Share let me have a look at other people's work and learn from them and their codes" "Looking at what others are doing was a good starting point for generating ideas."
I could see other people's solutions to problems arising in my own coding."
Seeing some others build their sketch day after day was very interesting too, changes they made, it was like seeing the living process of a creative idea."
However at least one respondent found the visibility of the other projects somewhat overwhelming, this individual was a bit intimidated by some of the work he saw being produced, saying, "Though the wealth of code and projects is certainly inspiring, it's also a little overwhelming.
Seeing everyone else's ideas made mine seem pale in comparison.
Then again, I've been in a bit of a creative slump lately."
This last comment underscores the importance of creating a comfortable space for participants at all levels of experience, and is one of the reasons we avoid explicit ranking systems and leader-boards as we feel those type of reputation systems would alienate less experienced or less confident users.
Another user did mention the issue of signal vs. noise in browsing through the repository, saying "the number of `dead' sketches made it hard to fully discover the real diamonds".
Our initial hypothesis is supported by the feedback we got from our users on how they felt about our automatic attribution as well as that indicated in fig 7.
While our results share much in common with the literature around projects like Scratch, the environment we design for is different in a number of ways that provide alternate avenues for exploration.
Firstly, in Scratch or on OpenProcessing.org the work is the primary thing that is being shared.
That is to say, the goal of a user uploading a scratch project is not necessarily to just share code but primarily to share their creative output.
We believe our design is more code centric; rather than an being exhibition space to display finished work, Share is an open workspace where unfinished code and ideas are open to all.
In Share our continuous and automatic uploading of code took the burden of `sharing', and thus selecting what is worthy, off the shoulders of the users and aided in making the system amenable to works in progress.
We believe the difference between exhibition space and workspace is important to future design of collaborative tools for web based communities.
Secondly the mechanisms available to provide reward differ slightly, while we do not have a front page through which we can leverage popularity to reward contribution, our user feedback suggests that we are still able to reveal enough of the social history of interaction around a particular users work to provide them value.
We believe that the design and evaluation of less overtly competitive reputation systems is also an interesting area for future research and in longer term deployments of our system.
Our feature set also supports the existing programmer practice of documenting one's sources.
In a similar manner to TrackBack  on blogging platforms or document repositories such as arXiv , our tool announces to content producers how and where their content is reused.
As far as we know there is no existing trackback like system for programmers who share code and we believe that our tool makes an argument  for creating a set of online services and programming conventions that would make it easier to create trackback for programmer communities, even without a specialized tool like Share in communities where switching costs would be prohibitive.
Supporting better documentation of sources also relieves some of the issues around the feeling that one is `stealing' code; we feel that negotiating these issues around ownership and the relationship between the contributor and the borrower are important functions that tools for distributed web based cooperation can provide.
This paper has articulated the practice of loosely bound cooperation, in which individuals are able to pursue distinct, independent goals yet assist each other along the way and has described the design of a novel programming environment that facilitates this form of cooperation among members of a community of practice.
The automatic tracking and public display of attribution provided by our tool contributes to positive feelings among the participants, as they feel recognized for their creative work and community contribution.
Users also feel more at ease with reusing the work of others without feeling like they are stealing, and most of our users affirmed that it reduced their barriers to publicly sharing code.
Individuals were also able to track downstream changes to contributions they had made and confirmed the pragmatic usefulness of doing so as well as the encouragement provided by seeing something they had created take on a life beyond their own projects.
Gilbert, E. and Karahalios, K. CodeSaw: A social visualization of distributed software development.
Gutwin, C., Penner, R., and Schneider, K. Group awareness in distributed software development.
Heer, J. and Boyd, D. Vizster: Visualizing online social networks.
Prefuse: a toolkit for interactive information visualization.
Hill, W.C., Hollan, J.D., Wroblewski, D., and McCandless, T. Edit wear and read wear.
SIGCHI conference on Human factors in computing systems, , 3-9.
Can Distributed Volunteers Accomplish Massive Data Analysis Tasks.
Lakhani, K. and Wolf, R. Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects.
Perspectives in Free and Open Source Software, MIT Press, Cambridge, MA, .
Lerner, J. and Tirole, J.
The scope of open source licensing.
Second International Conference on Creating, Connecting and Collaborating through Computing, 2004.
Monroy-Hernandez, A. ScratchR : a platform for sharing user-generated programmable media.
The Cathedral and the Bazaar.
Processing: programming for the media arts.
Wash, R. and Rader, E. Public bookmarks and private benefits: An analysis of incentives in social computing.
American Society for Information Science and Technology 44, 1 .
Wenger, E. Communities of practice.
Yee, K. Fisher, D. Dhamija, R. and Hearst, M. Animated Exploration of Dynamic Graphs with Radial Layout.
Apache CouchDB: The CouchDB Project.
DZone Snippets: Store, sort and share source code, with tag goodness.
OpenProcessing - Share Your Sketches!
13. von Ahn, L. and Dabbish, L. Labeling images with a computer game.
Creative Networks: Socio-Technical Tools for Loosely Bound Cooperation.
Cheng, L.-T., Hupfer, S., et al., "Jazz: a collaborative application development environment," ACM SIGPLAN Conference on Object Oriented Programming Systems Languages and Applications, pp.
Erickson, T. and Kellogg, W.A.
Social translucence: an approach to designing systems that support social processes.
Fischer, G. and Ye, Y. Personalizing Delivered Information in a Software Reuse Environment.
Ghosh, R.A. Understanding free software developers: Findings from the FLOSS study.
