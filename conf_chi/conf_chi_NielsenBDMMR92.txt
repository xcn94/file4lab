Five groups of developers with experience in the design of character-based user interfaces were taught graphical user interface design through a short workshop with a focus on practical design exercises using low-tech tools derived from the PICTIVE method.
Several usability problems were found in the designs by applying the heuristic evaluation method, and feedback on these problems constituted a way to make the otherwise abstract usability principles concrete for the designers at the workshop.
Based on these usability problems and on observations of the design process, we conclude that object-oriented interactions are especially hard to design and that the developers were influenced by the graphical interfaces of personal computers with which they had interacted as regular users.
Such a switch necessitates transferring the skills of large numbers of developers who have extensive experience in the design of character-based interfaces but who may never have designed a graphical user interface before.
It can be hard even for experienced programmers to learn the necessary programming techniques and extensive subroutine libraries used when implementing graphical user interfaces .
The development of new programming systems and user interface management systems holds some promise for alleviating this problem in the futwe.
This article considers the additional problem of the transfer of user interface design skills in the case of developers with experience designing character-based interfaces.
Of course, one possible solution to this problem would be to restrict the developers to handle only the implementation of the interfaces and then bring in a new team of experienced usability specialists and graphics designers for the actual graphical user interface design.
In many cases, however, such specialized staff may not be available, and in other cases the usability specialists themselves may need to transfer their designs skills to handle the new interface medium.
Furthermore, it is almost always the case that developers without "official status" as usability specialists have to design parta of the interface themselves.
The transfer of developers' design skills from character-based user interfaces to graphical user interfaces is obviously of great practical interest for those development organizations that are currently switching to graphical systems.
Furthermore, the study of this phenomenon is particularly inte~sting in that it provides an opportunity for assessing the difficulties of design for the GUI generation of interaction paradigms; studies of novice designers  would confound the effect of the specific interaction paradigm and the effect of simply learning to design a user interface.
By now, graphical user interfaces  are fairly old, with a history going back to Ivan Sutherland's Sketchpad system from 1962 , Douglas Engelbart's mouse from 1964 , several research systems from the 1970s , and several commercial systems from the early 1980s , Even so, many  large-scale computer-using organizations have continued using character-based interfaces for a variety of reasons, including the need to support an existing base of alphanumeric terminals connected to traditional mainframes.
The first design exercise was the same for all the workshops and was limited to a period of about 30 minutes since it was mainly intended as a warm-up exercise.
The second design exercise took about one hour and concerned a design problem from the participants' own project, thus being different for each workshop.
The participants were asked to produce a written specification of this second design problem in advance of the workshop, but even so they still needed time during the workshop to limit the scope of the problem to a reasonable size, given the available time.
They did so during the break between the first and second design exercise, thus being able to take advantage of their experience from the first exercise.
The first exercise concerned the design of a report generator interface to a database system.
Users were to be able to select a number of fields from the database and lay out a report listing those fields with the database records sorted according to one or more of the fields.
We provided the designers with a fairly detailed specification of the intended functionality since the goal of this workshop was not usability engineering in general but specifically graphical interface design.
For the initial workshops, our specification turned out to be too general and to encompass much too much for a complete design to be generated in the available time.
We therefore restricted the problem in subsequent versions, for example by limiting the database to being a single-file system.
We learned that it was necessary to provide a very precise definition of a very limited set of functions to avoid having the participants spend most of their time arguing over what features to include in the system rather than on interface design as such.
Also, we discovered the need for an active workshop "manager" who could at times interrupt the participants and remind them that the goal of the workshop was to design a graphical interface, and either encourage them to arrive at a more or less arbitrary resolution of the functionality decisions or simply hand down such a decision.
As further described below, each interface design was subjected to heuristic evaluation by a team of usability experts, and the usability problems thus identified were discussed with the participants after each design session, While the specialists performed the heuristic evaluation of the first design, the workshop participants had a break and also discussed the details of the specification of the second design problem.
While the evaluation team conducted the heuristic evaluation of the second design, the designers heard a short presentation on the general usability engineering lifecycle , emphasizing the need for user centered design, includlng such methods as participatory design and user testing.
This presentation was intended to familiarize the participants with the range of important usability activities related to a software product, and to put our classroom exercises into context as only one Qf a set of necessary work activities.
Since the workshop took place in a closed room in half a day with partially artificial design problems, the participants were required to design without any task analysis or interaction with real users, and they should obviously not do so in a real project.
We have developed a short course in graphical user interface design and taught it to five groups of software professionals.
In fact, the course is more of a workshop than a traditional training class since it is heavily based on practical exercises where the participants design actual graphical interfaces themselves.
Such a reliance on learning-by-doing in a practicum setting seems to be one of the better ways of imparting any kind of usability knowledge .
Design skills generally have to be learned through active efforts on the parts of the learners rather than taught through passive attendance at lectures.
The practicum method is especially valuable for this learning process  .
Due mostly to resource restrictions and the difficulty of having the designers leave their ongoing projects for an extended period of time, the workshops were limited to half a day each.
This is obviousiy a very short time in which to learn a complicated topic like graphical interface design, and several workshop participants expressed a desire for a full-day workshop.
On the other hand, the workshop was deliberately intended to sensitize participants to graphical interface design issues without leaving them with a false belief that they had suddenly become graphical interface design experts, and the limited duration was certainly an advantage for achieving that goal.
Also, the workshop dld succeed in acquainting the designers with a wide spectrum of graphical interface design principles as evidenced by their ability to refer to these principles towards the end of the final design session.
Definition of "graphical user interface" and the characteristics of graphical interfaces and dh-ect manipulation.
For example, with a good conceptual line of using real-world ever possible.
The workshops then proceeded with a guided tour of a live graphical user interface, pointing out the various standard user interface elements and how they were used and combined.
As always, the concreteness embodied in the live system generated more participant comments and questions than the abstract principles, but we do believe that the explicit statement of the basic usability principles for graphical dialogues was an important part of the workshops.
The design exercises were carried out using a modified form of the PICTIVE method  .
PICTIVE was originally developed for use in participatory design with the goal of allowing users  without programming abilities equal access to the construction of an interface design.
Therefore, a PICTIVE design process includes the use of extremely low-tech materials in the form of paper and colored pens, pads of sticky notes, "cursors" on cutout pieces of transparencies that are moved by hand over the design surface, and the use of overwriting, scissors and tape to "edit" the design, To illustrate the use of these design tools, a few minutes of videotape from a PICTIVE design session were shown, emphasizing the possibility of changing the design elements by cutting them up or writing on them, Since our developers did not yet know how to program graphical user interfaces, the PICTIVE design tools were well suited for our use.
The full PICTIVE methodology also includes additional elements, especially the participation of real users in the design process, which were not used in this workshop, so we would characterize the design practicum as using PICTIVE-like tools rather than being a true PICTIVE process.
In addition to blank paper and sticky notes, we provided preprinted sheets of paper with graphical design elements taken from the specific interface standard used in the workshop.
For example, we had menubars preprinted with the standard Fi 1 e, Edit, View, Opti ens, and Help menu headers, as well as blank windows with scrollbars, different kinds of dialog boxes , and lists of radio and check buttons with the labels left blank to be filled in by the designers.
Having such design element templates readily available corresponds to the way most modem GUI programming toolkits work.
The participants initially hesitated to modify  the preprinted design elements, but after a small amount of prompting by one of the workshop leaders who served as a facilitator of the design process and the use of the PICTIVE tools, they quickly learned to do so.
All of these dialogue elements were blown up by a factor of about two compared to their size on a computer screen to allow the workshop participants to easily add labels and other dialogue elements by hand.
The oversized design also made it possible for the entire group of designers to see the design and made it easier for us to videotape it.
Finally, the designers were provided with a large  sheet of paper that served as the design surface.
Our initial intention was to have this expanse of paper simulate the full computer screen and have the participants place windows and other dialogue elements on it as their design progressed.
It turned out, however, that the designers limited themselves to designs the size of the preprinted windows, so for the later workshops we pre-sketched a main window with the standard menu bar to take up the full sheet of paper to encourage the designers to utilize the entire design surface.
In order to provide the workshop participants with immediate feedback on the usability aspects of their designs, the designs were subjected to heuristic evaluation by two usability specialists.
Heuristic evaluation  is based on having a group of evaluators judge the usability of an interface by going through it and comparing it to a set of heuristics for usable design.
The normal recommendation is to use between three and five evaluators for heuristic evaluation since more evaluators find more usability problems , but practical considerations prevented the use of more than two evaluators for this workshop.
The workshop time schedule required the evaluators to present their list of usability problems immediately after the conclusion of the heuristic evaluation session, leaving them almost no time to coordinate their lists of usability problems.
From an instructional perspective, uncoordinated feedback from a larger group of evaluators would have been too confusing to the designers.
The limitation of basing the heuristic evaluation on two evaluators was not too serious in our case since we had the advar!
We mainly needed to discuss the most glaring and most conceptually interesting usability problems in order to provide the designers with abetter understanding of the usability principles they had violated in their initial designs, Heuristic evaluation was chosen for several reasons, including the pragmatic consideration that the feedback sessions needed to take place about fifteen minutes after the designers had finalized their designs.
This short time frame ruled out the use of user testing and pointed to the use of heuristic evaluation since it is known to be an extremely time-efficient usability method .
Also, instructional considerations favored heuristicevaluation's explicit tie-in between specific usability problems and general usability principles since we wanted the participants to learn how these principles applied to GUI design.
It was important not just to tear the participants' designs apart on arbitrary and opinionated grounds but instead to relate the usability problems to the recognized usability principles we wanted them to learn.
In practice, it turned out to be a challenge for the evaluators to stick to this rule, and evaluations were probably too judgmental in tone at the first workshops.
The entire design sessions were videotaped,"~ and the two evaluators were present in the room while the designs were being developed.
Observing the design sessions gave the evaluators a head start on the heuristic evaluation and contributed considerably to the quality of the fmdback sessions since the evalua-
Heuristic evaluation by such "double specialists" requires fewer evaluators than when "single specialists" are used .
At the end of each design session, the designers were asked to present a simulated walkthrough of a user session with their final design.
These walkthroughs had the advantage of freezing the design and making it clear to the evaluators exactly how the various interface elements and sub-dialogues constructed during the design session were intended to interact.
The walkthroughs lasted about five minutes each and were also videotaped.
The evaluators brought the videotape with the walkthrough to another room equipped with playback facilities allowing them to freeze the tape as well as play it forwards and backwards in slow motion.
They had about fifteen minutes to review the videotape and perform the heuristic evaluation.
Another served the role of keeper of the interface standard and was deferred to with respect to the rules of the particular GUI standard used in the workshop.
Others were defenders of the usability principles and used the evaluation sessions to point out problems in the designs.
And yet others had roles of workshop managers, including the responsibility for keeping the tight time schedule and making decisions when the designers wondered what to assume about their users.
This latter role was important to keep the design flowing during the artificial workshop setting where it was not otherwise possible to investigate conditions in an external reality, For example, in the design of a query interface to a relational database, the participants decided to assume that the users would be familiar with entity-relation diagrams and base the graphical interface on such diagrams.
This was an acceptable decision to allow them to proceed with the design process, even though there are obviously many people who are not familiar with these diagrams and who would therefore need another interface.
Even though most of us could probably have played other roles if need be, we believe that the role playing on the part of different usability specialists enhanced the workshop and made the different perspectives clearer to the designers than if a few people had taken on multiple roles.
For similar workshops under conditions where fewer usability specialists are available, we would recommend using at least three usability specialists such that different people can serve as design facilitators and evaluators.
Normally, at least two design evaluators will be needed due to the demands of the heuristic evaluation method.
The observations presented below are based on five graphical user interface design workshops with a total of 27 participants.
The participants were experienced software professionals who had designed and developed systems with character-based user interfaces but had not previously designed gmphical user interfaces.
Group sizes ranged from four to seven participants, The best results seemed to be achieved from groups with about five participants.
The larger groups tended to split dynamically into subgroups at each end of the table discussing different aspects of the interface design and it was difficult to get everybody to participate simultaneously in a single design stream on the PICTIVE design surface.
Smaller groups sometimes came to a standstill where nobody had good ideas for continuing the design.
For each workshop, the group consisted of people who were already working together on an existing projector in an existing organization.
They were therefore able to jump straight into working together on our design exercises without the hesitation one sometimes observes with groups where the participants are not used to working together.
Also, the participants were able to draw upon shared knowledge during the second design exercise which used a problem from their respective projects, Each workshop involved a single group of designers and six usability specialists, so most workshops actually had more teachers than students.
In fact, not all the usability specialists functioned as teachers in the traditional sense, and the participation of a large number of usability specialists allowed us to play different roles during the design exercises and the interface evaluation sessions.
A striking observation from this workshop is that we as usability specialists fell into the role of "owners" or defendem of a technology.
A similar phenomenon is often observed when programmers attend user testing of their own software.
In such cases, standard usability engineering practice is to encourage the programmers to follow the "shut up" rule and not interfere with the test users even though they will feel a constant urge to correct users as they "misuse" the programmers' designs.
Even though we were well aware of this principle, it was very hard for us not to jump in and "correct" the designers when they misused standard interface elements or were overlooking a good way to utilize graphical interaction principles.
Indeed, at the first workshop, we interfered with the designers and suggested that they use a direct manipulation technique to achieve a certain goal.
They did so, but when it came time to simulate the entire interface for the walkthrough it turned out that they had not really understood what they had been pressured into including in their design, as evidenced by the following exchange.
A is the designer who had been narrating the walkthrough up until the point where the interface element introduced by us had to be used.
A: "Help me out with this.
Where do we go from here?"
This camera setup turned out to intimidate the workshop participants, and for the remaining workshops, we relied on a single camera filming the design surface without including the workshop pmticipants themselves in the video frame.
I don't know what to make of it."
C: "This is where we sort of changed gears."
For the remaining workshops, we mostly restrained ourselves and let the designers retain ownership of their designs without interference, but it was often very difficult for us to stick to the "shut up" rule.
Minimize User Memory Load: 2 problems.
One design required users to type in the sorting criteria in the report generator exercise .
A better design used by the other four groups would explicitly show the available options to the user .
As mentioned above, the heuristic evaluation was performed under resource constraints, so the designs most likely contain additional, undkcovered problems.
This number of usability problems is not representative of the eventual quality of these designs if they had been developed into final products.
These usability problems were the result of a single, time-limited design session, so it is likely that most of these problems would have been found in subsequent design activities and user testing, just as they were in fact found by us by a simple "discount usability engineering" effort.
The discussion of the usability problems below is an indication of the difficulties of learning graphical user interface design and indicative of the issues one will have to look out for when productizing such designs.
It should be stressed that the software professionals in our workshops were not bad user interface designers.
The designs discussed in this article were their first graphical interface designs, so to some extent it would only be natural for them to have some problems.
In general, one should have the same attitude as when judging results from traditional user testing: When an error is made, it is not because the user  is stupid, it is because the system  is difficult.
Here, we focus on the usability problems in the designs, but there were also several positive aspects, including some creative solutions that were perhaps surprising given that these designs were the designers' first attempt at designing graphical user interfaces.
Classifying the usability problems according to the set of usability heuristics  gives the following result :
For example, three groups changed in the report genthe name of the Fi le menu to Da t abase might at erator exercise.
Even though the term Database first sight seem an appropriate name for a menu to open and close databases, practically all graphical user interface standards use the common term Fi 1 e, so users will normally be used to seeing this term and would know what to expect of a Fi 1 e menu.'
In one application, users could open objects in separate windows for closer inspection of their detailed contents.
Instead of a generic window title, the design should have provided feedback on which object had been chosen by repeating its name in the window title.
As another example, an application for assigning certain jobs to service representatives ought to dynamically dim the names of those staff members who did not have the qualifications to handle the current job category.
Provide Clearly Marked Exits: 3 problems.
A dialog box where the users could change certain information had an OK button button, so users could only escape from the but not a Cancel dialog box by manually undoing any changes they might have made.
For example, a report generator design allowed users several ways to sort the records, and users were required to actively specify one of these methods.
A shortcut could have provided the most common sorting method  as the default and allowed the users to change it from a pop-up option menu.
Good Error Messages: No problems were found in this category as the workshop participants did not have time to design the error messages.
A simpler design would have combined the two to a single field with a pop-up option menu.
As another example, an application for reviewing and changing information on a mainframe had some protected information that was not user-editable.
The distinction between the two kinds of information in the design was a heavy box around the editable data and a thin box around the protected data.
In one application where users could shut down certain processes running on a computer system, the default option in the confirmation dialog box should since killing processes is a dannot be OK but rather Cancel gerous and non-reversible operation.
This category is discussed further below since it seemed to represent the most serious usability problems.
Appropriate Graphics Design: 3 problems.
This catego~ only comprised the extent to which the graphics design supported the dialogue and not the broader issue of pleasant or good-looking graphics design.
Because of the time constraints of the workshop, the participants did not have time to produce polished graphics for which such a judgment would have been relevant.
One example of a graphics design problem was a case where icons represented objects that could be marked for two different activities; execution or deletion.
Icons marked for execution were turned green and icons marked for deletion were turned red.
Even though these colors provided a good mapping between their common connotations and the functions they were representing, they would cause difficulties for a large number of users with color-deficient vision, so one should provide redundant cues such as, for example, an X or a slash over the icons to be deleted, User in Control and Modeless Dialogues: 2 problems.
A certain application had several subapplications that were linked by buttons in such a way that users were unnecessarily restricted in moving between the subapplications.
A user-controlled interface would have provided a global palette or menu of subsystems and allowed users to move to any subsystem at any time.
We observed several cases where the designers were seduced by the graphics capabilities and overlooked textual solutions that might have been more appropriate.
For example, in a case where users had to retrieve some information from a file, they were required to find its icon even though it could be buried under other objects.
The design did not allow users to simply type in the file name in case they remembered it.
Such complete rejection of any character-based interaction technique constitutes an over-reaction against the influence of previous interfaces,
This group was in the process of designing a function-oriented interface when one of the instructors interrupted their design and suggested that they move to an object-oriented design.
This interruption was a case of the problem described above with usability specialists as "owners" of a technology which they want to promote.
Due to this interference, this fifth group dld include the object-oriented features as suggested, but they clearly had not understood the deeper meaning of the suggestion and it mainly served to interrupt the flow of their design.
They had a very hard time understanding this design suggestion even though it was actually quite good  and simplified the interface, thus again indicating the difficulties of getting to grips with object-oriented design.
Object-oriented interfaces are to be seen in contrast to the function-oriented interfaces that were the traditional basis for character-oriented interfaces.
In a function-oriented interface, the interaction is structured around a set of commands which the user issues in various combinations to achieve the desired result.
The main interface issue is how to provide easy access to these commands and their parameters, and typical solutions include command-line interfaces with various abbreviation options as well as full-screen menus.
Object-oriented interfaces are sometimes described as turning the application inside-out as compared to function-oriented interfaces.
The main focus of the interaction changes to the users' data and other information objects which are typically represented graphically on the screen as icons or in windows.
Users achieve their goals by gradually massaging these objects  until their state as shown on the screen matches the desired result.
Some examples of problems with arriving at object-oriented designs were: In one design for the report generator exercise, users generated the report by first selecting the appropriate retrieval parameters and then clicking on a Report button.
Before seeing the report, they were then forced to select the report by menu that style  from a view would then show a window with the actual report.
A more usable object-oriented design would immediately present the report as an object in a window and then allow the users to change its format  while they could see it and judge what representation would suit their goals best.
This object-oriented design would also allow for the use of a default format  that would probably suit users in many cases and make the interface more approachable for novices.
Most of the usability problems described above are minor in the sense that they can easily be corrected in a subsequent design iteration without having to change the fundamental structure of the interface.
Unfortunately, the seven problems relating to the lack of object-orientation in the interface have deeper consequences for the basic structure of the design and are thus harder to correct, meaning that one should pay special attention to them up front before implementing a potentially problematic design.
Practically all the development teams had difficulties ing at appropriately object-oriented designs.
An application for managing certain information was centered around a window for specifying attributes of the information of interest , Several commands were associated with this represenQuery, Sort, View Data on Screen, tation: Run Print Data, and Save.
The design could easily confuse some users as to whether the Save command would save the specification of the retrieval or the concrete information retrieved  during this specific query.
This problem would be avoided by going to an object-oriented design where anew window  would appear as Query command.
This design the user activated the l?un command would entirely eliminate the Vie w on Screen and , and the print Save commands would then operate either on the object containing the specification or the object containing the retrieved data, making it obvious what they were referring to.
The original design was function-oriented and required the user to speeify desired functions before the data could be viewed, An object-oriented design allows the user to see the data before it is sorted, thus probably allowing the user a better decision with respect to what would be the appropriate sorting criterion.
Also, most users would probably want to check the data before printing it, so making viewing the data a default action would constitute a shortcut.
The negative aspect is "interface contamination" in that details native to one interface standard creep over to implementations that are supposed to follow another interface standard.
One lesson from this phenomenon is that designers should be immersed in a computational environment for their own computer usage with the same interface standard as the one they are trying to design to, Also, if many designers in a company have previous experience with some other interface standard, it may pay to construct a short guide listing the differences between the new standard  and the standard to which they have been exposed as users, This observation corresponds to previous studies of uses of interface standards  which have found that designers are heavily influenced by the actual running systems they know, as well as the observation that widely used applications can have a major impact on shaping designers' ideas of how to design their own applications .
About seven months after the workshops, one of the design teams had completed a complete prototype graphical user interface for a fairly complex product.
This interface was subjected to a heuristic evaluation usability study which is reported in detail elsewhere .
As one would expect from a prototype, the interface contained several usability problems, but the consensus of the evaluators was that the overall design was good and employed a variety of graphical user interface features in an appropriate manner.
The overall look and feel of the design was definitively that of a cohesive graphical user interface.
A first conclusion is thus that the designers had indeed learned graphical interface design.
A second conclusion from the analysis of this interface was that several of the most severe usability problems could be traced to a lack of object-orientation in parts of the interface.
Briefly, the interface involved looking at outputs from various queries to external databases, and using parts of that output as inputs to queries to other external databases.
The prototype interface treated the database output as plain text event though it was highly formatted and consisted of a predetermined number of fields with specific meaning.
Users had access to standard copy-paste mechanisms for use in transferring information from previous queries to new queries, but doing so involved several awkward steps and the possibility for errors.
An alternative, more object-oriented interface design would have recognized the individual data elements on the screen as user-oriented objects even though they had been produced as output from external database queries.
Instead of the function oriented construction of new queries into which data could be pasted, the object-oriented view would concentrate on the data and allow users to apply further queries to any selected data.
For example, one possible redesign would have users select a data field and pop up a list of those external databases for which a query for that datatype would be meaningful, thus at the same time simplifying the interface  and avoiding several steps and usability problems in the construction of the query.
The designers were sometimes influenced by having personal experience as users of graphical interface standards other than the one they were designing for.
Indeed, 63% of the designers had regular or extensive experience using a personal computer with a graphical user interface, even though only 19% had regular experience using the workstation graphical interface they were asked to design for in the workshop.
Examples of the influence from personal computers with graphical user interfaces include:
In two groups, designers argued that one should keep the menu title Fi 1 e on the basis of their experience as users of a system with such a menu.
In one session where almost "all the designers had experience with such a system, this argument was successful, but in the other session the name of the menu was changed anyway.
A designer assumed that highlighting of text in selected fields worked in the same way as on the personal computer he had been using.
At one workshop, the designers discussed whether a report header could be placed directly on the report without having to create it explicitly as a new object first.
Designer D: "I just want to click anywhere on the screen and start typing."
Designer E: "Like in FooBar" .
Designer E later used an example from another personal computer graphics program to explain how the user would interact with a certain part of the interface being designed.
When teaching user interface design for a new interaction paradigm, practical exercises using a low-tech design method allowed the participants to focus on the design rather than to struggle with implementation details, Following the design sessions by feedback sessions critiquing the participants' designs made the discussions of interface principles engaging and concrete for the designers.
Other lessons from the workshops are:
Object-oriented interface design is difficult to learn for designers who have been used to the function-oriented interface style, so special care should be taken to teach not just GUI design in general but also object-oriented design in particular.
Generalizing this observation, we find that changes in interaction paradigms may ofien involve deep changes in the way functionality is accessed and not just the more superficial screen changes implied by terms like "graphical" vs. "character-based" user interfaces.
Designers will often have experienced new interaction paradigms on platforms other than the one they are expected to design for, and this experience can lead to interface contamination unless steps are taken to contain it.
We recommend letting designers get extensive experience as users of applications that comply with the same interface standard they are intended to design for, as well as explaining any differences between interface standards they may have been using in the past and the one they are intended to use.
Concretized demonstrations  and discussions across disciplines and backgrounds help in communicating the diverse and potentially quite abstract issues involved in user interface design.
