Entering text to select a value over a continuous range breaks Shneiderman's principles of direct manipulation  and consumes screen real-estate.
To deal with large spaces, multi-scale interfaces  introduce the scale dimension, sometimes called Z .
We introduce OrthoZoom Scroller, a mouse-based multiscale 1D scrolling and pointing technique that performs better than the only other multi-scale technique using standard input devices.
OrthoZoom Scroller allows users to achieve very difficult 1D pointing tasks  by controlling panning with one mouse dimension and zooming with the other.
Using our technique, a user could select one base pair out of the 3 billions  of the human genome in one continuous multi-scale pointing gesture.
We first review related work and then present the OrthoZoom Scroller.
We evaluate it by comparing it to the Speed Dependant Automatic Zooming technique  which aims at similar goals and has been well studied before.
Finally, we present an application to browse large textual documents with the OrthoZoom Scroller.
This article introduces the OrthoZoom Scroller, a novel interaction technique that improves target acquisition in very large one-dimensional spaces.
The OrthoZoom Scroller requires only a mouse to perform panning and zooming into a 1D space.
Panning is performed along the slider dimension while zooming is performed along the orthogonal one.
We present a controlled experiment showing that the OrthoZoom Scroller is about twice as fast as Speed Dependant Automatic Zooming to perform pointing tasks whose index of difficulty is in the 10-30 bits range.
We also present an application to browse large textual documents with the OrthoZoom Scroller that uses semantic zooming and snapping on structure.
One-dimensional  navigation and selection tasks such as using a slider or a scrollbar involve selecting a value over a bounded range through pointing.
Screen-size and resolution limitations pose problems when the range becomes too large to map one value per pixel.
For example, in a 1000 pixel-wide slider representing a range from 1 to 10,000, each pixel represents ten values.
It is therefore impossible to continuously scroll over a large document in which the number of pages far exceeds the number of pixels in the scrollbar.
Discrete techniques use non-continuous mechanisms such as filtering to remove values from the range or multiple interactions to control the zoom.
BinScroll  is a technique that requires four buttons to perform a dichotomic search in a list of textual data.
Two buttons allow the user to progressively reduce the list by selecting the top half or bottom half of the list relative to a current item.
The two other buttons are used to select an item or cancel an operation.
LensBar  is a listbox augmented by a slider and a text entry field to perform selections in a large list of data.
The list can be reduced by entering a pattern into the textual entry to select only matching data or by performing zooming around the current item.
LensBar controls the visibility of items using a degree of interest function  computed around the current item.
Thus, LensBar requires both a keyboard and data pre-processing to assign a DOI to each item.
The scale factor and pan are controlled using the mouse but cannot be specified in one continuous interaction.
The Alphaslider  is an augmented slider consisting of two or three sub-sliders, each one representing different granularity of movement within the depicted range of the whole slider.
Although each sub-slider is manipulated in a continuous way, switching between two sub-sliders "breaks" the interaction.
Furthermore, the granularity is limited to three levels.
The FineSlider  extends the Alphaslider's idea by allowing users to adjust the granularity of the slider's control: clicking on the slider at a spot other than the knob moves the knob toward the cursor location at a speed proportional to distance between the knob and the clicking point.
The PVSlider  also uses a rubber-band metaphor to adjust the granularity of parameter manipulation.
The FineSlider and PVSlider have a wider range of precision than the AlphaSlider but, once again, switching between two different granularity levels is not continuous.
The Control Menu  uses a circular menu to trigger the control of continuous parameters.
In their article, they show how to navigate in a zooming interface using a continuous zoom triggered by a horizontal item and a pan triggered by a vertical item, at the current zooming level.
Two recent techniques use circular motion to control the zoom factor.
Both use clockwise motion to scroll the view down and counterclockwise motion to scroll it up.
The Radial Scroll Tool  uses the circle radius to adjust the scrolling rate: smaller circles mean faster scrolling, while larger circles mean slower scrolling.
The Virtual Scroll Ring  interprets circular movements differently: it uses the distance traveled along the circumference of the circle instead of the radius.
Larger or faster movements produce faster scrolling while smaller or slower movements produce slower scrolling.
On some input devices, such as the mouse, circular movements can be difficult to do.
Furthermore, controlling a linear parameter using a circular dimension can be disturbing for novice users.
The other techniques use two linear dimensions to control zoom and pan.
The Position+Velocity Slider is a stylus-based technique proposed in LEAN , a prototype to manage video streams.
To browse videos, the user begins a drag anywhere in the video window, moves horizontally to browse and vertically to adjust the browsing velocity .
The authors have qualitatively evaluated the whole interface making difficult to measure the benefits of the Position+Velocity Slider.
The InfoVis Toolkit  provides multi-resolution sliders: the precision is increased with the orthogonal distance to the slider track.
However, no evaluation has been conducted on the effectiveness of the technique and no feedback is provided so users are usually not aware of the feature.
Speed-Dependent Automatic Zooming   is designed to facilitate navigation tasks over large spaces.
Navigation is controlled by a dragging interaction that can be activated anywhere.
The scrolling speed is proportional to the distance between the clicking point and the current point.
This technique also keeps the visual flow of the navigation constant by adjusting the zoom factor dynamically: the zoom factor is linked to the scrolling speed.
This behavior allows users to continuously adjust their granularity.
It requires fine tuning to adapt the visual flow to the user's abilities.
All the techniques controlling a 2D space require either a non-standard input device or linking two dimensions such as the scrolling speed and the zoom factor, as in SDAZ.
Some techniques use non-standard input devices to perform navigation in a multi-scale world.
For example, in , users control panning by moving a stylus on a tablet with their preferred hand while they control zooming with a joystick with their non-preferred hand.
These techniques are challenging to transfer to handheld devices.
Zoom Sliding, or Zliding , does not necessary require both hands by using a pressure-sensitive tablet.
It fluidly integrates zooming via pressure control with panning via xy cursor movement.
The limited range and precision of pressure levels requires additional techniques such as clutching or using the keyboard to achieve a precise control of scaling.
The OrthoZoom Scroller  extends a traditional slider into a 1D multi-scale navigation technique.
It behaves like a traditional slider when the mouse is moved within the bounds of the slider.
When dragging the mouse outside of the bounds of the slider, it continuously changes the granularity/zoom of the slider .
The granularity decreases when the mouse cursor goes farther away from the slider bounds.
In other words, moving the mouse along the slider orientation performs a pan whereas moving it orthogonally performs a zoom.
Let us consider the selection of a value in a range R containing r values with a slider S of s pixels.
A value can be selected with a precision r/s, which is equivalent to looking at the range at a zoom factor s/r.
Thus, some values are not reachable if r>s.
We adjust the input precision by using the orthogonal direction of the slider.
The OrthoZoom Scroller has a control area greater than the area of its graphical representation.
The larger the orthogonal distance between the slider and the cursor, the higher the zoom factor  .
Thus, the initial zoom factor can be chosen by starting the drag interaction at any orthogonal position, provided that the whole window is available to OrthoZoom.
We map a maximal zoom factor, Zmax, onto the maximal orthogonal distance, D max, and interpolate  on the interval .
Typically, Zmax is fixed at 1, i.e.
The control area of an OrthoZoom Scroller is not limited to the graphical bounds of the slider.
The space on the orthogonal direction is used to control the zoom factor.
However, allowing the user to adjust the zoom factor z raises some problems when rxz > s: the user can not reach the two bounds of the range R by bringing the cursor to the graphical bounds of the slider S since the slider is mapped to a sub-part of R .
To solve this problem, the control area is not only extended on the orthogonal direction but also on the collinear dimension out of the slider bounds.
Since the coordinates of the input device are limited to the screen/window bounds, we trigger a fixed rate scrolling when the mouse is dragged out of the edges of the screen/window.
OZ is a continuous multi-scale technique using a standard input device similar to Speed-Dependant Automatic Zooming .
Additionally, SDAZ integrates ratebased scrolling and zooming to overcome the optical flow problems when the user scrolls a document at high speed.
The user only controls the scrolling speed, and the system automatically adjusts the zoom factor so that the visual flow remains constant.
The user controls the scrolling by a dragging interaction that specifies a vector between the initial point and the current point.
The scroll speed is proportional to the length of this vector while the scroll direction is determined by its direction.
The participants' tasks involved pointing as fast as possible on successive targets appearing one at a time in a document too large to be viewed at its natural size without scrolling.
The participants had to scroll the window vertically to bring the target at the center of the view, indicated by a horizontal black line.
An arrow showed the direction of the target from the current view, pointing up when the target was above the view, down when it was below, and left when it was within the view.
Because the target was not visible at every zoom factor, a horizontal orange line, insensitive to the zoom factor, showed the target location.
The target was also surrounded by concentric circles sensitive to the zoom factor.
The pointing task was finished when the target had been kept under the cursor for one second at a zooming factor of 1.
The target, initially red, became blue.
We used those target indicators  to avoid the situation where the user was lost in the document .
They did not bias the task because the trial was over only when the zoom factor was 1.
Furthermore, the orange line was not "snappable", i.e.
Indeed, pointing at the orange line and zooming in would certainly miss the target by several pages in an unpredictable direction for large indices of difficulty .
We conducted a controlled experiment to compare the efficiency of the OrthoZoom Scroller  with SpeedDependant Automatic Zooming  for several indices of difficulty.
SDAZ being the only mouse-based multiscale scrolling technique with continuous control that outperforms standard scrolling interfaces .
We designed this experiment to measure the limit performance of the two techniques in pointing tasks, following Hinckley's approach .
As soon as the target became blue, the ending time of the current trial was logged.
Another trial began as soon as the subject pressed the mouse button on the target that he had just reached.
This target disappeared and a new target appeared at another location and the beginning time of a new trial was logged.
Multi-scale navigation allows dealing with very large documents provided that one can easily control the zoom factor.
We hypothesize that using the orthogonal dimension is an effective way to adjust the zoom factor.
To test the effect of task difficulty on OZ performance, we used different indices of difficulty in our experiment.
The index of difficulty of a pointing task is given by Fitts' law : ID = log where D is the target distance and W its size.
Experiments dealing with very difficult pointing tasks have used IDs up to 30 bits .
Hinckley  warns that there may be a "Device by W" interaction when evaluating scrolling techniques.
We computed the corresponding values for D using the relation: D =2IDxW.
We grouped the trials into two identical series, one series per condition, to avoid disturbing subjects with successive changes among techniques.
Each participant was exposed to the 2 technique conditions by performing one series with OZ and the other with SDAZ.
We computed 6 different series.
2 participants were randomly assigned to a series: one began with the OZ technique while the other began with the SDAZ technique.
Thus, we had 2 groups of 6 participants: one group performing the order OZ - SDAZ and the other performing the order SDAZ - OZ.
We chose this experimental design to minimize ordering effects.
Speed Dependant Automatic Zooming  and OrthoZoom  both use a mouse displacement to control scrolling speed .
To control zoom factor, SDAZ uses the distance between the mouse coordinates  and the initiating point  while OZ uses the x coordinate of the mouse in the window .
To control scrolling direction, SDAZ uses the sign of the dragging vector  while OZ uses the sign of the movement vector  .
Thus, it is easier to change the scrolling direction at any zoom factor with OZ than with SDAZ.
With SDAZ, the user must initially reach y0 to move away in the other direction, losing the current zoom factor.
Every intermediate step before reaching y0 leads to a document movement in the non-desired direction.
OZ is likely to be more efficient than SDAZ because changing direction is common in pointing tasks.
There were 2 blocks per series; each block consisted of 45 trials .
Presentation order of the trials within a block was randomized.
Thus, each subject performed: 2 blocks of 45 trials x 2 technique conditions = 180 trials per subject.
For each trial, we logged Movement Time, Release errors and Overshoot count.
A Release error occurred when a participant released the mouse button without having reached the target.
We recorded this data to gather information about the strategy used to reach the target.
As mentioned earlier, OZ allows users to control zoom factor and panning direction independently.
We hypothesize that users can control these two dimensions in an integral fashion .
Since OrthoZoom integrates those controls into one mouse interaction, we expected a smoother curve in the space-scale diagram, closer to the dark gray one.
To study the movements in the space-scale diagram, we recorded the mouse positions in window coordinates and document coordinates during each trial.
To summarize, this experiment had four dependent variables: task completion time, number of Release errors, number of Overshoot and mouse positions.
At the end of the experiment, a short questionnaire was administered to collect subjects' preferences.
We asked which of the two techniques was preferred and why.
However, the ID effect comes from Distance because there were no significant main effect on Movement Time for Width .
This is probably due to the negligible effect of W on the ID value because we were constrained to values of W fitting within the window.
Figure 7  supports hypothesis 2: the OZ curve is almost twice as flat as the SDAZ curve revealing that OZ is a promising technique to achieve very difficult pointing tasks, beyond 30 bits.
Figure 8 shows the evolution of Movement Time over the 180 trials subjects performed for each Technique.
The slope of the OZ curve is less than the slope of the SDAZ curve, showing that users are faster at understanding the OZ technique.
Analysis of variance revealed a significant main effect on Release Errors for Technique , but not on Overshoot count for Technique .
These numbers reveal more the strategy used by subjects in our experiment than actual errors for both techniques.
Subjects used more Releases per pointing task with SDAZ than with OZ.
Neither Technique*ID or ID have a significant effect for either measure.
Neither Technique*ID interaction or ID does not have a significant effect on both measures.
To take a closer look at our data, we drew two curves along the time axis: panning curve and zooming curve .
Some SDAZ zoom curves present peaks of two types: releasing the mouse button  and changing direction.
SDAZ zoom curves reveal every change of direction while OZ zoom curves only reveal some of them.
To change direction, users perform one of the following actions: * with SDAZ: o they release the mouse button, i.e.
We built a Java application to visualize the space scale diagrams.
Because plotting a mean of these curves does not have much sense, our application plots them "on demand" by entering the subject number, block number and trial number.
It gave us an indication on the integrality of the two dimensions.
We collected curves showing that users commonly performed a zoom-out phase  followed by a panning phase  ended by a zoom-in phase .
Thus, hypothesis 3 regarding integrality is rejected.
The only difference we noticed were that SDAZ curves often presented some vertical lines up and down "cutting" the horizontal line.
Space scale diagrams do not include time.
The short survey ending the experiment revealed that all the subjects preferred OZ.
Subjects did not always succeed to explain why.
Among the few remarks we collected, one said "it is enjoyable to control the zoom factor by myself" and another "it is amazing: I do not have the impression to scroll the document with the OZ technique".
Using the OrthoZo om Scroller for scrolling a large docume nt requires   adaptati Figure 11.
Multi-scale Navigation into the Shakespeare's plays: the Table of Contents appears to the left of the text when it scales ons of down.
On the right, only the structure remains visible.
Releasing the OrthoZoom when an entry is feedback since a one pixel displacement of the thumb highlighted scrolls the view at its exact position.
Snapping produces a large jump of the view.
For example, a is important because overshooting by one pixel in the document containing the 37 plays of Shakespeare has scrollbar can lead to overshooting several pages in the roughly 150,000 lines of text.
Assuming a comfortable text document.
Traditional multi-scale scrolling vertical positions.
These page numbers can be extracted techniques use a zooming interface where the document's from the document when available or computed from the scale factor is synchronized with the navigation scale factor view size; they provide regular tick-marks which help so that the "optical flow" of the document becomes interpret the displayed scale and the document size.
Zooming works well when the the view-scale changes, we change the step of the displayed document is itself multi-scale, such as the image of the page numbers: every page, every two pages, five, ten etc.
Page numbers are snappable, with a lower priority than the However, scaling-down a textual document turns it into a MSTOC entries.
For example, scrolling and navigating Quickly pressing and releasing the pointer on the scrollbar at the level of a play requires a scale of approximately triggers a quick animation showing the table of contents of 1/150, leaving too few pixels to distinguish anything in the the whole document and zooming back to the original text.
Scale Table Of Contents  displayed on the left of All these interactive navigation features integrate the the scaled-down text, as shown in Figure 11 functions available in popular document readers.
For Each section entry of the table of contents is displayed at a example, Adobe Acrobat Reader provides at least 5 constant size but is aligned vertically with the position it different ways to navigate through a document that could be has in the text, guiding the user during navigation.
When replaced by OZ interaction: "hand" tool, next/previous the scale factor decreases, the MSTOC shrinks vertically button, page thumbnail selection, bookmark selection, page and some entries at one level eventually collide, as seen in number entry as text field.
Depending on the x position Figure 11-b.
When this happens, we scale down the whole where OZ is used, the user can scan the document at the level until it becomes unreadable and is removed from the "hand tool" level, thumbnail level or bookmark/structure view.
This scaling-down leaves room for higher-level level.
Navigating to a specified section can be done using entries in the MSTOC that start to appear to the left.
Navigating at a specific page location can be done by The MSTOC also provides snapping: when the OrthoZoom snapping the page number.
The evaluation did not take into account the problem of motion blur and focused only on the interaction.
The reason for separating the interaction task from the visual perception task is that the latter is very dependent on the nature of the displayed information .
The pointing task is relevant for the situation where the user knows exactly where to go.
In realistic situations, the displayed information should provide indications on the relative location of the target.
With the MSTOC, if the user wants to reach scene 5 of Act 3 of Macbeth, he is aware of his current position and can decide to scroll up or down at any zoom level.
We have presented the OrthoZoom Scroller, a technique for scrolling and pointing in large 1D documents using only a mouse.
We have shown that - with IDs up to 30 bits - OZ performed two times faster than SDAZ which is known as the fastest multi-scale navigation technique using a standard input device.
SDAZ and OZ follow Fitts' law but OZ curve is almost twice flatter than SDAZ curve: the difference of time between SDAZ and OZ increases with the ID.
With larger online resources available on the Web, techniques scaling to this level have a great potential.
For example, navigating on the human genome from the basepair scale to the whole chromosome has an ID of 32 bits.
Navigating on the whole Google corpus requires about 33 bits.
We presented an application of OZ to navigate in large textual documents and showed how to integrate it with semantic zooming and snapping.
We believe OZ could be integrated with current Web browsers and e-Books readers to improve navigation without requiring changes in layout or overall interaction.
Since OZ augments and replaces scrollbars and sliders, integrating it in future applications will ensure the scalability required by the continuous growth of information.
The authors would like to thank the whole in|situ| lab.
The authors also want to thank Andy Cockburn and Ravin Balakrishnan on their help about respectively SDAZ and Zliding and Eric Lecolinet for the fruitful discussions about multi-scale interfaces.
SIGCHI conference on Human factors in computing systems: celebrating interdependence, ACM Press, Boston, Massachusetts, United States, 1994, 365-371.
Ayatsuka, Y., Rekimoto, J. and Matsuoka, S. Popup vernier: a tool for sub-pixel-pitch dragging with smooth mode transition in Proceedings of the 11th annual ACM symposium on User interface software and technology ACM Press, San Francisco, California, United States 1998 39-48 3.
Bederson, B.B., Grosjean, J. and Meyer, J. Toolkit Design for Interactive Structured Graphics IEEE Trans.
Pan-zoom coordination in multi-scale pointing in CHI '01 extended abstracts on Human factors in computing systems ACM Press, Seattle, Washington 2001 157-158 5.
Cockburn, A. and Savage, J., Comparing SpeedDependent Automatic Zooming with Traditional Scroll, Pan and Zoom Methods.
The information capacity of the human motor system in controlling the amplitude of movement.
Journal of Experimental Psychology, 47 .
Space-scale diagrams: understanding multiscale interfaces in Proceedings of the SIGCHI conference on Human factors in computing systems ACM Press/Addison-Wesley Publishing Co., Denver, Colorado, United States 1995 234-241 9.
Guiard, Y., Beaudouin-Lafon, M., Bastin, J., Pasveer, D. and Zhai, S. View size and pointing difficulty in multiscale navigation in Proceedings of the working conference on Advanced visual interfaces ACM Press, Gallipoli, Italy 2004 117-124 10.
Guiard, Y., Beaudouin-Lafon, M. and Mottet, D., Navigation as Multiscale Pointing: Extending Fitts' Model to Very High Precision Tasks.
Guiard, Y., Bourgeois, F., Mottet, D. and BeaudouinLafon, M., Beyond the 10-bit barrier: Fitts' law in multiscale electronic worlds.
Hinckley, K., Cutrell, E., Bathiche, S. and Muss, T. Quantitative analysis of scrolling techniques in Proceedings of the SIGCHI conference on Human factors in computing systems: Changing our world, changing ourselves ACM Press, Minneapolis, Minnesota, USA 2002 65-72 13.
Proceedings of the 13th annual ACM symposium on User interface software and technology ACM Press, San Diego, California, United States 2000 139-148 14.
Jacob, R.J.K., Sibert, L.E., McFarlane, D.C. and M. Preston Mullen, J. Integrality and separability of input devices.
Lehikoinen, J. and Roykkee, M., BinScroll: a rapid selection technique for alphanumeric lists.
Masui, T. LensBar - Visualization for Browsing and Filtering Large Lists of Data in Proceedings of the 1998 IEEE Symposium on Information Visualization IEEE Computer Society, North Carolina 1998 113-120 17.
Masui, T., Kashiwagi, K. and George R. Borden, I. Elastic graphical interfaces to precise data manipulation in Conference companion on Human factors in computing systems ACM Press, Denver, Colorado, United States 1995 143-144 18.
Ramos, G. and Balakrishnan, R., Fluid interaction techniques for the control and annotation of digital video.
Ramos, G. and Balakrishnan, R., Zliding: fluid zooming and sliding for high precision parameter manipulation.
Shneiderman, B., Direct Manipulation: a Step Beyond Programming Languages.
The radial scroll tool: scrolling support for stylus- or touch-based document navigation in Proceedings of the 17th annual ACM symposium on User interface software and technology ACM Press, Santa Fe, NM, USA 2004 53-56 23.
Towards a standard for pointing device evaluation, perspectives on 27 years of Fitts' law research in HCI Int.
Zhai, S. and Smith, B. Multi-Stream Input: An Experimental Study of Document Scrolling Methods.
