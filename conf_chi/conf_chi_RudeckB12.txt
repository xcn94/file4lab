We explore how to bring physical affordance to mobile touch devices.
We present Rock-Paper-Fibers, a device that is functionally equivalent to a touchpad, yet that users can reshape so as to best match the interaction at hand.
For efficiency, users interact bimanually: one hand reshapes the device and the other hand operates the resulting widget.
We present a prototype that achieves deformability using a bundle of optical fibers, demonstrate an audio player and a simple video game each featuring multiple widgets.
We demonstrate how to support applications that require responsiveness by adding mechanical wedges and clamps.
The main idea behind rock-paper-fibers is to allow users to obtain physical affordance by deforming the device.
Figure 1 shows our prototype, which consists of a bundle of optical fibers held together by a hand piece.
The top ends of the optical fibers are touch-sensitive.
Functionally, the device is therefore equivalent to a touchpad: it offers a twodimensional array of touch-sensitive elements.
Unlike a regular touchpad, however, each sensor element has been extended using an optical fiber.
Since fibers can be bent, this allows users to deform the "touchpad" or break it apart into multiple touch-sensitive elements .
Unlike physical controls, touch pads and touch screens have traditionally been flat and featureless.
To reduce error and improve affordance, researchers have proposed adding physical constraints .
An embossed circular groove, for example, constrains the user's finger to the touch area forming a dial, thereby affording dialing motion.
The vast majority of today's touch screens, however, are used in mobile devices.
Unfortunately, DataTiles do not transfer to mobile devices.
The reason is that tiles require space.
In addition, the underlying touch sensitive platform even has to be large enough to provide space for multiple tiles.
This limits the approach to tabletop-style devices.
In this paper, we tackle these limitations and demonstrate how to bring custom-shaped physical controls to mobile touch devices.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Figure 1:  Functionally, rock-paper-fibers is equivalent to a touchpad.
However, each sensor element is extended using an optical fiber, making the "touchpad" deformable.
This causes the device to recognize its new shape and execute the play command.
Figure 1b and c show an example interaction: to make an audio player "play", the user reshapes the device into a "" symbol.
Stroking across the "" causes the device to recognize its new shape and execute the play command.
Figure 2 continues the audio player example.
Tapping a position on the slider sets volume directly.
Recent advances in touch technology  have allowed researchers to touch-enable non-planar shapes , such as the grip of a stylus .
Harrison et al demonstrated how to touch-enable human skin using acoustic tracking .
Several researchers have created Organic User Interfaces, such as Gummi  and PaperPhone  that users operate by bending the device itself .
Harrison and Hudson created deformable interfaces by combining pneumatics with optical tracking .
Wimmer and Baudisch demonstrated how to touch-enable stretchable fabrics using time-domain reflectometry .
Taylor and Bove showed how to change the function of a device without deforming--users instead change the way they hold the device .
To provide physical affordance through specialized physical shape is also the objective of tangible computing.
The Actuated Workbench combines tangible pucks with separate mechanical constraints .
DataTiles enhance tabletop widgets by overlaying a physical counterpart .
SLAP widgets extend this to tangibles with moving parts .
Early on, optical fiber was used to sense bending in Datagloves.
Recent projects use optical fiber to redirect optical sensing .
Rock-paper-fibers brings custom-shaped physical controls to mobile touch devices.
To achieve the required smallness  users reshape the device itself and  we serialize the interaction, i.e., users manipulate one widget at a time.
The result is a deformable/reconfigurable "touchpad" that manipulate efficiently using bimanual interaction.
Unlike other devices that physically constrain the user's fingers, rock-paper-fibers widgets merely guide the user.
By maintaining physical contact with the protruding fiber bundle users receive continuous tactile feedback, similar to how users find their way around a mouse wheel or a set of physical sliders by maintaining physical contact with it.
Unlike on spacious tabletops, custom-shaped interaction on mobile devices comes at a price.
The repeated reconfiguration requires additional manual skills, which limits the range of widgets an individual user is able to produce.
It also costs time, as users customize interface elements repeatedly.
For applications where responsiveness is critical, we therefore allow users to prepare multiple widgets ahead of time .
Figure 3a shows our main prototype taken apart.
The photo reveals a bundle of about a thousand 1mm optical plastic fibers, observed by a 720p webcam .
A 3D-printed casing holds both parts together.
Figure 3b shows a smaller wireless version we created; it uses a 2.4GHz wireless spy cam, powered by a stack of watch batteries.
The fiber bundle was repurposed from a fiber optic lamp.
The device detects touch as follows.
Environmental light falls into the optical fiber and is transmitted down the fiber, where it is diffused and observed by the camera.
During touch interaction, the user's hand shadows some of the fibers, causing them to appear dark to the built-in camera.
The device thus implements a simplified form of front diffuse illumination.
This design is optimized for smallness and mobility.
As an alternative, we have complemented prototypes with an IR illuminant, so as to make them independent of environmental light.
As illustrated by Figure 3c the illuminant sits next to the camera, sending light through the fiber bundle, where it is reflected by the user's hand.
The figure shows how we tilt the handle far enough to get camera and illuminant out of the hotspot, yet not so far as to leave the fiber bundle's acceptance cone.
Similarly, rock-paper-fibers allows operating twodimensional widgets, which we call pads.
To obtain x and y location, users register pads using a horizontal swipe followed by a vertical swipe.
Figure 6 shows the sieve + ring mechanism we use to optimize pads.
Figure 4 illustrates how the device recognizes widgets.
Whenever the device is reconfigured, it has no way of knowing how fibers are spatially organized.
To reestablish this,  users swipe their finger across the device, causing the device to see fibers turn on and off .
The only meaningful information the device can extract from this is how many fibers are covered at a given time .
Plotting this number over time, however, forms a characteristic pattern.
Matches are computed using Dynamic Time Warping .
Figure 5 illustrates how we populate the widget database.
Swiping the finger across a widget convolves the shape of the finger with the shape of the widget.
Consequently, we create the widget graphs in the database by computing this convolution.
Alternatively, our prototype also allows adding widget definitions by demonstration.
We envision rock-paper-fibers to be integrated as a standalone mobile device, as illustrated by the walk-through.
For prototyping, however, we connect the device to a PC.
The rock-paper-fibers framework allows us to map widget controls to arbitrary GUI elements using the Mac OS X accessibility API or create predefined keyboard and mouse events by using the Quartz Event Service.
To associate a rock-paper-fiber widget with a function in an application program, users pick a rock-paper-fiber widget and press the "s" button on the keyboard while hovering with the mouse over the desired application widget.
The device determines the amount of touched fibers by thresholding brightness.
While this can be done on a perpixel basis, we obtain more reliable recognition by thresholding on per-fiber basis.
To enable this, we locate fibers using Hough circles .
This is done once per lifetime of the device and stored in a calibration file.
To allow operating a slider using direct touch , rock-paper-fibers needs to determine which fibers correspond to which location.
To determine this, rock-paperfibers records when each fiber was occluded during registration; this time corresponds directly to the x coordinate of the respective fiber.
Figure 7 illustrates the use of a wedge: To prepare a game of Tetris, the user has to split the fiber bundle into four buttons by inserting a 2x2 wedge into the device.
If an application requires multiple custom widgets, such as the interface for a racing game, clamps provide the required flexibility .
In addition to allowing users to create multiple persistent widgets, wedges and clamps also free up the non-dominant hand, thereby allowing users to use both hands to interact with the application, e.g., while resting the device on their lap.
In order to determine the reliability of our widget interaction, we conducted a brief validation.
We recruited 9 participants from our institution.
After 5 minutes of training, each participant performed each of 7 gestures 3 times by hand in a well-lit room.
Figure 9 shows the resulting recognition rates we received with a 9-fold cross validation.
The chart shows that participants performed well with the multi-part widgets, but also that shaping widgets, such as  vs. , is more prone to misrecognition and requires additional training.
In this paper, we explored how to bring physical affordance to mobile touch devices.
The main idea behind our approach is to let users reshape the touch device itself.
We presented an interactive prototype, with matching sensing mechanism, and algorithm.
As future work, we plan to explore more compact form factors, such as malleable devices touch-enabled using time-domain reflectometry  .
