ABSTRACT Program comprehension is a complex problem solving process.
We report on an experiment that studies expert programmers' comprehension behavior in the context of modifying a complex PASCAL program.
Our data suggests that program comprehension is best understood as a goal- oriented, hypotheses-driven problem-solving process.
Programmers follow a pragmatic as-needed rather than a systematic strategy, they restrict their understanding to those parts of a program they find relevant for a given task, and they use bottom-up comprehension only for directly relevant code and in cases of missing, insufficient, or failing hypotheses.
These findings have important consequences for the design of cognitively adequate computer-aided software engineering tools.
A study by Littman et.aL  identified two equally dominant comprehension strategies: Programmers used either a systematic or an as-needed strategy.
The former group used extensive symbolic execution of the data and control flow between subroutines to gain a detailed understanding of the program prior to modifying the code, whereas the latter group tried to minimize the understanding of the program by localizing those parts of the program that needed to be changed and studying those parts only.
This view of program comprehension as a hypotheses-driven problemsolving process was first put forward by Brooks  in his model of "Beacons" that guide comprehension.
Other studies  demonstrated the role of code level beacons for understanding small, simple programs.
Research at MCC on initial stages of software design  and comprehension  also demonstrated the heuristic approach to software engineering tasks.
Parsing models of the text comprehension literature  are adapted for the use with programming languages to predict reading times based on the "micro-structure" of program statements .
Comprehension, understanding of the "microstructure" of program code, is seen as a bottom-up chunking process .
Here we show that subjects follow a pragmatic "as-needed" strategy rather than a systematic approach, that subjects restrict their understanding to parts of the code they consider to be relevant for the task and, thus, gain only a partial understanding of the program that might lead to misconceptions or errors.
Tools will have to be developed that facilitate "asneeded" strategies and help programmers to avoid some of its inherent problems.
METHOD Subjects llvelve subjects participated in the study and were assigned randomly to the four different tasks.
INTRODUCTION Yes, code please ...1'11 probably go to the comments after that, when I realize that I don't understand the code.
The goal of our research is to provide strong empirical support for the paradigm that program comprehension is a hypotheses-driven problemsolving process.
Consequently, cognitively adequate user interfaces for computer-aided software engineering tools have to support these empirically identified processes.
There is a growing body of research on the issue of program comprehension.
Cognitive research since the early 1980's has focussed on comprehension strategies, the procedural aspect of expertise, as well as on the declarative aspect of how programming knowledge in general and the program under consideration in particular are conceptually represented .
Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, tha ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing To copy otherwise, or to republish, requires a fee Machinery.
Subjects were paid $10 per hour for their participation.
Material The computer program to be modified was a troff-style text formatting program.
The 636 lines long, uncommented, well structured PASCAL program was adapted from a standard text on software engineering .
It consisted of a short main program and 39 functions and procedures.
For each procedure or function there existed a code listing and a separate description of its functionality, In addition, six module decomposition charts were provided.
The program-related material was complemented by a set of three globat program descriptions.
There were four modification task descriptions, each outlining the changes to be made on a functional level.
Tasks varied in difficulty, required level and scope of program understanding, and amount of code to be added or changed.
Tasks included a functional addition , enhancement , a functionality change , and a default value change .
Procedure Subjects read a summary of the program to be modified and descriptions of all four modification tasks.
Subjects then verbalized how they would perform each task.
Next, subjects were given one modification and they studied program code or the documentation units, one piece at any given time, until they completed the modification.
During this phase subjects were requested to think aloud and to verbalize and explain their requests for apiece of information.
This phase was audiotape and the experimenter recorded the sequence of information requests.
Subjects were advised to do the modification in an efficient, structured way.
This suggests that subjects retrieved the desired information the first time they looked at it.
The very limited overatl scope of comprehension is detailed in Table 2.
Subjects studied only a small part of the program cod~ on average only one fifth of the procedures and functions, accounting for less than one third of all lines of code in the program, was visited.
None of the subjects studied more than about hatf of the code and one subject restricted himself to one tenth of the code.
Furthermore, Table 2 shows the percentage of procedures and functions that subjects were totally unaware of since they did not even encounter the corresponding catls or references in charts or descriptions.
On average, 24% of all functions or procedures  were totally missed.
Note, that this is only a lower bound since subjects often glanced over information and were, thus, likely to miss existing references to other code segments as well.
We claim that the small amount of code studied results from an opportunistic relevance strategy: Subjects study code or documentation only if they believe that the code is relevant for the task.
We can separate three different levels of relevance Directly relevant are those code segments that have to be modified or that are used for copy-editing purposes.
This code is the common core for all subjects that solve the same tasks.
Since this direct relevance is task dependent, subjects with different tasks study different parts of the program.
For example, the underlining procedure uncle :rl n was studied by all subjects with boldfacing/underlining tasks, but by none of thd other subjects, whereas putt 1, the procedure that put out footers and headers, was studied by 5 out of 6 subjects performing a footer related modification, but by none of the other subjects.
The second category is intermediate relevant code.
This group includes those code segments that are perceived to interact with relevant code.
Subjects study intermediate relevant code if they discover the interaction and if they judge that the interaction needs to be understood.
Intermediate relevant code is studied less frequently and in less detail than directly relevant code.
The third group of code  is of strategic relevance in that it guides the comprehension process.
This code is rarely comprehended in detail but serves mainly to locate or detect directly or intermediate relevant code, that is, it acts as a pointer towards other relevant parts of the code.
Prototypical examples are charts which were used by subjects to locate procedure names and documentation that was used to determine the calling procedures for a given code segmen~ e.g.
We atso found that a quarter of all procedures and functions were not looked at by any subject.
Modification time was correlated with the number of pieces of information looked at  = .73, p < .01.
Subjects used the code listings as their main source of information.
Subjects did use the module decomposition charts but rarely made use of the detailed descriptions of each code segment.
However, some of these code segments were indeed complex and important domain-specific procedures.
These data qualifies the finding that a systematic strategy plays an important role for comprehension .
Our data show that subjects did not employ a systematic comprehension strategy but focussed on a small subset of the code.
This finding gives strong support to the dominance of "as-needed" strategies, "need" being predominantly determined by the modification goals of the programmer.
We attribute these differences to the fact that our program was significantly larger in size.
With increasing program size and complexity, any comprehensive strategy will become cost prohibitive and systematic in-depth comprehension will be restricted to few relevant code segments.
However, most of the missed interactions would have become immediately evident if subjects were given the opportunity to test their modifications online.
Differences in relevance make some types of information more important during particular phases in the comprehension process.
Figure 1 shows the varying usage of information over the course of the comprehension process.
Each subject's process is broken down into quartiles.
The vertical axis shows the distribution of types of information studied.
The percentages given are averages for all subjects.
As expected, information of mainly strategic relevance, namely charts and the globat descriptions, was of importance at the beginning of the comprehension process.
Global descriptions were either looked at first or not at all.
Descriptions of code segments fluctuate and them use reached the peak in the third quartile.
This may be due to the usage of descriptions as pointers to the call structure of the program in the beginning and in addition for clarification in cases where subjects failed to understand the code itself.
One might argue that our findings are an effect of the procedure of manually presenting one piece of information at any given time and on request only.
Whereas we agree that the chosen method constitutes some deviation from a realistic setting we would like to point out that all subjects reported after the experiment that they felt they had performed the modification in their "normal" way and that they were not hampered by the chosen method.
Furthermore, the procedure was quite similar to a software environment in which subjects view one code segment at any given moment and switch between segments using editor commands that refer to code segments by name.
The horizontal axis represents time.
The shape of the symbols depicts the information type.
Subjects uniformly exhibited a focussed topdown process.
They first got an overview of the program by studying the global descriptions and proceeded with the goal to search for the directly relevant code that printed footers and headers.
One thing I want to do a little bit is hop down looking at the program.
But I think I'll stop in main, just to get a, an idea of which path I should take next.
I mean, I-I, I assume that, that my employer wants me to do it right and not fast.
If he wants me to do it fast, I could ask you maybe for the module chart, guess where headers and footers are done, and try to dive right in.
But I feel more comfortable to have an over-overview of program functionality, even though most of this information I won't use directly.
Subjects hypothesized relevance based on the comprehension of the program already achieved and based on their knowledge about the task domain and programming in general.
Subjects used procedure and variable names to infer functionality.
The names chosen for the formatter program consisted of mostly abbreviated or condensed function descriptions, e.g.
Subjects in all tasks demonstrated great ability to decode these names.
Define footer title, Uh, th-that explains the, the name of putt 1 and the use of the word title everywhere.
Cause I guess using title is a sub - a special line,  Um.
While looking for code subjects guessed correctly the names of procedures they had not seen.
We will now focus on one particular task, the'automatic centering of heeder~ md footers .
This modification required the insertion of code into the procedure putt 1 or the insertion of identical code in the two catling procedures Figure 2 depicts the comprehenputhead and put f oot.
So let me look at putfoot first.
I haven't seen anything called put head yet.
I don't know they're both done by put t 1, but on line 350 it says putt 1 footer current page, And I would guess if I look at put head, I'll see putt 1 header current page.
After subjects failed to find directly relevant code, subjects backed up to the calling routines and/or charts.
Subjects then hypothesized that the procedure page was printing out a page footer and was starting a new page since that is the use of a page command from the user's perspective : I'm guessing that page is the function which handles that page feed which is where we're gonna have to hook a header into.
I think it's gonna be somewhere under page, urn, where it generates the header and footer.
All subjects reached the code listing for the put foot procedure in step 13.
They than either studied the parallel procedure put head or proceeded to the code for putt 1 that had to be modified.
Subjects began the coding of the modification as soon as they reached directly relevant code.
The length of this last step in the comprehension process varied.
All subjects looked up at least one value in the global dedarations.
The extra steps by Subject 05 resulted from a copy-edit episode, a common strategy employed by many subjects.
Can I see the description on it oc?
Because it looks like that's what's doing the the, the actual conversion of the number.
And maybe I can see how they are finding-checking the width of that number.
You know, maybe I can borrow their code... 
Throughout, subjects made relatively little use of the provided documentation.
The protocols suggest documentation was mainly used in the case of breakdowns in the comprehension process and for strategic purposes, namely the identification of catling procedures.
Yes, code please  I'll probably go to the comments after that, when I realize that I don't understand the code.
Must have missed the call  I seem to have lost the command parser.
I'm gonna have to look at the documentation on , uh, main and getline.
Must be missing something when looking at the command code, so let's take a look at the functional description of command ... The only documentation frequently used were charts due to their strategic relevance.
The abstraction to procedure and function names and their call structure supported the subjects' strategy of finding particular procedures by searching for their names.
Thus, charts were looked at often early on, but once the relevant code segments had been located , charts were no longer used.
CONCLUSION The modification of a large program is a complex problem- solving task.
We discussed how subjects generate hypotheses about the functionality of code and how procedure and variable names are used as "beacons" to build new, revised, or refined hypotheses during the comprehension process.
We were, thus, able to demonstrate that program comprehension proceeds mainly in a top-down fashion and that bottom-up methods of comprehension, the integration of single code units into meaningful frames, were only used in cases of missing or failing hypotheses and Iocatly for directly relevant code units.
We found only two instances across all four tasks in which subjects actually simulated intensively the execution of the code in order to understand a code segment.
No subject followed a systematic strategy of comprehension.
The goal of modifying the program according to the task at hand was the major factor that determined the scope of the comprehension process.
Subjects spent a major part of their time searching for code segments relevant to the modification task and no time understanding parts of the program that were perceived to be of little or no relevance, These findings suggest that tools like the DESIRE system  that are based on a paradigm of programming as a design task, utilize the reuse of existing code and allow the expression and refinement of and reasoning about abstract concepts and constraints, are the right approach towards the development of an "intelligent" programmer assistant.
Subjects reported that they were constrained by the fact that they could only view one piece of information at any given time and that switching between two pieces of information had a high "cost", This suggests that multi-window environments that allow programmers to view different information sources simultaneously and large windows that facilitate speedy scanning of large portions of code are highly desirable.
The extensive browsing behavior of subjects and the scanning of charts and code for relevant procedure names should be supported by graphical browsers and by intelligent search functions, utilizing online documentation, that allow the programmer to use functional categories in queries to retrieve procedure names.
A second area with large potential for support is the process of reusing existing code that has to be copy-edited.
For example, a system should support the declaration and initialization of variables.
Documentation was mainly seen as the last resort and only consulted, with the exception of flowcharts, when other methods of comprehension failed.
Many subjects reported that they had bad experiences with useless documentation and even a single instance of misleading code description during the experiment caused one subject to neglect descriptions thereafter.
Subjects try to avoid the extra effort of studying documentation if they believe that the information can be obtained directly from the code.
On the other hand, subjects do use documentation when they know that code itself does not provide the desired information, e.g., in situations where a subject wants to find all calling procedures for a called subroutine.
These findings suggest that documentation should be tailored to include only those pieces of information that are not directly obtainable from the code, e.g.
To minimize the cost of looking at documentation, it should be readily available.
This favors the inclusion of documentation in the code itself via comments and the selection of self-explanatory variable and procedure names.
Multi-window environments that allow the parallel display of code and documentation might also encourage the use of documentation.
The core issue is why much documentation is perceived as useless.
The  task on hand determines the scope and focus of comprehension.
For one modification it might be sufficient to know how a piece of code works while for a different modification the question of why this implementation was chosen is of great importance.
If program comprehension is understood as design reconstruction, documentation should facilitate this process by revealing parts of the original design process that cannot be easily reconstructed from the resulting code.
For example, it might be documented why a particular encoding has been chosen from a set of alternatives.
This perspective gives rise to two types of documentation: design history documentation, allowing a programmer to examine the decision processes that resulted in the originat design and anticipatory documentation; documentation is created explicitly to support  future modifications, ACKNOWLEDGEMENTS This work is sponsored in part by the Office of Naval Research, Perceptual Science Program Contract NOOO14-86- K-0876.
We thank the three anonymous reviewers for their vatuable comments and Chris Jarocha-Ernst for helping with the preparation of the document, REFERENCES 1.
Problem solving and the development of abstract categories in programming languages.
Towards a theory of the comprehension of computer programs.
Francoise Detienne and Elliot Soloway.
An empirically-derived control structure for the process of program understanding.
Jennifer Dyck and Brent Auernheimer, Comprehension of pascal statements by novices and expert programmers.
Poster presented at the Human Factors in Corn.
Comprehension and recall of miniture programs.
Software design tasks as ill- structured problems, software design as an opportunistic process.
Technical Report STP-214-88, Microelectronics and Computer Technology Corporation, 1988.
The process of knowledge discovery in system design.
Technical Report STP-166-89, Microelectronics and Computer Technology Corporation, 1989.
What knowledge is exploited by experts during software system design.
Raymonde Guindon, Herbert Krasner, and Bill Curtis.
Breakdown and processing during the early activities of software design by professionals.
In Gerry Olsen, Eliot Soloway, and Sylvia Sheppard, editors, Empirical Studies of Programmers.
Brian W. Kemighan and P. J. Plauger.
The Representation of Meaning Memory.
G. M. Olson, Sylvia Sheppard, and Elliot Soloway, editors.
Empirical Studies of Programmers: Second Workshop, Norwood, NJ, 1987.
In Gary M. Olson, Sylvia Sheppard, and Elliot Soloway, editors, Empirical Studies of Programmers.
Stimulus structures and mental representations in expert comprehension of computer programs.
Scott P, Robertson, Erie F. Davis, Kyoto Okabe, and D. Fitz-Randolf.
Program comprehension beyond the line.
In D. Diaper, D. Gilmore, G. Cockton, and B. Shackel, editors, Proceedings of the 3rd International Conference on Human-Computer-Interaction, Interact-90, pages 959-970.
Software Psychology: Human Factors in Computer and Information Systems.
Ben Shneiderman and Richard E. Mayer.
Syntactic/semantic interactions in programmer behavior, a model and some experimental results.
Elliot Soloway and Kate Ehrlich.
Empirical studies of programming knowledge.
Elliot Soloway and Sitharama Iyengar, editors.
Empirical Studies of Programmers, Norwood, NJ, 1986, Ablex Publishing.
Susan Wiedenbeck, Processes in computer program comprehension.
In Elliot Soloway and Sitharama Iyengar, editors, Empirical Studies of Programmers.
Susan Wiedenbeck and Jean Scholtz.
Beacons and initiat program comprehension, Poster presented at CHI Human Factors in Computer Systems, 1989.
Herb Krasner, Bill Curtis, and Neil Iscoe.
Communication breakdowns and boundary spanning activities on large programming projects.
In Gary M. Olson, Sylvia Sheppard, and Elliot Soloway, editors, Empirical Srudies of Programmers.
Cognitive processes in program comprehension.
In Elliot Soloway and Sitharama Iyengar, editors, Empirical Studies of Programmers.
