MAGIC pointing techniques combine eye tracking with manual input.
Since the mouse performs exceptionally well in a desktop setting, previous research on MAGIC pointing either resulted in minor improvements, or the techniques were applied to alternative devices or environments.
We design Animated MAGIC, a novel, target-agnostic MAGIC pointing technique, for the specific goal of beating the mouse in a desktop setting.
To improve the eye-tracking accuracy, we develop a dynamic local calibration method.
We compare Animated MAGIC to mouse-only and Conservative MAGIC, one of the two original MAGIC pointing methods, in a Fitts' Law experiment.
We conduct a user questionnaire to evaluate the usability of the interaction methods.
Results suggest that Dynamic Local Calibration improves eye-tracking accuracy and, consequently, MAGIC pointing performance.
Powered with Dynamic Local Calibration, Animated MAGIC outperformed mouse-only by 8% in terms of throughput.
Both MAGIC pointing methods reduced the amount of hand movement by more than half.
Previously-introduced MAGIC pointing methods were tested on a manual input device other than the mouse , required a touch-sensitive mouse , were applied to a non-desktop setting , and/or introduced usability side-effects such as the cursor constantly following gaze center, or having multiple cursors on the screen which would likely get in the way while reading or watching a video.
To be able to beat the mouse in a desktop setting without compromising usability, we design a novel, target-agnostic MAGIC pointing method called Animated MAGIC  which intends to keep the interaction as smooth and natural as possible, and avoid any additional usability hurdles other than the amount of physical discomfort caused by the current state of the eyetracking technology.
What makes AM a novel MAGIC pointing method is the way it combines gaze and manual input channels.
At the onset of a hand movement, AM quickly moves the cursor near the gaze center with a pixel by pixel animated motion.
Concisely, AM accelerates the cursor movement and bends its direction towards the target.
No matter how well designed, the performance of a MAGIC pointing method will naturally be affected by the eye-tracking accuracy.
To improve the accuracy, we implement Dynamic Local Calibration  which exploits each selection as a local calibration point.
We compare  against mouseonly  and Conservative MAGIC : one of the two original MAGIC pointing methods introduced in .
Both MAGIC pointing methods are tested with and without DLC via a within-subject Fitts' Law  experiment.
AMDLC achieved an 8% improvement over MO in terms of throughput, while DLC improved both MAGIC pointing techniques.
Eye tracking has the potential to outperform manual interaction .
While gaze input allows high-speed selection, it lacks the necessary accuracy to interact with standard user interfaces.
MAGIC pointing combines eye tracking with a manual input device to achieve both high-speed and accurate interaction .
However, to the best of our knowledge, previous research in MAGIC pointing did not achieve a significant improvement over the mouse in a desktop setting.
Liberal and Conservative MAGIC were developed by Zhai et al as the first two MAGIC pointing techniques .
Liberal MAGIC continuously warped the cursor near gaze center whereas Conservative MAGIC  triggered warping on the onset of a manual hand-motion.
CM has a clear usability advantage as the cursor does not move against user's intention.
In that sense, our proposed Animated Magic  method is inspired by CM.
The two methods are further contrasted in the Implementation section.
When Hutchings analyzed Fitts' Law using multiple monitors in , it was shown that it takes users a longer time to make a selection, starting from one monitor ending in the other, when there is a physical gap between two monitors.
The essential abrupt-warping of the cursor that occurs when it jumps from one monitor to the other is similar to what happens during a selection task with CM.
While we prefer CM over Lib-
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Drewes et al avoided the abruptness of the warping by introducing a touch sensitive mouse to MAGIC pointing.
The user would touch the mouse prior to the selection task, intentinally warping the cursor near gaze center.
However, this approach introduces an additional input channel, the mouse touch, to the intreaction.
It would be more preferable to design a MAGIC pointing method that does not alter the way users normally interact using a traditional mouse.
Fares et al developed a method that dynamically adjusts cursor sensitivity based on the distance between gaze and cursor locations .
The sensitivity is reduced when the distance between the cursor and gaze center is small, and increased when large.
We learn from the work of Fares et al that adjusting the cursor speed during a selection might be better than an abrupt warping, as the user would not lose sight of the cursor's location.
However, adjusting only the speed of the selection could cause a side-effect in the case when the user misses and the cursor skips past the target; The sensitivity would start increasing, as the distance between the cursor and the gaze center grows, causing amplified over-shoots.
In Animated MAGIC , we not only increase the cursor speed during selection, but also correct the movement direction toward gaze center.
However, an inherent drawback of all MAGIC pointing techniques is that eye-tracking accuracy is less than optimal, and deteriorates over time.
Without highaccuracy eye-tracking, MAGIC will guide the cursor in the wrong direction.
Jacob introduced Local Calibration in order to manually correct eye-tracking accuracy .
First, the user brings to cursor to a location on screen where eye-tracking accuracy is low.
Then, the user performs a mouse-click while staring at the cursor.
The difference between the cursor location and gaze position is recorded as a local calibration vector.
Multiple local calibration vectors are generated on different points on the screen as needed.
Finally, the reported gaze position is corrected based on nearest local calibration vector.
Dynamic Local Calibration , i.e.
To improve eye-tracking accuracy, we implement a DLC method that automatically corrects and stabilizes eye-tracking accuracy, and incorporate it into both CM and AM in our experiments.
In the initial MAGIC pointing paper , CM was implemented using an isometric joystick.
We slightly attuned CM in order to make it work with a mouse.
In the original CM, the cursor jumps to a point on the circumference of the inner zone from where the hand-movement vector would point to the reported gaze center.
This allows for a strategy where the user can always move the manual input device in the same direction, regardless of where the cursor position or the target is.
However, as suggested by the developers of CM, this intelligent bias is not suitable for use with a mouse, since it would constantly get off the mouse pad.
Thus, the intelligent bias is removed from CM, so it warps the cursor to the nearest point on the circumference of the inner zone.
AM is similar to CM in that the goal is to move the cursor to the vicinity of the target as soon as hand movement is initiated.
The difference between the two methods is in the way the cursor is moved to its destination.
In CM, the cursor abruptly jumps to the reported gaze center, whereas in AM the cursor swiftly travels pixel-by-pixel toward its destination.
Unlike CM, the cursor never disappears in AM.
Figure 1 illustrates a simple target-acquisition by AM.
While CM provides a higher movement speed by immediately teleporting the cursor near the target, AM ensures users can always perceive the cursor in their periphery.
The reduced movement speed in CM could be compensated by eliminating the time spent looking for the cursor after it jumps to another location in the screen.
The cursor movement made by manual input is automatically adjusted to quickly  and, depending on the eye-tracking quality, accurately move toward the target.
Even if the user moves the mouse slowly, the cursor will still move at a fast speed, and even if the user moves the cursor in the wrong direction, it will be bent towards the target.
For both Conservative MAGIC  and Animated MAGIC , two invisible circler zones with radii of 3.0 and 6.0 , named inner zone and outer zone respectively, are created around the reported gaze center as in Figure 1.
When the user initiates a hand movement outside zone 2 , the cursor is teleported to the nearest point on the inner zones circumference.
The outer zone provides a hysteresis mechanism, protecting from multiple warpings of the cursor due to jittery gaze input.
For each local calibration point an offset vector is recorded by subtracting the cursor position from the gaze center.
Offset vectors of magnitude greater than a set threshold  are discarded in case the users clicks the mouse while looking away from the cursor.
In order to utilize a finite number of offset vectors, the screen is divided into an n rows and m columns, creating a grid with n x m sections.
For each section, we sore the most recent offset vector, or 0 if none available.
For consistency, we used the identical questionnaire from a recent thorough MAGIC pointing study .
At the end of each session, users rated the speed, accuracy, ease of learning, ease of use, intuitiveness, task-driven use and overall satisfaction of the interaction techniques on a 5-point Likert scale .
The experiments were run on a dual core  machine with 4.00 GB RAM.
A chin rest, placed 28.3" from the screen, was used to stabilize tracking.
In order to evaluate the performance and usability of Animated MAGIC , we compare it to Mouse-Only  and Conservative MAGIC .
In addition, we incorporate an 8 x 6 DLC into both AM and CM, forming AMDLC and CMDLC respectively.
20 Computer Science and Computer Engineering students from Texas State University, between the ages of 18 and 36 , were tested using a 2D Fitts' Law experiment as described in .
17 targets were displayed consecutively for each task.
AM and CM methods were individually grouped with their corresponding DLC variations, creating session groups 1 and 2 respectively.
MO was treated as session group 3.
The testing order of the session groups was balanced by varying all combinations of session groups.
In addition, the order of testing within session groups 1 and 2 were alternated for each subject.
For example, if the first user completed AM before AMDLC , then the second user completed AMDLC first.
Each subject completed a training session for AM and CM.
Then, one recording session was completed for each method.
Eyetracking calibration was performed at the beginning of each session.
We analyze the performance and usability of all five methods.
All movement times were within 3 standard deviations from the mean for a given session.
Thus, no data points were removed from the analysis.
The results show that MAGIC pointing methods perform better than MO, and DLC improves both CM and AM.
The usability ratings of all methods were comparable.
We report the Anova results in Figures 2 and 3.
Due to limited space, we report only some of the paired t-tests of throughput comparisons in table 1.
For the Anova results, we apply Bonferroni correction and look for p < 0.01 for statistical significance rather than p < 0.05.
Throughput was calculated using the mean of means method described in .
Figure 2a shows that DLC improved both MAGIC pointing methods.
CMDLC and AMDLC outperformed the mouse in terms of throughput by 5.0% and 8.1% respectively.
Using throughput as the sole performance measure may be problematic .
Thus, we also report the movement times and error rates.
Figure 2b illustrates the average movement times of all five methods.
MO had the longest average movement time along with CM whereas AMDLC had the shortest.
There was no statistically significant difference between the error rates as shown in Figure 2c.
This is most likely because all 5 interaction methods behave the same when the cursor is close to target.
CM had the highest error rate whereas MO and AM had the lowest.
All MAGIC pointing methods reduced hand movement by more than 50% as shown in Figure 2d.
CM and CMDLC showed greater reductions than AM and AMDLC did.
This was expected since the user makes some hand movement in AM while the cursor is being moved towards the target.
Whereas in CM, the cursor immediately teleports to its destination.
At the end of each session, we asked users to rate six usability measures and the overall satisfaction for the interaction methods on a scale of 1 to 5.
Figure 3 shows the usability ratings by the users.
The only statistically significant difference was that MO was rated lowest in terms of speed with a score of 3.4, whereas CMDLC was rated fastest with 4.4.
Interestingly, MO did not get highest ratings for any usability measure.
MSDLC was rated higher than MO for all usability measures except for ease of learning.
We introduced a novel MAGIC pointing method  that improves the throughput of mouse-only  interaction in a desktop setting without sacrificing its usability.
With the development of affordable and unobtrusive eye trackers, MAGIC pointing can become a better alternative to the manual-only interaction.
In addition, the more-than-half reduction in hand movement could provide major health benefits.
For the design of future MAGIC pointing techniques, we suggest the incorporation of DLC.
It has an easy implementation, and can be applied to any MAGIC pointing method.
However, the formulation of DLC presented in this paper may not be well suited for an unbalanced distribution, or a large number, of calibration points.
In our future work, we intend to explore other approaches such as 3D surface fitting.
