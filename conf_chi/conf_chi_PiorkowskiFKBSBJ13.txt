One of the least studied areas of Information Foraging Theory is diet: the information foragers choose to seek.
For example, do foragers choose solely based on cost, or do they stubbornly pursue certain diets regardless of cost?
Do their debugging strategies vary with their diets?
To investigate "what" and "how" questions like these for the domain of software debugging, we qualitatively analyzed 9 professional developers' foraging goals, goal patterns, and strategies.
Participants spent 50% of their time foraging.
Of their foraging, 58% fell into distinct dietary patterns--mostly in patterns not previously discussed in the literature.
In general, programmers' foraging strategies leaned more heavily toward enrichment than we expected, but different strategies aligned with different goal types.
These and our other findings help fill the gap as to what programmers' dietary goals are and how their strategies relate to those goals.
Furthermore, the theory has spawned principles for the design of interfaces and tools that help people forage .
One area of potential for IFT that so far has been mostly untapped is using the theory to understand the diets of predators in a particular problem domain--that is, to understand the types of information goals those predators desire.
A notable exception is Evans and Card , who investigated the diets of web users who were "early adopters."
They discovered that these users' diets were considerably different from the information commonly provided by mainstream news sites, and they identified the niche topics that made up the users' diets.
They also noted that the information sources chosen by these users reduced the cost of attention by lowering the cost of social foraging and social interpretation.
Clearly, these findings have strong implications for the design of sites to support such users.
The Evans and Card work demonstrates the potential benefits of applying information foraging ideas to understand the diets of people in particular contexts.
Inspired in part by the Evans/Card paper, our work aims to expand our understanding of IFT diets by investigating the diets of professional software developers engaged in debugging.
Work in the software engineering  literature has investigated related ideas, such as the questions that programmers ask , but that work was not grounded in a theory, such as IFT.
Thus, by investigating the information diets of professional programmers from an IFT perspective, our work aims to help bridge the gap between such results from the SE literature and the IFT foundations and results from the HCI literature.
For an understanding of the "whats" of diet to be truly useful, we also need to understand the "hows".
Toward this end, we also investigate, from an IFT perspective, the strategies that programmers use during foraging.
The literature contains numerous works on program debugging strategies , but these have not been tied to IFT.
We believe that such strategies both influence and are influenced by programmers' diets, and this paper investigates these ties.
Thus, in this paper, we address the following research questions with a qualitative empirical study.
The theory is based on the idea that humans seek information in a manner analogous to the way animals seek food in the wild.
In short, it states that a human information predator seeks information prey by following information scent through an environment.
In this model, the role of IFT is central.
In fact, in Grigoreanu et al.
In the software engineering community, there has been recent research focused on supporting the questions programmers ask , and these questions can be viewed as surrogates for programmers' information goals.
The software engineering analyses and tools have not been grounded in theory, but their empirical success shows that they are useful.
A premise of this paper is that IFT may be able to provide a richer, more cohesive understanding of programmers' information seeking behaviors than atheoretic efforts.
Recently, we and a few others have begun investigating the efficacy of using IFT to understand programmer information-seeking .
However, that work focused only on how programmers respond to cues.
This paper instead investigates the whats and hows of their diets, i.e., the relationship between programmers' information goals and debugging strategies.
Information foraging theory is a theory of how people seek information during information-intensive tasks .
IFT was inspired by biological theories of how animals seek food in the wild.
In IFT, a predator  pursues prey  through a topology .
What information constitutes valuable prey depends on the predator's information goals.
Predators find prey by following information scent that they infer from cues in the environment, such as the labels on buttons or clickable pictures that adorn navigation options.
Thus, the scent of a cue is the predator's assessment of the value and cost of information sources obtained by taking a navigation option associated with that cue.
The focus of this paper is predator diet, that is, the variety of information types that a predator consumes.
A predator's information goals define his/her "ideal" diet, but what predators actually consume depends also on what is available in the environment and how costly the information is to obtain.
The relationship between cost and diet in IFT is explained well by Anderson's notion of rational analysis, which is based on the idea that humans tend toward strategies that optimally adapt to the environment .
To help satisfy their diets, predators commonly engage in enrichment, that is, transforming the environment to facilitate foraging.
For example, by searching on the Web, the predator enriches the environment by creating a new patch of search results, which could potentially satisfy some or all of the predator's information goals.
In addition to using search tools, other examples of enrichment include writing a to-do list on a piece of paper and running a test on a program to create a patch of relevant program output.
The earliest IFT research was in the domain of user-web interaction.
For example, computational models based on IFT have successfully predicted web foraging behavior .
IFT has gone on to inspire practical principles and tools for designing web sites and user interfaces .
To investigate our research questions, we analyzed a set of nine videos we collected in a previous study of professional software developers debugging in an Eclipse environment .
In that study, the developers used the usual Eclipse tools, plus a new IFT-based code recommender tool powered with a variety of recommendation algorithms.
This setup is consistent with real-world scenarios in which developers work on unfamiliar code, such as a new team member being brought "onboard" a project, a developer on a team needing to work on code that another team member wrote, or a newcomer to an open-source project.
To summarize the study setup, each video included screencapture video, audio of what the participant said, and video of the participant's face.
Participants "talked aloud" as they worked.
Their task was to fix a real bug in the jEdit text editor, a mature open source project.
None of the participants had seen the jEdit code before, and with 6468 methods, it provided a large information space in which to forage.
The bug was from an actual bug report  and regarded a problem with deleting "folded" text.
Each debugging session lasted two hours with a short break halfway through.
No participants completed the task, and all exhibited instances of foraging throughout the two hours.
We used a qualitative, multi-part coding approach to analyze these videos.
First, we segmented the videos into 30second intervals, resulting in roughly 70 segments per video.
We then coded each segment to identify  instances of foraging,  participants' infor-
To enhance generalizability, these code sets were drawn from prior studies, as we describe below.
To ensure reliability, we followed standard inter-rater reliability practices.
Two researchers first worked together on a small portion of the data to agree on coding rules.
They then independently coded 20% of the segments to test the agreement level.
We computed agreement using the Jaccard index, as it is suitable when multiple codes are allowed per segment, as in our case.
We performed a separate coding pass  for each code set.
For each pass, agreement exceeded 80%, so the two researchers then divided up the coding of the remaining data.
We chose the Sillito questions for several reasons.
First, they are a good fit for the program-debugging domain, because they categorize information needs specific to programmers.
Second, they seem generalizable to a broad range of programming languages and environments, since Sillito et al.
Third, they are consistent with information goals identified in other studies from both programming and non-programming domains .
Finally, they are specific and low-level, enabling a code set with the potential for high inter-rater reliability.
We coded each participant utterance in the foraging segments  to one of Sillito's questions.
We also included a code of other goals, for utterances that did not match any of the questions.
Using this scheme, two coders achieved 80% agreement on 20% of the data, and then split up the rest of the coding task.
The coding resulted in 384 goals coded using the Sillito question codes and 286 other goals.
About one fourth of the utterances coded other were similar to one of the Sillito questions, but were not a precise match, so for reasons of rigor, we did not include them.
The remaining other goals were about concepts 
To code whether a participant showed evidence of information foraging within a 30-second segment, we used a two-part coding process.
First, we segmented around participants' utterances and coded the segments.
The codes were foraging-start, foraging-end, and foraging-ongoing.
This code set was inspired by the scent-following code set used in , but ours focused only on whether or not foraging occurred, and not whether scent was lost, gained, etc.
We coded an utterance as foraging-start when participants stated an intention to pursue a particular information goal and then took accompanying action to seek that goal, like searching.
We coded an utterance as foraging-end when participants stated that they had learned some information, or expressed giving up on a goal.
We coded an utterance as foraging-ongoing when participants restated a previously stated goal, or said they were still looking for something.
In the second part of the coding process, we used the utterance codes from the first part to code each 30-second segment as foraging or non-foraging.
A segment was foraging if it had an utterance coded as foraging-start, foragingongoing, or foraging-end, else it was non-foraging.
Also, to include segments in which a participant may not have explicitly made an utterance, we also coded segments in between foraging-start and foraging-end utterances as foraging.
However, some segments were exceptions.
If a participant clearly never foraged during a segment, we coded the segment as non-foraging.
Non-foraging activities included configuring Eclipse or reasoning aloud about the task.
Using this coding scheme independently, two researchers achieved 82% agreement on 20% of the data before dividing up and individually coding the remaining data.
To investigate how information goals relate to each other, we categorized the information goal data into the five patterns in Table 2.
Four of the patterns  came from literature suggesting progressions in these sequences .
The fifth pattern, Repeat, emerged as a common pattern during the course of our analysis.
Following the Table 2 definitions, we used a greedy patExamples of Sillito questions #2: Where in the code is the text of this error message or UI element?
2-build: Sillito #14: Where are instances of this class Build on those questions created?
3-group: Sillito #22: How are these types or objects Understand a questions related?
4-groups: Sillito #35: What are the differences between Understand questions these files or types?
Information goal types with examples .
We based the Information Goal code set on Sillito et al.
We coded the 30-second segments against the 44 questions, and then grouped them into the four types for presentation brevity.
Table 1 lists the types, with a few examples -3-
We did not allow matches that contained a gap of 5 or more minutes  between goal utterances or contained an interruption/intervention, such as the between-session break.
We permitted overlapping patterns, except for instances of Oscillate completely contained within a Stairstep or Pyramid, and for instances of Stairstep completely contained within a Pyramid.
We omitted Oscillate and Stairstep instances in these cases, because they were essential components of the containing patterns.
A single author performed this analysis because the definitions were objective and the analysis automatable.
To code participant strategies, we reused Grigoreanu et al.
We chose these strategy codes because, while being specific to the program debugging domain, each also maps cleanly to one of the three key foraging activities : within-patch foraging, betweenpatch foraging, and enrichment.
Table 3 lists the strategy codes grouped by type of foraging activity.
The Within-Patch strategies all involve looking for information within the contents of a single patch, such as in a Java method or web page.
The Between-Patch strategies all involve navigating between different patches by selecting and clicking links, such as those provided by the recommender tool.
The Enrichment strategies all involve manipulating the environment to facilitate foraging, for example, by creating a new patch of search results.
For each segment, we looked for evidence of the participant applying each strategy using indicators such as those shown in Table 3.
A segment could have multiple strategy codes.
Using this scheme, two coders achieved 80% agreement on 28% of the data, and then divided up the remaining data.
Each definition is a regular expression of Goal Type instances .
We omit Type 4s next to Type 3s because 4 never followed 3 in our data.
Strategy Example Indicators Within-Patch Strategies Specification Looking for info by reading within the bug checking description Spatial Looking for info by reading through the list of package contents in the Package Explorer Code inspec- Looking for info by reading within a Java tion code file File inspecLooking for info by reading within a non-code tion file, such as a Java properties file Seeking help- Looking for info by reading within the jEdit Docs documentation Between-Patch Strategies Control flow Following control dependencies Dataflow Following data dependencies Feedback Following method links from the recommendfollowing er tool Enrichment Strategies Code search Creating a patch of search results with the Eclipse code search utility Testing Creating a patch of program output or internal state to inspect To-do listing Writing notes on paper Seeking help- Creating a patch of search results with an  web search for info on bug/code Table 3.
Debugging strategy code set  with example indicators for each strategy.
Participants spent a large fraction of their time, ranging from 38% to 71%, foraging for information.
As Table 4 shows, participants spent 50% of their 2-hour sessions foraging on average.
We were unable to find prior measures of programmer foraging with which to compare this result, but Ko et al.
Their programmers spent 35% of the time on "the mechanics of navigation between code fragments" .
Even our participant who foraged the least still did so more than 35% of the time.
Despite their dietary diversity, the progression of information goals that participants pursued often followed certain patterns .
Eight of the nine participants displayed one or more of the patterns, and 58% of segments in which a participant expressed a goal were part of a larger pattern.
Participants exhibited a median of 1.5 patterns each, with P6 exhibiting all five.
For example, P6's use of the Restart pattern at the end of a Stairstep is shown in the Figure 1e example.
The Restart occurred when his Stairstep progression culminated in gaining the information he sought about the handleMessage method's relationship to the editor :
Some of these patterns were predicted by the literature.
Other empirical studies have found a similar progression from 1-initial to 2-build, including our previous work on information foraging during debugging  , and earlier work on how people seek information in web environments .
Furthermore, the notion of progressing from Type 1-initial to 2-build to 3-group to 4-groups is consistent with prior results from applying Pirolli and Card's sensemaking model  to intelligence analysts and to end-user debuggers .
However, participants did not usually organize their foraging in the ways suggested by the above literature: Stairstep, Pyramid, and Restart together accounted for only 22% of the pattern segments.
In fact, only four of the participants used any of them at all!
This finding suggests that idealized progressions outlined in prior research miss much of how programmers forage for information in code, at least in the widely used Eclipse environment.
In contrast to the patterns from the literature, the Repeat pattern, which emerged from our study, occurred frequently.
In Repeat, a participant spent extended periods following one information goal type.
6 of the 9 participants exhibited this pattern--greater usage than any other pattern.
Why did participants exhibit the above patterns?
To answer this question, we need two pieces of information: what strategies they used for their foraging, and how those strategies came together with their goals and goal patterns.
We discuss each of these in turn in the next two sections.
Since much of the prior IFT research has focused on between-patch scent following , we were surprised that only 24% of participants' foraging fell into that category.
Participants spent considerably more time foraging within patches and performing enrichment.
As Table 7 shows, participants used a diverse mix of strate-5-
Spatial was the participants' primary Within-Patch strategy; Control Flow was their primary Between-Patch strategy; and Code Search and Testing were together  their primary Enrichment strategies.
Enrichment is an activity wherein the predator changes the environment to facilitate foraging .
The participants changed their environments in two ways.
Code Search, Seek Help-Search, and To-Do Listing involved creating a patch of links to other patches for the predator to navigate.
In contrast, Testing involved creating patches of information content for the predator to process.
Most participants strongly favored one or the other of these types of enrichment strategies.
In particular, they either favored creating patches of linked search results with Code Search, or creating patches of runtime state information with Testing.
In fact, over half of the participants used only one of Code Search or Testing.
For example, Participant P7 used Code Search repeatedly, trying to find methods that implemented line deletion and folding in jEdit:
Despite prior findings about users' preference for searching , four of the nine participants used neither Code Search nor Seek Help-Search.
This lack of searching cannot be because the task was too easy  or the code base was too small .
However, earlier findings on web information processing  may explain this result.
Hearst points out that, in many cases, browsing works better than searching because it is mentally less costly to recognize a piece of information than it is to recall it, and recall is often needed to formulate an effective search query.
Consistent with Hearst's observation, every participant used the Code Inspection strategy.
Table 9 and Figure 2 tie all 12 of the strategies back to the participants' dietary goals.
As the table and figure show, some strategies were strongly tied to particular goal types.
For example, Specification Checking was used only for Type 1-initial goals, and Code Inspection was used primarily for Type 2-build goals.
Figure 2 shows that participants used Code Search  and Spatial  more than the other strategies with their Type 1-initial goals.
From a patch perspective, Spatial seemed particularly suited to helping participants cope with large patches, and Code Search with large spaces of patches.
Participants tended toward different strategies for the Type 2-4 goals, which express progressively deeper relationships among code entities.
For example, Figure 2 shows the shift away from Code Search and Spatial, and toward Code Inspection  and Control Flow  for Type 2-build and Type 3-group goals.
Testing in particular  increased markedly from Type 2-build to Type 4-groups goals.
Considering participants' goal patterns in the context of their strategies  sheds additional light on why the patterns emerged.
Strategy usage by goal types.
Gray highlights the maximum strategy usage for each goal type.
The overall total  is greater than the total foraging segments  because some segments contained multiple strategies.
The total for Seeking Help-Search was 0 because none of the strategy's 4 instances co-occurred with a goal statement.
Pattern Repeat, repeated pursuit of a single goal type, was also characterized by repeated participant use of a constant handful of strategies.
The Repeat instances occurred in two cases.
In one case, participants' debugging strategies were producing the desired goals efficiently, i.e., at such low cost to the participants that staying with that goal type and strategy was a good way to optimize their costs.
In the other case, their strategy for that goal type was so ineffective, they needed a long time to fulfill that type of dietary need.
As an example of the first case, P7 followed the Repeat pattern on Type 2-build goals using three strategies continuously: Spatial, Code Inspection, and Control Flow.
P7 used these features to efficiently fulfill his Type 2-build goals, and fulfilled multiple goals, often building from one goal to the next using the same strategies.
When participants followed the Repeat pattern on goals of Type 1-initial or of Type 4-groups, their strategies were still constant, but not as fruitful.
In the cases involving Type 1initial, participants used Code Search  and Spatial  extensively, but not particularly fruitfully, looking for a place to start.
For example, Figure 3 shows P3 repeatedly using Code Search to find an initial starting point.
Likewise, in P11's use of Repeat on his Type 4-groups goals, he used Testing across numerous segments of the pattern, trying to understand the relationship between changes he had made and the rest of jEdit's functionality.
He pieced the information together by laboriously gathering it in small bits, one execution of the program at a time.
Java search, in the workspace, a method including `delete.'
9:00: So one of the things I'm looking to do is open a fold, so if I ask for methods about methods can methods involving folds or even better, opening a fold.
18:00: I would imagine that I would look for the word delete perhaps, especially given that that's the terms that's used in the menu, but I um I think I'll try again.
For the participants who followed the Oscillate pattern on Type 1-initial and 2-build goals, the story was similar to Repeat on Type 1-initial, except the oscillators tended to seek additional information from their search results.
In particular, the oscillating participants would typically do a code search, explore the results a bit, decide they were on the wrong track, and return to searching.
Unlike the Repeat pattern, the participants we observed within the Oscillate pattern switched strategies rapidly along with their goals.
Figure 4 illustrates this behavior for P6.
27:00: If I could search across the text--I'm sorry, search through all the source code and found out delete lines, then I would be able to --I should be able to find where and what that function is called.
37:00: I am going to look for references show me all references to deleteLineLabel.
How can I figure that out?
26:00: I am looking for a concrete class, not a abstract class .
27:00: If I look for references to the abstract class it will show me someone who implements this class.
28:00: So I don't think that search helped me understand who implements the EditAction class.
Well I guess I could start with main and start debugging from that.
Table 10 suggests that Enrichment tended to drive the interrelated Pyramid , Restart , and Stairstep  patterns.
Participants following the Pyramid pattern used the Enrichment strategies of Code Search and Testing equally often, but P6's instances of Stairstep and Repeat were characterized by almost exclusive use of the Code Search strategy.
All three patterns were characterized by rapid goal fulfillment followed by a rapid switch to the next goal.
This rapid fulfillment and initiation of the next goal type is consistent with our previous findings pointing to the reactiveness of foraging in this domain .
This brings us to the particular strengths of different strategies.
Refer back to Table 8; the rightmost  columns include the goal types and patterns we have just discussed for the most-used foraging strategies.
As the table shows, certain classic debugging strategies were used heavily in foraging but often were concentrated into dietary niches.
For example, Code Inspection and Feedback Following were generalists--used by everyone, but not the top in any particular IFT category, any goal type, or any pattern.
32:30: Let's look and see the references to this constructor.
33:30: There are no references for the constructor for the main class what does this mean?!
34:00: There must be some public methods here.
So, let's search for public.
However, our methodology was designed to strengthen generalizability through the use of code sets and methodological conventions from other pertinent studies , and through the use of realistic elements: The software project was a real open source project; the bug was from a real bug report; the participants were experienced professionals  using a popular IDE; and the participants worked alone on fairly long tasks .
Turning to the Between-Patch strategies, participants applied Control Flow  for all goals that involved understanding relationships between code entities .
The proportion of participants who used the strategy relative to other strategies held steady, whether they were building up a basic understanding about a code entity  or understanding complex inter-relationships among groups of entities .
Participants used the two most frequently used Enrichment strategies, Code Search  and Testing , for different purposes.
They used Code Search heavily for finding initial starting places and building upon them .
In contrast, they favored Testing for acquiring more complex information about the relationships between entities and between groups of entities .
Participants' goal patterns reveal a close relationship between these Enrichment strategies and many of the goal patterns in Table 2.
For example, participants who followed Repeat on Type 1-initial goals and who followed Oscillate on Type 1-initial and 2-build goals were generally using Code Search  repetitively , looking for code relevant to the bug to investigate in more depth.
Similarly, participants who used Repeat on Type 4-groups goals were generally Testing  by repetitively stepping through executions of the program over and over to build up information about the program's internal execution state.
Overall, Enrichment strategies were heavily used in all patterns.
Participants' dietary needs varied greatly.
This variety was not only between participants, but also within each participant's session from one moment to the next.
Our participants' diverse diets are reminiscent of the highly varied and personal diets reported by the Evans/Card study .
Evans and Card attributed this finding to a "long tail" demand curve, in which an abundance of available information makes it possible for people to satisfy their own individual, even quirky, desires for information.
However, in the Evans/Card study, people foraged as part of their own individual tasks.
Interestingly, we saw the same phenomenon with our participants, even though they all had the same overall goal .
The participants' sometimes stubborn pursuit of particular information goals--tolerating very high costs even when their efforts showed only meager promise of delivering the needed dietary goal--highlights an important difference in the software domain versus other foraging domains: Programmers' dietary needs are often very specific.
For an information forager on the Web, one dictionary page is often as good as another.
But for a programmer trying to fix a bug, only very particular information about very specific code locations will help them in their task.
This high dietary selectiveness in this domain may explain the high costs programmers were sometimes willing to pay.
In this paper, we considered what programmers want in their diets and how they forage to fulfill each of their dietary needs.
Some results this diet perspective revealed were: RQ1 : * Diversity: Even though all participants were pursuing the same overall goal , they sought highly diverse diets.
This suggests a need for debugging tools to support "long tail" demand curves of programmer information.
RQ2 : * Foraging strategies: Participants spent only 24% of their time following between-patch foraging strategies, but between-patch foraging has received most of the research attention.
This suggests a need for more research on how to support within-patch and enrichment foraging.
Our results identified particular strategies that participants preferred for certain information goals.
Of the 12 strategies we coded, 6 dominated, but in different ways.
Among the Within-Patch strategies, two strategies, Spatial  and Code Inspection , showed distinct associations to particular goal types.
Spatial was ubiquitous across all goal types--it seemed that there was almost always some patch of information that a participant could scan.
In contrast, Code inspection was particularly tied to Type 2-build and 3-group goals.
Apparently, participants tended not to read code in detail when looking for an initial place to start  or when trying to understand more complex relationships among groups of entities .
Instead, they dug into the code only when they needed information about more basic relationships .
RQ3 : * Strategies' diet-specificity: Some foraging strategies were of general use across information goal types, but others were concentrated around particular dietary niches.
This suggests tool opportunities; for example, tools aimed at supporting a particular strategy may be able to improve performance by focusing on the strategy's dietary niche.
This emphasizes a key difference between software development and other foraging domains: the highly selective nature of programmers' dietary needs.
As Evans and Card summarize from Simon: "For an information system to be useful, it must reduce the net demand on its users' attention" .
Our results suggest that the diet perspective can help reveal when programming tools help to reduce this net demand--and when they do not--during the 50% of debugging time programmers spend foraging.
The numbers on the bottom of the figure refer to the following 44 questions from Sillito et al.
Which type represents this domain concept or this UI element or action?
Where in the code is the text in this error message or UI element?
Where is there any code involved in the implementation of this behavior?
Is there a precedent or exemplar for this?
Is there an entity named something like this in that unit ?
What are the parts of this type?
Which types is this type a part of?
Where does this type fit in the type hierarchy?
Does this type have any siblings in the type hierarchy?
Where is this field declared in the type hierarchy?
11. Who implements this interface or these abstract methods?
Where is this method called or type referenced?
When during the execution is this method called?
Where are instances of this class created?
Where is this variable or data structure being accessed?
What data can we access from this object?
What does the declaration or definition of this look like?
What are the arguments to this function?
What are the values of these arguments at runtime?
What data is being modified in this code?
How are instances of these types created and assembled?
How are these types or objects related?
How is this feature or concern  implemented?
What in this structure distinguishes these cases?
What is the behavior these types provide together and how is it distributed over the types?
What is the "correct" way to use or access this data structure?
How does this data structure look at runtime?
How can data be passed to  this point in the code?
How is control getting  here?
Why isn't control reaching this point in the code?
Which execution path is being taken in this case?
Under what circumstances is this method called or exception thrown?
What parts of this data structure are accessed in this code?
How does the system behavior vary over these types or cases?
What are the differences between these files or types?
What is the difference between these similar parts of the code ?
What is the mapping between these UI types and these model types?
Where should this branch be inserted or how should this case be handled?
Where in the UI should this functionality be added?
To move this feature into this code what else needs to be moved?
How can we know this object has been created and initialized correctly?
What will be  the direct impact of this change?
What will be the total impact of this change?
Will this completely solve the problem or provide the enhancement?
