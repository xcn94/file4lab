Exploring information content on mobile devices can be tedious and time consuming.
We present Around-Device Binning, or AD-Binning, a novel mobile user interface that allows users to off-load mobile content in the space around the device.
We informed our implementation of ADBinning by exploring various design factors, such as the minimum around-device target size, suitable item selection methods, and techniques for placing content in off-screen space.
In a task requiring exploration, we find that ADBinning improves browsing efficiency by avoiding the minute selection and flicking mechanisms needed for onscreen interaction.
We conclude with design guidelines for off screen content storage and browsing.
This may be possible with the next generation of mobiles that can sense user input around the device, in thin air .
Shifting input intensity away from the screen, into a much larger space around the device, provides larger proxy objects for interacting with smaller on-screen items, minimizes the likelihood of having the input hand occlude important screen content, and reduces the need for frequent repetitions of small on-screen manipulations.
We propose and study this idea by introducing Around-Device Binning, or AD-Binning .
Mobile devices are popular portals for interacting with large information repositories.
Estimates suggest that over 40% of smartphone owners browse and research products on their mobiles before making a purchase, 60% of last minute hotel bookings are made on portable devices, and search on mobiles will generate 27.8 billion more queries than on desktops by 2016 .
Tasks with high information bandwidth often require that users quickly browse and compare the breadth of available choices before making a decision.
On mobile interfaces such tasks require many minute operations, such as flicking through screens, and opening and closing items of interest, resulting in less efficient information exploration and browsing.
Ideally, mobile devices could be augmented with a virtual interactive plane that extends beyond their physical form factor for storing, browsing and retrieving data.
While the space around a mobile device can be leveraged for different purposes , our contribution is in the design of an interactive method, AD-Binning, for directly storing and retrieving virtual content around the device.
In a task requiring content browsing for making a decision, participants were more efficient with AD-Binning than with on-screen exploration.
This improvement was a result of a systematic design process addressing questions such as:  what are suitable methods for placing items off-screen?
AD-Binning is inspired by earlier work demonstrating that around-device input is valuable for interacting with small form-factor devices  and for extending the input vocabulary of mobiles .
Device manufacturers are considering adopting around-device sensing methods in the next generation mobile devices .
Unlike most prior work on around-device interaction , we focus on direct interaction with off-screen content.
Such an interaction style presumes that the mobile's interaction plane extends beyond the physical boundaries of the device  and users can directly point to retrieve items.
Prior work on a class of interactions involving around-body input  suggests that users can leverage their spatial abilities to efficiently recall items through mid-air pointing.
We expect similar benefits for AD-Binning.
We examine additional prior work to frame AD-Binning's design factors.
Space discretization for bins: Closely tied to the input range and target size is the method for breaking up the arounddevice space into bins, or space discretization.
With auxiliary input streams  input discretization leads to better control .
Due to the bio-mechanical limits of the arm and difference in control at extreme arm ranges we examine the effect of applying different discretization methods to the task of placing and retrieving around-device items.
Input range around the device: The bio-mechanical properties of the human arm dictate that on average users can extend their arm to about 60cm , limiting how many items can be placed off-screen.
Little is known about this range when the arm moves around the device, i.e.
We capture this range in a pilot prior to our studies.
Ideal binning locations: Prior work has shown that pointing at items placed in corners around the device is less effective and accurate than pointing at items to the sides .
These results were not obtained by evaluating the entire range for placing items and therefore more knowledge of ideal locations can assist in the design of AD-Binning.
Binning methods: Spatial memory and proprioceptive feedback can assist in retrieving information that is laid out spatially .
Ideally, information can be placed, or binned, using techniques that leverage this capability.
Mode switching: AD-Binning requires mode switching to differentiate around-device input from other accidental gestures in space.
Mode switching could be explicit, wherein the user sets the device in bin-mode as needed.
Alternatively, advanced sensing mechanisms could distinguish users' fingers in space separately from other items around the device.
We do not examine mode switching mechanisms in this paper.
Several key factors influence the design of AD-Binning.
We explore these factors in relation to prior work.
Selection methods: AD-Binning allows users to explore content by letting the user move their finger in the space around the device.
This facilitates rapid item browsing.
However, a selection is required to retrieve an item and put it into focus for more details.
Researchers have designed similar mechanisms for triggering a selection when iterating through items using auxiliary input channels such as pressure and tilt.
These include dwelling on an item , quickly releasing a button  or lifting the finger .
AD-Binning facilitates item selection through two general methods: interaction on the device for triggering selection  or micro-gestures in mid-air around the device.
We investigate the suitability of both these methods.
Bin size: AD-Binning relies on direct off-screen pointing to place and retrieve items, a task influe nced by Fitts' law .
However, AD-Binning provides the advantage that items around the device can take on large sizes to compensate for the small size commonly seen on mobile devices.
However, little is known of how small targets can be without affecting performance with this technique.
We investigate suitable bin sizes to facilitate accurate selection.
Visual feedback: To get rapid and accurate access to around-device items, effective on-screen cues are need to point at  off-screen items  and  the user's moving finger.
Overviews of the entire workspace have shown slightly better performance for direct off-screen pointing  than visual cues such as Wedge .
The differences between these visual techniques are affected by regions in which off-screen items are placed .
Our design of AD-Binning uses an overview to show relative item positions and the user's finger in AD -Space.
In our work, we assume that finger tracking in 3D around the device will become possible .
We emulate such a system using a Vicon MX system with eight cameras  to track participants' hand movements .
A Windows Presentation Foundation server application transferred tracking data every 10ms from the Vicon over Wi-Fi to the experimental software  running on the smartphone.
Advised by previous work  on how performance  drastically suffers as the input space extends from 2D to 3D, our current implementation of AD-Binning only considers the space defined by the plane around the device: all interactions above or below the plane  are projected on the interaction plane .
Future work will investigate the use of 3D space to layer items.
To determine AD-Binning's input range we asked two female and four male adults  to hold a smartphone in their left hand and to `draw' a half-circle around the device with their right hand, going from the left to right, and then back again five times.
Participants were asked to perform without reaching their maximum distance.
More than five sectors results in to small items in the inner circle, leading to inefficient selection in these regions.
Our exploration was based on these design choices and does not limit the use of other parameter values based on user preference and arm-length.
Conversely, BackTap cannot be used when the device is placed on a table.
Dwell is often suggested in the literature as an alternative to click, e.g., in eye-gaze input.
Our dwell time was 600ms.
LiftOff requires an active movement raising the pointing finger.
A change in z-position >30mm between two consecutive time cycles triggers a LiftOff.
An alternative to LiftOff is to push down, which we did not test as both behave similarly.
Pierce assumes an imaginary horizontal interaction plane defined by the mobile device, which the finger needs to `pierce' to make a selection.
DownUp uses a down-up motion  inside a bin to trigger a selection.
The two-stage motion, up and down, allows for a backoff possibility to cancel a started selection, similar to clicking an on-screen button with a mouse.
This is the only method with a possibility to reverse in mid-course of the selection.
Twelve daily computer and touch screen users  aged 20 to 39 years participated.
With short breaks and practice trials, each session lasted around 45 minutes.
A start button and a small overview  are displayed on the screen .
A red marker in the overview highlights one of the five sectors to indicate the direction to the next target bin Figure 3.
The participant presses the start button with the right-hand index finger to begin the trial.
The overview shows the target in green, and a blue cursor in the overview follows the tracked finger .
A correctly performed selection action ends the trial and loads the start screen for the next trial.
Session A used a 64 within-subjects design for factors selection method  and bin widths .
The four bin widths were obtained by dividing each sector into 5, 9, 13 or 17 equally wide bins.
Participants performed ten repetitions of each selection method-width combination, resulting in a total of 240 trials per participant.
Participants completed 20 random practice trials before the test trials.
In our first experiment we identified suitable selection techniques, the minimum bin size for efficient item selection, and appropriate around-device space divisions methods.
We split the experiment in sessions A and B to reduce experiment length and the complexity of the analysis, and to focus on a few design parameters at a time.
Little is known about the specific methods for selecting items in around-device space.
We grouped our selection techniques into methods that take place on or off the device.
We settled on six candidate methods - two performed on the device with the non-dominant hand, and four using the dominant hand and its pointing finger in the air.
Tap does not restrict the on-screen tapping area .
BackTap is based on reading the device's accelerometer data and tapping the back of the device using the index finger of the device hand.
After experimenting with various thresholds we found 0.15g  to be suitable for BackTap detection.
The obvious advantage of BackTap over Tap is that it eliminates the risk of invoking interactive items on the screen during a selection.
The order of bin widths was randomized for each selection method.
We kept the distance to the target bin constant  by only using the middle bin in each bin sector.
Two trials from each method-width combination were located in each of the five bin sectors .
The order of target location was randomized.
No feedback was given when participants selected a non-target bin or if the intended selection action was not detected.
Trials were only terminated after a correct selection occurred in the correct target bin.
We asked participants to perform each trial as quickly and accurately as possible.
After completing all methods participants rated them based on preference.
Trial time: Trial times were positively skewed and we performed a logarithmic transformation  before analyzing the data.
Across selection methods, the geometric mean trial times  ranged from 1.9s for the largest 68mm bins to 3.1s for the smallest 20mm bins.
As a result of the increased accuracy demand, trial times increased by about 15% for each decrement in bin width.
Post-hoc pairwise comparisons showed that all bin sizes differed.
Figure 4c shows the geometric means for each selection method.
Post-hoc pairwise comparisons showed that DownUp was slower than all other selection methods and that Tap was faster than Pierce and LiftOff.
There were no other statistically significant differences between the methods.
Except for DownUp, all methods performed about equally well at 68 and 38mm bins.
With 26mm bins though, we see marked peaks for Pierce and DownUp, and moderate, similar increases in the other methods.
Only with the smallest bins do BackTap and LiftOff lose ground against Tap and Dwell.
Preference ratings: According to overall preference, 9 of 12 participants rated Tap to be the best, two preferred the LiftOff method and one favored BackTap.
We used a repeated measures ANOVA and post-hoc pairwise comparisons to analyze trial times.
We used Friedman tests with Wilcoxon tests for post-hoc pairwise comparisons to analyze error rates .
Post-hoc pairwise comparisons were Bonferroni adjusted .
The same tests were used in all experiments unless otherwise noted.
Error rate: The overall error rate was 11.7% .
Figure 4a shows the mean error rates.
Selection method had an effect on error rate  = 30.44, p < 0.0001 and pairwise comparisons showed that DownUp caused significantly fewer errors than BackTap, LiftOff and Pierce.
There were no other significant differences.
DownUp's low error rate is due to its twofold accuracy requirement: 3cm down and 3cm up in the same bin without veering into an adjacent one.
Pairwise comparisons showed that 68mm bins caused fewer errors than both 26 and 20mm bins and that 38mm bins caused lower error rates than 20mm bins.
There was no statistically significant difference between the two largest and between the two smallest bin sizes.
Our results indicate that performance - in particular errors - degrades significantly after the 38mm bin size .
We suggest that for AD-Binning, targets should not be any smaller than this size.
While Tap and Dwell appear to have the least errors and a trend toward faster selection times, these may not be practical in all applications.
For example, dwelling may conflict with object browsing, and Tap should only be restricted to a specific on-screen target.
We continue our exploration with BackTap and LiftOff as our on-device and off-device selection methods.
The same participants were recruited for Session B, providing a certain level of expertise with AD-Binning.
As indicated above, prior studies  have suggested an accuracy trade-off in mid-air pointing with targets distant from a reference, in our case the edge of the device.
This led to our evaluation of different around-device space division or discretization methods.
The Uniform discretization  divides the available space into nine equally sized bins of 37.78mm.
Distance Dependent discretization  the inner bin is 27.2mm wide and the following bins are allotted an additional multiple of 2.64mm according to their position from the inner bin.
We also included a fisheye discretization technique  that uses a hysteresis function similar to  to dynamically add and remove extra space on both sides of each bin .
The active bin expands to 75.28mm, its two neighbors expand to 50.28mm, and the remaining bins are 27.36mm wide.
We controlled distance by dividing the available radial distance of 340mm in equal distance ranges, D1, D2, D3 and D4 .
A random number within the desired range was drawn and the bin at this distance was set as the next target, belonging to the corresponding distance range.
The Fisheye discretization also evened out the error rates between selection methods.
The overall higher error rate with LiftOff is a result of poor performance when combined with Uniform and Distance Dependent discretization .
When extra space is added to the `current' bin, as in the Fisheye, LiftOff performs as well as BackTap.
Trial time: As in Session A, trial times were positively skewed and we applied a logarithmic transform  before analyzing the data.
The geometric mean trial time was 2.19s for BackTap and 2.20s for LiftOff.
Across the two selection methods, the geometric means for the three discretization techniques were 2.24, 2.17 and 2.17s for the Uniform, Distance dependent and Fisheye, respectively.
Post-hoc pairwise comparisons between distances showed that bins in D4, with a geometric mean trial time of 2.49s, were significantly slower to select than bins located elsewhere.
There were no statistically significant differences between bins in D1 or D3 .
All task procedures were the same as in Session A.
Session B used a 3254 within-subjects design for the factors discretization , selection method , sector , and distance .
Participants performed 360 trials: three repetitions for each combination of factor levels.
We counterbalanced on discretization technique and half of the participants started with BackTap first.
Participants completed 20 random practice trials and then 40 timed trials with each combination of discretization and selection methods.
Pairwise comparisons showed that the Fisheye, with a mean error rate of 6.6%, caused significantly fewer errors than both the Uniform and Distance dependent discretizations .
Pairwise comparisons between distances showed that bins in distance range D1 caused more errors than bins in D2.
There were no other pairwise statistically significant differences.
Interestingly, the Fisheye discretization reveals an overall equalizing effect over all distances.
In the other two discretizations  performance in D4 and D1 degraded, possibly due to reduced motor accuracy and smaller arc lengths, in the far and close bins, respectively.
Post-hoc pairwise comparisons between sectors showed that the Right and Top-Right sectors, with geometric means of 2.08s and 2.12s, respectively, were faster than the Top-Left sector which was the slowest at 2.36s.
There were no other statistically significant differences between any other sectors.
A significant sectordistance interaction  , identifies D1 and D2 having marked peaks as the main sources for the overall poor performance in the Top-Left sector.
We attribute these problems to occlusion: presumably, keeping the wrist at a natural angle when targeting Top-Left bins close to the device causes the hand to occlude parts of the screen and the visual feedback provided by the overview.
As with errors, the Fisheye had an equalizing effect on trial time.
It is notable that trial times for bins close to the device  drop as a result of the Fisheye expansion.
Comparing Distance Dependent to Uniform discretization reveals a clear negative effect of removing space from D1-bins .
The significant discretizationsector effect , reveals that the Fisheye also equalized performance between sectors.
It reduced selection times in the slow Top-Left sector, but also in the Left sector.
It is also notable that the Distance dependent discretization improved performance in the Right sector.
Preference ratings: Eleven participants rated Fisheye as the preferred technique and one rated Distance Dependent as the best.
Seven rated the Uniform discretization as their least preferred technique.
Twelve daily computer and touch screen users  aged 20 to 39 years participated.
Five had participated in Experiment 1.
Participation lasted approximately 30 minutes .
Phase 1 of a trial consists of binning multiple icons ; Phase 2 involves retrieving three of them.
With Tapand-Bin and with Flick-and-Bin the participant taps a start button, the next icon to bin in the trial is displayed on the screen, and timing starts.
With Tap-and-Bin the participant taps the icon, moves the hand into AD-space, then bins the icon in an empty bin using a LiftOff, and timing ends.
With Flick-and-Bin, the participant flicks the icon towards a sector with an empty bin and timing ends.
The on-screen overview, where empty bins are yellow and occupied are blue, provides dynamic feedback throughout the binning activity.
Flick-and-Bin forces items to be binned in the directed sector with inner bins filled first.
Tap-and-Bin provides the most flexibility in terms of item placement.
No flexibility is provided with Automatic binning where the system does the binning  and automatically fills inner bins  before more distant bins are used.
A dialog box announces Phase 2 when all icons are binned.
Dismissing the dialog box displays three random icons from Phase 1 for 10 seconds as a preparation for the upcoming three retrievals.
Showing items prior to retrieval is representative of a real task where users know ahead of time what items they are looking for .
When the three icons disappear, timing begins, and the participant starts the first retrieval.
As the retrieving finger moves beyond the screen border, the overview indicates its current location with a red marker.
The bin content is shown next to the overview.
When the correct bin has been found, the retrieval  ends with a LiftOff in the corresponding bin.
After retrieving all three target icons, the binning Phase of the next trial starts.
The experiment used a 323 within-subjects design for factors technique , set size , and retrieval .
With three retrievals per trial, three trial repetitions with each technique and set size combination each, participant performed a total of 54 retrievals.
The order of technique was counterbalanced between participants and set sizes were presented in a random order for each technique.
We used the Fisheye discretization and five sectors with three bins each.
Participants had two practice trials with each technique.
Icons were randomly chosen from a set of 180 similarly styled images.
No icon appeared in two consecutive trials.
We observe that the Fisheye discretization had an overall equalizing effect on error rates and trial times, across selection method, distance and sector.
Our following experiments use the Fisheye for dividing the around-device space.
Unexpectedly, selecting targets in the closest distances was less accurate and less efficient.
Due to constrained movements with crossing arms, areas left and top-left of the device are generally more cumbersome.
Binning items could conceivably be done at any time.
The user could quickly place an application icon, contact entry or web-bookmark in a system wide bin-collection for longterm storage and fast access.
Binning could also be application dependent and serve more short-term purposes, such as browsing the results from a query or to manage a sub-set of items of temporary interest .
In this experiment we compare binning techniques that provide varying degrees of user-control:  Automatic provides no user control on item placement.
The system assigns each item to an empty bin.
Assignment can be random or based on item properties .
Items are binned in a batch, either initiated by the user  or automatically triggered through a query interface.
Tap-and-Bin allows full user control.
The user picks items, one by one, tapping their on-screen representations, and then, guided by the cursor in the on-screen overview, moves the hand to the desired AD-bin to `drop' it using a LiftOff gesture.
Tap-and-Bin may be time consuming with many items but facilitates individual placement strategies for improved recall.
The direct acquaintance with each item in combination with the following arm movement may also help develop valuable proprioceptive memory linkages.
Flick-and-Bin provides semi-automatic binning that uses the flick direction to choose a sector and then places the flicked item in an empty bin that is closest to the device in that sector.
If all bins are filled in the directed sector the user has to flick in another direction.
The on-screen overview provides dynamic sector highlighting during the flick.
The automatic `first-empty' strategy makes Flick-andBin fast at the expense of user control.
A more elaborate version could map flick-distance to bin-distance for full user control.
Tap-and-Bin and Flick-and-Bin, most participants categorized items 
As expected, it was easier to apply this strategy with six items than with twelve.
Participants placed items in inner bins before the outer ones.
Trials with six items provided more flexibility regarding bin choice but participants clearly avoided using the Left and Top-Left sectors .
With previous placement analysis showing that participants did not make use of the possibility to leave the inner bins empty with Tap-and-Bin, it is particularly interesting to note the large difference between Tap-andBin and Flick-and-Bin in the first retrieval.
With no inner bins empty, the only difference between the two techniques is the amount of physical activity required to do the binning, a short flick for Flick-and-Bin, moving the arm and a LiftOff gesture for Tap-and-Bin.
Apparently, the greater physical activity needed for Tap-and-Bin fostered spatial memory.
In the first retrieval with Flick-and-Bin and Automatic, participants had to rely more on the visual overview and search.
The position information participants gained during this first search was then utilized in later retrievals to improve performance to Tap-and-Bin's level.
Binning time: As expected, Automatic binning took no placement time.
Participants spent on average 2.9s to bin an item with Flick-and-Bin and slightly longer, 3.3s, when using Tap-and-Bin.
With a mean trial time of 2.2s for LiftOff-selections in Experiment 1 , we see a strategizing overhead of 1.1s for Tap-and-Bin.
Allegedly participants used the same strategies for both techniques but the flick gesture in Flick-and-Bin took on average 0.4s.
Our results suggest that the overhead involved in manually binning items as in Tap-and-Bin is compensated by improved retrieval times due to enhanced spatial encoding.
Spatial enforcement of item locations is also present while searching for items in AD-Bins: retrieval performance improved after having selected the first item in Automatic and Flick-and-Bin, as participants mentally recorded positions of subsequent items to retrieve.
These results inform the selection of suitable design parameters for an efficient ADBinning technique.
Error rates: In 42 of the 648 collected trials  participants made at least one, and at most four, erroneous selections before the prompted item was selected.
With all three placement techniques using LiftOff as the selection method, we found no statistically significant difference in error rates between techniques.
There was also no statistically significant difference in error rates between set sizes or retrievals.
Retrieval time: Retrieval times were positively skewed and we applied a logarithmic transform  before analyzing the data.
As expected, the larger set size required more searching than the small set size, and thus took longer time.
Post-hocs between techniques showed that Tap-and-Bin was significantly faster than Automatic and that there were no other pairwise statistically significant differences.
Post-hocs between retrievals showed that the first retrieval was significantly slower than the other two.
The second and third retrievals did not differ.
Twelve daily computer and touch screen users  aged 18 to 35 years participated.
Two were new and had not participated in any previous experiment.
Participation lasted approximately 45 minutes .
The task simulates a frequent situation where the user has queried a system for information.
In our case, a geographic tourist portal for hotel reservations where the query results are displayed on a map.
Issuing the query can result in items being placed automatically in around-device space, and ready for retrieval.
A trial starts with the screen displaying a prompt to search for the cheapest n-star hotel .
After reading the text, the participant taps a start button and trial time starts.
The next screen shows a city map with a set of circular markers  representing various hotels.
We place the search criteria at the top of the screen as a constant recourse .
In the `on-screen' condition, the price and rating  for a hotel are displayed in a callout box that opens when the marker is tapped .
Participants were informed that they could either close the box with a tap on the map or fill the box with new information by directly tapping on another marker.
When the participant believes having found the hotel satisfying the search criteria, the trial ends with a tap on the button  in the callout box.
If correct, the trial time stops and the text prompt for the next trial is displayed.
If incorrect, an error message pops up which blocks further input for one second before it automatically fades away.
After that, the search for the correct hotel can continue.
Panning and zooming are fully enabled.
Six participants started with AD-Bins, six with on-screen browsing.
In low-density conditions all hotel markers were positioned at random positions within 1.974cm of the map/screen center.
The high-density conditions used 0.987cm.
At least two hotels with the requested number of stars existed in each trial.
Hotels, prices, stars, and marker positions were otherwise completely randomized.
In 90 of the 720 collected trials  participants made at least one, and at most five, erroneous selection before finding and selecting the correct hotel .
Naturally, with more items to manage and to compare, the risk of making a mistake increases.
There was no statistically significant difference between high and low density but number of items significantly influenced trial time  with post-hoc comparisons showing differences between all factor levels.
Time savings with AD-Binning increased disproportionally with the number of items: 27.9% with five items, 31.9% with ten, and a whopping 40.2% with 15 items.
Across interface, there were no statistically significant differences between low and high density in conditions with 5 and 10 items but performance deteriorated with 15 items at high density .
Presumably, this was mostly caused by the increased need for elaborate pan/zooming and closing of the callout actions in Figure 9.
With AD-Binning, we use the automatic binning method such that `proxies' to hotel markers are placed in random AD-bins.
The AD-space is divided into five sectors, with a total of 5, 10 or 15 bins depending on the condition , and uses the Fisheye discretization.
The participant browses hotels in off-screen space by moving the index finger between bins.
At bin-entry, the corresponding hotel marker is highlighted and the hotel information is shown next to the bin-overview at the bottom of the screen .
To select a hotel, the user performs a LiftOff inside the desired bin.
The trial prompt, timing and error notifications work as previously described.
On-screen panning and zooming are fully enabled.
As this task primarily involves browsing, we opted for the automatic binning method over manual binning which is better suited for more complex tasks that involve setting aside objects for later retrieval.
The experiment used a 223 within-subjects design for factors interface , marker density , and number of items .
Participants performed five repetitions for each combination of factor levels, for a total of 60 timed trials per participant .
The extra time and effort required to manually place items in arounddevice space pays off in item browsing and retrieval tasks.
Rapid binning is possible with automatic placement methods, which can be triggered through a query.
In comparison to on-screen input, AD-Binning reduces information browsing time for three reasons.
First, ADBinning is in `browse' mode by default.
Retrieving object information involves hovering or sliding the finger between bins.
Second, AD-Binning target sizes can be significantly larger than those on-screen.
In our example, queries with 5 items used five bins, each with a larger space then when the query had 15 items.
Finally, participants exploited spatial abilities with AD-Binning.
They would cache in memory the best bin location satisfying the query criteria and update in memory this bin location only when the next best item was available.
While this happened with automatic placement, in a full manual placement reliance on spatial memory would be even stronger as indicated from results of Experiment 2.
Some obvious applications for AD-Binning including photo storage , storing and retrieving items from contact lists and bookmarking items of interest when browsing a web site.
We also envision longer term applications where the user can capitalize on proprioceptive memory linkages developed over time to access content across applications or regularly issued commands, similar to CommandMaps .
With further development, ADBinning could also apply to the following applications: Item retrieval based on item organization.
Our implementation of AD-Binning did not consider specific ordering of items.
However, many datasets have inherent structures that AD-Binning interfaces can leverage.
For example, items could be sorted based on price, alphabetically or chronologically.
In an email client, items can be placed in chronological order in around-device space.
This can allow the user to retrieve items immediately based on their previously developed knowledge of ADBinning item organization.
Mixing physical and virtual bins.
AD-Binning could also be used in mixed physical and virtual workspace scenarios.
By tracking the position of a digital pen, AD-Binning could facilitate note taking and brainstorming scenarios where ideas and sketches are made on physical notes arranged around the device .
Committing the final note content and position stores the note in the corresponding AD-space for later retrieval or browsing .
Our results offer the following guidelines to designers for interfaces similar to AD-Binning:  Input range: An interaction space extending 40cm beyond each side of the device is suitable when around-device interaction is focused on a horizontal plane defined by the device.
A radial division and partitioning in sectors allows for comfortable reach.
Target Size: Use the largest targets possible, and targets should not be much smaller than 4cm across.
With a radial bin arrangement, interactions close to the device cause a higher number of errors, as bins are smaller there.
Ideal interaction regions: Prioritize interactions on the same side as the dominant pointing hand, as users intuitively avoid interaction on the non-dominant side to avoid occluding on-screen visual guidance.
Around-device space division: Fisheye discretization can suitably divide around-device space to provide equally efficient access to all content around the device and reduces accuracy requirements.
Selection methods: On-screen and off-screen methods can be equally effective for selection.
Designers can choose a selection method based on task.
Finger lift-off is possible in both mid-air and when the device is resting on a surface.
AD-Binning relies on a robust tracking mechanism  for around-device interaction and in 3D space.
Further experimentation is needed for determining suitable design parameters for devices equipped with new sensors that track fingers in off-screen space.
Our results indicate that partitioning around-device space into 45 bins  is a suitable strategy.
Our results are also dependent on visual feedback, which consumes space on the screen.
Additional work is needed to identify whether such visual guidance can be eliminated after repeated use in a given task and application .
Finally, our automatic placement strategy inserts items in bins in a random manner.
More robust layout mechanisms are needed to provide for an efficient organization of around-device items.
For example, in the map application, items in one area could be assigned to corresponding relative regions in off-screen space.
Additional future work will consider extrapolating our results to other forms of tasks in arounddevice space, such as selecting commands, bridging between physical items around the device and AD-Binning, and coupling around-device input with on-screen interaction.
We are also interested in investigating the social acceptability of around-device interactions.
We have presented the design and evaluation of ADBinning, a novel user interface for future small-screen mobile devices that will be able to sense finger movements in their vicinity.
With AD-Binning the user can off-load screen items from the small screen into the larger off-screen space around the device.
AD-Binning was mainly designed to support the user in analytic scenarios that require intensive browsing and comparisons between many alternatives, such as long query result lists or other information intensive situations where exploration is necessary before a decision is made.
Such tasks can be laborious to perform using the interactions provided by small touch screens.
With AD-Binning the user can efficiently store, browse and retrieve content through direct interactions in the space around the device.
