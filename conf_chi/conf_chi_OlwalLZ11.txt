Mobile devices are currently difficult to customize for the usability needs of elderly users.
The elderly are instead referred to specially designed "senior phones" or software add-ons.
These tend to compromise in functionality as they attempt to solve many disabilities in a single solution.
We present OldGen, a prototype framework where a novel concept enables accessibility features on generic mobile devices, by decoupling the software user interface from the phone's physical form factor.
This opens up for better customization of the user interface, its functionality and behavior, and makes it possible to adapt it to the specific needs of each individual.
OldGen makes the user interface portable, such that it could be moved between different phone hardware, regardless of model and brand.
Preliminary observations and evaluations with elderly users indicate that this concept could address individual user interface related accessibility issues on general-purpose devices.
Device shape and size are often not adapted to people with a weak grip.
Buttons can be small, poorly separated and without sufficient tactile feedback for fingers with reduced sensitivity.
Many features in modern mobile phones can also be irrelevant or confusing for the elderly.
Directly accessible functions, menus with shallow navigation depth and clear feedback may instead be preferred.
Difficulties in adjusting to new technologies create a strong preference to purchase mobile devices of the same brand, to avoid having to learn a new user interface  .
To address these issues, we investigated prioritized functionality for older adults, and a prototype system was developed iteratively with users.
OldGen's goal is to allow creating mobile UIs that could be individually customized but still run on general-purpose mobile hardware, as illustrated in Figure 1.
The mobile phone is an important technology for older adults as it can improve communication with relatives and friends while also making them more secure and independent .
Elderly have often, however, substantially different requirements than younger users, due to ergonomic, cognitive and usability needs.
Mobile phones are becoming overly complex for many users, with increasingly more functionality squeezed into shrinking form factors.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Solutions to improve usability for the elderly are, in general, based on dedicated, special-purpose hardware, or on software that is installed on the mobile device to modify its behavior.
Many companies market models specifically targeted towards elderly , e.g., devices that emphasize ergonomic shape and grip, buttons, big displays and fonts, and dedicated emergency features.
Personalization and UI customization, beyond the most basic settings  is uncommon, and the phone and its integrated software are typically intended to be used as preconfigured.
Software-centric approaches focus on vision , autonomy , and personalization and typically depend on the mo-
Issues relating to UI layout or complicated menu hierarchies are, however, rarely addressed, as these plugins are meant to add modalities rather than to modify UI or application logic.
Several projects explore the design of mobile UIs.
Renaud and van Biljon  investigate the needs of elderly and propose an interface design, while Plos and Buisine's case study lead to four physical mockups .
MobiDev transforms photographs of hand-drawn UI sketches to Java ME forms, but currently without application logic.
De Sa and Carrico provide rapid prototyping directly on Windows and PalmOS devices , while Verstockt et al.
Rather than only supporting smartphones, which are currently less common among our target users, our framework is specifically designed to work on mid- and low-end devices.
In our work, we focus on a customizable and extensible layer for the most important phone features using XML specification and platform-independent Java ME.
While many use source code as input, OldGen uses XML for UI specifications.
The design is used to generate an XML specification of the UI, which is parsed and converted into source code that can be compiled into a Java ME application.
Our approach focuses on enabling the UI construction solely through specification, where the basic functionality is available as building blocks in XML.
XML elements specify application settings and components to ensure flexibility and interoperability as it allows the system to be extensible for new functionality.
It also inherently allows future parsers to produce source code for other platforms.
The OldGen framework parses the UI specification  and generates the corresponding Java files.
It uses core Java ME, the cross-platform UI components in the Lightweight User Interface Toolkit , and a resource file that specifies font and color information.
Our OldGen framework enables the exploration of customizable mobile interfaces for elderly users.
The idea is that a family member or caretaker could use a tool  to design and tweak UI behavior, or look-and-feel based on a library of preconfigured templates.
These may include available phone features, menu types, depth in menu hierarchies, font sizes, colors, contrast, brightness and other aspects of the UI that are specific to a user's needs.
Our intention was to initially support the most prioritized functionality for elderly , rather than all possible features: Calling.
The most commonly used function.
As in the whole framework, the aim is to both provide easy access and support alternative functionality.
The call can be made with physical buttons  or through the UI .
Similarly to calling, numbers are directly entered, or selected from the phone book.
The send action can be mapped to a soft button or a GUI button.
Stores contacts with common information, such as, name, number, address, relationship, and nick name.
Contacts can also be assigned to a list of shortcuts.
Images can be stored in the application, and added to a contact.
Photographs may, for example, help elderly easier recall or recognize contacts.
A scalable UI was implemented as it could address problems with poor vision.
Five prototype UIs illustrate how various layouts can be supported in the system's different views, menus and forms.
These implementations vary in their combinations of GUI components, customizable appearance and specified behavior.
We provide direct access to some functions, and use deeper navigation depth in other.
Five component types and three different layouts are currently available.
The UIs have at least one form, where each form has a unique name and includes various components and functions, arranged according in the specified layout.
Three layouts can be used to arrange components.
The GUI elements can be shown in a list , divided into a grid,  or accessed in a horizontal menu at the top of the screen with an enlarged preview of the active option in the center .
Our five basic components form the structure of the UI and can be found in most UI frameworks .
The Label is used for labeling text input areas or images with a text string or image.
The Soft button activates a function  when the corresponding physical button underneath the on-screen label is pressed.
The GUI button is an iconic button that the user navigates to and then activates .
The List displays items , in a list view.
The Text Area supports numeric or text input .
Most participants rarely called from their mobile  and only one participant used SMS .
As in previous studies , all considered calling the most important function.
Participants used the default UI on a generic phone , a simplified OldGen-built UI installed on the generic phone, and the default UI on a senior phone .
For each interface, functionality and operation was explained.
Participants then performed some basic tasks: adding a contact, writing an SMS, calling the contact, and erasing the contact.
The UI interactions were recorded on video, and notes were taken by the study leader.
Participants did not understand the GUI icons, had problems reading text  and complained about insufficient contrast.
Physical buttons were poorly separated, flat, slippery, and the text on them was too small.
Most participants also found it difficult to understand how to navigate in the UI with the cursor keys.
All participants needed assistance to complete the tasks.
Four user observation sessions were conducted in an iterative cycle with interleaved development and redesign of functionality and UIs.
The first three sessions were with non end-users to identify technical deficiencies and missing capabilities.
Further insights were provided through five individual and informal test sessions with retired seniors .
The combined feedback from these sessions indicated appreciation for scalable UIs, simplicity, and the possibility for customization.
Since our custom UI ran on the same hardware, it suffered from the same button issues.
Participants were frustrated by the three physical buttons  that exit the OldGen UI, a limitation of Java ME.
While zoom was appreciated, it was not always clear how to activate soft buttons, and participants had problems with forms that required scrolling.
Several participants did, however, complete the tasks without requiring assistance.
Six women, 52-76 years old , were recruited from a charity organization where retired women meet weekly to sew.
The test consisted of a pre-test questionnaire, tasks to be completed in three different mobile UIs, and a post-test questionnaire with feedback and ranking of the UIs.
Due to the small number of participants, statistical analysis of the data was not performed.
All participants liked the large, separated rubber buttons, the screen's contrast and large font size.
Participants did not mind the lack of icons in the UI and appreciated visual feedback for buttons they were pressing while writing.
Most participants completed the tasks without assistance.
Future work also includes support for platforms that allow more intimate integration with the underlying system, such as Android , iOS , MeeGo  and Symbian .
Finally, we would like to emphasize that an advanced implementation of this concept could be beneficial for every mobile user, in the "Design-for-all" spirit.
It would make it possible to have portable personal mobile UIs that would evolve through their use on different devices, in different contexts and through gradual experimentation and refinement, towards the optimal behavior for each user.
After analyzing results, we identified numerous changes to the OldGen UI that should improve usability: better integrated zoom feature, increased contrast, no icons, some renamed menu elements, avoiding scrolling, and visual feedback for pressed buttons.
All of which can be changed in software.
A limitation that cannot be addressed is the behavior of the three buttons that exit the OldGen UI.
While the OldGen UI performed worse than the senior phone, it was more appreciated than the original N95 UI .
We believe that an improved OldGen UI, installed on a generic phone with better keypad, should be able to provide a similar level of usability as the senior phone.
The preliminary evaluation is limited by the small number of all-female participants that were recruited from the same context, but seems to indicate the potential for our continued work.
We are currently refining the prototypes for an improved version, which will be used in our next experiments and formal evaluations that should also involve longterm studies that could provide better ecological validity.
We thank Arash Saghafian, Per Sunesson and Magdalena Sjostrand for running many of our studies.
The work was made possible by funds from the Swedish Institute for Assistive Technology and support from SO4IT and Rule Communication, and mobile devices from Doro, Ericsson and Nokia.
We also want to thank the National Pensioners' Organization, Red Cross Taby's Design and Activity Group, all participants in our studies, and our reviewers for their valuable feedback, which helped us improve the paper.
We have introduced the concept of customizable mobile UIs, through our OldGen framework, which separates UI specification and functionality from the underlying hardware.
Several prototype UIs were generated in Java ME as a case study, and user interaction with various software generations was observed.
The implemented prototype framework seems promising in its ability to help addressing usability problems in today's mobile phones by: * Introducing flexible customization of mobile UIs that could be tailored to specific individual needs.
The prototype framework makes it possible to generate a range of different UIs through its specification mechanism.
As such, it may be an interesting complement or alternative to hardware-only or other software-based approaches.
