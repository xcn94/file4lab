To encourage strong passwords, system administrators employ password-composition policies, such as a traditional policy requiring that passwords have at least 8 characters from 4 character classes and pass a dictionary check.
Recent research has suggested, however, that policies requiring longer passwords with fewer additional requirements can be more usable and in some cases more secure than this traditional policy.
To explore long passwords in more detail, we conducted an online experiment with 8,143 participants.
Using a cracking algorithm modified for longer passwords, we evaluate eight policies across a variety of metrics for strength and usability.
Among the longer policies, we discover new evidence for a security/usability tradeoff, with none being strictly better than another on both dimensions.
However, several policies are both more usable and more secure that the traditional policy we tested.
Our analyses additionally reveal common patterns and strings found in cracked passwords.
We discuss how system administrators can use these results to improve password-composition policies.
However, the balance between security and usability in policies requiring longer passwords has not previously been investigated.
Our primary contribution is expanding upon the limited finding from prior work - that requiring sixteen-character passwords can be more usable and sometimes more secure than traditional policies - to provide tangible, concrete advice for system administrators on requiring long passwords.
In particular, we are the first to contrast variants of passwordcomposition policies with longer length requirements.
In addition, we are the first to offer concrete recommendations about policies with longer length requirements, placing these policies along a security/usability spectrum.
Previous studies  compared only a length-16 requirement with traditional complex policies.
We tested numerous variations on the length-16 requirement: fewer characters, more characters, required character classes, etc.
Moreover, while passwords created under the length-16 policy were often stronger after trillions of guesses than those created under the traditional policy, there were also very simple passwords, like passwordpassword, that could be guessed easily.
Could these weak passwords be prevented without burdening users?
In this paper, we provide the first evaluation of password policies focused on long, user-selected passwords.
Our 8,143 online participants created a password under one of eight policies.
We examined a comprehensive length-8 policy, three variants of length-12 policies with fewer requirements, three variants of length-16 policies, and a length-20 policy without additional requirements.
We searched for a policy that would offer the strength benefits of the traditional length-8 comprehensive policy without its usability problems.
We found that adding requirements to policies on longer passwords can reduce the number of easily guessed passwords, and that certain combinations of requirements were both stronger and more usable than the traditional complex policy.
We also identified patterns and strings commonly found in cracked passwords.
For example, 43.6% of the passwords containing the string 1234 were cracked, while only 13.9% of passwords without this string were cracked.
These patterns can be used proactively to identify weak passwords.
We begin by discussing previous research in the next section.
Reports of stolen password databases have become commonplace in recent years , prompting additional concern over the security of users' passwords.
Password-composition policies, which dictate requirements about password length and composition, are often used to guide users to create passwords that are harder to crack in the event of a breach.
Copyrights for third-party components of this work must be honored.
For all other uses, contact the Owner/Author.
Copyright is held by the owner/author.
Afterward, we present our security and usability results, as well as the results of our analysis of password patterns.
Finally, we discuss our findings, their implications, and how system administrators might translate these results into stronger and more usable password policies in practice.
Although text passwords have a number of drawbacks  and researchers have spent decades investigating password alternatives , text passwords are here to stay for the forseeable future .
One problem with text passwords is that users tend to create weak passwords .
Administrators address this problem by mandating password policies with requirements they believe will lead users to create stronger passwords.
Such a policy might require that a password be at least eight characters long and contain both letters and digits.
Researchers have found that password policies help users create passwords that are generally harder to crack than those created without composition requirements .
Unfortunately, users are frustrated by inflexible password-composition and password-management requirements , and they often fulfill requirements in predictable ways .
Most password-composition policies specify a minimum length, as well as requirements for the different character classes that must be included.
The United States National Institutes of Standards and Technology  has estimated that a password of 8 characters containing 4 different character classes and passing a dictionary check - a password consistent with the policy we call comp8 - has about 30 bits of entropy.
This policy is one of the main examples of a password policy in the 2006 version of NIST's "electronic authentication guidelines" .
The InCommon Federation has adopted the NIST guidelines as part of their authentication requirements for member universities .
Researchers have found that requiring passwords with at least 16 characters, even without further composition requirements, has both usability and security benefits over requiring 8-character passwords that must contain many character classes.
However, some users created passwords that were very easy to guess when password length was the only composition requirement.
In part one of our study, we asked participants to imagine that their email provider had been attacked and required they create a new password using password rules specified by one of our conditions.
We informed them that they would be asked to return to recall their password again in a few days, and asked them to take whatever steps they normally take to remember and protect their password.
Prior work has suggested that asking participants to imagine creating a password for their email account leads to stronger passwords than simply asking them to create passwords for a study .
We then showed participants one of eight sets of passwordcreation instructions, depending on condition.
After successfully choosing and confirming a password, participants completed a five-minute survey about their experience.
We then asked participants to recall their password .
If the participant did not enter the password successfully in five attempts, we displayed it on screen.
Two days later, we invited participants through MTurk to return for part two of the study.
We asked participants to recall their password .
Again, participants who entered five incorrect passwords were shown their password on screen.
Further, participants could follow a "Forgot Password" link to be emailed a link to their password.
After this, we administered another five-minute survey about whether and how participants stored their passwords.
Except when looking at dropout rates, our analysis focuses on data from participants who completed part two within three days of receiving the invitation to return.
Participants who took longer were still paid, but not included in the analysis.
Our data collection affords us the following usability metrics.
To examine creation and recall usability, we collect timing information and the number of attempts to create the password and recall it after both a few minutes and a few days.
We present how many participants dropped out before finishing part one, and how many finished part two within three days of being invited to return as a measure of user frustration.
We look at password storage rates and usage of a password reminder feature during part two recall, assuming that storage and use of password recall indicates decreased usability.
We also directly ask participants about their sentiment on password creation and recall in our study.
We conducted a two-part online study to examine how participants create and use passwords under various policies.
In the first part, we asked participants to create a password under a given policy, fill out a survey, and recall their password.
Two days later, we emailed our participants, asking them to return.
When they returned, we asked them to recall their password again and administered a second survey.
We assigned participants to one of eight conditions, each with different password-composition requirements and different instructions to reflect those requirements.
Because of the large number of factors used between our conditions, it is not feasible to test all of our factors in isolation and in all combinations.
Instead, we carefully chose a set of conditions we felt combined factors in order to balance security and usability.
We included the comp8 condition, similar to that used in practice at our institution, the longer basic20 condition, as well as 12- and 16-length conditions with other factors.
For the dictionary check, we used the free Openwall cracking dictionary.1 * basic12, basic16, basic20 Participants were told only to include at least 12, 16, or 20 characters.
In previous research, the basic16 policy was found to be more secure and usable than the comp8 policy described above.
This set of conditions varies only in length, so we can measure its impact on security and usability.
This required mixing letter and non-letter characters, and by mentioning words, we encouraged participants to create passphrases, which previous research has suggested may be more memorable than passwords .
Participants were also asked to include at least three of the four character classes required by comp8.
This condition was designed to encourage diversity among character types in the password.
Password policies sometimes prohibit characters such as semicolons or spaces.
We did not prohibit these characters, and told all participants, "You may use letters, numbers, spaces, and other symbols in your password."
This improves the effectiveness of the guessing algorithm by favoring high-probability strings, but also increases computational and memory requirements due to the large increase in number of strings used for training.
We mitigate this by quantizing probabilities, trading accuracy for speed as suggested by Narayanan and Shmatikov .
The total meansquared error, a standard measure of quantization error, was on the order of 10-9 for all conditions.
The accuracy of our guessing results depends on the amount and quality of training data available to the guessing algorithm.
We had access to limited amounts of training data for the policies we examined in this study, and we had more data for some conditions than others.
Thus, cracking performance might improve significantly if data for these policies were readily available.
A realistic advantage of a novel password policy is that an attacker would have less training data.
Such a benefit might be temporary; if more service providers switched to 2word16, this might lead to more such passwords in leaked password sets, in turn providing more training data for attackers.
However, at least in the short term, this advantage of more obscure policies would remain.
To evaluate password strength we use a variety of metrics.
Primarily, we focus on how vulnerable passwords are to an offline guessing attack.
We also compute passwordcomposition characteristics such as average length, number of symbols for each condition, unique structures within passwords, and Shay et al.
To measure the vulnerability of passwords to a guessing attack, we use a modified version of the algorithm developed by Weir et al.
This algorithm uses a corpus of training data to generate guesses in order of likelihood, up to some cutoff.
We use training data that includes publicly available dictionaries ; leaked password sets that were previously made public ; and data from previous online studies.
Since some participants did not return for part 2 of the study, we also use their passwords for training, weighted to prefer these passwords over other sources of training data.
The original cracking algorithm is not well suited for cracking the long passwords created by participants in this study.
Long strings of letters, such as "thisisapassword," would only be cracked if the same string appeared in the training data.
To make the algorithm better able to crack longer passwords, we make several improvements.
First, we tokenize all passwords using a word-level n-gram model based on the Google Web Corpus .
This breaks up long alphabetic strings into sequences of digits, symbols, and words.
Our statistical tests use a significance level of  = .05.
For each omnibus comparison on quantitative data, we used Kruskal-Wallis , an analogue of ANOVA that does not assume normality.
If the omnibus test was significant, we performed pairwise tests with Holm-Bonferroni correction  to find significant differences between conditions.
We used MannWhitney U  for pairwise quantitative comparisons and Fisher's Exact Test  and the Chi Square test  for pairwise categorical comparisons.
We recruited participants between April and June 2013.
Participants received 55 cents for the first part of our study and 70 cents for the second.
Of the 15,108 participants who began our study, 13,751 finished part one, 8,565 returned for part two within three days of receiving our invitation to return, and 8,143 finished part two of the study within three days of receiving that invitation.
Other than the discussion of dropout rates, our analysis focuses only on the 8,143 participants who finished the entire study.
The number of participants per condition is shown in Table 1.
51.2% of participants reported being male, 47.8% female, and the remaining 1% declined to answer.
These did not vary significantly between conditions.
We looked at user-agent strings to detect mobile users; 1.4% of participants appeared to be using mobile devices.
This suggests that while passwords created under basic conditions can be relatively strong overall, they also contain a non-trivial fraction of weak passwords.
The comp8 condition is relatively strong against a resourcelimited attacker, with only a few passwords cracked until after a million guesses.
However, its curve begins to ascend rapidly after a million guesses.
At the cutoff, comp8 offers more protection than only basic12, and is fairly close to 2word12.
In comparison, 3class12 is similar in strength until around 1010 , and remains more resistant to cracking from that point on.
It is interesting to note the disparity between 2word12 and 2word16.
While 2word12 is more vulnerable to early guessing than comp8 and does not offer much more protection than comp8 overall, 2word16 is our second strongest condition.
The 2word approach seems to be more effective at increasing password strength when combined with a length-16 requirement than with a length-12 requirement.
Manually examining the passwords users created in these conditions, we see that some users actually created passwords with three words rather than two, and these passwords tended to be more resistant to cracking.
We found that 2word16 users created threeword passwords 31.8% of the time, and were almost twice as likely as 2word12 users to create three-word passwords.
Only 2.6% of the three-word 2word16 passwords were cracked, as compared with 8.5% of two-word 2word16 passwords.
After a million guesses, the three basic conditions each have significantly more passwords cracked than comp8, 2word16, and the 3class conditions.
At the cutoff of around 1.16 x 1012 guesses, we see a different ordering for strength.
Each of basic12, comp8, and 2word12 have significantly more passwords cracked than any of the other five conditions .
Further, 3class16 performs significantly better than any other condition, and both basic20 and 2word16 perform significantly better than any condition beside themselves and 3class16 .
Consistent with prior work, we also find that for small numbers of guesses, comp8 performs relatively well, and in particular, better than the basic conditions.
We begin this section with some statistics on our passwords and then present our cracking results.
The entropy per condition and other password statistics are shown in Table 1.
We find that users typically avoid using uppercase letters or symbols in their passwords, but often include digits even when not required.
Entropy increased with length requirements.
The 2word requirement added additional entropy and the 3class requirement added even more.
In this section we examine dropout rates, password storage, password creation, and recall.
Overall, we find that most conditions are significantly more usable than comp8 on a number of metrics, with only basic20 and 3class16 being significantly less usable on any metric.
We also find that many participants fail to create a compliant password on their first try, suggesting that simple real-time feedback might benefit users who are required to create long passwords.
The percentage of passwords cracked in each condition as additional guesses are made is graphed in Figure 1.
Condition 3class16 is the strongest across the range of guesses.
Some other conditions that appear strong if we look only at a large number of guesses are relatively weak if we consider a smaller number of guesses.
For example, at the cutoff, basic20 and basic16 are the third and fourth strongest conditions, respectively.
The percentage classified as storage participants for each condition is given in the first column.
The remaining columns pertain to part two recall, with results listed separately for no-storage and storage participants.
The second and third columns list the percentage of no-storage participants who successfully entered their passwords in five and in one try without using the password reminder.
The fourth and fifth list this for storage participants.
Of those participants invited to return for part two of our study, 62.3% returned within three days of being invited back; this did not vary significantly by condition .
Of those who returned for part two, 95.1% completed part two within three days of being invited back; this also did not vary significantly by condition .
The number of participants finishing part two in each condition is shown in Table 1.
The first column shows the total percent who failed to create a compliant password on the first attempt.
All numbers in this table are percentages of the total participants in each condition.
The remaining columns show how participants failed, and participants could fail in more than one way.
Confirm indicates a difference between password and confirmation.
Cells where a requirement was not applicable for the policy are marked with -.
Omitted from this table are failures due to a blank password or confirmation field, less than 1% in any condition.
To analyze storage, we first classify participants into two groups: storage and non-storage participants.
To be considered a non-storage participant, the participant must tell us the password was not stored in two separate questions in the parttwo survey, and not be detected pasting or using browser autocomplete in part-two recall, except after returning via the password-reminder link.
The percentage of storage participants per condition is shown in the first column of Table 2.
Significant pairwise comparisons are shown in Table 3.
Overall, 3class16 had a significantly higher storage rate than every other condition except comp8 and 3class12.
Password storage rates were highest in conditions that required three or four character classes, and lowest in the three basic conditions.
Passwords were reported as easiest to create under basic12, followed by 2word12.
For a better understanding of password-creation failures, we looked at participants' first failed password-creation attempt.
We find that participants often failed to meet length or character-class requirements, simple requirements that could easily have been checked in real-time with client-side code.
These results highlight the need for feedback regarding requirements during the password-creation process.
The different ways that participants failed in their first attempt are shown in Table 4.
Many participants failed to meet the length requirement, with 56.1% of participants in basic20 using less than 20 characters.
22.6% of participants in comp8 used too few character classes, compared to between seven and ten percent of participants in other conditions that required non-letter characters.
This suggests that participants struggle more to create a password with four classes compared to three.
Finally, the largest cause of failure was the dictionary check in comp8 and the 2word requirement in the 2word conditions.
A simpler dictionary check might have resulted in fewer failures, as might have increased familiarity over time with 2word requirements.
While only comp8 had a dictionary check, we looked at how many passwords in other conditions would have been prevented by that check.
We examined both the number of attempts participants needed to create a password, and their sentiment about the password-creation process.
On average, participants needed 1.8 attempts to create a password; significant pairwise differences are shown in Table 3.
We asked participants whether they agreed with the statement, "Creating a password that meets the requirements given in this study was difficult."
Responses are depicted in Figure 2, with significant differences shown in Table 3.
These tables show statistically significant pairwise differences for various usability metrics across conditions.
Moving clockwise from top left, the number of attempts to create an acceptable password is compared in the top-left block.
The top-middle block compares agreement with the statement "Creating a password that meets the requirements given in this study was difficult."
The top-right block compares password entry time for no-storage participants who entered their password correctly on the first five attempts and did not use the password reminder.
The bottom-right block shows compares agreement with "Remembering the password I used for this study was difficult."
The bottom-middle block compares proportions of password storage.
The bottom-left block compares recall attempts by successful no-storage participants.
After creating their passwords and filling out a brief survey, participants were asked to recall their passwords.
Looking only at no-storage participants, 93.2% entered the correct password on the first attempt, which did not vary significantly by condition .
99.1% of participants entered their passwords correctly within five attempts; this also did not vary significantly by condition .
On the other hand, the basic conditions required the fewest attempts to enter correctly for successful no-storage participants.
Conditions taking the least time to enter on the successful attempt were basic12 and 2word12.
Participants reported the most difficulty with remembering passwords under 3class16, and the least with basic12.
Table 2 lists the percentage of participants who entered their passwords correctly in five tries without using the reminder in each condition.
Participants could use a password reminder to display their password.
80.1% of participants succeeded in entering their password in the first five attempts without using the password reminder.
Participants who succeeded required 1.3 attempts on average to enter their password, and this number did not vary significantly by condition .
Among nostorage participants, 75.0% were successful in the first five attempts without using the password reminder, also not varying significantly by condition .
These participants required on average 1.3 attempts, and this did vary by condition.
Significant comparisons are shown in Table 3.
We also looked at no-storage participants who did not use the password reminder, and noted how long they spent on their successful password entry.
Significant differences are shown in Table 3.
We also asked participants whether they agreed with the statement, "Remembering the password I used for this study was difficult."
The results are shown in Figure 2 and differences in responses in Table 3.
The most common substrings in passwords and how their presence affects the probability of passwords being cracked.
The first column shows the percentage of all passwords using the substring.
The second column shows the percentage of passwords using that string that are cracked.
The third column shows the percentage of passwords not using that string that are cracked.
For each substring, we ran a 2 test to determine whether containing that substring made a password significantly more likely to be cracked; corrected p-values are shown in the last column.
Overall, five of the seven substrings mark a password as significantly more likely to be cracked.
By studying how different ways of satisfying password requirements affect the security of the resulting passwords, we can gain insights into further requirements that might eliminate common patterns found in cracked passwords.
Overall, we find a handful of substrings that are common in passwords across conditions, and these are usually associated with the password being significantly more likely to be cracked.
We examine whether and how participants exceed minimum password requirements, finding that the majority of participants exceed their length and character class requirements.
In a manual exploration of our data, we find that many of the words in passwords correspond to a small number of themes, such as love and animals, suggesting a need to encourage users to consider more diverse themes for word-based passwords.
Finally, because comp8 is the conventional recommended policy, we additionally focus on how participants meet the comp8 requirements.
Finding that some substrings are associated with cracked passwords suggests policies for future research.
If a policy prohibited a small set of substrings in a password, this check could be performed client-side, reducing network traffic and facilitating real-time password meter feedback.
Some websites already perform client-side password checks to facilitate password meters .
Prohibiting popular substrings is consistent with the advice of Schechter et al., who recommend preventing users from choosing popular passwords .
In this section, we look at whether and how participants exceeded the minimum requirements.
Evidence of passwords exceeding their minimum requirements is shown in Table 1, which shows the median length and number of characters in each character class per condition.
Each condition has a median length above its minimum, and all conditions have a median of at least two digits.
65.6% of participants exceeded the minimum length of their requirement, ranging from 57.6% of participants in basic12 to 75.2% in comp8.
Perhaps not surprisingly, passwords that did exceed their minimum length requirements were significantly less likely to be cracked than those that did not  .
We also looked at how many passwords used more than the minimum number of character classes, omitting comp8 passwords since they already require all four classes.
64.0% of non-comp8 participants used more than the minimum number of character classes.
Over 70% of passwords in each of the basic and 3class conditions exceeded their minimum character class requirements, ranging from 70.2%  to 79.6% .
Over 70% of participants in the 3class conditions used four character classes, while a fifth of participants in comp8 did not use four character classes in their first attempts even when asked to do so.
We looked for substrings within passwords that might result in easily cracked passwords.
We found all substrings of 4 to 12 characters that occurred in at least one percent of our passwords  and then eliminated those that did not exist in at least one percent of passwords without being part of another, longer substring.
This eliminated substrings such as "sword," which was part of "password," and left us with seven substrings.
For each, we divided passwords into those containing the substring and those not containing the substring, and looked at the cracking rates for each.
As shown in Table 5, we find that passwords containing five of those substrings are significantly more likely to be cracked than passwords that do not contain them.
Overall, 762 passwords  contained at least one of the substrings associated with more easily cracked passwords.
In order to get a feel for the semantic content of usergenerated passwords, we manually looked at 100 randomly chosen passwords per condition.
We found that names, dates, and sequences of characters  were common.
We also saw a number of study-related words, as well as references to animals, love, and pop culture.
Surprisingly, we saw very little profanity.
Participants were much more likely to place non-letter characters between words, rather than to break up single words with non-letter characters.
Encouraging participants to choose words from a wider range of themes and to break up their words with non-letter characters seem worth exploring.
We have found a tradeoff between usability and security, with none of our longer policies being strictly better than another on both usability and security.
We have, however, found multiple policies that appear to offer benefits over the commonly recommended comp8.
We find that while the basic policies are generally easier to use than their augmented same-length counterparts, they are vulnerable for relatively small numbers of guesses.
And we have also found that despite comp8 being more vulnerable than most of our other conditions to a powerful attacker, users tend to perceive comp8 as a more secure policy.
In this section, we discuss the implications of our work for system administrators and conclude with some directions for future research.
Because comp8 had the most requirements and was not especially resistant to cracking, we examined more closely how its requirements were met.
28.0% of passwords in comp8 fulfilled the symbol requirement only by placing "!"
Likewise, 54.8% of passwords in comp8 used an uppercase letter as their first character and used no other uppercase letter.
While there is no way to know whether users would respond to having these two practices prohibited by making stronger passwords overall, these two factors do appear indicative of more easily cracked passwords.
Participants who fulfilled the requirements of comp8 in any but the most common of ways ended up with stronger passwords.
In part two, we asked participants whether they agreed with, "If my main email provider had the same password requirements as used in this study, my email account would be more secure."
It is salient that participants in comp8 were significantly more likely than other participants in any condition other than 3class16 to view their study policy as stronger than their real email policy .
This is despite the fact that, as shown in Table 6, against an attacker making a large number of guesses, comp8 performs better than no other condition, and significantly worse than five.
This suggests that users associate at least some of the requirements of comp8 with strong passwords, even if that is not necessarily true in practice.
It further suggests that users might not know how best to construct strong passwords, even if they wish to do so.
We compare comp8 with our other conditions to determine whether there is a longer-length policy that has both usability and security benefits over this typical password policy.
The statistically significant differences we found between comp8 and the other conditions are summarized in Table 6.
Looking at usability metrics, we see that passwords in basic20 and 3class16 take significantly longer to type than those in comp8, and participants expressed more difficulty in creating passwords under 3class16; otherwise, all other conditions either exceeded the usability of comp8 or were not significantly different.
Looking at security, we see that all of the basic policies and 2word12 have worse security than comp8 after a million guesses, making them more vulnerable to a limited attacker.
The two conditions that are more usable overall than comp8, not significantly weaker against a limited attacker, and significantly stronger against a powerful attacker are 3class12 and 2word16.
Comparing these two conditions, we find a tradeoff between the two in terms of security and usability, with 3class12 being more usable during creation, and 2word16 offering more security.
It is possible that the usability advantage of password-creation under 3class12 was due to participants being more familiar with similar conditions.
This advantage may diminish if users become more accustomed to creating passwords with a 2word requirement.
Our methodology, which is similar to that employed by prior password research , has a number of limitations.
By testing password recall once after a few minutes and once again a few days later, our study investigated password use that lies in between frequent and rare use.
Our results may apply only partially to the common cases of passwords that are used very frequently or very sporadically.
Across our conditions, a relatively high number of participants did not return for part two.
We excluded them from our analyses except our dropout analysis.
In practice, users who drop out out of a study might behave differently than those who do not, potentially biasing our results.
A summary of the statistically significant differences between comp8 and the seven other conditions, as presented in the Results section.
Cells are shaded in blue if a condition was found to be significantly better than comp8, and red if significantly worse.
No shading indicates no significant difference.
For instance, we did not test 3class20, 2word8, or similar conditions.
To minimize the number of conditions, we instead grouped changes to multiple variables in ways we hypothesized might balance usability and security.
While we can compare the conditions we tested, we are unable to evaluate the effect of changing each individual variable.
Similarly, we might have missed interaction effects between variables.
The passwords in our study did not protect high-value accounts, limiting ecological validity.
In contrast to real-world, high-value passwords, study participants would not suffer consequences if they chose a weak password or forgot their password, nor were they incentivized to adopt their normal password behavior beyond our request that they do so.
Two recent studies have investigated the degree to which passwords from research studies resemble real, high-value passwords.
Both studies concluded that passwords created during studies can resemble real, high-value passwords, yet are not a perfect proxy.
In a prior study, our group obtained indirect access to the high-value, single-sign-on passwords of everyone at our university , which we compared to passwords collected on MTurk and to real passwords.
The MTurk passwords were more similar than the leaked datasets to the real, high-value passwords, yet were slightly weaker than passwords at our university.
Based on manual coding, they concluded that 46% of the passwords from the online study were fully representative of those users' actual passwords, while an additional 23% were partially representative.
In the lab study, 49% of passwords were fully representative, while 32% were partially representative.
Finally, there were factors in the study beyond our control.
For instance, we did not control the device or keyboard used to input the password, and many MTurk workers use desktop computers.
As a result, we were unable to address usage on mobile devices, which are ubiquitous.
The effect of mobile devices' constrained, touch-sensitive keyboards on password usability is a particularly interesting area of future work.
Dictionary checks using large dictionaries often require sending the prospective password to the server for comparison, making it difficult to provide real-time feedback incorporating a dictionary check.
On the other hand, we found five substrings that lead to a significantly greater likelihood of a password containing them being cracked.
This suggests that future work might investigate using a client-side substring check with a much smaller list of prohibited substrings.
Further, we found a small set of themes that typically appear in the component words of passwords.
This finding, combined with our finding that some strings are fairly common in passwords, suggests future work on nudging people to create word-based passwords on a more diverse set of themes.
We also observed that it was uncommon for participants to use a non-letter to break up the letters within a word; this suggests that future work might further explore nudging participants to do so more often in order to increase diversity.
The science of guessing: analyzing an anonymized corpus of 70 million passwords.
Bonneau, J., Herley, C., van Oorschot, P. C., and Stajano, F. The quest to replace passwords: A framework for comparative evaluation of Web authentication schemes.
