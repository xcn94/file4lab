Recent research has found that forced interruptions at points of higher mental workload are more disruptive than at points of lower workload.
This paper investigates a complementary idea: when users experience deferrable interruptions at points of higher workload, they may tend to defer processing of the interruption until times of lower workload.
In an experiment, users performed a mail-browser primary task while being occasionally interrupted by a secondary chat task, evenly distributed between points of higher and lower workload.
Analysis showed that 94% of the time, users switched to the interrupting task during periods of lower workload, versus only 6% during periods of higher workload.
The results suggest that when interruptions can be deferred, users have a strong tendency to "monotask" until primary-task mental workload has been minimized.
In this paper we make a complementary claim: When users are alerted to interruptions at points of higher mental workload, they delay processing of the interruption until they have reached a point of lower mental workload.
Most experimental work has used forced interruptions in which either the system displaces the primary task with a secondary task at a pre-specified time , or participants are asked to respond immediately to an interruption .
In contrast, many interruptions are deferrable interruptions: an external trigger notifies the user of a pending interruption, but the user may delay processing of the interruption until he or she reaches a desirable stopping point in the primary task.
A few recent studies  have suggested that, for deferrable interruptions, users indeed tend to "stabilize task state"  before responding.
However, these studies did not carefully control mental workload, but analyzed workload informally or using hierarchical task models .
We ran an experiment to test the above claim using an electronic mail customer-support task as the primary task and a chat  task as the interrupting secondary task.
Mental workload was carefully controlled for the mail task by requiring that users mentally maintain a critical piece of information during two segments of the task.
This type of temporary task-relevant information, which we call the problem state , has been found to act as a constraining bottleneck on multitasking performance: cognition can only maintain problem-state information for one task at a time , and thus task switching incurs additional costs from swapping problem states .
The problem-state bottleneck suggests that users will monotask--focus exclusively on the primary task--until task problem state has been eliminated .
Our experiment tests this hypothesis by examining whether users, having received an interrupting chat message, process and respond to the message only at points of minimal mental workload in the primary mail task.
Computer users switch tasks extremely frequently, roughly every few minutes by one estimate .
Researchers have focused especially in the last decade on investigating the nature of task switching and interruptions and their many effects on user behavior and performance.
One consistent finding is that task interruptions lead to a decrease in primary-task performance, most notably in terms of a resumption lag representing the additional time needed to resume the primary task after interruption .
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
The user first selected and read an email, each of which asks for the price of a particular product.
The products were generated using real manufacturers with fictitious model numbers comprising one letter and two digits .
To find the price of a product, the user switched to a browser window and clicked on  the manufacturer, and then  the model number.
With the price shown on the resulting browser page, the user pressed a button on the mail interface to reply to the email, opening a message composition window.
The user then typed the price and clicked a button to send the message.
Finally, the user dragged the replied-to email to an archive folder.
The manipulation of mental workload was incorporated into the mail task by requiring the maintenance of temporary information, or problem state, during certain stages of the task.
After reading the email product information, the user had to remember this information while finding the price in the browser.
The basic steps of the mail task are shown in Figure 2 .
The steps depicted as white ovals indicate points at which there is no problem state; for example, the user did not need to remember information to select an email, but only needed to read and maintain product information before proceeding to the next step.
Thus, these steps represent points at which a user-delayed interruption would be more likely.
In contrast, the steps depicted as gray ovals indicate points at which information did need to be maintained, making user-delayed interruption less likely.
The chat task was based on a standard messaging interface in which messages were shown sequentially, shown in Figure 1.
Occasionally, a system-generated prompt message would arrive in the chat application.
The messages asked a question about whether the user had seen a film .
When a prompt message arrived, the chat interface alerted the user to the message by generating an audible alert and coloring the background of the chat window yellow.
Users were instructed to respond to the chat message as soon as they felt comfortable.
To respond to the message, the user had to switch to the chat window  and enter "yes" or "no" in response to the question.
The overall task environment was coded in Java Swing to emulate the standard Macintosh applications.
All user events  were logged by the system.
An important aspect of the overall task was that the windows were sized and positioned to overlap to a very large degree.
Thus, the user could not see the relevant content of any window unless he or she actively switched to that window by clicking on it; this constraint was necessary to ensure that the system could log switches between tasks, including switches to the chat window to read a chat message, and switches between the mail and browser windows.
We first analyzed behaviors in the mail task alone to understand the sequences of events by which users performed the task.
After informal analysis of the recorded protocols, we performed an analysis of the transitions between all events.
The main sequence shown as the upper sequence in Figure 2 was found to be the dominant behavior .
Users also exhibited two common alternate strategies: clicking "Reply" immediately after reading an email to begin blank response email before browsing for product information , and resetting the browser to the home page after sending the response email rather than before browsing .
Using the events found in the sequence analysis, we computed the number of times users switched to the chat task after each mail event.
The results are shown in Figure 3, using the same event coloring as Figure 2--events shown in white indicate points of lower mental workload, whereas those in gray indicate points of higher mental workload.
As is evident in the figure, users exhibited a strong tendency to switch tasks at points of lower workload .
For example, the most task switches occurred after the final event of a trial , and the second-most after selection of the next email ; at both points, the user did not need to remember problem state for the next step.
The last four columns show that users also tended to switch tasks after the response email had been sent, again all points during which no information needed to be remembered.
After being introduced to both tasks, participants performed trials of the mail task and were occasionally interrupted by a chat prompt message.
Each trial of the mail task involved responding to a single mail message, including lookup of the product price, sending the response email, and moving the original mail to the archive folder.
During each trial, a chat prompt was generated at a pseudo-random point in the trial: the system tracked the user's events during the trial and, after one of eight different events, triggered a chat prompt 50-200 ms after the event--to avoid tying the prompt directly to the event but also to make it unlikely that the user could generate another event before the prompt.
The experiment concluded when participants answered chat prompts for all 50 films.
We can summarize these results by aggregating the number of task switches for each type of event: despite the fact that the prompts occurred roughly equally for points of higher and lower workload , 94% of all user task switches occurred at points of lower workload versus only 6% at points of higher workload.
Thus, users showed a strong tendency to postpone the actual processing of the interruption  until points of lower mental workload during which no problem state needed to be maintained.
Our experimental results indicate that when users have the option to defer an interrupting task, they have a strong tendency to monotask until primary-task mental workload has been minimized.
This builds on the results of recent studies  by closely controlling workload as the carry-over of specific pieces of information from one task step to the next, allowing for a more detailed analysis of the points of task switching.
In an alternate view to automated systems that monitor task workload and deliver notifications when workload is low , this result suggests that users themselves can capably handle incoming alerts and defer processing of interruptions until points of lower workload.
We would suspect  that this ability also generalizes to user selfinterruptions and discretionary multitasking .
Our experiment also helps to clarify one source of mental workload, namely the problem state--temporary information needed for task processing.
The maintenance of problemstate information, such as the product name needed while browsing, serves as an important form of workload that can also be associated with a central bottleneck in multitasking behavior .
This internal cognitive workload is likely also correlated with external, observable indicators of mental workload .
Certainly the required information for this experiment--a single product or price--is a rather simple example of problem state; more complex tasks, such as writing a research paper, may involve large-scale conceptual problem states needed to reason about a particular domain .
Future experiments along these lines could further evaluate user monotasking for such complex tasks, potentially involving both longer-term monotasking and occasional forgetting of deferred tasks .
