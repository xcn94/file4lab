Ken Hinckley1, Francois Guimbretiere2, Patrick Baudisch1, Raman Sarin1, Maneesh Agrawala1, Edward Cutrell1 1 Microsoft Research, One Microsoft Way, Redmond, WA 98052 2 University of Maryland, A.V.
Modes allow a few inputs to invoke many operations, yet if a user misclassifies or forgets the state of a system, modes can result in errors.
Spring-loaded modes  maintain a mode while the user holds a control such as a button or key.
The Springboard is an interaction technique for tablet computers that extends quasimodes to encompass multiple tool modes in a single spring-loaded control.
The Springboard allows the user to continue holding down a nonpreferred-hand command button after selecting a tool from a menu as a way to repeatedly apply the same tool.
We find the Springboard improves performance for both a local marking menu and for a non-local marking menu  at the lower left corner of the screen.
Despite the round-trip costs incurred to move the pen to a tool lagoon, a keystroke-level analysis of the true cost of each technique reveals the local marking menu is not significantly faster.
Such modes plague many note-taking and drawing applications, including Windows Journal, OneNote, Alias Sketchbook, and even the classic MacPaint interface.
These programs all exhibit a strong default mode  where users are expected to spend most of their time, but users also need frequent but temporary access to tool modes.
These applications have an iCi task structure, where i is the default inking mode and C is the temporary command mode.
Quasimodes, also known as spring-loaded modes, are well suited to such iCi tasks .
But quasimodes only provide a spring-loaded control for one mode.
It is not practical to have a button for all of the modes listed above; even if it were, hitting the wrong button would undermine the benefits of providing a quasimode for each tool .
As a result, designers must use quasimodes sparingly.
Modes are all about using one input device to do multiple things.
Most of the relevant literature on modes dates from the era of keyboard-only interfaces and text editors that were infamous for cryptic key combinations, such as vi and emacs , that could trap unsuspecting users in seemingly inescapable modes.
The essence of the problem was that all system functions were invoked using the same set of keys that served primarily for text entry.
The situation led Tesler, in a classic 1981 Byte article, to lament Don't mode me in!
Such problems seem antiquated, yet we now face pen-operated devices that lack a keyboard.
All functions are invoked using the same pen that serves primarily for inking on the screen.
The resulting modal traps seem all too familiar.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Illustration of the Springboard using a tool lagoon with icons.
To address this, we propose the Springboard as a way to extend a quasimode associated with a single spring-loaded control to multiple modes.
1 shows a version of the Springboard design with icons, but the implementation we study in detail uses marking menus.
To use the Springboard, the user presses and holds a nonpreferred-hand button  located on the screen bezel.
The user then makes a menu selection to choose the desired tool mode.
The key difference compared to quasimodes is that as long as the user continues to hold COMMAND, he can apply the selected tool mode by making one or more pen strokes.
Releasing COMMAND turns off the tool mode, and returns the application to its default mode.
The Springboard can be applied to a "local" menu that the user activates from the current pen position, or to "remote" menus that lie at the edges of the screen.
For the local design, we implemented a marking menu that was triggered by stroking while pressing a nonpreferred-hand button .
For the remote design, we implemented a marking menu that was triggered from a "tool lagoon"  in the lower left corner.
In this case, the location of the pen stroke already signals that the mark is a command, so the Springboard uses the COMMAND button press to keep the selected tool mode active.
This button press is an extra cost, but it might save time if it can eliminate round trips.
We contribute the Springboard as a design option for mode switching.
We also contribute an experimental paradigm for rigorous quantitative analysis of mode and command selections.
Our paradigm contrasts different interaction patterns to operationalize in-situ uses of a technique, and uses a subtraction methodology  to isolate physical articulation costs via a keystroke-level model.
This paradigm ensures that we can identify any extra costs over the full life-cycle of a mode switch.
Our analysis reveals that on a tablet-sized device, the local marking menu was not significantly faster than a marking menu on the tool lagoon.
Interface designers can use our models and experimental approach to extend these results to variations on the specific interface designs that we tested, or to reason about design tradeoffs in other similar inking/command tasks that naturally arise in pen gesture interfaces.
In all of these systems, the pen must stay in continuous contact with the screen: the dragging phase ends as soon as the user lifts the pen.
The Springboard enables the user to draw multiple strokes in the tool mode by continuing to hold the button, rather than forcing a single stroke syntax .
The Springboard shares some properties of the hotbox in Alias Maya .
The user activates a hotbox by pressing and holding the spacebar; the hotbox disappears when the user releases the spacebar.
The hotbox offers multiple marking menus that the user can select from; the user can also issue multiple commands in a single posting.
The Springboard extends the hotbox in one critical dimension: when the user marks to select a command, the user keeps holding the button to apply the resulting tool mode as many times as desired by stroking the pen.
There are several strategies to improve command efficiency.
Some applications persist a mode if the user presses SHIFT while clicking on an icon.
The Xerox Star had an AGAIN key, and some modern keyboards have a REDO key .
These keys repeat the last command.
Pressing CTRL while clicking on a color chip in Microsoft Paint lets users reapply that color whenever they hold CTRL; releasing CTRL returns to the prior color.
Unlike Paint, the Springboard emphasizes and deemphasizes the visual representation of the interface with the COMMAND button press, and generalizes the approach to tool modes.
Also, our experiment is the first to study this design option and demonstrate that it offers significant advantages.
Their study compares a baseline task without commands to a compound task with command selections; subtracting the two yields the true cost.
We extend this subtraction methodology by contributing a new methodology that leverages keystroke-level analyses to carefully tabulate all costs associated with mode selection.
This approach allows us to show that locally-activated marking menus do not benefit tool mode switching despite the common belief that round trips to the edge of a tablet's screen are slow .
We evaluate techniques for switching between ink and several other command modes.
The efficiency of command selection depends on the surrounding operations .
Some designs optimize alternation between commands, while others optimize repetition of a command.
For example, ToolGlass  has a tool palette that users position with the nonpreferred hand, but users must position and click through the ToolGlass every time they apply a tool, making repetitive tool use inefficient.
Our experiment controls for this by including both alternation and repetition task patterns.
A user commits a mode error when he or she fails to comprehend the current state of the system and thus performs an action which is incorrect given the true state of the system .
Quasimodes may reduce the potential for mode errors by helping users maintain awareness of the system's state.
This suggests the user's active maintenance of muscle tension is the crucial quality of a quasimode.
For example, holding SHIFT to temporarily capitalize letters is a quasimode, but CAPS LOCK is not because tapping the key persists the mode.
Another good example of a quasimode is the panning tool in Photoshop.
The user presses and holds the spacebar, and can then click and drag multiple times to pan an image; releasing the spacebar returns to the prior mode.
Note that the spacebar accesses one and only one temporary function.
Tracking menus are menus that follow the pen .
Alias Sketchbook 2.0 activates a pan/zoom tracking menu when the user holds the spacebar.
The user may pan by quickly "pawing"  at the screen , or may instead target the center of the tracking menu to zoom.
Releasing the spacebar dismisses the tracking menu and returns to drawing mode.
Thus the tracking menu offers a quasimode with one other rapid-access function.
Marking menus use the direction of a pen stroke to select commands .
Windows Journal, clicking on the lasso icon turns on selection mode, which stays on until the user taps the pen icon.
This technique amortizes the cost of the command selection across several operations, but returning to pen mode requires an extra step to reselect the pen tool.
The Once technique turns on the selected mode for one use only, and then automatically reverts to the prior mode.
For example, when a user selects the Insert Space command in Windows Journal, dragging the pen inserts white space.
When the user lifts the pen, the interface reverts to the default inking mode.
This technique works well for tools that the user tends to employ one time, but is tedious if the user applies the same tool multiple times in a row.
Quasimodes such as the spacebar for panning in Photoshop offer another approach.
Quasimodes are only suitable for temporary modes, as users cannot hold a key indefinitely, and even on a keyboard, only a few keys for quasimodes are available, so designers must use them sparingly.
This approach is more forgiving for users who tend to release the button too early when applying a tool one time.
If the user actually did select a command by mistake, and his intention was to immediately return to inking, the user can press COMMAND again to cancel.
We conducted a formal experiment to evaluate the effectiveness of techniques for transitioning between multiple modes on tablet computers.
We evaluate the traditional Persists and Once techniques as well as the Springboard and SpringOnce designs.
We decided to include both of these designs because it was not clear which one would actually perform the best, and because the Springboard builds on previous work that suggests quasimodes can facilitate mode switches .
Several factors may influence the efficiency of tool modes: Behavior is the user interface's mode switching policy, i.e.
Since Once and Persists support different task patterns, it is important to test tasks with alternation between ink and command modes, as well as tasks that require repetition of the same command.
MacKay  notes that when users are performing mechanical copying and modification tasks, they tend to batch commands together.
But during problem solving, it is difficult to anticipate the sequence of commands that will be needed, so users tend to interleave different operations.
Hence our experiment includes examples of each class of task.
We wanted to evaluate the effectiveness of the Springboard designs both for a local marking menu activated close to the user's current screen location, as well as for more traditional interface widgets that are located near the edges of the screen.
We chose the tool lagoon design as it is now an established approach  that seems well suited to the pen.
The Springboard is a technique to get more mileage out of quasimodes.
Instead of mapping one control to one mode, the Springboard allows users to pass through two submodes.
Pressing COMMAND starts a command selection sub-mode .
After the user selects a tool, the Springboard transitions to a command performance submode where the user can apply the selected tool multiple times.
Like a traditional quasimode, releasing COMMAND always returns to the application's default mode.
The Springboard thus brings the benefits of a quasimode to multiple tool modes, because it encompasses all modes in a pop-up menu within a single spring-loaded control.
Like the Persists technique, Springboard amortizes a command selection across several operations.
But unlike Persists, it removes most of the extra cost required to turn off the mode.
This should make Springboard more efficient than Persists in both one-time and multiple-use scenarios.
During pilot testing of the Springboard, test users liked holding the button as a way to apply a tool multiple times.
But when the user's intention was to apply a tool one time only, some users would release the COMMAND button immediately after picking the tool from the menu but before applying it.
The system would return to inking, thus causing users to mistakenly ink rather than applying the tool.
We found this error hard to avoid even after lots of practice.
The problem seemed to be particularly vexing for the local marking menu version of the Springboard, but did occasionally arise with the Springboard Lagoon as well.
We realized that a hybrid of Springboard and the Once technique might help to resolve this issue.
If a user selects a tool without applying it and then lets go of the button, it is unlikely that he immediately wanted to transition back to inking.
So our SpringOnce design keeps the tool active for one use in this case.
To make our Local Marking menu and our Lagoon menu designs comparable, unlike the design pictured in Fig.
Since our conditions require users to draw identical marks to select modes, any observed effects will not be due to a difference in how the menus work.
2 has the virtue that the user never has to decide which icon to aim for, which may speed performance.
For the Springboard designs only, our Lagoon condition highlights the arc when the user presses the COMMAND button.
The COMMAND button was not used at all for the lagoon's Once and Persists techniques, as we wanted our implementation to be as close as possible to status quo mode techniques.
Inking is the "normal" mode that we expect users to spend the most time using in applications that leverage the unique capabilities of a pen-based computer.
Thus, in order to test the full life-cycle of a mode switch, we needed a compound inking/command selection experimental task that required the user to start with inking, apply one or more tool modes, and then return to inking.
This task pattern ensured that our experimental task could capture all of the costs that might accrue due to  switching from inking to a tool mode,  applying a tool mode, and  reverting back to the normal inking mode when finished with a tool.
Each task consisted of a set of 5 subtasks, which we call segments.
The first and last segment are always inking.
The user's task was to circle each dot using the correct mode.
To prevent any errors from cascading, users could not proceed until they successfully completed the current segment.
If the user made an error a short `oops' sound played.
Users were instructed that their circles could be drawn casually, but should be larger than the dot and smaller than the box.
Drawing the circles was thus a quick and fluid inking movement, much like jotting down a quick note, rather than a visually guided steering task or precise pointing task.
If the circle did not contain the dot, or if it started outside the box, it resulted in an error.
For the inking portion of the task, we decided to have users draw series of circles, rather than handwriting or scribbling.
Circling captures the essence of handwriting  while providing a well-defined task that is amenable to quantitative study.
A series of dot stimuli, which the user always had to work through from left to right, provided a reference for where the circle had to be drawn.
During pilot testing, users would sometimes skip the ink  if the two C subtasks were the same due to a tendency to chunk two identical commands together.
Thus, we used different commands for the C segments of the iCiCi pattern.
We wanted the task to be ecologically valid, so we used commands that mimic the Windows Journal Tablet PC application.
The pen left a thin blue ink trail.
Applying the hiliter tool created a thick yellow trail, and the lasso tool made a dotted red line.
The eraser tool left a gray swath, as we wanted users to be able to see where they were applying each tool.
All tools were always applied by circling the current dot stimulus.
We told users to think of the eraser as "erasing what's inside the circle" rather than as a tool they had to scrub back and forth.
Each stimulus shows the user where the command is in the marking menu.
These cues appear above the dots so that the user's hand does not occlude them during the task.
These are just static cues, not active icons .
For the dots that only required inking, we omitted the border around the top half of the box to emphasize that the task segment was different and required returning to the "normal" inking state.
These cues are intended to help users anticipate the sequence of actions, instead of reacting to the stimuli one box at a time.
We also provided users with clear visual feedback of the currently selected mode.
When users completed a marking selection, the icon for the marking command remained on the screen as continuous feedback of the selected tool.
Each mode also provided a custom tracking cursor.
The lagoon mark had to start within a 50x50 pixel square around this point.
The first stimulus dot was 104 pixels from the left and 363 pixels from the top.
Each dot was separated by 159 pixels.
For the Local Marking conditions, we trained users to invoke the menu on or near the dot stimulus.
They continued to use the Local Marking menus this way throughout the experiment.
Independent variables were MenuType , Behavior , and TaskType .
Because fully crossing all of these factors results in too many conditions for a single subject to complete in a one hour session, we ran Behavior and TaskType as withinsubjects factors and MenuType as a between-subjects factor.
We employed a 4x4 Latin square across the Behavior conditions to minimize order effects, with 4 participants each in 4 different orders .
Thus in total, our experiment includes: 16 Participants x 4 Behaviors x 6 blocks  consisting of 1 baseline trial + 6 command trials ; = 42 trials  per Behavior.
Half of the participants used Lagoon and half used Local Marking menus, for 2688/2 = 1344 trials  in each.
Dependent measures were completion time and error rate.
We recorded the total trial time, which is the total time to complete all 5 task segments.
To facilitate our keystroke level analyses, we also recorded separate time intervals for each of the 5 segments and for each elemental subtask contributing to the final  circling of the dot stimulus, i.e.
Each participant used a Toshiba Portege TabletPC, running Windows XP SP2 Tablet Edition, with a 24.5 x 18.5 cm  display.
The tablet was used in slate mode and angled by about 10 degrees using a short monitor stand to help users achieve a desirable viewing angle.
Users were not allowed to hold the tablet in their lap.
We used the Enter key of a Targus USB Numeric Keypad as the COMMAND button.
We were not able to use the built-in tablet bezel buttons as they are on the right side and running these Toshibas in the upside-down screen orientation significantly degrades interactive performance.
Participants ranked the four Behaviors according to their preference.
Seven of the 8 Lagoon users chose Springboard or SpringOnce as their favorite technique and one chose Once.
For the 8 Local Marking menu users, 5 chose Springboard or SpringOnce, 2 chose Persists, and one chose Once.
Note that participants could not contrast Local Marking with the Lagoon since MenuType was a between-subjects factor.
We conducted a 4x3x4 repeated measures ANOVA on 4 Behaviors  by 3 TaskTypes  by 4 Blocks.
The MenuType  and Order  were between-subjects factors.
We used the median completion time to correct for typical skewing of reaction time data and to remove any outliers.
The median was calculated for each cell of the design at the Behavior x TaskType x Block level for each subject.
At this level the design has three observations per subject, so we discarded the best and the worst observation, leaving the subject's median trial completion time for data analysis.
Note that some of these median trials do include errors.
We left these trials in this analysis, because the costs resulting from decision making, hesitations, and errors are part of what we are trying to measure to accurately characterize the true cost of command selection  for each technique.
Because the user had to finish all task segments correctly to complete a trial, making errors never allowed users to complete the task more quickly.
16 right-handed users participated in the study.
Most participants had used a tablet or a handheld, and all had used laptops or other mobile devices.
All participants selfreported normal color vision, and we ensured that all participants positioned the tablet so that they could clearly distinguish the different colors of the task stimuli.
Planned comparisons revealed that overall Springboard, SpringOnce, and Once were all significantly faster than the Persists condition .
Repetition tasks were faster than Alternation tasks .
This is a robust effect because all levels of Behavior  required fewer tool mode selections for Repetitions.
Repeating the analysis without this user's data showed the same significant results.
If the SpringOnce-first Order resulted in a negative training effect, we would have expected the Springboard-first Order to also exhibit this effect.
Since it did not, this interaction probably just reflects a participant effect.
A trial was an error trial if the user exhibited any mistake or sub-optimal behavior, such as unnecessarily reselecting the current mode, for any of the 5 segments.
We computed the error rate for each Behavior and TaskType across all 4 Blocks.
Since errors were not possible in the Baseline task, we only have 2 levels for TaskType in this analysis.
Thus we conducted a 4  x 2  repeated measures ANOVA on error rate with MenuType and Order as between-subject factors.
There were no main effects on error rate for any within or between-subjects factors.
None of these differences were significant.
This interaction indicates that the SpringOnce design actually did succeed in reducing errors versus the Springboard for the Alternation task .
However, the pure Springboard worked well for Repetition .
This means the best mode Behavior depended on the TaskType, which underscores the importance of controlling for different task types as advocated by Mackay  and Appert et al.
Once was the fastest behavior for Alternation tasks .
SpringOnce was significantly faster than both Once and Persists for Repetitions  and faster than Persists for Alternations .
Although Springboard had the fastest absolute mean time for Repetition tasks, it had a higher standard deviation than SpringOnce.
So Springboard was significantly faster than Once  but not significantly faster than Persists.
Block was also significant, F=15.59, p<.001, indicating that participants became more proficient with increasing experience.
This suggests the Repetition and Alternation tasks exhibited a stronger learning effect across blocks than the Baseline task.
The Order between-subjects factor had no main effect, but Behavior x Order F=1.93, p<.05 was significant.
Investigation of the means revealed the SpringOnce-first Order contained the slowest participant in the experiment.
Perhaps the most surprising result from the experiment was that the between-subjects factor MenuType was not significant =0.04, p=.85.
Overall, the MenuTypes only differed by 330ms .
Prior to the experiment we estimated that a round trip to the lagoon should take about 1.5 seconds, yet experts can invoke a marking menu command in less than 500ms , which should give the Local Marking menu an advantage.
An interaction between independent variables potentially could negate any main effect for an experimental factor, but the only significant interaction with MenuType was a Behavior x TaskType x MenuType three-way interaction, =2.53, p<.05.
Investigation of the means suggested that this interaction occurred because the Lagoon version of Springboard and SpringOnce tended to be faster for Repetition than the Local Marking versions of the techniques.
In fact, the lowest absolute mean completion time for any technique in the entire experiment was the Springboard Lagoon for Repetition tasks, at 5938 ms.
But even for the traditional Once and Persists mode techniques, which demand increased round trips to the lagoon, the advantage for Local Marking menus was limited.
Another possibility is that some uncontrolled effect could have obscured any effect of MenuType, or that our experiment lacked sufficient statistical sensitivity on MenuType since it was a between-subjects factor.
Our keystroke-level analysis required three steps.
First, we defined all of the unit actions required to perform our tasks, and translated these into keystroke-level models  that compute the total task time in terms of these unit tasks.
These models omit mental pause operators , because we will estimate any mental pause times from empirical data.
These values can be plugged into our keystrokelevel models to compute an expected physical articulation time based on users' performance in the control conditions.
Third, we compared the KLM models to the observed times for the Behaviors in the Lagoon and Local Marking menus.
This shows where the techniques deviate from the model, indicating the presence of hidden costs.
These costs might include increased reaction time resulting from planning what to do next, mental pauses, or delays while the user attends to visual feedback after performing an action.
Our methodology cannot attribute these costs to a specific cause.
It just lets us deduce that a hidden cost must exist in a specific portion of the task.
This is sufficient to generate many insights as to where the bottlenecks to performance lie and what parts of a technique might be improved.
A trial consisted of five subtasks , each with a dot stimulus that the user circled with the correct tool.
For some segments, the user already has the correct tool.
The time AP to Apply the tool after pointing to the segment is:  AP = , where PS = Point the pen at the segment DC = Draw a circle around the dot If the user needs to change the tool, the time MC to use the Menu to pick a new command is:  MC = , where PC = Point where the command will be activated DM = Draw the mark Then, it takes time AM to Apply the tool after marking:  AM = , where PM = Point from end of the mark to the dot  We can now populate tables to summarize the overall costs for each technique by following several rules:  a segment that does not require a mode switch just takes time AP;  any task segment that requires a tool mode switch requires time MC + AM to complete; and  if the user may need to press COMMAND, this is noted by tallying each mode-in cost min and mode-out cost mout.
These always come in pairs  since the user eventually lets go.
Because the Once condition was so repetitive, it required very little decision making while performing the task.
Thus the component times for Once tended to be faster than the other conditions.
This fast pace tended to continue through the baseline trials that users encountered during Once.
For our purposes, we want the KLM models to estimate the pure physical articulation costs of each technique.
Thus in our experiment the Once condition, as well as the baselines performed during the Once condition, yielded the best estimates for these pure physical articulation costs.
For the times related to drawing the mark and returning to the dot after marking, for each MenuType we took the average time for the task segments in Once that contained tool selections.
Note that in our experimental data collection, we recorded each of the 5 individual time intervals defined above  for each of the 5 segments of every trial.
For the Lagoon Menu : PSl = 307 ms  DCl = 440 ms  PCl = 558 ms  DMl = 667 ms  PMl = 283 ms  APl =  = 747 ms MCl =  = 1225 ms AMl =  = 723 ms Thus, we can see immediately from these estimates that the time penalty for making a round trip to the lagoon was not that large.
The largest advantage for Local Marking comes from the time to pick a command from the menu MC , with  = 384ms being saved versus Lagoon.
It only took users 558ms to move the pen to the lagoon, and the time to draw the mark on the lagoon also took  = 173ms longer.
This may have been because users were moving the pen quickly and were still coming to a stop as they started drawing the mark on the lagoon.
The small value for PMm  confirms that users did mark close to the dot.
However, the segments containing each stimulus were fairly large targets, so the time PMl to return to the vicinity of the stimulus from the lagoon was only 283ms, just 122ms more than PMm for the Local Marking menu.
We can now calculate the average total trial times we would expect based on the unit task times.
To do this, we compute the sum of the KLM models for all 4 Behaviors and the 2 tasks : Local Marking expected average trial time MT :  MT=  /  = 5758ms total  The Lagoon conditions require fewer  actions because they do not use the button for Once or Persists.
Furthermore, we observed that for Springboard and SpringOnce, users tended to press the button while moving the pen to the lagoon.
Thus, it seems likely that some or all of the min mode-in cost for the Lagoon occurs in parallel with the PCl unit task, so we only count mout time for the Lagoon conditions where the button was needed: Lagoon expected average trial time LT :  LT =  /  = 6354ms total 
We estimated the time required to react to the stimulus for each MenuType.
The time to move from the Start button to begin circling the dot in the first segment includes the time to physically move the pointing device plus the unknown reaction time Rt.
We know the time to point from the Start button to the first dot must be a minimum of PSl = 307 ms .
If we attribute all of the remaining time to reaction time, this gives us a conservative estimate, yielding average reaction times of Rtl = 434ms for the Lagoon and Rtm = 643ms for Local Marking, favoring Lagoon by 209ms.
Without the button presses, the models above predict the advantage for Local Marking should be = 980ms.
This is the theoretical time-motion efficiency advantage that Local Marking menus should exhibit due to elimination of round trips, as reflected in the smaller values for its MCm and AMm unit task costs compared to MCl and AMl for the Lagoon.
But once we consider the  button presses, this advantage is reduced 310ms due to the increased button press costs for Local Marking.
Adding in the 209ms increased reaction time further undermines the advantage for Local Marking, reducing the theoretical 980ms advantage by a total of 519ms to yield a net predicted advantage of only 461ms compared to Lagoon.
This agrees quite closely with the average Local Marking vs. Lagoon total trial time difference of 330ms that we observed in our experiment, leaving only 131ms unaccounted for.
This small remaining difference may result from limitations of our models, the occasional time that participants lost due to errors, or other random between-subject variations.
Thus, altogether these analyses confirm that it was unlikely we could have observed a significant advantage for Local Marking menus for our experimental task.
For the mode switching time ,  reports 139ms for their nonpreferred hand button technique.
From our data, the KLM for the Repetition task predicts the Once technique with the Local Marking menu takes: = 3MCm + 2APm + AMm = 5886 + 3  The actual value we observed in our experiment for this condition was 6946 ms, which includes Rtm = 643 ms.
We can identify hidden costs in the Once, Persists, Springboard, and SpringOnce techniques by comparing the observed times for each segment to the values predicted by our models.
For this analysis, for each task segment, we computed the sum of all the times for command selection  and circling of the dot stimulus in the correct mode.
Due to random deviation from the average unit task times, users sometimes completed subtasks faster during Once than our models predicted.
This suggests that Persists  are mostly constrained by physical articulation time, whereas the bottleneck for Springboard and SpringOnce is decision time.
For Repetition tasks, Persists, Springboard, and SpringOnce all appear to have a mental set-up cost in segment 2  as users decide whether or not to use the tool multiple times in a row.
Similar calculations show that our Springboard designs had paid for the extra set-up time to invoke them by the second command invocation on the Lagoon and by the third command for Local Marking.
We can also consider use of round-trip designs such as the lagoon on larger displays or for tasks that require greater precision of pointing.
For example, if we double the round trip times PCl and PMl, this would increase the Lagoon's average task times for our experimental tasks by approximately 2 seconds overall, which again would provide a scenario where Local Marking offers a benefit.
We anticipate that Local Marking may have increased benefit if the starting location of a mark chooses the object to act upon, because it integrates selection of an object with command selection .
Like right-click, this limits the commands offered in a menu to those valid for the selected object.
For these reasons, our current results should not be extrapolated to commands that require a prior selection.
Finally, localized user interfaces  may offer benefits to users that were not captured by our experimental task.
For example, localized interfaces may reduce the physical effort needed to move around the screen.
Recent results suggest they may also prevent visual diversion of attention from one's work .
Our models suggest that Local Marking would have fared better if no movement had been required to proceed to the next task segment.
The Local Marking menu defined the time to move to the location where the mark is drawn as PCm = PSm =347ms, which is just saying that it is the time to point to the next segment.
If the user can keep working in the same spot, PCm would drop to some minimum time needed to lift the pen between commands, say 100ms.
In this scenario our models predict that the local marking menus would gain another 1200ms performance advantage over the Lagoon, because the round trip time is still required to pick a command with the lagoon and cannot be eliminated.
Thus, in a sense the time to move between the experimental stimuli was an added cost for Local Marking, but not for the Lagoon, because the round trip time absorbs the time needed to move between stimuli.
It is not clear how often real-world tasks would have sufficiently high locality of reference for the Local Marking menu to avoid this `extra cost' and gain the calculated benefit of 1200ms.
We can also consider N repetitions of a command rather than just 3 repetitions.
There are several design questions for the Springboard: Does a tool stay selected across invocations?
Three users commented that the Springboard Lagoon should reactivate the prior tool if they hit COMMAND and stroke the pen without going to the lagoon.
We find this feature works well .
It allows users to quickly interleave inking with another mode, thus facilitating tasks such as panning while annotating a document, or going through a document with a highlighter while jotting down notes.
It may not be possible to support this desired feature for Local Marking.
How to provide a spring-loaded control for the nonpreferred hand on a tablet?
Our users found the Enter key acceptable for use on a supporting surface, but felt that COMMAND should be part of the tablet.
We are currently exploring placement of a button on the Tablet PC bezel, as well as other spring-loaded control designs.
A control should be accessible for both left and right handed use from any of the 4 screen orientations, and it should not cause inadvertent activations.
Also, some new Tablet PC designs make the keyboard more accessible, and some Wacom desktop tablets offer side buttons suitable for COMMAND.
Are other design hybrids with the Springboard possible?
It is possible that experts could use the techniques more efficiently, or further design hybrids may be possible.
A lagoon that always stays active could support both the Once behavior and the SpringOnce behavior.
This is also useful if a device lacks COMMAND, or if the user eschews COMMAND due to fatigue or laziness.
But if the user instead presses and holds COMMAND prior to completing the first application of the tool mode, this could trigger SpringOnce.
Does the lagoon stay visible when inactive?
We tried a fully disappearing lagoon, but it seems important to have a visual target in order to make a ballistic motion from the work area to the lagoon.
Without a target to aim for, users must move to the general area, and then make a corrective movement when the lagoon appears, which might reduce performance.
Future studies should investigate this further.
Our experimental results showed that users preferred Springboard and SpringOnce to the status-quo Once and Persists techniques.
One user felt strongly that using the button was a pain, but most users liked having a choice that let them control how long a mode stayed active.
Although Springboard and SpringOnce performed similarly in the experiments, the SpringOnce design did tend to result in a lower error rate than the Springboard, particularly for Alternation tasks.
This suggests that SpringOnce can provide an effective mechanism for users to manage multiple tool modes from a single spring-loaded control.
The new designs were faster than Persists overall and were faster than Once for Repetition tasks.
However, Once remains the technique of choice for alternation; in this case it would be hard to beat Once, unless the user keeps interleaving the same command and uses the Springboard design option suggested above where the tool remains selected across invocations of the lagoon.
Thus, exploration of design hybrids with Once offers a promising avenue for mode behaviors that can support a variety of task contexts.
Our keystroke-level analyses showed that the Local Marking menu has a time-motion efficiency advantage in theory, but in practice this advantage is smaller than we anticipated and is eroded by several ancillary costs, such as mode switching and reaction time, that appear to favor the Lagoon menu design.
Failing to find a statistically significant difference cannot prove that there is no difference between the Lagoon and the Local Marking menu.
But the failure to detect this effect combined with the results of our keystroke level analysis, which suggest why Local Marking failed to significantly outperform the Lagoon, together make a convincing case that it is difficult for the Local Marking menu to provide a substantial benefit in the task context that our experiment studied.
Thus, elimination of round trips does not necessarily improve the speed of tool switching on tablet computers.
Our hope is that our results and methodology can offer better insights into factors influencing performance for pen and gesture interfaces.
We must continue to explore alternative task contexts, novel localized interface designs, or other metrics of user performance where pen and gesture interfaces can offer significant performance advantages.
