Information overload is a growing threat to the productivity of today's knowledge workers, who need to keep track of multiple streams of information from various sources.
RSS feed readers are a popular choice for syndicating information streams, but current tools tend to contribute to the overload problem instead of solving it.
We introduce FeedWinnower, an enhanced feed aggregator that helps readers to filter feed items by four facets , thus facilitating feed triage.
The combination of the four facets provides a powerful way for users to slice and dice their personal feeds.
In addition, we present a formative evaluation of the prototype conducted with 15 knowledge workers in two different organizations.
As is the case with email triage , combing through lots of unread feed items and deciding what to read can be daunting, especially to busy knowledge workers.
In most feed readers, feed items are displayed in a linear, reverse-chronological list, which provides limited support for feed triage at the user interface level.
For example, Google Reader offers the functionality to filter items by people or source , while FriendFeed allows users either to filter by people or to use a form-based search tool .
To deal with the overload problem, people have tried various strategies such as organizing feeds into tiers of different priorities or adopting filtering tools.
Most filtering tools, however, assume that users have a prior idea of what they want to find.
This assumption violates the idea of serendipity that people are hoping for when subscribing to feeds.
In this paper, we describe FeedWinnower, a web-based faceted browser designed to support feed triage .
Given a set of feed items collected through FriendFeed, our prototype generates four facets: topic, people, source, and time.
As shown in Figure 1, users interact with the facets on the left to construct a query to filter the feed items down to a subset of items, which are displayed reversechronologically on the right.
For each feed item, we show its creator, source, content, and time of creation.
The topic facet serves a dual role, not only providing an overview of the content of the items, but also enabling users to choose a topic of interest.
Today's knowledge workers face the challenge of keeping track of numerous information streams from different sources, e.g., email messages sent by colleagues and friends, news stories related to topics of interest, new tweets posted to Twitter, and status updates in Facebook and LinkedIn.
To avoid the headache of visiting different web sites and tools, many people have adopted RSS feed readers such as FriendFeed  and Google Reader .
RSS, aka Really Simple Syndication, is a popular web-based format for publishing frequently updated content and is supported by most Web 2.0 tools.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
When combined, these facets allow users to "slice and dice" the items, helping them to browse items by features such as who, where, what, and when.
The main contributions of this paper are:  applying the combination of topic, people, source, and time facets to filter feed items and  proposing an interactive topic facet whose topics are automatically computed from the content of feed items.
In this section, we describe how we construct the four facets, followed by an illustration of their usage.
Our design was informed by the findings of a prior field study .
The four facets described in this section were selected based on the multiple rounds of surveys and interviews with two groups of busy professionals in a large enterprise.
Designers of interfaces for managing RSS feeds can benefit to a great extent from the prior research on email overload, e.g., .
Feed items share many characteristics with email messages; in fact, a feed item includes information such as who created it, where it was created, when it was created, and what it is about.
With email, Whittaker et al.
Studying email triage, Neustaedter et al.
They also observed that people organized folders according to time, project, person, or interests.
These findings are well aligned with the design of FeedWinnower, which includes topic, people, source, and time as facets for filtering.
There is extensive prior research on faceted browsing .
A facet is a category used to characterize information items in a collection .
Hearst suggested that social tags provide an excellent basis for the formation of topic structures for faceted browsing , but stressed that acquisition of facet metadata is a problem remaining to be addressed.
Among the four facets utilized in FeedWinnower, we extract information about people, sources, and time directly from the feed items.
However, many feeds provide no topic tagging.
To compute a set of browsing topics, we developed a novel technique that mines the content of the items.
Related research also includes the design of blog search and browsing interfaces .
Baumer and Fisher  proposed an interface for organizing blogs around a list of extracted topics.
Probably the most closely related work is the tool by Dork et al.
It also supports a faceted browsing interface.
They assumed that feed items have titles and descriptions, time of creations, locations, and tags.
A key difference is that we make no assumptions about the presence of tags or manually added metadata.
Instead, we construct the topic facet from the content of the items.
In addition, learning from email triage , we recognize that people and sources are salient indicators of feed importance, and embrace them as part of our design.
A common practice for users of existing feed readers is to start by skimming through the list of unread items to form a mental model of what topics are being discussed.
The goal of our topic facet is to provide at a glance this high-level summary.
Some of the extracted topics may be longstanding ones that appear frequently while others may emerge serendipitously due to an outburst of temporal events.
Generally, a feed item includes a short text snippet, the specific content of which is dictated by the system creating the item.
For example, a Twitter item contains the text content of a tweet, and a del.icio.us item includes the title of a bookmarked URL.
We extract topics from these text snippets.
We have tried a variety of methods and settled on the following noun identification technique.
Inspired by past work using noun phrases to represent concepts of text snippets , we first identify nouns appearing in the content of each item using the Stanford part-of-speech tagger .
Then, for each noun identified, we count its occurrences across all items.
Subsequently, the top n nouns most frequently appearing in the items are chosen and displayed as a tag cloud , where n is pre-determined.
The user can click any topic in the facet  to filter the feed items down to the subset of items containing that topic, reducing the number of items being displayed on the right side of Figure 1.
Consequently, the facet is updated to display a new tag cloud corresponding to the remaining items.
The topics of this new tag cloud are constructed from the content of the remaining items by executing the same algorithm described above.
Selecting additional topics will further reduce the remaining items to those containing all the selected topics, thus functioning as an AND query.
By no means do we suggest that the noun identification technique is the best choice for constructing the topic facet.
Other techniques that we have tried include TF-IDF and a term expansion algorithm .
When we ran these alternatives on our testing feeds, however, the resulting topics were not as meaningful.
In addition, highlighting the noun phrases in the display of the remaining items helps to explain to the user why the items are included in the result.
Each feed item has information about who created it.
Aggregating the list of creators, we construct a people facet as shown in Figure 3.
An image icon represents a creator , and a number indicates how many items that creator has contributed.
By clicking, the user can select any subset of creators.
For example, in Figure 3, the user has chosen HP and SUN, filtering the items down to those produced by HP or SUN.
Scenario 1: At the end of a workday, Mary opens FeedWinnower to get a sense of what has been happening around her.
Using the time facet, she finds out that 507 items came into her account earlier in the day.
Glancing at the topic facet, she sees "iphone" and a few other topics being talked about.
As she clicks on "iphone", the right screen shows only 7 items after filtering out other items.
In the people facet, she identifies that these 7 items came from 4 of her friends and decides to read those items in detail.
Scenario 2: John wants to find out what his friends have been chatting about on Twitter lately.
He selects "Twitter" in the source facet and chooses "yesterday" in the time facet.
In the people facet, he then excludes those creators that he wants to ignore, filtering down to 324 items.
Looking at the topic facet, he sees "betacup" and wonders what it is about.
After clicking on "betacup" and reading the remaining 7 items, he now has a fair understanding about the term "betacup".
Each item has information about where it was created or delivered from, e.g., Facebook or del.icio.us.
The source facet shown in Figure 4 contains a list of these source services.
A text label, along with a number indicating how many items were created, represents each source.
The user can click to select any subset of sources.
Each item has information about when it was created.
Aggregating the time information, we construct a time facet as shown in Figure 5.
Each bar represents the number of items created in that time period.
We offer three time granularities, enabling the user to group items by day, month, or year.
By clicking a bar, the user can zoom into a more detailed view .
Our prototype takes advantage of the aggregation functionality of FriendFeed, which we believe is an example of functionalities becoming increasingly available on the web.
Once a user creates a FriendFeed account, we collect his feed items through FriendFeed's API.
From the items we construct the four facets as described above.
For performance purposes, we store a copy of these items in our server to dynamically update the facets and interactively display the items.
In addition, we periodically update the stored items as new items arrive in the user's feed.
The panel displaying the feed items was rated as easy to use .
The data collected also pointed to new requirements for future design, including extensions of the current functions, such as search and content preview, as well as new functionality such as allowing organization of content and task-related items  or supporting social functions .
FeedWinnower is a research prototype and its functions are still evolving.
As part of a larger iterative design project , we ran a formative evaluation to assess the usability and utility of the current prototype and elicit new requirements.
In total, the evaluation involved 15 knowledge workers: 8 senior professionals from a large IT enterprise and 7 managers from a mid-sized research organization.
All shared in their work a need to manage multiple information streams while coordinating people and projects.
For each participant, we collected data through an 1-hour interview, run in the participant's own work setting, and followed with a usability questionnaire.
In the first part of the interview , each participant reported about her/his information streams and practices.
In the second part, s/he was given an overview of the tool functions on her/his own computer.
The tool had been pre-populated with a rich set of streams, which was kept constant across the participants.
Participants were first given two example tasks  as task context for the evaluation:  foraging useful bits of content for a new project and  monitoring status updates of colleagues in various projects.
They were also encouraged to consider other personally relevant tasks.
Then, they were invited to try out each facet , assess its utility, and propose improvements.
Finally, a few days after the interview, they were asked to use the tool independently and give more feedback via a questionnaire mirroring the second part of the interview.
Through the interview and questionnaire, the evaluation yielded two main results about the prototype.
First, all participants saw the utility of the faceted browser for managing information fragments and status updates across their information streams, including the added benefits of being able to dynamically combine the facets.
They explored the flexibility of the tool by quickly formulating various types of queries during attempts to find relevant items.
Two participants commented: "Combining them is really interesting"; "I think it would be really useful during the information gathering stage, when you bring in loads of information together from different sources".
The usability ratings from the questionnaire were consistent: about 1 point above the neutral value or mid-point  of the 7point scales.
The second result was feedback on preferred facets and combinations of facets.
The preferred combinations of facets varied widely, which was expected given differences in their daily tasks.
However, the interview and questionnaire data suggested that the most commonly preferred facets were topic  and source .
A participant said: "I would definitely put the topic first...the one about the source I would probably put at the second."
We presented FeedWinnower, a feed aggregator where the topic, people, source, and time facets can be combined to support feed triage.
We also introduced a technique for constructing the topic facet that does not require manual creation of tagging data.
In our evaluation, 15 enterprise professionals saw the value of being able to dynamically combine the four facets, and rapidly adopted different combinations of facets to fit their diverse tasks.
The topic and source facets emerged as particularly valuable.
Finally, we collected promising directions for future design.
Baumer, E. and Fisher, D. Smarter Blogroll: An Exploration of Social Topic Extraction for Manageable Blogrolls.
Bernstein, M., Suh, B., Hong, L., Chen, J., Kairam, S., and Chi, E. Eddi: Interactive Topic-based Browsing of Social Status Streams.
Convertino, G., Kairam, S., Hong, L., Suh, B., and Chi, E. Designing A Cross-channel Information Management Tool for Workers in Enterprise Task Forces.
Dork, M., Carpendale, S., Collins, C., and Williamson, C. VisGets: Coordinated Visualizations for Web-based Information Exploration and Discovery.
Hearst, M. UIs for Faceted Navigation: Recent Advances and Remaining Open Problems.
2008 Workshop on Human-Computer Interaction and Information Retrieval.
Hearst, M, Hurst, M., and Dumais, S. What Should Blog Search Look Like?
Neustaedter, C., Brush, A., and Smith, M. Beyond "From" and "Received": Exploring the Dynamic of Email Triage.
Whittaker, S. and Sidner, C. Email Overload: Exploring Personal Information Management of Email.
Xu, J. and Croft, W. B. Query Expansion Using Local and Global Document Analysis.
