This study investigates how system delays affects a user's selection of task strategy.
Strategy selection is hypothesized to be based on a cost function combining two factors:  the effort required to synchronize input with system availability and  the accuracy level afforded.
Results indicate that users, seeking to minimize pacing, and monitoring.
A more promising method for addressing this issue would be to work toward the development of a predictive, zero-parameter engineering model that would characterize the relationship between system delay and user performance.
I%st, does system delay in fact havt?
Second, if delay does affect user performance, can we define a model that adequately dcscribcs this relationship?
In fact, Shneiderman ing pioneering interaction.
The failure of researchers to adequately address this issue has resulted in a lack of clear, concise guidelines that system engineers can use to support crucial design decisions.
As an example, Mr@in & Corl  the behavior of subjects performing with productivity entry and problem solving tasks.
Results iodicated significant effects across conditions, vealed strong productivity wit h decreased system delays; however, further analysis reincreases for the data entry tasks exists between but not for the problem solving tasks.
The present study was designed to avoid these difficulties.
First, task effects were minimized by the use of a simple data entry task.
Further, a performance model, detailing the interaction of system delay and user performance, was developed to facilitate an understanding of these effects.
Third, the study was conducted on a sole-use computer to provide maximum control over the delay conditions experienced by the subjects, and constant delays were instituted to exclude the issues of predictability model predictions and variability,2 Fourth,
The amou nt of control exerted over the task.
Several of the studies were observational in nature and the researchers were not able to systematically control what task  the subjects were performing , This makes it difficult which supposedly used similar tasks.
The amount of control exerted over the delav conQJQi.s.
In a number of studies, researchers were not able to tightly control the delay conditions presented to the subjects .
This situation normally occurred when data was collected from an active work site with the subjects connected to a host system.
While subject transactions were given a high priority, the delays presented were still dependent on the processing load of the host computer and may therefore have varied widely, in mean and vafiance, from those intended by the researchers.
The system model is composed of three components: system response time, display time and lockout initiates an activity time.
System response time is the time that elapses between when the user and when the computer initiates its response.
This measure is composed of three subcomponents: computation, overhead and delay.
Computation is the time required by the system to perform all operations necessary to support the user's requested activity.
Finally, delay is the sum of all time lags which extend the system response time beyond that required for all computational quirements.
Along the same lines, display time is the time required by the system to display the results of the user's request on the proper output device, and lockout time is the time that elapses between when the system displays the results for the current activity and when the system becomes available for entry of the next activity.
This measure is composed of four sub-components: system response time, display time, lockout time, and user delay.
The first three of these sub-compments are detailed above, User delay is defined as the time that elapses between when the sys-
This linear decrease in initial keystroke latency will continue until a boundary point is reached where the system delay is equal to the user's planning and acquisition time and an initial keystroke latency of zero is achieved .
At this point the user, theoretically, never waits for the system and the system never waits for the user.
However, this boundary point will rarely, if ever, be reached due to the commission and cost of anticipation Due to the variability anticipation errors.
Initial observations indicated that system delays induce three different task strategies, each characteristic of a particular delay region.
The choice of strategy was a rational one based on the relative cost of available strategies, where cost reflects the strategy's demand for cognitive resources and the accuracy rate it affords .
The cost of the task will therefore increase with increased unbounded as a 100% error system response times and, if no corrective action is taken by the user, can become  rate is approached.
We therefore hypothesize that at some system response level the cost of completing the task will exceed some "acceptable level of effort for the task" and the user will attempt to select a strategy that will successfully accomplish the task but with a lower associated total cost.
The tangible result of this process will be that users will never reach a zero-second initial keystroke latency but will shift strategies prior to this point.
This shift will be reflected in a change in the user's initiat keystroke latency and anticipation error rate .
In the simplest case, system delay is equal to zero.
Since under this scenario the user will never have to wait on the computer, task time  will be equal to the total time required to retrieve and begin entering the next data item  .
As system delays increase, progressively more of the user's performance in this region.
First, with a system delay of zero seconds we expect to see an initial keystroke latency equal to the user's planning and acquisition time and an anticipation planning and acquisition time will be absorbed into the system delay interval.
Thus, the user's task time will  appear to improve in a linear fashion, since initird keystroke Iatencies are, by definition, derived by subtracting any system delay from the user's planning and acquisition time.
As an example consider a user with a task planning and acquisition time of 0.75 sees.
In each case, the user's actuat performance would remain constant but the initiat keystroke latency measurements would decrease in relation to the system delay provided.
Second, as system delays increase we expect to see a linear decline in initiat keystroke Iatencies and an associated rise in the number of anticipation mitted.
Since system delays within this region do not require the user to develop any particular task completion strategy in reaction to external demands, we will refer to the characteristic strategy of this delay region as automatic performance.
Correspondingly, anticipation error rates will drop from the level of the previinherent ous region and will remain stable but nonzero.
Perfect performance is not expected, due both to the variability ments of the type described by Pachella .
Performance in this region will begin to break down as the user's ability to accurately estimate the system delay demust therecreases with increased delay times .
With each increase in system delay, the user's task time dMribution fore shift in increasing proportions to ensure an acceptable the task until, as in user performance and to constant user performance adjust-
Such a skill can be brought to bear in the current situation and incorporated into a strategy that takes into account exa timely rate of pected system delays.
This would allow the user to reduce the rmticipation error rate while maintaining initiation response.
Task times within this region will therefore be equal to the user's estimate of the system response time plus the addiFigure 5.
Example initial keystroke latency distribution illustrating the relationship between the user's estimate oj the system response time  and the bufler delay  added to this estimate to keep the error rate within an acceptable range.
The software program was designed so that all subject keystrokes and their associated latencies were recorded; however, not all keystrokes were echoed back to the subject on the computer screen, In particular, keystrokes which occurred during the target delay period  were not displayed.
These keystrokes were recorded to disk but were essentially lost from the subject's perspective.
The subject therefore experienced a non-buffered input system.
Once the target delay was complete, all subsequent key-
They will then be forced to rely on external stimuli to signal system availability.
Initial keystroke latencies will therefore be equal to the user's simpIe reaction time  and the error rate will drop to near-zero .
Since users are forced to rely on an external stimuli to indicate system availability, we will refer to the characteristic strategy of this delay region as monitoring.
All subjects were naive regarding the experimental mawere fully debriefed following the experiment.
Subjects were paid for their part icipatiou.
The experimental stimuli were presented to the subjects on a Macintosh IIci personal computer.
The computer was equipped with a color monitor, and used a standard Macintosh keyboard with the numeric keypad on the right-hand side.
To provide maximum control over system delays, the computer was disconnected from all outside networks and all nonessential memory resident programs  were removed.
Finally, the subject was instructed to perform the task as quickly and accurately as possible.
Subjects were also informed during this time that they might experformance due to perience some delays in the computer's other processing tasks that the computer was performing, Subjects were not informed of the number of conditions that they would experience.
The numbers on each sheet were arranged into groups of fives forming a 3x3 matrix with rows separated by single line dividers and columns separated by double line dividers.
Each data sheet was encased in a plastic, non-reflective protective cover and placed on an upright typing stand.
The software program which controlled the experiment was written in the CT programming language , A delay module included in the program delayed the computer's response for a predetermined time after the subject entered a complete three-digit number.
Subjects were atlowed an optionat two-minute rest period after any of the experiof the fourth condition, mental condhions and all subjects were required to take a five minute rest after completion This process continued until the subjects completed the task under all seven experimental conditions.
Subjects then began to enter the current number set into the computer.
Figure 6 displays initial keystroke latencies this experiment.
The form of the latency curve agrees quite closely with the curve shown in Figure 2f and the anticipation error curve follows curves for individual considerably.
Initial keystroke latency and anticipation are presented in Figure 6. the one shown in Figure 3f.
Once all of the individual digits had been keyed, the subject entered the resulting number into the computer by pressing either the `enter' or the `return' key.
If the number in the data entry area consisted of three digits , it was accepted for entry and the underscore character and data entry box were erased.
If the number contained too few or too many digits then the computer signaled an error with an audible beep and the subject had to correct the error before the transaction would be accepted.
Once a valid number had been entered into Ihe system, the tmget delay for that condition was instituted.
After the target delay had lapsed the underscore character and data entry box were redrawn in the next data entry location and the computer was ready to receive the next dat a entry.
Subjects entered numbers into the computer beginning with the first number in the upper left-hand corner of the first data sheet.
They then worked down the sheet until all of the numbers in lhe first column had been entered.
They then moved to the top of the next column to the right and performed the same procedure.
This process continued until all of Ihe numbers from the first data sheet had been entered into the system.
At this point, the subjects removed the sheet from the typing stand, placed it aside on the desk, and began working on the second sheet.
When all of the numbers from the second data sheet had been entered, the subject pressed the `q' key to end the experimental session.
Analysis using Tukey's HSD revealed significant differences between three system delay regions - 0.00 to 0,625 sees, 1.25 to 2.50 sees, and 5.00 to 10.00 sees - for initiat keystroke latencies and anticipation errors.
The differences were significant at the p <.001 level.
There were no significant within-region differences, Neither subsequent keystroke la-
This experiment was designed to more closely investigate interest since the strategy that the user the region corresponding to the second strategy, pacing.
This region is of particulw applies attempts to actively compensate for any delay and requires the user to keep track of the actuat delay involved.
The delays in the present experiment were restricted to a 3.00 sec range centered on each subject's pacing region, the location of which was determined through a normalization procedure.
All subjects were naive regarding the experimental mawere experiment.
Subjects were paid for their participation.
This experiment used the same ap paratus and materials as experiment Experimental median initial 1.
In this latter case, if we transform our data into the form used in that study  and recompute the analysis, we find that our data produce results comparable to those reported earlier.
The ordering effects obtained for keying errors can apparently be explained by subject fatigue, Repotting the data by experimental position showed that keying errors increased over the first four trials, dropped off after the mandatory rest period, and then again climbed until the end of the experiment.
Finally, although the data in Figure 6 support our model, it was cleaf that a high degree of inter-subject variability was present.
For example, mean initial keystroke latency for the no-delay condition ranged from 0.583 to 0.979 sec.
One consequence of this was to obscure the shape of the  curves in Figure 6 as subjects switched task strategies at different system delays.
Finally, each data set consisted of 75 rather than 90 three-digit numbers.
A Latin square design was used to counterbalance potential ordering effects, Subjects were randomly assigned to orders.
I@!&@& This ex~riment was conduct~ in the same manner as Experiment 1 with the exception that the experiment was broken into two sessions with each session consisting of six delay conditions.
This was done to reduce potential fain sessions on consecutigue effects.
The very is that engaging a strategy produces and pacing.
Subsequent keystroke latencies and keying errors were not significant.
Ordering and session effects were not significant for any of the variables.
Initial keykeystroke mance across pretests was not significant, latency, anticipation variance results are presented in Figure 7.
Alternately, using a single strategy, perhaps difficulties might be due to because the difference in cost is too small to gauge accurateperformance problems in engaging an internal timer for the short intervals required.
Further investigation at an acceptable account.
The results of this experiment identify ers appear to have little difficulty a pacing region that lies between 0.75 and 1.75 sec.
For delays in this region uspacing the system and are able to maintain apparently optimal levels of response latency and error.
The source of this latter effect is uncleaf at this time, but is consistent with a strategy-based account of performance.
Using this study as a basis, work is currently in progress to extend the performance model into an engineering model which can be used to derive pre-development, ter response time guidelines zero-parame-
System response time and problem solving behavior.
Proceedings of the 25th Annual Meeting of the Human Factors Society, 749-753.
User behavior on an interactive computer system.
Computer response time and user performance.
Proceedings of the Annual Meeting of the ACM SIGCHI , 5.
