Computers require formally represented information to support users but users often cannot provide it.
This paper looks at an approach called "incremental formalization", when users express information informally and the system supports them in formalizing it.
Incremental formalization requires a system architecture that can integrate formal and informal representations and enable and support moving information upward in formality.
The system should include tools to capture naturally available informal information and knowledge-based techniques to suggest possible formalizations of this informal information.
The HyperObject Substrate , a system with these characteristics, has been applied to a variety of domains, including network design, archeological site analysis and neuroscience education.
Users were successful in adding information informally and in incrementally formalizing that information.
In particular, informal text was added, which later had attributes added and partook of inheritance relationships.
According to our definition, computers can only process information that has been formalized.
This means that formalization is required for computers to be of any use.
In general, the greater the level of functionality needed, the greater the level of formalization required.
Thus, a word processing program provides low-level functionality and requires the very low level of formalization of textual input.
Knowledge-based systems offer a much higher functionality--i.e., they are more active in aiding the user-and require a much higher level of formalization of information.
There is a great and increasing need for computational aids for dealing with the notorious "information overload."
Above all, this problem takes the form of a deluge of informal information--especially text.
Better means are desperately needed for searching and filtering this ocean of data to find the small fraction of it that serves our information needs.
All such means require increased formalization of this information.
The information overload is one of a number of forces behind the drive for higher-functionality software.
The next generation of software development aims to put many highfunctionality computer systems to work in everyday support of end-users.
This will require extensive formalization of input.
In principle, the required formalization of information need not be done by users.
If a computer were to be pre-loaded with a great deal of knowledge of the users' application domain, little or no explicit formalization by users would be needed.
The machine could, in theory, completely formalize the input automatically.
An example of this would be machine understanding of natural language input.
Unfortunately, it has not yet proved possible to put nearly enough knowledge into software to allow input to be formalized without the user explicitly telling the machine a great deal about its formal properties.
A number of problems have been experienced when systems require extensive formalization of information by their users.
One is that it takes a great deal of extra time and effort.
Often this extra effort is not balanced by a payoff at the time the formalization is required and for the persons who must do the formalization.
Our experience indicates that even relatively small amounts of this extra time and effort can disrupt the flow of work .
Also, formalization often seems to be highly error prone and difficult to correct when done wrong.
Users are hesitant to formalize for fear of prematurely committing to an erroneous understanding of their tasks.
Why is providing a formal representation of information difficult?
The difficulties that users have in formalizing information are not just interface problems.
More effort is required of users in part because formal representations require the explicit statement of information that might have been left implicit or tacit  in a less formal representation.
In addition, substantial effort is typically required to learn a formal representation.
This requires both talent and interest in formalization that users are unlikely to have.
To the extra time and the disruption resulting from formalization must be added the extra cognitive overhead.
This overhead is especially problematic when users are already devoting their full cognitive efforts to understanding and performing their normal work tasks.
Formalization requires many extra decisions to divide information into chunks, to type and label these appropriately, to link them with useful relationships and assign properties to them.
One well-known difficulty of formalization is that of prematurely imposing structure .
As new situations are encountered, an expert's understanding of the specific problem--and even the domain--will change.
Formalizations based on previous understandings will become outdated and counterproductive.
Users learn this quickly--and often painfully.
As a consequence, they begin to resist efforts to get them to structure their information until quite late in the project.
We seem to be facing a dilemma.
On the one hand, users-and software designers--want higher-level functionality for their systems.
On the other hand, users resist the formalization of information that is required for higher-level functionality.
But the appearance of dilemma is illusory.
The illusion is based on a number of mistaken assumptions.
For one thing, the formalization need not be done at the time of input of information.
For another thing, while formalization cannot be automated, it can be supported with software.
The approach adopted here involves identifying and attacking these assumptions.
A number of different approaches can be and have been taken to solving the problem of user's resistance to formalization.
One approach is to find a formal representation that is easy for users to work with--a goal of end-user programming languages.
A second approach attempts to provide help to the user in learning and using a formal language --a goal of "end-user modifiable" systems .
An approach radically different from either of these attempts to make the system understand the informally represented information--a goal of natural language processing.
The approach presented in this paper combines aspects of all of the above approaches.
Users enter information into the system in an informal or semi-formal representation and the computer aids the users in formalizing this information.
In apparent response to the problems with formalization, users of many different types systems have resisted formalization.
When systems require formalization as part of all input, users resist using those systems .
Thus expert systems simply fail to get maintained.
Hypertext authoring systems--e.g., gIBIS --often fall into disuse.
Hypertext, of course, requires a far lower level of formalization of information than an expert system.
And here we see a crucial irony, for it is not only the requirement for formalization that seems to cause hypertext authoring systems to fall into disuse.
Users seem also to find that the hypertext is too passive to be of sufficient value.
This approach allows information to be entered in an informal or semi-formal representation and to become more formalized over time through a series of small and simple intermediate steps.
For example, a textual annotation could collect attributes one at time.
Incremental formalization aims, first of all, to eliminate the cognitive costs of formalization that inhibit user input.
Secondly, it aims to reduce the burden of formalization by distributing it and making it demand driven.
A crucial feature of our approach to incremental formalization is that it is non-destructive.
When a formal representation is produced, it supplements rather than replaces the less formal representations.
This is because formalization generally results in a loss of information content--e.g., unstated background knowledge and rationale.
Keeping the informal knowledge from which formal knowledge is derived helps us to check and revise formal representations, as found by Hofmann in .
The second crucial feature of our approach is a "bootstrapping" strategy for supporting formalization.
As explained below, we use the knowledge that has already been formalized to suggest possible formalizations of additional input.
Thus, the more information has been formalized, the more support the users gets for further formalization.
All objects in HOS, regardless of display type, have an extensible set of attributes and relations, and can take part in inheritance relationships.
In HOS there is no need to know all of the attributes of an object at creation time.
Every HOS object may also have a navigational link to a HOS view object.
As is typical in page-oriented hypermedia, clicking on an object with a navigational link will cause the linked view to be displayed.
Another feature of HOS common to many hypermedia systems is that users may choose views to be added to a list of bookmarks.
Bookmarks provide for direct access to views so marked.
The goal of having end-users of HOS applications have access to the system's formal representations has led to a deliberate attempt to reduce the amount of knowledge required to order to use the formal aspects of HOS's representation.
This motivated the use of prototype inheritance  to remove the distinction between objects acting as classes and objects acting as instances.
HOS's variation of prototype inheritance allows for inheritance relations between objects to form generic graphs, that is there can be cycles in the inheritance graph.
In short, objects can inherit from any other object, without restriction.
These decisions have removed the requirement that the user learn about knowledge engineering concepts like classes, instances, hierarchies or directed acyclic graphs which are normally important to the use of inheritance mechanisms.
To support and set the stage for incremental formalization, we have developed the Hyper-Object Substrate  .
HOS provides a domain-independent framework, combining characteristics of hypermedia systems and knowledge engineering systems.
HOS integrates representations of varying degrees of formality by insuring that all information in the substrate  is represented as first-class objects.
A first-class object is an object that has no restrictions placed upon it, i.e.
HOS does include a number of object types.
The object types within HOS are text-graphic, composite, view, agent, and shell.
Text-graphic objects are objects which contain a drawing method which describes the display of that object.
A composite object is a set of other objects which can have interactive and conceptual properties as a set.
A view object is a resizable finite two dimensional plane which may have any number of the other types of objects displayed in the plane.
Agent objects may have dynamically computed displays and actions based on information in the current object space.
Shell objects provide an interface to information available to the Unix shell.
Text-graphic, composite, agent, and shell objects can be moved or copied between views and can be displayed in multiple views at once.
Agent objects, also just called agents, are HOS's generic mechanism for using formal information.
Agents use the information represented in the form of attributes and relations to determine when to take some action.
Agent objects consist of a trigger, query, and action, similar to agents in OVAL .
Triggers determine when active objects evaluate their query to recompute their display or to take some other action.
Examples of triggers are "check every modification", "check when displayed", and "check when requested by user".
The query looks for objects in the system which match certain patterns.
The objects, if any, returned by the query are then passed on to the action.
Actions may display the objects found, present a message to the user, or add a bookmark.
This variety of triggers and actions allows for different active objects to have very different interaction styles.
They may collect information like Halasz's virtual structures , or notify users of the occurrence of certain conditions like critics in JANUS .
HOS includes mechanisms for importing text, electronic mail, and USENET News files.
When importing an electronic mail message or USENET News article HOS parses the header and adds the information as attributes to the newly created object.
Figure 2 shows an electronic mail message concerning network design in a view containing the formally represented design that the message discusses.
Three are based on possible references within the body of the text to people, places, and devices in the base.
The fourth suggestion, for the "From" attribute, is a modification of an attribute created by parsing the electronic mail header.
The problems associated with formalization require systems which actively support the formalization process.
We have explored mechanisms to support formalization that make suggestions for formalizations based on textual patterns within the information already in the system.
The mechanisms included in HOS may suggest the addition or modification of attributes and relations or suggest new hyperlinks.
Because these suggestions are based on the current state of the information space, these suggestions can help bootstrap the information space.
If accepted the new information may lead to new suggestions.
The heuristic mechanisms in HOS used for making suggestions based on text are deliberately simple, using a type of string search rather than natural language processing techniques.
The mechanisms use a lexicon created by collecting the names and synonyms of the objects in the information space.
When triggered, the mechanisms look for occurrences of the items in the lexicon within the text display of an object and in the textual values of attributes.
When a reference is found, a rule base is used to determine what attribute or relation is suggested to the user based on characteristics of the object possibly being referenced.
These mechanisms execute and display suggestions when the user views an object's attributes in the property sheet.
Figure 3 shows the property sheet for the electronic mail message from Figure 2 just after it was imported.
Suggestions can be accepted as is, modified and accepted, deleted, or just ignored.
If the attribute being edited is one suggested by the system the "Explain" button becomes active, as it is in Figure 3.
The mechanisms can provide an explanation of why each suggestion was made, providing users with rationale about the formalization process and about the specific formalization being suggested.
These explanations are generated by filling in information from the lexicon item, the rule base, and the object believed to be referenced into a template.
There are both domain-independent and domain-dependent suggestion mechanisms.
The "people involved", "places involved", and "devices involved" suggestions in Figure 3 are produced by a mechanism which requires the situationspecific lexicon containing the important people, places and things in a domain.
In this case the "things" suggestion has been specialized to devices for the domain of network design.
People, places, and things represent the who, where, and what involved in a piece of text.
These are likely candidates for formalization across domains.
While the information used to create the lexicon is specific, the mechanism is domain independent.
Likewise, the mechanism which suggests textual attribute values be changed to relations to other objects  uses domain-specific information with a domain-independent mechanism.
HOS has been applied in the creation of XNetwork, a domain-oriented design environment to support the collaborative long-term design and administration of computer networks .
The development of XNetwork in HOS, driven by a changing understanding of the problem of network design, provides an example of the evolutionary development of a knowledge-based system.
Computer network design is an appropriate domain for enabling knowledge-base evolution since without the addition of new technologies and devices the environment will quickly become out-of-date.
XNetwork showed that the suggestion mechanisms are useful beyond the formalization of the specific information: they can also act as shortcuts in adding information.
For example, while building the inheritance hierarchy of device types, HOS suggested "device involved" relations to the object planned to be the recipient of the inheritance relation.
By changing this suggested relation to an inheritance relation, the number of user actions required to create inheritance links was substantially less than required when no such suggestion was available for modification.
The suggestion mechanisms also can aid the user in finding mistakes or in learning about relevant information within the information space.
In particular, users will begin to develop expectations of when and what types of suggestions will appear, then when the system does not meet the user's expectations, the suggestion  may trigger a realization that the information space is either inaccurate or incomplete.
Unexpected suggestions can also lead to the discovery of information previously unknown by the user.
For example, during the creation of XNetwork, occasionally suggestions were made that were based on information that was imported automatically from other on-line information sources.
These suggestions acted like notifications of this other information's existence.
Besides the creation of XNetwork and smaller design environments for other domains, HOS was used for a number of more traditional hypermedia tasks.
The traditional hypermedia uses of HOS include trip reports, discussions of current literature, and the development of the outline for a dissertation.
The experience of these tasks suggests that HOS's hypermedia abilities, while not being as polished as those in commercial systems, were not hindered by the system's functionality concerned with more formal representations.
The knowledge-based system functionality was invisible to users who did not need it.
One class project used HOS to build the Archeological Site Analysis Environment , a tool to aid archeological teams with experts in different topics sharing and analyzing information concerning the "dig" site.
The purpose of ASAE, as described in the project report, is "to handle the information overload, to link the archeological team members, and to make historical and scientific background knowledge more accessible and useful."
To try to meet these goals, ASAE combines formal and informal information about archeology in general as well as information about the specific site.
Artifacts found at the site have their location, size and composition formally represented for use by knowledge-based decision support.
Agents were used in ASAE to act as "advertisers" of some information and are intended to facilitate communication among group members.
The development of ASAE required some programming to add basic numerical methods used by archeologists for the classification and grouping of artifacts.
The other knowledge systems class project using HOS developed the Interactive Neuroscience Notebook .
The purpose of INN is to provide an environment for student neuroscientists to collect and organize their information about neuroscience within the context of a preauthored framework and set of information.
The resulting role of INN can be seen as a combination of textbook and personal notebook.
Like ASAE, INN is composed of both informally and formally represented information.
Information from an introductory textbook on the visual system was placed in pages of textual information.
Some of the objects on these pages represent concepts or objects in the domain, such as particular types of cells.
These objects include formally represented information, mostly attributes describing features of the object.
INN included a number of agents to suggest interesting or related information based on the current modifications to the notebook being performed.
The development of INN was done without programming.
Figure 4 shows a page of the seeded neurosciences notebook  that was suggested by an agent in the bookmark window  being displayed along with the property sheet for one of the domain concepts discussed on the page.
Close to fifty snapshots of each project were taken during the semester and a log of attribute modifications was collected to be used to look for patterns of evolution.
Both the snapshots and the logs provide some noticeable patterns of growth in the projects.
In particular, both projects had two or three periods of rapid growth in the content of their information spaces, the rest of the time experiencing slow growth.
Several of these jumps were accompanied by the modification of attributes for objects already in the system.
The occurrence of these rapid growth periods leads to the question of was there a cause or was it just the students working harder on their projects.
The class projects were created without any detailed specification in how the final system would work.
The goals were set in the initial report, but continued to be refined throughout the projects.
An example of one of the larger jumps was the addition of agents to volunteer information in INN.
This jump included the addition of some agent objects, but also included a large increase in the number of attributes within the information space as formal information was added that could be used by the agent objects.
The development of INN provided the most literal examples of incremental formalization in the form of paragraphs of text that came to be used as concept objects.
In particular, text concerning a domain concept was sometimes used to represent that concept, meaning the object would be named and have attributes attached appropriate to the concept rather than those that described the discussion that made up the object's display.
For example, the object representing the concept of "Rods" in the INN  is the top paragraph on the page and has the textual display "The Rods lie on far from the entry point for light, and are concerned with night-time vision, and are thus called photoreceptors."
Figure 5 shows the attributes the object had before the project was completed.
Figure 4 shows that by the completion of the project the object was placed in an inheritance relation and thereby had a number of other attributes.
This object changed from a piece of text on a page to an object with attributes to an object taking part in an inheritance relation--exactly matching the steps shown in the diagram of incremental formalization in Figure 1.
The use of paragraphs of text as concept objects results in their being difficult to distinguish from other objects, as in the case of the "Rods" object from Figure 4.
To locate the objects representing domain concepts one would have to check every textual object or use queries to locate objects with certain attributes.
Because the suggestion mechanisms require named objects , it was assumed that they would not be of use during the initial development of new applications.
This being the case, their existence was not mentioned to the students.
About midway through the projects, the suggestion mechanisms did become noticed by one of the students.
In one of the weekly meetings, a student asked how the system "knew" what he was doing.
This question occurred because the student had named objects which were then used to create the lexicon by which the suggestion mechanisms work.
The student started to see suggestions based on the object names, but did not know why or how they were created.
One example of a suggestion in the case of the INN is the attribute "Topic" shown in Figure 5.
Another example which appeared was the suggestion for the topic of the rest of the paragraphs on the same page  to be "Bipolar Cells", "Horizontal Cells", "Cones", and "Ganglion Cells".
The experience during the class projects showed that the suggestion mechanisms work, that is they will frequently make suggestions, given a small set of named objects to act as a lexicon.
The quality of the suggestions was not evaluated during these projects.
Most of the suggestions seemed reasonable to the students, although sometimes, as was the case with the suggestion in Figure 5, of questionable value.
In the end, only a couple of suggestions were accepted during the projects.
HOS supports incremental formalization through the integration of the capabilities of hypermedia and knowledge engineering systems.
By allowing users to choose the degree of formality for entering information, HOS reduces the upfront costs for users adding information.
In particular, domain knowledge added in a less formal representation has the potential to evolve into a more formal representation "in place"--that is, without needing to be removed and re-added to the system.
HOS supports the importing of information from text, electronic mail, and USENET News files and actively supports the in-place evolution with a set of mechanisms which use the recognition of references or patterns within less formally represented information to suggest possible new or modified formalizations.
HOS has been used to create a number of domain-oriented systems.
The largest of these domain-oriented systems is XNetwork, an environment to support the collaborative design of computer networks.
The suggestion mechanisms in HOS were used during the creation of XNetwork to provide shortcuts for the creation of formal representations and to help inform the user of the existence of information.
Two more domain-oriented systems were created with HOS as projects in a graduate class on knowledge systems.
One of these systems supports the recording, sharing, and analysis of archeological site information.
The other class project supports students learning about neuroscience by providing a seeded interactive notebook that would volunteer information as it was being personalized by the student.
During the development of these domain-oriented systems, the potential problems because of the evolutionary nature of structure were reiterated.
Namely, as the students' goals and understanding of the domains changed over the course of the semester, so did the structure required to be formally represented.
Sometimes this meant adding new formalisms, but also this occasionally resulted in the removal or modification of previous formalisms.
Future work will investigate new methods of supporting incremental formalization and attempt a comparison of the different methods and their applicability.
Fischer, G., Grudin, J., Lemke, A., McCall, R., Ostwald, J., Reeves, B., Shipman, F. Supporting Indirect, Collaborative Design with Integrated Knowledge-Based Design Environments.
Girgensohn, A. End-User Modifiability in KnowledgeBased Design Environments.
Dissertation., Department of Computer Science, University of Colorado, Boulder, CO, 1992.
Halasz, F. Reflections on NoteCards: Seven Issues for the Next Generation of Hypermedia Systems.
Communications of the ACM, Vol.
Hofmann, M., Schreiweis, U., Langendorfer, H. "An Integrated Approach of Knowledge Acquisition by the Hypertext System CONCORDE," In Hypertext: Concepts, Systems, and Applications, A. Rizk, N. Streitz, J. Andre', Eds.
Cambridge University Press, Cambridge, UK, 1990, pp.
Lieberman, H. "Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems," OOPSLA 1986 Conference Proceedings, 1986, pp.
Malone, T.W., Lai, K.Y., Fry, C. "Experiments with Oval: A Radically Tailorable Tool for Cooperative Work," Proceedings of the Conference on Computer Supported Cooperative Work , November 1992, pp.
289-297 Marshall, C.C., Rogers, R.A. "Two Years before the Mist: Experiences with Aquanet," Proceedings of European Conference on Hypertext , Milano, Italy, December 1992, pp.
Polanyi, M. The Tacit Dimension, Doubleday, Garden City, NY, 1966.
Dissertation., Department of Computer Science, University of Colorado, Boulder, CO, 1993.
We thank Gerhard Fischer, Catherine Marshall, David Redmiles, and the members of the HCC group at the University of Colorado for discussion and support of this work.
This research was supported in part by grant No.
IRI9015441 from the National Science Foundation.
