We present three novel tools for creating data graphics:  SageBrush, for assembling graphics from primitive objects like bars, lines and axes,  SageBook, for browsing previously created graphics relevant to current needs, and  SAGE, a knowledge-based presentation system that automatically designs graphics and also interprets a user's specifications conveyed with the other tools.
The combination of these tools supports two complementary processes in a single environment: design as a constructive process of selecting and arranging graphical elements, and design as a process of browsing and customizing previous cases.
SAGE enhances userdirected design by completing partial specifications, by retrieving previously created graphics based on their appearance and data content, by creating the novel displays that users specify, and by designing alternatives when users request them.
Our approach was to propose interfaces employing styles of interaction that appear to support graphic design.
Knowledge-based techniques were then applied to enable the interfaces and enhance their usability.
All information about a single activity can be obtained by glancing horizontally across the graphic.
Most packages do enable users to create charts and tables like these, but only as isolated displays.
Even painstaking cutting, pasting, and resizing  are insufficient to layout and sort the bars and text in a coordinated way.
Similarly, current packages provide no way to create a single display with different graphical objects.
In 1b, properties of lines, text strings and diamond-shaped marks vary to integrate ten data attributes.
Clearly, current menu-style interfaces in spreadsheet packages would not support the creation of so many alternatives, nor could they help users assign data attributes to these graphics easily.
Imagine the difficulty of conveying the relationship between data in spreadsheet columns and all the graphical objects and properties in 1b.
Furthermore, imagine the considerable design expertise required of users to produce these displays, including an awareness of the appropriateness of graphic choices for each data type.
Even when users can judge the effectiveness of a particular display of their data, they often lack exposure to the many types and combinations of graphics that are possible.
Systems that provide the ability to create new integrative designs will need to provide design guidance as well.
One approach to these problems is to build systems that are knowledgeable of graphic design, so they can generate a variety of effective displays based on descriptions of data and viewing goals .
This research has provided a vocabulary for describing the elements of graphics, knowledge about the appropriateness of their use for different data and tasks, and design operations for combining elements to form integrative displays.
Graphic displays of information have been valuable for supporting data exploration, analysis, and presentation.
Still, current graphics packages remain very limited because:  they do not provide integrative displays for viewing the relations among several data attributes or data sets,  they have time-consuming and complex interfaces, and  they provide little guidance for the majority of users who are not experienced graphic designers.
Consider these problems in the context of two graphics in Roth Color Plate 1.
In 1a, a sequence of indented text, charts, and a table are aligned to integrate six attributes of activities .
To appear in Proceedings CHI'94: Human Factors in Computing Systems.
However, previous automatic design research has not been concerned with supporting interaction with users and has focused on issues of identifying and encoding knowledge of data, tasks, and design.
No paradigms have been developed for a collaborative process between human and automated designers.
This paper describes a novel approach to interactive graphic design, in which automatic mechanisms are used to support users, not replace them.
The following sections describe an overview of our approach, two major components of the system that correspond to two complementary styles of design, and some sample design interactions which illustrate these capabilities.
The current version of SAGE goes beyond previous systems in several ways.
SAGE can create graphics when users completely specify their designs as well as when they provide no specifications at all.
Most importantly, it can accept partial specifications at any level of completeness between these two extremes and finish the design reasonably.
User specifications serve as design directives, which constrain the path of a search algorithm that selects and composes graphics to create a design.
It also enables SAGE to support Book's search for previous pictures with graphical elements specified by users.
For example, when a line object is added to the library, each end-point is defined as having horizontal and vertical positions, enabling the line to be displayed against the axes of a chart.
If a map-style is later defined in the library as an encoder that displays horizontal and vertical positions, then SAGE can automatically draw lines on maps .
Our approach to supporting design has been to integrate an evolving automatic presentation system called SAGE  with two new interactive design tools called SageBrush and SageBook.
Both tools enable users to manipulate familiar objects in order to perform natural design operations, shielding users from the more complex representations and operations that SAGE uses to create graphics.
SageBrush  is representative of design tool interfaces in which users specify graphics by constructing sketches from a palette of primitives and/or partial designs.
Our goal is to provide a flexible, generative, direct manipulation design interface, in which users can create a large number of possible combinations of graphical elements, customize their spatial and structural relationships, and map them to the data they wish to visualize.
Book supports an approach to design in which people remember or examine previous successful visualizations and use them as a starting point for designing displays of new data, extending and customizing them as needed.
Our experiences in graphic design, as well as related research on engineering and software design , suggest that search and reuse of prior cases with customization is a common process.
Therefore, our goal is to provide methods for searching through previously created pictures based on their graphical properties and/or the properties of the data they express.
A picture found in this way can optionally be modified in Brush prior to sending it to SAGE, which creates a graphic for the new data.
SAGE is an automatic presentation system containing many features of related systems like APT, BOZ, and ANDD .
Inputs are a characterization of data to be visualized and a user's data viewing goals.
Design operations include selecting techniques based on expressiveness and effectiveness criteria, and composing and laying out graphics appropriate to data and goals.
A detailed discussion of automatic design capabilities,
Figure 1 illustrates the conceptual relationships among SageBrush, SageBook, SAGE, and a Data Selector - a tool for indicating the mapping between data and graphics.
The process of retrieving data needs to be integrated with graphic creation but is not the focus of this paper.
We are exploring several interactive methods for retrieving and transferring data to the selector, where data appears as a table whose headers can be mapped to graphics .
Users interact with Brush to create graphic design sketches, which are schematic views of designs.
These are translated into design directives, which are specifications expressed in SAGE's graphic representation language.
An example: Figures 2, 3, and Roth Color Plate 1b illustrate a sequence for creating a new version of the famous graphic by Minard showing Napoleon's 1812 Campaign .
One data set describes the march segments .
The other data set contains the city, date, and location of each major battle.
These will be visualized by composing multiple graphemes and their properties on a map.
Design directives from Brush serve two purposes: they guide SAGE's automatic processes and provide criteria for Book to use in searching its library of previously designed pictures.
Brush can also translate graphics produced by SAGE back into sketches so that users can modify them.
Users interact with Book to view and save pictures created by SAGE.
Book searches its picture library based on data users specify with the Selector and/or design directives derived from sketches created in Brush's work area .
Users request the creation of a graphic based on a previously found one by transferring it to Brush  or directly to SAGE.
The next sections describe these components in detail.
Brush is representative of tools with which users sketch or assemble graphical elements to create designs and map them to data.
Brush provides users with an intuitive and efficient language for sketching their designs, and translates these sketches into a form that can be interpreted by SAGE.
There are other possible styles of graphic design interface that could be coordinated with SAGE's internal design mechanisms.
One alternative is the demonstrational approach proposed for Gold , in which users draw examples of displays.
Anchoring new designs with partial prototypes.
The creation of a new design begins with a user's selection of a partial prototype.
As illustrated in Figure 2, Brush's interface consists of a design work area  into which users drag prototypes , graphemes , and data names .
Prototypes are partial designs, each with a spatial organization, graphemes, and/or encoders that commonly occur together.
Encoders are frames of reference for interpreting properties of graphemes.
The choice of prototypes to include in the top menu can be customized to applications and could include previously designed graphics.
The first prototype in the top-left of Figure 2 is a general one for constructing all charts.
It is actually a composite of horizontal and vertical axes.
Although users could construct charts by assembling separate axes, doing so requires more steps and appears less intuitive than selecting a chart prototype.
This eliminates the need for users to construct networks from primitives each time.
In the example, a map prototype  was dragged to the design work area.
Customizing by adding primitives to prototypes.
Prototypes are extended by adding graphemes.
While the chart and map prototypes have no graphemes, dragging them into the design work area creates an encoding space which supports new design choices.
The encoding space of a chart or map is defined by the interior of the two axes or coordinate-frame, respectively.
Dragging line and mark graphemes  from the left window into the map's encoding space results in directives to SAGE to include these grapheme types in a design, with their positional properties interpreted relative to the map's coordinate system.
In Figure 3, two text strings have been placed next to the mark  to convey association.
Note that Brush only determined that the two strings and diamond are associated.
SAGE must infer which of the three is used to convey position in the coordinate system .
Of course, a user can explicitly double-click on the diamond and select its property icons for position .
Communicating the mapping of data to graphics.
Dropping a grapheme in a chart and selecting its color result in directives to SAGE to generate a design where position and color encode data.
While SAGE could attempt to infer this , users can explicitly make these choices by dragging data labels from the Data Selector , and dropping them on property icons.
In Figure 3, Troop Size was mapped to line thickness and Start Latitude and Start Longitude to the position of one end of the line.
Battle and Date have been mapped to text labels adjacent to the diamond .
The completed design resulting from this interaction is shown in Roth Color Plate 1b, which was generated by SAGE.
In addition to defining encoding spaces, prototypes also define layout spaces , which enable users to specify the relative positions of prototypes with respect to each other.
There are two types of layout spaces, reflecting adjacency and embedding relationships.
Adjacency spaces enable horizontal and vertical alignments among charts, tables, maps and other prototypes.
Two charts and a table in Figure 5 have been sequenced by placement adjacent to each others' layout spaces.
Finally, it is important to emphasize that all of these design choices are optional.
Users only need to specify the data they wish to visualize, but may further specify : * prototypes only, * prototypes and additional graphemes, * graphemes and their properties, * the mapping of data to graphemes, and * the mapping of data to specific grapheme properties.
The Napoleon example illustrates that users needn't specify all mappings.
The system inferred End Latitude, End Longitude, and Temperature .
Customizing the properties of graphemes.
Graphemes have other properties for encoding data besides position.
Properties are chosen by selecting property icons, displayed by double-clicking a grapheme in the design work area.
Double-clicking on the line in Figure 3 displays a menu of line properties  and arrows representing the positional properties of end-points.
Selecting a property directs SAGE to use it to encode data in a design but does not indicate the data to which it corresponds.
Completing the graphic requires a way to create grapheme clusters.
As described above, dragging graphemes into an encoding space results in directives to use their positional properties in a design.
When two or more graphemes are dropped close together in the same space, the position of one is interpreted relative to the axes or coordinate system,
The goal of Book is to provide users with the ability to create new pictures analogous to existing ones they consider useful.
Our intent is to provide users with access to a growing portfolio of graphic designs to provide ideas for visualizing their data.
Book capitalizes on the explicit representation of designs and data characteristics by SAGE to provide a vocabulary for expressing search criteria.
Book provides two mechanisms for browsing pictures.
The first is a file-folder metaphor analogous to that used in the Macintosh system, in which pictures created by SAGE are named and stored in locations defined by users.
The second mechanism provides browsing by two types of picture content: graphical elements and data.
Search criteria are based on exact match or partial overlap with data in the Data Selector and/or design elements in Brush.
Figure 4 illustrates the interface for browsing pictures retrieved by a search based on data overlap.
The data for the search were facts about activities in a project management database .
Pictures in the library that expressed similar data were listed by the interface.
As a user selects each picture name, its bitmap is displayed.
Multiple full size pictures can be displayed and arranged by users for comparison.
For example, a data relation  representing quarterly expenses for a company's departments  may have the same properties as another relation for stock market data .
Both relations contain three domains with identical data characteristics: a nominal type, a temporal coordinate, and a quantity.
See  for a more complete treatment of data characterization relevant to graphic design.
We have designed search criteria for several levels of match overlap based on graphical elements as well.
These involve retrieving pictures that  show exactly the same design elements as those in the Brush sketch and  contain the Brush elements as a subset of a more complex design.
Our current work is addressing the problem of defining match criteria for combinations of data and graphical properties.
We are also exploring similarity criteria for defining close matches with partial overlaps.
Our intuitions suggest the latter, but a cognitive model based on user studies is needed to define similarity, as well as to verify the appropriate graphical primitives for the Book and Brush interfaces.
We have designed search criteria for several levels of match overlap based on data.
The user also mapped CurrentStatus to the interval grapheme, leaving it to automatic mechanisms in SAGE to map it to color .
SAGE can automatically assign Activity to the Y-axis, dates to the interval bar, and Labor-Cost to the horizontal position of the bars in the added chart, based on expressiveness rules for these graphical properties.
The resulting picture is shown in Roth Color Plate 1a.
SAGE integrated all design elements and determined appropriate data mappings.
Notice that Resource is placed in the table, while Organization is placed in the indentation of the Y-axis...an arbitrary choice that a user can easily reverse.
The operations that produced Roth Color Plate 1a can be found in .
There are many research problems remaining, especially for supporting users with limited graphics expertise.
First, the operation of any automatic presentation system depends on the existence of data characterizations .
In this research, data characterizations were already present in the database or spreadsheet.
We will be exploring ways to infer them or obtain them interactively.
Second, although SAGE considers user informationseeking goals or tasks , no attempt was made to provide users with the ability to specify these.
We are considering creating a goal-selection interface so users can convey their intentions as design directives.
Finally, there are numerous new graphic design problems to address, including the design of interactive mechanisms for manipulating data displays, displays of large data sets, and graphical techniques such as animation and 3D.
See  for a more complete discussion of research problems in this area.
Our approach views the task of creating visualizations of data as a combination of two interrelated processes: * constructing designs from graphical elements, and * finding and customizing relevant prior examples.
The extent to which each process occurs varies with user and context.
Consequently, we created two tools that play flexible, mutually supportive roles to enable design.
SageBrush provides users with an interface for constructing graphic designs and customizing graphics found with SageBook.
Brush also enables users to compose graphical queries to be searched using Book.
Another central theme of our approach is the use of automated design knowledge in SAGE to provide new display capabilities, to enhance the usability of graphic design interfaces, and to provide design expertise when needed by users.
These are realized in several ways.
First, SAGE enables users to create a wide variety of integrative displays, which coordinate multiple spaces, graphemes, and visual properties to show the relationships among several data attributes or data sets.
This is possible because SAGE recognizes and parses the structure and semantics of sketches that users construct.
Second, knowledge enables a system to automatically design a graphic when requested by users.
Third, SAGE reduces the work of designing a graphic by completing it automatically when partially specified.
This often eliminates the need for users to assign data to elements of the graphic, select graphical properties once objects are specified, or perform other repetitive selections.
Fourth, SAGE makes it possible to search displays created previously based on meaningful criteria: the data and graphic elements they contain.
Without this knowledge, Book would be limited to browsing graphics based on file attributes.
Casner, S. M. A Task-Analytic Approach to the Automated Design of Information Graphic Presentations.
Fischer, G. Cognitive View of Reuse and Redesign.
Mackinlay, J. D. Automating the Design of Graphical Presentations of Relational Information.
Marks, J. W. Automating the Design of Network Diagrams.
Proceedings SIGCHI'94 Human Factors in Computing Systems, Boston, MA, ACM, April, 1994.
Navin-Chandra, D. Exploration and Innovation in Design: Towards a Computational Model.
Intelligent Multimedia Presentation Systems: Research and Principles.
Intelligent Multimedia Interfaces, AAAI Press, 1993, pp.
Roth, S. F. and Mattis J.
Data Characterization for Intelligent Graphics Presentation.
Proceedings SIGCHI'90 Human Factors in Computing Systems, Seattle, WA, ACM, April, 1990, pp.
Roth, S. F. and Mattis, J. Automating the Presentation of Information.
Proceedings IEEE Conference on AI Applications , Miami Beach, FL, Feb. 1991, pp.
Graphics and Natural Language Generation as Components of Automatic Explanation.
Tufte, E. R. The Visual Display of Quantitative Information.
Roth, Color Plate 1b: "Napoleon's 1812 Campaign", designed interactively using SageBrush.
In all, ten data attributes are integrated in a single map-like coordinate space using several kinds of graphical objects.
The lines trace the path of Napoleon's eastward advance and westward retreat, including the path of troops that branched north to protect his main force.
Line thickness conveys the number of troops traveling each segment, line color conveys the temperature, and the dates and sites of battles are signified by yellow diamonds and text.
Napoleon's eastward advance began in extreme heat, with the weather cooling as he approached Moscow .
During the westward retreat, the army circled back to retrace its route while the temperature dropped below freezing .
Upon reaching Krasnyj, the army veered south from its previous route.
When the march ended, less than three percent of Napoleon's troops remained, as shown by the striking decrease in line thickness.
