Currently, we possess limited knowledge on which interaction techniques can best support this task.
One option is to allow users to pause the motion for selection.
However, this may cause viewers to miss important information  in certain real-time applications such as air traffic control systems or video games.
Numerous applications such as simulations, air traffic control systems, and video surveillance systems are inherently composed of spatial objects that move in a scene.
In many instances, users can benefit from tools that allow them to select these targets in real-time, without having to pause the dynamic display.
However, selecting moving objects is considerably more difficult and error prone than selecting stationary targets.
In this paper, we evaluate the effectiveness of several techniques that assist in selecting moving targets.
We present Comet, a technique that enhances targets based on their speed and direction.
We also introduce Target Ghost, which allows users to select a static proxy of the target, while leaving the motion uninterrupted.
We found a speed benefit for the Comet in a 1D selection task in comparison to other cursor and target enhancements.
For 2D selection, Comet outperformed Bubble cursor but only when Target Ghost was not available.
We conclude with guidelines for design.
Animations consisting of moving targets are ubiquitous and are found in applications such as video surveillance systems, molecular simulations and air traffic control displays.
Pointing is a fundamental task in direct manipulation interfaces and users can benefit from being able to directly select one or more moving targets.
For example, an air traffic controller may select an airplane to view its flight plan.
Similarly, video tracking software can allow users to select objects in real-time, to retrieve statistics on a basketball player, in mid-play.
Selecting a moving target is challenging.
The user must continually track the target and simultaneously plan to move the cursor over it.
If the user stops moving the cursor,
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
In this paper we evaluate the performance of various existing and new techniques that can assist in selecting moving targets.
We present Comet and Target Ghost.
Comet enhances a target based on its movement trajectory and speed to facilitate selection.
With Comet the target's activation size is increased with an appended tail, analogous to comets that are seen in the sky.
Faster targets have longer tails than slower targets, thus leveling the field for selecting targets with various movement speeds .
We implement a variation of pausing by designing Target Ghost, a proxy-based technique .
Target Ghost creates static proxies of all the objects in the scene based on their position at time of invocation, but does not disrupt the overall movement of objects.
Users can then select the motionless targets.
Ghosting can be used in conjunction with new or existing techniques, such as the Area cursor  and Bubble cursor .
We conducted a 1D moving target acquisition experiment, and found that user performance was significantly improved with Comet over the Bubble cursor and variants of Target Ghost, including the Basic and Bubble Ghosts.
Our results reveal that Comet still outperforms the Bubble cursor, but only without using it with Target Ghost.
An alternative to enhancing the cursor is to change the target properties.
Such enhancements are generally based on alterations to the target itself , to the target's position , or even on the workspace .
An example of such target enhancements is to expand its size .
McGuffin and Balakrishnan  found a clear advantage to expanding targets, even when the expansion started after 90% of the total movement to the target.
However, when targets are densely populated, target expansion creates problems with targets overlapping one another .
To mitigate this problem, alterations can be made to the workspace.
The user can simply click on the associated region of the workspace to select the target.
For this method to work with dynamically refreshed targets, the partitioning would have to constantly occur, thus changing the visual and motor properties of the workspace as targets move around.
Our design of Comet is inspired by target expansion techniques as it enlarges the target's activation area.
Instead of modifying properties of the target one can reduce the distance to the target.
In drag-and-pop  and the vacuum filter , the user can invoke a replica of the target that is placed in proximity to the cursor, thus shrinking A in equation .
The user then needs to only move the cursor minimally to select the target.
These techniques have shown benefits for selecting targets at large distances.
In the case of moving targets, shrinking the target distance as it moves away is an appealing solution, and one we used as a basis for our Target Ghost techniques.
Pointing tasks with motionless targets can be generally captured by Fitts' law .
The movement time T needed to point to a target of width W and at distance  A can be expressed as: T = a + b log2   where a and b are empirically determined constants .
The logarithmic term log  is referred to as the Index of Difficulty   of the task.
Researchers have also extended Fitts' law to model twoand three dimensional targets  and also to targets of varying shapes .
Based on the above equation, performance benefits can be obtained by increasing the width of the target, decreasing its amplitude, or by doing both.
Since virtual pointing tasks are less constrained than pointing in the physical world, researchers have shown that altering the properties of the virtual object or of the cursor can lead to significant performance benefits .
The Area cursor  converts a point cursor by giving it a larger width and thereby increases its effective activation area.
The Area cursor has been shown to follow the properties of Fitts' law where the width of the target is instead replaced by the width of the cursor  in equation .
Grossman and Balakrishnan  built upon the concept of the area cursor with the introduction of the Bubble cursor.
Their technique dynamically resizes the cursor's activation area based on the number and proximity of targets, and ensures that only one is selected from any given cursor position.
The Bubble cursor is known to be effective under a variety of contexts .
However, there has not been any systematic evaluation of the bubble or area cursors for selecting moving targets.
One concern in using cursor enhancements for selecting moving targets is their lack of precision in a dense and dynamically changing field of targets.
Researchers in the fields of cognitive psychology have explored users' performance in selecting moving targets.
Jagacinski et al  demonstrated that selection of moving target is highly correlated to the velocity of the object and offered an analytical model for movement time estimation: T = a + bA + c where A is the initial amplitude, V is the target velocity, W its width, and a, b, c, are empirically determined constants.
Despite the growing abundance of data displayed in a dynamic manner, only a few studies in HCI have explored the selection of moving targets.
Faure et al  investigated the acquisition of pop-up and animated targets, as found on some operating systems such as the Mac OS X.
They examined the effects of different transition and animation delays on pop-up targets and found no significant difference with selecting static targets.
Ilich's  recent investigation into the selection of moving targets was done on interactive video browsing.
Click-to-Pause involves first depressing the mouse button to pause all onscreen moving objects; once the cursor moves over the item of interest, releasing the button selects it.
In a user evaluation, Ilich found that Click-to-Pause results in lower selection times than the unassisted pointer for small and/or fast targets .
Target Ghost was partly inspired by this approach, but instead of pausing the scene we created static in-place proxies to aid selection.
This has the added benefit of working in environments where pausing is not possible or when the users do not wish to not miss any information .
Studies on moving targets  show that the objects' speed is a strong determinant of targeting performance.
In Jagacinski's model , the index of difficulty is directly proportional to target velocity .
It is possible that new enhancements would only help in acquiring faster targets instead of slower ones.
Our techniques dampen the impact of fast movements by either increasing the target's activation area or by creating static proxies of the targets.
The Comet is based on the concept of target expansion used in static environments .
The technique has a physical resemblance to the astronomical comet that displays a trailing blaze of dust and ice as it moves along the sky, and is similar to the past position trails displayed in some air traffic control systems.
The design of comet tail was motivated by motor control theory which proposes that target acquisition consists of an initial ballistic movement, followed by corrective sub-movements .
With a tail length proportional to the target speed, we could improve the chance that after the user's initial ballistic movement towards the original target position, the cursor would be in the general region of the comet, even if the target had moved away.
Figure 2 illustrates how the Comet behaves.
As shown, each target has a tail whose size is based on the speed and width of a target.
A slower target will have a shorter tail than a target that is moving faster.
This means that if the user aims at the original target position, the cursor will land on the tail if it misses it.
Similarly the thickness of the tail is dictated by the width of the target.
For example, a target moving at a speed of 500 pixels/sec and of size 50 pixels had a Comet tail of 337 pixels .
When the cursor enters the trigger area, the tail becomes a solid object, denoting that it is selectable .
Furthermore, if the tail overlaps with another target, it is rendered below the target so it does not occlude the target .
In a study by Tresilian and Lonegram  participants were required to select a moving target by intercepting it, by hitting a ball with a baseball bat.
This task was found to be considerably different than prior work on moving targets  where participants were instead pursuing the targets.
Tresilian's model also differed considerably than Jagacinski's and was attributed to the different motor control processes between both task types.
These results suggest that the direction of motion, i.e.
This factor played an important role in the design of 2D Comet's design.
Movement type is a multidimensional attribute consisting of the level of predictability of a target's trajectory vector, the shape of the path , and the rate of changes in these.
For example in the video feedback of a hockey game, players can move in highly unpredictable paths, changing directions at random moments.
Target Ghost is inspired by proxy-based techniques  that bring the target closer to the user's cursor.
The exception here is that the proxies do not come closer to the cursor, since this would cause clutter and thus require additional layout algorithms.
Instead, as the targets are ghosted, they leave behind a proxy in the position at the moment when the user invoked the Ghost .
The ghosted targets are rendered in a dimmer shade making them less visible,
Showing continued motion is critical in environments where users cannot stop the scene or wish to not lose continuity between frames .
Ghosting is invoked by pressing the Shift key with the nondominant hand.
To select a target users simply move their cursor over the target's proxy and select it with a mouse click.
If the user does not select the target and instead releases her finger off the Shift key, the targets get unghosted and continue moving along their trajectory.
Since Target Ghost is not a cursor based enhancement, any cursor technique can be applied in conjunction with Target Ghost, to create a Bubble Ghost or Comet Ghost, for example.
Note that the user can only select the proxy of the ghosted target and not the target itself.
When Ghosted, the original target is faded  but keeps moving along its trajectory.
A much sharper proxy of the object remains at the target's position when the Shift key was depressed and becomes enabled for selection.
Note that the user can only click on the proxy to select the target.
The experimental system required that the user select a moving goal target in a 1D environment by moving their cursor from the Start position to the target.
All targets and distracters were solid circles.
The target was drawn in red and placed between two white distracters.
The distracter targets were placed on opposite sides and were equidistant from the target center, controlling effective width for the bubble cursor and comet techniques.
The task was successful when the user selected the goal target, which was highlighted in green when selected.
An error was recorded if the user missed the target.
Users could keep attempting to select the object until it disappeared off the screen.
A within-subject design was used to compare the performance of each technique.
The independent variables we selected were Technique, Target Speed, Target Width or Width, and Distracter Distance.
The eight Techniques were: * * * * * Basic cursor: this is the basic Windows pointer and served as a baseline; Area cursor: this was implemented as a circular cursor with a width of 100 pixels, which was the same as the maximum target width; Bubble cursor: this was implemented as originally designed ; Comet: this technique was implemented as described above.
Target speed and target width were the determining factors for assigning a size to the Comet's tail; Ghosts: each of the above techniques also included a version of its ghost, resulting in Basic Ghost, Bubble Ghost, Area Ghost and Comet Ghost.
The user would trigger the Ghost by pressing the Shift key using their non-dominant hand.
In our first experiment we compared the performance of different cursor techniques in a 1D selection task.
Each cursor technique was also accompanied with its Ghost equivalent.
In this experiment the targets were always moving along the horizontal axis and cursor movement was restricted along the same axis.
Based on the properties of our techniques, we hypothesized the following: H1: the dynamically enlarged activation area or Comet will result in greater reduction in selection time compared to the Basic cursor and Area cursor; H2: the constantly changing size of the Bubble cursor may be visually distracting to the user and would thus negatively affect targeting performance; H3: both the Comet and the Bubble cursor techniques will result in fewer click errors than the Basic and Area cursors as the former two techniques result in selecting targets with a larger activation area; H4: since Ghosting results in selecting static targets, these will show faster selection times and fewer errors than their un-ghosted counterparts.
We chose Speeds of: 500 pxs/sec, 650 pxs/sec and 800 pxs/sec, which are values that could occur in video streams, video games, and simulations of natural phenomenon.
Targets were set to Widths: 50 pixels, 75 pixels and 100 pixels.
Distracter distances were set at 250 pixels, 300 pixels and 350 pixels.
We settled on levels of these factors through iterative pilot testing, to provide a reasonable spectrum of difficulty levels.
Participants were shown the various techniques and the experimenter demonstrated the task.
They were given at least 2-3 practice trials and more if needed.
The goal target always began at a constant distance  from the start button and had a pre-determined movement direction.
The target to be selected was colored red, and the distracters were rendered in white.
When participants correctly selected the target, it turned green.
The target was always moving away from the pointer at the start of the trial.
If the target crossed the application window, it was marked as a failed trial.
At the start of each technique, the program displayed an instruction on the screen.
In this experiment, we collected the trial completion time, pointer movement distance and error rates for our data analysis.
Trial completion time was the time from when the user clicked the start button to when they successfully selected the target.
Errors were logged if users clicked the mouse button but failed to select the target.
Upon completion, participants ranked  the techniques according to their preference.
Outliers defined by 3 s.d.
Other interaction effects were not significant.
Post-hoc pair-wise comparisons of Techniques yielded significant differences across all pairs of techniques , with the exception of the Area cursor vs.
Participants were fastest with the Comet , then the Bubble cursor , followed by the Comet Ghost , the Area cursor and Bubble Ghost , then the Basic Ghost  and finally the Basic cursor  .
Post-hoc pair-wise comparison of Target Width yielded significant differences  in trial completion times for all pairs of widths.
Post-hoc pair-wise comparisons of Techniques yielded significant differences between the Basic cursor and all other techniques .
The Ghosted techniques were also all significantly less error prone than the non-ghosted techniques , except for the Bubble cursor which was on par with the Area Ghost .
With the exception of the Basic Ghost , the other ghosted techniques exhibited error rates less than 3% .
In the non-ghosted techniques, the Basic cursor had the highest error rate , followed by the Area cursor , the Comet  and the Bubble  .
It is not surprising that users have to click less in the ghosted version of the techniques, as the proxies of the moving targets are stationary.
Post-hoc pair-wise comparisons of Target Speed yielded no significant differences in the number of errors between pairs of speeds.
Post-hoc pair-wise comparison of Target Width yielded significant differences in the number of errors between 50 and 100 pixel target sizes .
Similarly, a post-hoc pair-wise comparison of Distracter Distance only yielded significant differences between distances of 250 and 350 pixels  in number of errors.
In an exit survey, participants ranked , the Bubble and Comet Ghost, 3.66 and 4.16 respectively.
This order is reflected in the error rates.
These were then followed by the Bubble, Comet and Area cursor techniques.
A similar pattern prevailed concerning the level of control for each technique.
Interestingly, we see that the distance-to-target is not only a function of the distracter distance, but also of the speed of the targets.
As we see in Figure 6.a, this distance is highly affected by the target speed.
In contrast, we see a lesser effect of distracter distance on distance-to-target .
Interestingly, the largest variance with respect to distracter distance was with the Comet technique and not the Bubble cursor as we would have expected.
This happens because when the Bubble cursor is highlighting the correct target, users needed to readjust their motor movement before they complete the selection as fast moving distracters could cancel out the Bubble cursor's selection.
For this reason, enhancements to the target may have a slighter advantage over techniques with cursor enhancements for this task.
The results of our study show that participants were fastest with an enhancement to the target, such as with the Comet over cursor based enhancements .
The Comet tail increases the effective width of the target thus facilitating the selection.
Based on our exit survey, participants did not seem affected by the rapidly changing cursor size with the Bubble, thus rejecting H2.
The Basic cursor performed the slowest and was also the most error prone.
Interestingly, the interaction effect of technique and speed is most apparent with the basic cursor as users were faster at higher speeds than at lower ones.
This occurred less with the other cursor types.
The only Ghost technique that showed any improvement in time performance in comparison to its counterpart was the Basic Ghost.
All other Ghost techniques were slower, thus rejecting H4.
This was in part due to pressing the Shift key to create the proxies of the moving objects, causing an overhead of around 200 ms.
However, we found that the Ghost techniques exhibited the lowest error rates.
It is also interesting to observe the wide range in error rates from the Basic technique compared to all the other cursor types, supporting our hypothesis that selecting moving targets  requires significant assistance.
Our results also support H3, suggesting that the increase in activation area resulting from the Comet and Bubble would minimize errors in comparison to the Basic and Area cursors.
As expected, faster targets are harder and more error prone to select.
Static proxies of the targets, as with Ghosting reduce the error rates slightly.
However this is not significantly different than leaving the targets in full movement, suggesting that bringing targets to a full halt may not necessarily resolve erroneous selection.
Other alternatives, discussed later are needed to reduce such errors.
We found that with the Area and Bubble cursors participants would select a target when the pointer was in front of it.
We found that this occurred more often with the Area cursor  than the Bubble cursor .
These trends are also very similar for the Area and Bubble Ghost techniques.
Surprisingly, this occurred more frequently at the lower target speeds.
In the 1D experiment subjects were able to quickly access targets using the activation area introduced by the comet tail.
However, pilot tests for the 2D setup revealed that the 1D Comet design was weak on two aspects.
The first consisted of the shape of the tail.
In the 1D Comet, tail thickness degrades gradually providing an elliptical activation area for the cursor to land on.
However, results from the first study show that participants largely selected targets when the cursor was at the tip of the tail.
In this design the shape of the tail follows the changes in the object's movement direction .
As a result, users do not need to make drastic changes to the cursor's path when the target is moving along less predictable trajectories.
Clicking the mouse button when the cursor is over the comet tail or on the target selects the object.
If two comet tails overlap the closest target gets selected.
Therefore if the cursor movement is orthogonal to the tail or the Comet, then selection could be impaired as the activation region may be less beneficial .
To investigate the performance of the various cursor types and their ghosted versions, we conducted a second experiment with targets moving in 2D.
Since the movement vector has shown to effect acquisition times , we also examined the effect of a less predictable target paths on selection performance.
We excluded the Area cursor from this experiment as it did not show significant benefits in the 1D task.
We hypothesized that: H5: the ghosted techniques will outperform the others in selection times and errors as users will select a static target; H6: the enlarged activation area brought by the Comet will mainly show benefits in the absence of ghosting.
The tail gradually increases in transparency until it completely blends with the background.
We rendered the tail using a series of slightly wider circles positioned along the target's movement path.
The part of the tail closest to the target is solid and then gradually becomes more transparent toward its end.
The purpose of this gradual transformation was to reduce the amount of clutter that would appear on the screen particularly in more densely populated scenes.
Target Ghost did not vary significantly from the 1D setup .
In Comet Ghost, a proxy of both the target and the tail were created.
To reduce clutter, the Ghosted object was drawn in a transparent blue shade.
The target proxies are red and those of the distracters are grey.
We used a within-subject design to compare the performance of the techniques in the 2D environment.
Here, the independent variables were Technique, Path Predictability, Target Speed, and Density.
The Techniques selected were, the Basic cursor, Bubble cursor, Comet, and their ghosted equivalent.
Path predictabilities were defined as: * * High - the target moved in a straight line.
Medium - the target changed direction between 15 and 45 , at intervals of 400-600 msecs.
The width of the targets and distracters was fixed at 75 pixels.
The design was balanced based on cursor type , with 3 blocks of trials for each technique.
Within each block we used 3 path predictabilities x 3 target speeds x 2 distracter distances x 3 repetitions for each condition, yielding 972 trials per subject or 11,664 trials in total.
All the participants completed the experiment in one session, lasting approximately 50 minutes.
Results of experiment 1 showed the potential of the Comet as a selection technique for 1D moving targets, due to its increased activation area.
However, it could be possible that the Comet may not be suitable for more complex target acquisition tasks that one commonly encounters in real 2D GUI interfaces.
Using the Bubble cursor, a user can select the target with the closest distance to the pointer.
At the start of each trial, the target and the distracters were initialized with a random movement vector.
When targets hit the edge of the application window, we redirected the path at an angle of reflection equal to that of the incidence.
After each successful selection, a new target and a set of distracter targets were displayed, with the goal target appearing at a fixed distance  from the start button but at different x-y positions.
To test the effect of movement type, we used three different path predictabilities .
In the case of high path predictability, the targets started with a random vector, and only the direction vector changed when it bounced off the edges.
Targets with medium path predictability also started with a random initial vector, but the vector changed after a longer random time interval and with a smaller random angle.
Low path predictability had the same initial conditions, but the vector changed at a high variance and at a higher angular degree.
The target to be selected was colored red, and the distracters were rendered as light gray with the same width as the goal target.
When selected correctly the target turned green.
Other interaction effects were not significant.
Post-hoc pair-wise comparisons of Techniques yielded significant differences between the Basic cursor and all other techniques .
The Ghosted techniques were also all significantly less error prone than the non-ghosted techniques .
The ghosted techniques exhibited error rates less than 10% .
In the non-ghosted techniques, the Basic cursor had the highest error rate , followed by the Bubble cursor  and then Comet  .
This sharp difference between the ghosted techniques and their counterpart is not surprising particularly since low path predictabilities result in many mis-clicks.
Outliers defined by 3 s.d.
Other interaction effects were not significant.
Post-hoc pair-wise comparisons of Techniques yielded significant differences across all pairs of techniques , with the exception of the Bubble cursor vs.
Participants completed the target selection task in less time using all the ghosted techniques than their nonghosted version.
Our results show that additional cursor enhancements such as target expansion or static proxies are necessary for selecting moving targets.
With different path movement types, ghosted techniques had faster selections and fewer errors than without ghosting .
However, without the ghosting, we see that the Comet's activation area is again beneficial to users, as they are faster and less error prone than the Bubble cursor .
Our results strongly support the use of cursor or target enhancements even with static proxies.
This is not surprising in terms of performance times, but in terms of errors we see that significantly fewer errors occur with the Bubble Ghost and Comet Ghost than the Basic Ghost.
This result can be partly explained by users over/undershooting targets whose proxies stop abruptly.
One solution might be to bring the static proxies into a gradual halt.
We were surprised to see that in the second experiment, even with ghosting, i.e.
Users still needed some form of enhancement, such as the Comet or Bubble cursor to complement proxy selection.
In the case of the enhanced cursor types, a large part of the errors resulted from clicking the wrong target, suggesting that finer improvements are needed to make selection practical.
One solution might be to list all objects `under' the cursor such that the user can then select one from the list.
Our technique would then work as a pre-filter to provide the user with a list of potential items.
Another possibility might be to disambiguate selection by correlating the movement direction with the cursor's movement path.
Movements that are deemed parallel may indicate a strong likelihood of a user wanting to select these targets.
Other applications that can benefit from these techniques include molecular or weather simulations and educational tools that are based on animated displays.
Typically, animations such as these are only viewable and accept very little input from the user.
However, direct manipulation can aid in better understanding the information being displayed.
For example, as video tracking becomes more commonplace one can foresee target selection available for multiple media types, including televised games.
In these scenarios, it might be particularly difficult to pause the entire scene.
With the use of our techniques, users can select players or other items of interest to briefly inspect relevant statistics.
Finally, video games include a large number of moving objects.
Typically, designers select the right level of difficulty to provide a sufficient balance.
This avoids losing game players who either get bored because it is easy, or who give up because of the difficulty level.
Our results can assist designers in selecting the appropriate balance by introducing techniques at the right level of user expertise.
Ghosting is inspired by proxy-based techniques  but also borrows properties of pausing an animated scene.
While pausing is also possible, there are cases where Target Ghosts would be more useful.
For example, in air-traffic control, pausing the display would not be a viable option since releasing the pause would create a disjointed view between frames.
In contrast, the continuity that is available with Ghosting would still allow the user to inspect the ghosted targets whose movements are not interrupted.
Future work is required to find applications where either type of interaction is the most appropriate.
From our results we propose the following guidelines: * * * * designers should take the cost of an error into account when selecting a design; for target movements in 1D, Comet should be the technique of choice; in 2D, selection of moving targets is best achieved with static proxies, such as Target Ghost; cursor enhancements such as the Comet or Bubble cursor should be employed, even when using static proxies of moving objects.
Many applications can benefit from the results obtained here.
We implemented our techniques in a video browsing environment, to emulate what a user of a video tracking system may have.
Direct manipulation interfaces in such an environment have shown to significantly improve user interactions .
To do this, we captured video footage of cars on a highway.
We then manually annotated the motion paths by extracting them from all the frames.
This allowed us to separate moving objects from the background, to which we then applied our techniques .
Comet and Target Ghost also present some limitations.
For example, in scenes with a large number of objects, Comet can add clutter.
This makes it more difficult to select those targets that may lie beneath the clutter.
One solution might be to create more intelligent techniques that only add comet tails to those objects that are needed or that fall in line with the cursor's movement.
Similarly, the duplicates of objects with Target Ghost also create clutter that can be difficult to manage in a scene.
One approach to resolve the clutter might be to create proxies of only a few targets that are in the vicinity of the cursor.
Furthermore, performance of the comet may degrade when two tails overlap.
Finally, if targets all have similar appearance, it should be investigated how well users can keep track of their goal target after activating the Target Ghost technique.
Another concern worth mentioning is the small number of participants used for higher number of conditions in the experiments.
While the parameters used in our studies are consistent with similar HCI studies, we feel that a larger number of participants could further ascertain our claims.
In this work we present techniques that aid in selecting moving targets.
We demonstrate through two experiments the need for assisting the basic cursor in selecting such types of targets.
Comet enhances objects by adding a selectable tail.
This increases the activation area for selection.
Target Ghost creates proxies of the moving object.
These proxies are static and created at the moment of invocation.
In a 1D selection task, Comet outperformed existing techniques such as the Area and Bubble cursors.
Comet also outperformed Ghosted versions of all techniques.
In a 2D selection task, Comet outperformed the Bubble, but only in conditions without the ghost.
Our results show that even if the user were to create static versions of the moving objects, an enhancement such as the Comet or Bubble is critical to assist in selecting these.
In future work we will test the performance of our techniques in real applications.
This could lead to new improvements to the Comet and Target Ghost, such as reducing the amount of clutter and minimizing the overhead of creating static proxies.
We will also test these techniques with different input devices, for example, by simulating a TV remote control.
Finally, we are also interested in studying whether the selection of targets moving in 3D has different features than the ones we describe here.
