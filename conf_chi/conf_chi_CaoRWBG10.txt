Programming has recently become more common among ordinary end users of computer systems.
We believe that these end-user programmers are not just coders but also designers, in that they interlace making design decisions with coding rather than treating them as two separate phases.
To better understand and provide support for the programming and design needs of end users, we propose a design theory-based approach to look at end-user programming.
Toward this end, we conducted a think-aloud study with ten end users creating a web mashup.
By analyzing users' verbal and behavioral data using Schon's reflection in-action design model and the notion of ideations from creativity literature, we discovered insights into end-user programmers' problem-solving attempts, successes, and obstacles, with accompanying implications for the design of end-user programming environments for mashups.
So, what counts as design?
Traditionally, design in software engineering has been considered as a front-end process followed by implementation.
As such, the devising of a solution and its implementation were considered to be separate and sequential processes.
This view has been continuously challenged by psychologists studying programming activities .
In particular, Gray and Anderson referred to design cycles that contained not just the traditional view of design as up-front planning, but also translating the abstract solution to implementation and then revising the implementation and/or one's understanding of the solutio n .
Recently, the software engineering community has adopted development methodologies that iterate between design and coding.
Examples include agile development, Rational Unified Process, and the spiral model .
However, within these methodologies, design and implementation activities are still considered as separate, albeit iterative and conversing, phases of the software process.
We believe that what is seen as just coding from the view of traditional software engineering in fact is peppered at the microlevel with design decisions and, as such, much of it can be viewed as designing.
We believe this is true not only of professional developers like Mike, but also of end-user programmers.
Nardi defined end-user programmers as being distinct from professional developers in that end users' programs are not the end in itself, but rather a means to accomplish their own tasks or hobbies .
End-user programmers often do not have professional computer science training, and there are a variety of research systems and tools aimed at this audience; examples include an accountant creating spreadsheet formulas  to keep track of a budget in Excel or a web-literate end user building a quick mashup to facilitate the planning of a night at the movies.
To investigate the role and impact of tiny instances of design that permeate the programming process, especially by end-user programmers, we adopted a design lens through which to view the activities of ten end-user programmers creating a web mashup.
Our hope was that this investigation would demonstrate this approach's ability to shed critical insights on end-user programming.
Thus, our research questions were:
Mike is a professional software developer.
As the conversation continued, it quickly became clear that his Venn Diagram design was something that emerged while he was programming--there was never any exit from the programming activity to engage in something most people would recognize as a design activity.
Yet, the software developers at the table consistently referred to the result as a "design".
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
RQ1: Can we describe end users' programming behaviors using theories and findings from design?
RQ2: Is doing so beneficial?
For example, what implications for tool design can we discover?
We use these questions to explore a methodology for applying design perspectives to programming.
We then present evidence, through insights gained, of the usefulness of using this methodology.
Finally, along with the insights themselves into end-user programmers' problem-solving attempts, successes, and obstacles, we present associated implications for the design of end-user programming environments for mashups.
Thus, they come to the conclusion that the software design process should be opportunistic in these cases.
Opportunism also appears in novice programmers' behavior.
Studies show that novices designing a program will initially attempt to use top-down design, but it often fails because the programmers do not have the ability to decompose the problem, nor do they have stored plans to build on .
Consequently, they start writing code without a plan, resulting in a bottom-up design.
While the studies above involved professional developers' and novice programmers' approaches, our study gives us a chance to see those of end-user programmers.
Professional developers may prefer to specify the design problem early, but like novice programmers, end users often go directly to programming, grabbing opportunities as they arise.
This lack of design planning is reminiscent of "debugging into existence" , i.e., ignoring analysis and incrementally developing a small part of the system then iteratively using the debugger to refine and correct problems.
However, recent research suggests that design planning by end users is feasible.
In an exploratory study , end-user web developers successfully carried out a design planning task before developing the application, and this was reflected in the implementation.
Our work differed from  in that we did not prescribe design planning methods to participants but rather let them work however they preferred.
The work of Kannengiesser and Zhu  applied the function-behavior-structure  design model to various software design methods, e.g., the Rational Unified Process.
The aim of this work was to develop a basis for empirical investigations of software design processes using the FBS model.
Our work differs from theirs in several ways: we applied Schon's reflection-in-action model instead of the FBS model because it is suitable for describing practitioners' behaviors, our participants were end users rather than professional software developers, and our study was empirical instead of analytical.
In the design community, Schon's reflection-in-action is an important design model that describes practitioners' ways of approaching ill-defined problems .
The process has three phases.
Framing involves understanding and defining the problem.
Acting aims to transform the current situation to a better one, or to learn more about the situation.
Reflecting looks back on actions to assess their consequences and implications.
The process is an iterative "conversation" , with moves from framing to acting to reflecting, and sometimes back to major reframing.
When designers, professional or not, sit down to create a design, they are likely not looking for repetition but for expressions of creativity.
The creativity community has evolved theory and associated concepts that point to creativity, namely the three concepts of ideational fluency, flexibility, and elaboration.
The literature has long argued for quantity of ideas as an indicator for creativity .
Guilford introduced the concept of ideational fluency, i.e., the rate of generating ideas related to the creative output.
Empirical evidence supports the construct validity of using ideational output as a measure for quality of responses .
Flexibility is defined as generating different types of ideas .
Flexibility can be recognized when an individual moves from one ideational category to another .
Elaboration is described as the ability to extend basic information to a rich web of information .
In our study, we relate our findings to these three concepts.
Research shows that professional software developers take different paths in the early stages of a design process .
One path is to fully specify the design problem early on.
In this top-down, breadth-first approach each successive level of the decomposition is more detailed.
The refinement process continues until the problem is fully specified.
This approach is successful if the problem is well structured, with well-defined goals, knowledge of the domain, and no novelty in the problem.
Lacking these characteristics, the alternative path is opportunistic decomposition, in which the software developer jumps into the design using a datadriven approach.
To see if we could apply design-related theories and findings to describe end users' programming activities, and to find out the benefits of doing so, we observed ten participants engaging in an end-user programming task, i.e., creating mashups.
Mashups are web applications that interactively combine data from multiple internet sources .
We chose mashups because it is an emerging end-user programming paradigm.
To achieve this task, participants used an online visual programming environment called Microsoft Popfly Mashup Creator.
All participants were comfortable with web browsing.
We used the think-aloud approach, conducting the study with one participant at a time.
Participants first filled out a background questionnaire and worked on a hands-on tutorial in which they were allowed to ask questions .
They then completed a self-efficacy questionnaire adapted from  to the specific task of end-user mashup creation.
We collected self-efficacy scores because self-efficacy has previously been found to impact end users' approaches to programming tasks .
Participants then practiced the think-aloud procedure before proceeding to the main task.
When participants stopped making progress, the researcher administered an additional mini-tutorial to help them .
The data we collected included a video capture of participants' interactions with the environment , and participants' final mashups.
The pre-task 20-minute tutorial provided participants with an introduction to mashups, and included two live examples of mashups before a short hands-on session.
The hands-on session familiarized users with Popfly's basic features, how to search and modify other people's mashups, and the help feature.
Figure 1 shows the mashup participants created during the tutorial.
During the task, participants who had not made progress for 15 consecutive minutes received an additional 5-minute tutorial to help them regain productivity.
The tutorial consisted of creating two mini mashups.
The decision on delivering this tutorial was based on the participants' demonstrating difficulty in generating new ideas to approach the task.
Although the mid-task tutorial may have influenced participants' behaviors, we compare its effect to encountering a well-chosen example.
The mid-task tutorial was given to half of the participants .
The task involved creating a mashup about movies shown in a city.
Paper, pens and sticky notes were provided.
Prior to the study, we refined the experimental setup and the task with pilot runs.
In Popfly, users build mashups using basic programming constructs called blocks.
Each block performs a set of operations such as data retrieval and data display.
Each operation takes input parameters to allow customization.
Blocks are connected to form a network in which the output of a block can be used as input for adjacent blocks.
Figure 1 shows a mashup example in which the Flickr block sends a list of images about "beaches" with their geographical coordinates to the Virtual Earth block  to display them on a map .
In Popfly, blocks are listed in different categories, which users can search.
Additionally, users may share their mashups with others for reuse and modifications.
Shared mashups can be retrieved using a textual search.
We coded the study's transcript with three code sets : reflection-in-action  commonly used for studying design activities , ideations devised based on creativity literature , and barriers developed for the analysis of end-user programming .
For reflection-in-action, we used one code for each of the three steps in the reflection-in-action theory.
Framing described events in which participants tried to understand and define the problem, either by generating a hypothesis to explore, or by gathering information to narrow down the design space.
Acting described events in which participants started or changed their mashups.
Reflecting described events in which participants evaluated their actions.
Table 1 shows examples of each.
We built upon Guilford's notion of "ideational fluency" to create the ideations codes.
As mentioned in the Background section, ideational fluency refers to rate of generating ideas .
To account for this notion, we coded expansions and contractions of the participant's working set of major ideas.
Expansion describes a new idea to solve the problem, or the elaboration of an existing idea.
In contrast, contraction is the abandonment of an existing idea.
In our analysis, we only coded expansion/contraction if there was unambiguous evidence of an idea addition/deletion through their verbalization or action.
As a result, this code set mainly expresses how ideation processes were reflected by actions carried out in the workspace.
Finally, we coded five of Ko et al.
Code Example Reflection-in-action  Framing It looks like I have to have multiple VirtualEarth.
Acting  Reflecting So it gives me the theaters, and the movies themselves.
Ideations  Ideas for blocks Expansion:  Contraction:  Expansion: So I need to connect LocalMovies to Ideas for which VirtualEarth blocks to connect Contraction:  Ideas for block de- Contraction then expansion:  Within-block ideas Expansion:  Barriers  Design So I'm going to start all over.
Selection Now I'm searching for information about each movie.
I need to go where?
Coordination I cannot see any pictures or MSN News from the results even though I had connected them together.
Use I didn't use the right options.
Understanding I don't know what happened and why it didn't work.
To get an overview of participants' behaviors, we graphed the result of the reflection-in-action code set over time.
As Figure 2 shows, participants made extensive use of all three phases, iterating tightly through the reflection-in-action cycles.
In particular, we identified three common patterns: stair-step, w, and restart.
The stair-step pattern refers to a succession of consecutive episodes of framing, acting and reflecting.
The w pattern refers to participants switching more than one time from framing to acting and back or from acting to reflecting and back.
The other pattern, which occurred occasionally, was the restart pattern, in which reflection led to a return to the framing stage.
An example of each pattern is illustrated in Figure 2.
Notably absent was any kind of waterfall-like pattern that would have featured a fairly long period of framing alone first, then a fairly long sequence of acting without returning to framing, then a sequence of reflecting.
This indicates that our participants used a highly iterative development style--not one characterized by lack of design, but rather one peppered with numerous instances of "micro design".
In existing environments for end-user programming such as the emerging ones for building mashups, there is no support for phases other than implementation.
Thus, any designing that takes place occurs in the context of implementing and evaluating a program.
To study the consequences of this attribute of end-user programming environments, we applied the reflection-in-action theory to examine how design was integrated into our participants' actions.
In this section, we present insights gained from our observations into mashup programming, as discovered through the application of the lens of design.
First, we show an overview of how participants cycled through the different steps of the reflection-in-action model, namely framing, acting, and reflecting.
Next, we present detailed insights gained using the design lens in each of the three stages.
For each result, we provide implications for the design of mashup environments.
To provide context for the rest of the paper, we first provide the participants' success levels in achieving the given task.
In order to begin, one needs to have a grasp of the problem.
The notion of framing captures efforts to understand and define the problem .
We discovered two issues participants encountered in the framing stage.
First, successful participants' framing efforts often produced actionable ideas to guide their actions whereas the unsuccessful ones' often did not.
Further, we found that unsuccessful framing episodes were often followed by design barriers.
Second, participants' inclination to reframe in the face of failure differed.
We discuss each of these issues next.
When analyzing our participants' framing episodes, we noticed that the successful episodes were able to suggest actionable ideas as to how to proceed with the task, whereas the unsuccessful often failed to do so.
This difference drew our attention to the importance of framing's output, i.e., ideas that guided actions.
In fact, visiting the framing phase, whether the participant exited with or without output, was often critical to the success of what came next.
For instance, M1's framing usually produced output in the form of actionable ideas, and his subsequent actions made direct use of those ideas.
As an example, earlier in his task, he had set up Flickr to get pictures of movies.
Then he discovered a problem in minute #11 --his mashup did not return pictures.
He re-entered the framing phase briefly in minute #11, producing the hypothesis that the pictures' sorting criterion might be wrong.
He translated this idea to action immediately : M1: "Theater address may not be right."
For example, numerous times she filtered out possible ideas before even trying to follow up on them, such as at minute #4: F4: "Flickr.
When her framing did not produce outputs, F4 had no inputs for the action phase.
Why did participants leave the framing phase without output?
One common event tied to this phenomenon was design barrier instances.
Ten out of 16 design barriers were followed by framing episodes with no outputs.
Among the framing episodes following the remaining six design barriers, two ended with ideas too vague to act upon, and one resulted in a repeating idea that had failed earlier.
Implications: The close tie between design barriers and unproductive framing suggests that end-user mashup environments can improve end-user programmers' framing e fforts by suggesting ways to overcome design barriers.
Tools to assist end-user mashup programmers to refine their understanding of the problem and possible solution ideas could help prevent end-user programmers from coming away from their framing efforts empty-handed.
According to Schon, experts own repertoires of past approaches.
They bring these repertoires to a new situation by "imposing" a previously useful frame on it, testing the fit by seeing if their actions in the new situation contradict the reused frame.
Thus, one promising avenue to assist end users in framing would be providing users with examples serving as such a repertoire.
Examples are common in end-user programming environments, and were available in Popfly--but when examples were available in this environment, attempts to learn from examples failed .
The problem was that participants were unable to find the right examples or to distill useful information from them.
This suggests the need for better support for helping users find the examples they need to address the problems they are having.
Work such as  may inform better design of tools to support utilizing examples.
Using the ideations codes, we noticed that some participants shared the same ideas but the degrees to which they were attached to those ideas varied greatly.
Some participants refused to discard unworkable ideas, and we viewed that as inflexibility.
As mentioned before, flexibility, the ability to produce a variety of ideas, is critical to creative output.
One way to achieve this is through what Schon called reframing; that is to change one's definition of the problem to approach it from a different angle, which allows for the discovery of very different solution ideas.
F4 was an example of inflexibility in her refusal to reframe.
She had the idea in minute #9 that she needed a map when in fact using a map was not a viable solution to the task.
Other than a brief detour at minute #40, she stayed with that idea throughout the session, trying to get movie information and pictures to show up on a map.
When her idea failed, instead of reframing or looking for other alternatives, F4 turned to a "get mashing ideas" tool in Popfly that lists blocks that could communicate with blocks already in the workspace.
This produced actionable ideas , but these ideas came from the environment, not from her head.
There was no evidence that she reflected on what had gone wrong with her previous attempts, nor attempted in reframing to rethink the problem.
Instead, she simply repeated actions she had tried before, with no progress in the mashup itself or in evolving her understanding of the problem or potential solutions.
On the contrary, flexibility in reframing did not seem to be difficult for the more successful participants; they seemed to recognize the time to abandon nonproductive ideas.
But unlike F4, when he did not succeed with that idea, he abandoned it.
After only two attempts to get pictures to show up on a map failed, he reentered the framing phase to look for other possible approaches, at which point he came across the Local Information tab that led to Local Movies.
By minute #12, he had already taken that idea into the acting phase to pursue the Local Movies idea.
The uncertainty in the reframing stage of reflection-inaction was difficult for even the most successful participant.
For example, F1 said, "I don't know what I'm doing".
It especially challenges people with low self-efficacy like F4, because according to self-efficacy theory, low self-efficacy often leads to low flexibility .
Like F4, low-self-efficacy people may attribute failures to their own lack of abilities, thereby pursuing poor ideas too long.
Implications: "What-if" features might help with inflexibility and unwillingness to reframe for low self-efficacy users.
For example, a tool that would allow users to make assumptions about what a block will output might enable users to explore assumptions in multiple ways.
One way might be to focus on testing the assumption.
A second way might be to focus on companion blocks compatible with that assumption.
A third way might be to focus on competing blocks supporting the same assumption.
By tinkering he discovered the usefulness of the Local Movies block, i.e., the ability to deliver theater information, so he retained the block in his mashup and built other ideas around that.
M3: "I'm just trying to figure out how to get the program to run to show movies around CITY but I can't figure it out...
I'll just keep clicking around 'till I get it...
Try a different operation to see if it works...
So far I've found out the theaters within CITY..." M2 and M4 tinkered excessively with blocks' connections, reflected in part by the large number of which blocks to connect ideas .
So, I was on the right track before."
As these examples illustrate, tinkering did not consistently occur with reflection, impeding participants' understanding of the design options available to them in the form of blocks supplied by the environment or how blocks may work together.
Partially to blame is the cost of carrying action to reflection in the environment.
Popfly's runtime view , the primary facilitator for reflection, is separate from the implementation interface .
This separation made it difficult for participants to cross-reference mashups with their output.
Moreover, participants were only allowed to view the runtime results for the entire mashup as opposed to those originating from tinkering with a portion of the mashup.
Because of these attributes, reflection tended to slow down ability to act.
Implications: Literature in end-user programming has shown that tinkering with reflection can be helpful, but tinkering without reflection has been associated with negative outcomes .
In our environment, a barrier to carrying action to reflection was the cost of running.
Acting upon ideas can be regarded as "just" implementation.
Even so, its interwoven relationship with design decisions sheds insights on the way ideas progressed in our participants' mashups as well as obstacles to such progression.
In transferring ideas to action, one obvious reason our participants took these actions was to follow up on ideas or hypotheses generated in the framing stage.
A second reason was to produce a specific outcome as distinguished from those generated by hypotheses or a goal of exploration.
A third reason was exploratory-- participants acted to explore and to see what would happen in order to understand the situation better.
These goals for acting are consistent with the reflection-in-action theory , but in addition we identified issues with the current support of acting in the environment, namely the lack of support for tinkering, elaboration, and parallel explorations of ideas.
Schon characterizes exploratory actions as "probing, playful activity by which we get a feel for things" .
Research in education  and end-user programming  have pointed to the benefits of tinkering.
We took note of tinkering behaviors by looking at the output from framing and the types of ideations people had.
We noticed that participants sometimes left the framing phase without concrete ideas to act on.
In those occasions, participants tinkered, generating fodder for reflection, and sometimes new ideas or hypotheses that might lead to later developments.
Thus, in order to encourage tinkering productively, the cost of crossing the bridge from action to reflection needs to be carefully considered, so that it is neither too high nor too low.
Elaboration is an important component of creativity.
By analyzing the ideations and barriers codes, we discovered both good and poor elaboration behaviors.
For example, F1 was successful at elaborating her ideas systematically.
This was depicted by her organized engagement with all types of ideas.
Her ideation processes often followed a pattern: picking a candidate block , examining its options , connecting it to other blocks , and adjusting settings of blocks to account for the inclusion of the new block .
As a result of adequate elaboration, she was able to distinguish good ideas from poor, and act effectively toward solving the problem.
In contrast, elaboration was problematic for most participants.
Two major issues were: lack of elaboration and excessive elaboration.
Lack of elaboration was pinpointed by excessive addition and removal of blocks in the workspace.
Two participants, F2 and M3, were particularly affected by this problem .
M3 encountered multiple selection barriers, which refer to difficulties in not knowing what block to use for a desired behavior.
Because of this, he excessively added and removed blocks leading to a failure to elaborate on potentially successful ideas based on those blocks.
M3: "So I don't really know what blocks to use... CinemaTopTen came up before - I don't know if it's useful or what it does but I'll try it...
I'll see what Cigarettes is 'cause that seems interesting..." Some participants demonstrated the opposite behavior, attempting to elaborate excessively but failed to gain benefits from doing so.
In particular, F4 encountered use barriers  and coordination barriers  in trying to refine existing ideas, but regardless of her difficulties, she persisted.
These difficulties prevented her from being able to elaborate effectively on her ideas and in turn led to an understanding barrier, i.e., not knowing why the program behaved the way it did.
The following example shows that in the face of a use barrier, she randomly fiddled with the block's settings, and thus failed to elaborate effectively.
Changes the settings back and forth.
I don' t know what I'm doing wrong."
We suggest that under-elaboration lies in the possibility that participants may have perceived elaboration as more costly than simply choosing another idea.
The reason might be that the environment encouraged detailed implementation too early.
Similarly, we argue that over-elaboration is linked to the same issue with the environment.
For example, in order to test a tentative idea that a block might be useful, rather than being able to make the high-level assumption that it is useful and proceed with the rest of the design, the user had to go all the way, specifying various settings for the block and integrating it with the rest of the mashup in order to test that idea.
In cases where an environment solely provides detailed implementation mechanisms, there is a risk of users to be lured into "trying to make it better" rather than thinking about the bigger picture.
This phenomenon is particularly important in design  and has led to an important body of research on supporting sketching in computerized design practice .
Similar effort has been made to support "sketching phases" in user interface development .
However, these systems have been targeted to professional designers rather than casual end-user programmers.
Backtracking refers to instances in which participants returned to a previous state of the mashup after exploring other ideas.
We identified these instances by diagramming ideations in the workspace in a time-wise fashion.
All of our participants backtracked multiple times.
There were three types of backtracking: to pursue alternative ideas, to revert back to a more successful state, and accidentally re-entering a previous state.
First, some participants were trying to experiment with multiple idea alternatives, but as with almost all programming environments, there was no support for this.
For example, within only three minutes, M3 backtracked to the same state three times .
With each trial, he experimented with a block for retrieving/displaying pictures that he hadn't used before.
M3's experimentation would have been less time-consuming if he could have done his experiments in parallel and compared results side by side.
The second way participants used backtracking was to retreat from a path, getting back to a "safe" state.
Once back in a working state, the participant usually went back to framing, to think of other ideas to try.
But this tended to be error-prone, because sometimes participants had trouble recalling the exact details of that state.
M2: "So how was this working before?"
M5: "I'm gonna save more often now, like if I screwed up I could still get something to come up...." The third way participants backtracked was by accident, trying to find their way without meaning to return to previous states.
Although she did not intend to backtrack, she sometimes recognized a state when she stumbled into it again.
Oh I keep on doing that..." Implications: Similarly to designers , end users would benefit from the ability to explore ideas in parallel.
Systems featuring this capability have been implemented for professionals, e.g., .
However, such systems remain largely absent from end-user programming, with a notable exception in .
Additionally, programming environments should support end users' need to return to an earlier salient step in their design, for instance by permitting them to bookmark their exploration.
Our participants relied on their memory to do this, which was error-prone.
Finally, since backtracking is detectable, it might be possible to gently map the user's journey through state space, to avoid the wasted effort of returning to a state multiple times by accident.
To a lesser extent, F2 and M5 demonstrated a similar pattern .
These participants had difficulty evaluating which action caused the changes in results.
M5 eventually recognized that this strategy was not working for him, realizing that his program had become so complex, he could not debug it.
At that point, he started removing blocks, which rapidly turned his progress around.
I was getting way too complicated."
In contrast, the most successful participant, F1, reflected upon her actions frequently.
Ok so I have a really long list of movies.
Additionally, we noticed that five participants had on occasions no actions carried out between runs.
One possible reason was that the environment separated the mashup's output from its logic so when running the mashup, its logic was no longer available for reference.
Thus, participants had to memorize one screen before switching to the other.
In fact, three participants took notes on the outputs before going back to editing the mashups.
Memorization is taxing, and the cost of running could also have deterred participants from frequent runs to enable reflection.
Implications: These phenomena suggest two implications.
First, there is a need for mashup environments to not only reduce effort of running per se but also the effort of marrying the runtime output with the program's logic itself.
The environment could for instance provide micro-evaluations of local portions of the mashup during the implementation phase .
Moreover, the environment could provide references between the outcomes of the mashup and its log-
Analyzing participants' reflection phases, their actions in between reflections, and understanding barriers they had, we identified two salient issues with the support of reflection in Popfly.
First, some participants carried out a large number of actions before they reflected and thus missed out on the opportunity to identify the impact of each action.
Second, once the mashups' results were shown, participants lost the ability to refer back to the program's logic , and hence they could not efficiently debug.
Not surprisingly, nearly all participants experienced understanding barriers, i.e., not knowing why the program did what it did.
Actions were reflected by ideations in the workspace.
For example, having an idea for block meant adding a block to the mashup.
Thus, upon visually exploring the occurrences of the ideations codes, we noticed that F4 underwent many actions before reflecting on them.
For each participant, we then calculated the number of actions carried before an evaluation of the mashup, i.e., running it.
Figure 5 provides a visualization of the number of ongoing actions between runs.
Accumulation of idea actions  before run.
Color gets darker as idea actions accumulate.
Color is reset to very light whenever participant hits "Run".
For example, F4 accumulated 46 idea expansions and contractions before she first hit "Run" in minute #26.
However, solutions to these problems are inherently difficult for mashups, since their performances also rely on remote providers of information that may not always be responsive.
Second, while professional programmers and even novice computer science students get a lot of practice honing their problem-solving strategies for debugging such as isolating variables, end-user programmers may not have developed debugging strategies like these.
Tools for debugging by end-user programmers could provide hints for debugging strategies, as demonstrated in spreadsheet software .
In doing so, we effectively conducted a triangulation process by analyzing our data from different angles.
The design lens proved useful to us at getting a perspective on end-user programmers' ideation processes.
Ideally, we suggest that this method should be combined with more traditional ways to study end-user programming, allowing a triangulation process involving two major perspectives: traditional approaches of understanding programmers, together with the emphasis on ideations from design and creativity literature.
Consideration of programming through a design lens provided unique insights into the process of programming by these end users.
Traditionally, empirical studies of programmers generally apply theories from psychology, use a bottom-up grounded theory approach, or test hypotheses about behavior.
Further, that literature considers design and programming to be two different, albeit sometimes highly iterative, phases.
Our approach, in contrast, implies that every choice our participants made, large or small, could be viewed through a design lens.
Doing so amounts to considering programming as the paths of ideas from their beginning to their end.
We primarily used the reflection-in-action framework as a tool for our analysis, deriving it into a code set sufficiently robust for our purpose.
The theories from design, creativity, and programming literature contributed to the code set as well, and moreover helped us to pinpoint, explain, and interpret the patterns we found.
We developed two useful tactics for understanding paths of ideas.
The first was the use of visualization tools to view patterns of the interactions between code sets at multiple levels of abstraction.
The second was the use of triangulation, arriving at the same answer from more than one perspective, i.e., analyzing data using design, creativity, and end-user programming perspectives concurrently, merging and comparing their output.
These two aspects were intertwined.
Regarding visualizations, we found two types to be particularly helpful in understanding how ideas evolved.
We call the first type "idea graphs".
These were graphs representing the state of the participants' ideas that they elaborated upon and retracted explicitly in the workspace.
Figure 4 is an abstract view of one of these; the detailed version we used depicted every major state transition of a participant's "idea set" with all arrows labeled with actions triggering the transitions.
The second main visualization type represented the coded data over time.
For this type of analysis, we found that the ability of the visualization software to quickly create combinations of codes into a new "supercode" to explore eme rgent patterns was crucial.
For example, we supplemented Figure 5 with annotations denoting interesting events from other code sets, which particularly highlighted issues with elaboration.
In this paper, we have presented a design theory-based approach to investigating programming by end users.
We demonstrated the usefulness of this approach by applying the reflection-in-action design model and the ideation notion from creativity literature to the think-aloud protocols from ten participants creating web mashups.
The results revealed ample opportunities for environments to better support end-user programming as a design activity.
Implications included support for meaningful tinkering, for effective reflection, and for exploration of multiple design alternatives in parallel in end-user programming environments.
Using design theory as a perspective on end-user programming thus shows promise in helping researchers to better understand the problems faced by end-user programmers, aiming toward future environments that can avoid the kinds of problems encountered by some of our participants.
F4: "This is so hard for me.
Why is it so difficult?"
