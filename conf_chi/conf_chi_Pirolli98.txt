Designers and researchers of human-computer interaction need tools that permit the rapid exploration and management of hypotheses about complex interactions of designs, task conditions, and user strategies.
Dynamic programming is introduced as a such a tool for the analysis of information foraging technologies.
The technique is illustrated in the context of the Scatter/Gather text clustering browser.
Hypothetical improvements in browser speed and text clustering are examined in the context of variations in task deadlines and the quality of the document repository.
A complex and non-intuitive set of tradeoffs emerge from even this simple space of factors, illustrating the general utility of the approach.
What if the user is faced with a repository rich with relevant information vs a poor one?
This paper presents a modeling technique for exploring a space of human-computer interaction designs.
It is a dynamical modeling technique that was initially suggested in the context of Information Foraging Theory .
Here I present a more elaborate description of the technique and its application to exploring the design space for a browser for very large text repositories.
It seems likely that these techniques could be extended to other browsers, such as those for the World Wide Web.
Basically, the approach requires that the analyst find an abstract representation of the different states of interaction, such as the state of a browser display, and the different changes that can be made from state to state, such as the changes that result from user actions.
This defines an abstract state space representing the possible paths that human-computer interaction may take.
One also must have some method for assigning costs and values to different states and moves.
In the example I describe below, the values are the expected number of relevant documents that will be encountered while browsing, and the costs are just the amounts of user time involved.
Different state spaces, with different costs and values, are used to represent alternative interfaces.
I then use a technique called dynamic programming  to perform an evaluation of the different interfaces.
Conceptually, it does this by searching through the different possible paths of human-computer interaction, evaluating the costs and values of different paths, and finding the best paths.
In this manner, one can find the best-case performance of a user interface.
This is the fitness of the interface.
One goal of this paper is to provide a more thorough introduction to the dynamic programming analysis of information foraging by application to a concrete example.
For the engineer/designer this technique is proposed as a sorely needed tool for the rapid exploration of "what-if" variations in complex designs.
For the researcher, it is a technique for exploring and generating hypothesis about the interaction of design trade-offs, task conditions, and user strategies.
Surveys of users of the World Wide Web  find that the two most frequently reported problems are poor speed of access and failure to find information that is known to be available .
Designers of browsers for such large and rapidly-growing hypermedia repositories will naturally be concerned with alleviating those problems.
Like all complex design problems, however, there will be many interacting constraints and trade-offs in the space of potential designs.
These design trade-offs may also vary according to the space of conditions that will be faced by potential users.
Furthermore, one may want to predict some of the effects of these designs on user strategies.
For designers of user interfaces, such as browsers, it might be helpful to have techniques that allow one to explore various complex "what-if" design scenarios.
For instance, what if system algorithms are made faster as opposed to more accurate?
What if presentations are made more informative but slower to read?
The Scatter/Gather cluster display window.
The validity of the technique will depend on many factors that the designer may wish to check empirically.
A dynamic programming analysis of information foraging is presented for a browser that clusters large-scale text collections, called Scatter/Gather  The interaction space of the baseline model is based on empirical data .
Variations on this model consider the simulated effects of, and interactions among,  different deadlines,  different amounts of available relevant information,  possible improvements in interaction time costs, and  possible improvements clustering of relevant information.
The user may gather clusters of interest by pointing and selecting buttons above each cluster.
On command, the system will pool together the documents in those clusters, then automatically scatter that subcollection into another set of clusters.
The user may repeatedly scatter then gather clusters, moving from very large cluster collections to very small cluster collections.
Eventually the user may display all the titles of documents in one or more clusters, then select individual documents to read.
In studies  Scatter/Gather was applied to the Tipster collection of about 750,000 documents created for the TREC text retrieval conference .
Standard information retrieval tasks  have been defined on it together with lists of known relevant and non-relevant Tipster documents, as judged by experts.
We studied this version of Scatter/Gather under experimental conditions  in which the general objective for users was to find as many bibliographic references as possible relevant to a set of the TREC queries.
This forms the basic starting point for our dynamic programming model.
The Scatter/Gather browser  uses the clustering of documents as the basis of a browser suitable for large numbers of documents .
Each of the ten subwindows in Figure 1 represents a cluster of documents.
Each subwindow presents a cluster digest, which contains topical words and the titles of the most typical documents in that cluster.
For the Scatter/Gather states, these times record the point at which the window is displayed and the next user action begins.
For the Display Titles states these times record the point at which the window has been displayed and the user has completed scanning and selecting titles.
If this display scanning would go beyond the task deadline , then the state's time is set to the deadline.
The number label on the arrow between the icons in Figure 2 indicates the number of clusters gathered at a state along the path , or a "D" label indicates that the chosen clusters were displayed in a Display Titles window.
The path in Figure 1 models a user who starts out by gathering two clusters at time T = 0 seconds, and scattering these into a new Scatter/Gather state that appears at time T = 52 seconds.
One cluster from this state is gathered and displayed in a Display Title window, and scanned and selected until the deadline time T = 720 seconds.
One can note in Figure 2 that the total number of documents as well as the number of relevant documents are reduced as one moves from state to state.
However, one can also see that the proportion of relevant documents R/N is increasing.
The dynamic modeling approach to information foraging taken here was inspired by similar approaches in the study of the ecology of animal behavior .
A more technical and mathematical treatment of the current model is provided in Pirolli and Card .
The dynamic optimization techniques used here are just a small example of an extensive set of such models .
Figure 2 gives a schematic overview of a path of humancomputer interaction using the Scatter/Gather browser.
Each icon in Figure 2 represents an interaction state involving one of the two main kinds of display windows.
The Scatter/Gather display window presents clusters that the user may gather.
Eventually, a Display Titles window is used to display the titles of documents in clusters chosen by the user, and the user scans these seeking relevant ones.
The boxes beneath the icons schematically represent information about the interaction states.
The sharpcornered boxes represent Scatter/Gather states and the round-edged boxes represent Display Titles states.
The collection of all the states achievable along all the paths of interaction from some given start state define a state space.
Rather than the single path shown in Figure 2, a subset of the paths are shown in Figure 3 .
Only a small portion of the full state space is displayed in Figure 3 for the purposes of illustration.
Only the first few steps in the interaction space are shown, only alternative moves along the best paths are displayed, and only three of the alternatives are shown.
The full space gets explosively large as more alternatives are added,1 and this is often the main computational drawback to using dynamic state-space models.
Let X = x be a state variable representing the state of interaction at time t. As described in Pirolli and Card  we use a multi-dimensional vector to represent the Scatter/Gather states.
The components of the X vector in this example would include N, R, T, G, as well as other state attributes.
There will also be a set of state-change operators i , that produce some new state, X = i .
For instance, the user actions of gathering and scattering clusters in Scatter/Gather are examples of such statechange operators.
The time cost of the operator will be C, and its value may be state-dependent.
For instance, the time cost of displaying titles in Scatter/Gather depends on the total documents, N, and relevant documents, R. For our current definition, let time t be indexed in seconds remaining to deadline.
For a task with a deadline of 720 seconds: at the beginning of the task, t = 720 and at deadline t = 0 seconds.
Using the foraging terminology of Mangel and Clark , we construct a fitness evaluation function  for the final end states.
For the current Scatter/Gather example, final fitness values can be defined recursively as,
Imagine that one could, however, generate all possible paths and isolate all the possible interaction states that a user could get to by the task deadline .
One could evaluate these states to determine their value.
This value might be any resource, but in our example it is the number of relevant articles that can be collected by the task deadline.
Now imagine that one could take one step backward from the end states.
From these penultimate states, the optimum step would be the one that goes to the highest valued end state, which is known from the evaluation of end states.
So, the optimum value of the penultimate states can be calculated by tracing backward from the end states.
Generalizing this process, one may iterate the process backwards from states to prior states until one gets back to the starting state.
To summarize, the dynamic programming approach involves defining a state space and an optimization criterion.
In the current example, the state space is defined by the representation of states, a particular starting state, a set of feasible strategies and actions, and the state dynamics produced by those state-changing actions.
If the optimization problem is formulated in an appropriate and tractable way , then dynamic programming finds the sequence of states and action choices that optimizes the specified criterion.
Conceptually, the dynamic programming optimization technique finds the value of end states 
From this conception of the search process, the state space grows exponentially with each additional step of interaction analyzed.
If one considers all interaction paths of length L, with b alternative branches from every state, then there will be Lb states in that state space.
See Bertsekas  for discussion of how dynamic programming problems generally grow exponentially with the number of dimensions used to represent states .
The repository quality conditions were: * Sparse repository in which there were R = 303 relevant documents among the N = 742,833 total documents for a given query.
This corresponds the TREC queries in the medium range of difficulty .
This corresponds the TREC queries in the easy range of difficulty.
Table 1 contains time cost estimates for various events involving the baseline Scatter/Gather system .
Using these estimates, Table 2 presents relevant state changes and costs incurred by various user actions.
To model the effects of gathering clusters and scattering them in Table 2 we use a function D.
It models the proportion of relevant documents contained in the best k clusters presented in the Scatter/Gather state.
That is if, R is the total number of relevant documents in all the clusters on a Scatter/Gather display, then D is the proportion of R that is in the k best clusters.
This function is based on the analyses of Pirolli and Card , is described in the Appendix, and plotted in Figure 4.
Effects and time costs of state-change operators.
N is the total documents and R the number of relevant documents in the current state.
Time costs are described in Table 1 and D in the Appendix.
Two system improvements were explored: * Faster interaction, in which the time cost of computing a new Scatter/Gather cluster display was cut by 1/2.
Against these baseline data we can examine the effects of system improvements.
Overall, the best-case gains for improved clustering simulations were, on average 23% better than the baseline system, whereas the faster interaction simulations were, on average, 18% better than baseline.
However, improved clustering was not always predicted to be better than faster interaction; there were, in fact, many subtle System x Task interactions, as I show next.
Figure 6 shows simulated improvements under different deadline conditions.
The simulations suggest that improved clustering will be superior when the deadlines are soft.
On the other hand, when there is a hard deadline, with less time available, a system with faster interaction time will have better pay-offs.
Figure 5 shows the improvements predicted for a faster interaction system and a system with improved clustering, under different repository conditions.
With a repository rich with relevant information, the simulations suggest there will be no major difference between two particular improvements that were examined.
However, when the repository is relatively sparse with relevant information, the simulations predict that a system with improved clustering will be superior.
The dynamic programming simulations can also afford some exploration of the optimal user strategies for the different Scatter/Gather system configurations.
The optimal strategies are the action choices made along the optimal interaction path, as determined by dynamic programming.
For instance, in the simple state space of Figure 3, the optimal path can be traced by following the bottommost arrows from state to state.
That path is optimal because each move goes to the highest gain  next state.
The action choice along the portion of the optimal path depicted in Figure 3 is to choose two clusters at each stage.
The optimal user strategies may vary across the different system improvements and task conditions.
Here I examine the average number of clusters the ideal user would have to chose on each Scatter/Gather display, and the amount of time the ideal user would spend scanning titles for relevant results.
It turns out that the dynamic programming analyses shows strategy shifts that are consistent with models developed in Information Foraging Theory .
Table 4 shows the average number of clusters chosen from Scatter/Gather displays in the simulation of an optimal user on the baseline system.
The simulations for the faster interaction system and the improved clustering system only showed differences from Table 4 in the soft deadline conditions.
Under soft deadlines, the faster interaction simulations showed the same or more clusters being chosen than baseline, whereas the improved clustering simulations showed less clusters being chosen.
These results are consistent with Information Foraging Theory.
The Information Diet Model  predicts that fewer clusters should be chosen with increases in profitability of clusters .
This would predict the above findings of fewer clusters chosen in Rich Repository conditions and fewer clusters with improved clustering.
Other predictions made by the Information Diet Model have been corroborated by empirical analyses of Scatter/Gather , so our confidence in the dynamic programming analysis is somewhat bolstered by its agreement with these other theoretical and empirical results.
Average number of clusters selected by an optimal user of the baseline system.
Table 5 shows the time spent scanning the Display Titles window by an ideal user on the baseline system.
Figures 7 and 8 and show the reduction in these scanning times expected for the two system improvements across the task conditions.
Under optimal use, a faster interaction system would require the least scanning time in sparse repositories or hard deadline conditions, whereas an improved clustering systems would require least scanning time in rich repositories or under soft deadline conditions.
Time spent scanning the Display Titles window by an optimal user in the baseline condition .
Again, these results are consistent with the predictions of Information Foraging Theory .
The Information Patch Model would treat the Display Titles window as an information patch.
That model predicts that the time spent in information patches should  decrease as one goes from Sparse to Rich Repository conditions,  decrease from baseline to improved clustering systems, and  decrease from baseline to faster interaction systems.
Again, other predictions of the Information Patch Model are corroborated by empirical analyses , and this provides another set of consistency checks on the dynamic programming model.
These improvements directly address the two most common problems reported by WWW users .
Dynamic programming analysis permitted the exploration of "what-if" scenarios testing these hypothetical design improvements against variations in task conditions involving repository quality and deadline conditions.
Finally, the dynamic programming analysis permitted the exploration of changes in ideal user strategies across system and task conditions.
The main aim of this paper was to describe and illustrate the dynamic programming technique applied to an information foraging technology.
The illustration showed how--even for this relatively simple space of designs and usage conditions--that complex and non-intuitive tradeoffs emerge from the analysis.
This sort of complexity faces virtually every interface designer.
Tools such dynamic programming are needed to explore and manage such design complexity.
Without doubt, the extension of this analysis to other browsers--for the World Wide Web, for instance--will not be simple.
The aim here was to illustrate the technique using a tractable example, as a beachhead for more complex analyses.
The analysis here assumed a very simple assessment of value: the number of relevant documents found while searching.
As discussed elsewhere , characterizing the value of information is usually more complex, since it typically varies  with tasks, individual needs, and time.
In addition, the unidimensional value assessment here is overly simplistic because real-world tasks often require the assessment of information along many dimensions.
The analysis here also assumed a very simple range of user strategies and actions.
This reflects the Scatter/Gather browser as used in our experimental tasks, but other tasks and browsers will undoubtedly have richer interaction spaces.
None of these extensions are problematic in principle, although they may require effort to achieve in practice.
For the researcher aiming at scientific understanding of the principles underlying human-computer interaction with information systems, the dynamic programming technique can be viewed as a method for generating strong and complex hypotheses about interactions of designs, task conditions, and user strategies.
It is unfortunate that the traditional study of information technology has been dominated since the Cranfield studies of the 1960's by the notion that two, and only two, factors are important to good design:  precision, which is the proportion of relevant items in a retrieved set of items, and  recall, which is the proportion of all items in the corpus that are retrieved .
Scatter/Gather browsing communicates the topic structure of a very large text collection.
Proceedings of the Conference on Human Factors in Computing Systems, CHI '96 Vancouver, BC.
Boston, MA: Butterworth & Co.
Dynamic programming and optimal control theory.
Constant interaction-time Scatter/Gather browsing of very large document collections.
Scatter/gather: A cluster-based approach to browsing large document collections.
Overview of the first text retrieval conference.
Evaluation of information retrieval systems: A review article.
Annual Review of Information Science and Technology.
Dynamic modeling in behavioral ecology.
Princeton, NJ: Princeton University Press.
Information foraging in information access environments.
If there are R relevant documents in a Scatter/Gather state, then those documents will be distributed somehow across the 10 clusters in the state.
Analyses  show that when clusters are ranked c = 1, 2, ... 10 in decreasing order by how many relevant documents they contain, then they are distributed in an exponentially decreasing fashion according to,  If a user collects the top ranked k clusters, then the collected proportion of relevant documents is just the sum of the proportion of relevant documents in those clusters:
This is plotted in Figure 4.
Pirolli and Card  present the analysis that shows that ranking clusters and considering collections of the k = 1, 2,...K best clusters is the optimal strategy for identifying the best collection.
All possible collections do not need to be explored.
For the improved clustering models we used  which is also presented in Figure 4.
A detailed computational cognitive model called ACT-IF  provides an explanation of the cognitive machinery underlying these assessments by users interacting with the Scatter/Gather interface.
