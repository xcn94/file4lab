Millions of learners today use how-to videos to master new skills in a variety of domains.
But browsing such videos is often tedious and inefficient because video player interfaces are not optimized for the unique step-by-step structure of such videos.
This research aims to improve the learning experience of existing how-to videos with step-by-step annotations.
We first performed a formative study to verify that annotations are actually useful to learners.
We created ToolScape, an interactive video player that displays step descriptions and intermediate result thumbnails in the video timeline.
Learners in our study performed better and gained more self-efficacy using ToolScape versus a traditional video player.
To add the needed step annotations to existing how-to videos at scale, we introduce a novel crowdsourcing workflow.
It extracts step-by-step structure from an existing video, including step times, descriptions, and before and after images.
We introduce the Find-Verify-Expand design pattern for temporal and visual annotation, which applies clustering, text processing, and visual analysis algorithms to merge crowd output.
The workflow does not rely on domain-specific customization, works on top of existing videos, and recruits untrained crowd workers.
We evaluated the workflow with Mechanical Turk, using 75 cooking, makeup, and Photoshop videos on YouTube.
Results show that our workflow can extract steps with a quality comparable to that of trained annotators across all three domains with 77% precision and 81% recall.
Our crowdsourcing workflow extracts step-by-step information from a how-to video with their descriptions and before/after images.
It features the Find-Verify-Expand design pattern, time-based clustering, and text/visual analysis techniques.
Extracted step information can be used to help learners navigate how-to videos with higher interactivity.
Copyrights for components of this work owned by others than the author must be honored.
Abstracting with credit is permitted.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Copyright is held by the owner/author.
Publication rights licensed to ACM.
These videos have a unique step-by-step structure, which encourages learners to sequentially process and perform steps in the procedure .
While most text- and imagebased tutorials  are naturally segmented into distinct steps, how-to video tutorials often contain a single continuous stream of demonstration.
Because comprehensive and accurate step-by-step information about the procedure is often missing, accessing specific parts within a video becomes frustrating for learners.
Prior research shows that higher interactivity with the instructional content aids learning , and that the completeness and detail of step-bystep instructions are integral to task performance .
To better understand the role of step-by-step information in how-to videos, we ran a formative study where learners performed graphical design tasks with how-to videos.
For this study, we designed ToolScape, an interactive how-to video player that adds step descriptions and intermediate result thumbnails to the video timeline.
Learners using ToolScape showed a higher gain in self-efficacy and rated the quality of their own work higher, as compared to those using an ordinary video player.
Moreover, external judges gave higher ratings to the designs produced by learners using ToolScape.
Providing such navigation support for how-to videos requires extracting step-by-step information from them.
One solution is to ask instructors to include this information at tutorial generation time, but this adds overhead for instructors and does not solve the problem for existing videos.
Another approach uses automatic methods such as computer vision.
Previous research  has shown success in limited domains with extensive domain-specific customization.
When working with "videos in the wild", however, vision-based algorithms often suffer from low-resolution frames and a lack of training data.
A scalable solution applicable beyond limited task domains and presentation formats is not yet available.
To address the issues of high cost or limited scalability with existing methods, we introduce a crowdsourcing workflow for annotating how-to videos, which includes the Find-VerifyExpand design pattern shown in Figure 1.
It collects stepby-step information from a how-to video in three stages:  find candidate steps with timestamps and text descriptions,  verify time and description for all steps, and  expand a verified step with before and after images.
The workflow does not rely on domain-specific knowledge, works on top of existing videos, and recruits untrained, non-expert crowd workers.
For quality control, the workflow uses time-based clustering, text processing, and visual analysis to merge results and deal with noisy and diverse output from crowd workers.
To validate the workflow with existing how-to videos, we asked crowd workers on Mechanical Turk to annotate 75 YouTube how-to videos spanning three domains: cooking, makeup, and graphics editing software.
Results show that the crowd workflow can extract steps with 77% precision and 81% recall relative to trained annotators.
Successfully extracted steps were on average 2.7 seconds away from ground truth steps, and external evaluators found 60% of before and after images to be accurately representing steps.
The contributions of this paper are as follows: * A how-to video player interface and experimental results showing that increased interactivity in a video player improves learners' task performance and self-efficacy.
Other multi-stage crowdsourcing workflows were designed for nutrition information retrieval from food photos , activity recognition from streaming videos , and search engine answer generation .
These applications demonstrated that crowdsourcing can yield results comparable to those of experts at lower cost.
Our work contributes to this line of research a novel domain, video annotation, by extending  and .
This work focuses on providing a scalable and generalizable video annotation solution without relying on trained annotators, experts, or video authors.
Video annotation tools capture moments of interest and add labels to them.
Many existing tools are designed for dedicated annotators or experts in limited context.
Domain-specific plug-ins  automatically capture task information, but require direct access to internal application context .
But plug-ins do not exist for most procedural tasks outside of software applications , which limits the applicability of this method.
Crowdsourcing video annotation has recently gained interest as a cost-effective method without relying on experts while keeping humans in the loop.
Existing systems were designed mostly to collect training data for object recognition , motion tracking , or behavior detection .
Rather than use crowdsourcing to support qualitative researchers, this work supports end users learning from videos.
Adrenaline  uses crowdsourcing to find the best frame from a video in near real-time.
While  and our work both aim to detect a timespecific event from a video stream, our work additionally labels the event and expands to capture surrounding context.
In designing user interfaces for instructional videos, higher interactivity with the content has been shown to aid learning .
Semantic indices and random access have been shown to be valuable in video navigation , and the lack of interactivity has been deemed a major problem with instructional videos .
This work introduces a user interface for giving learners more interactivity in video navigation, and a crowdsourcing method for acquiring metadata handles to create such an interface at scale.
Recent systems create interactive tutorials by either automatically generating them by demonstration , connecting to examples , or enhancing the tutorial format with annotated information .
Our crowdsourcing workflow can provide annotations required to create these interfaces and further enable new ways to learn from tutorials.
How-to videos often have a well-defined step-by-step structure .
A step refers to a low-level action in performing a procedural task.
Literature on procedural tasks suggests that step-by-step instructions encourage learners to sequentially process and perform steps in the workflow  and improve task performance .
Annotations can make such structure more explicit.
In this paper, we define annotation as the process of adding step-by-step information to a how-to video.
In determining which information to annotate, we note two properties of procedural tasks.
First, for many domains, task states are visually distinct in nature, so progress can be visually tracked by browsing through a video .
Examples include food in cooking videos, a model's face in makeup videos, and an image being edited in Photoshop videos.
Second, how-to videos contain a sequence of discrete steps that each advance the state of the task .
Our annotation method uses these two properties to accurately capture a sequence of steps, extracting timestamps, textual descriptions, and before and after images for each step.
We manually created a corpus of annotations for 75 how-to videos in three procedural task domains: cooking, applying makeup, and using Photoshop.
We used this corpus to create our interface in the formative study, and ground truth data for evaluating our crowdsourcing workflow.
We collected videos from YouTube's top search results for " " .
ToolScape augments a web-based video player with an interactive timeline.
Annotations are shown above the timeline , screenshots of intermediate states are shown below the timeline , and the gray regions at both ends  show "dead times" with no meaningful progress .
The 5-second buffer, determined from pilot testing, helps learners catch up with the context preceding the indicated moment.
Finally, ToolScape supports annotations of "dead times" at the beginning and end of videos , which often contain introductory or concluding remarks.
Pilot user observations showed that learners often skip to the main part of the tutorial.
In our manually annotated video corpus, on average, 13.7% of time at the beginning and 9.9% at the end were "dead times" with no task progress.
To assess the effects of step annotations, we ran a formative study on novice Photoshop learners watching how-to videos on image manipulation tasks.
We compared the experiences of learners using ToolScape and a baseline video player without the interactive timeline.
We hypothesized that interacting with step annotations provided by ToolScape improves both task performance and learner satisfaction.
Specifically: H1 Learners complete design tasks with a higher self-efficacy gain when watching how-to videos with ToolScape.
H2 Learners' self-rating of the quality of their work is higher when watching with ToolScape.
H3 Learners' designs when watching with ToolScape are rated higher by external judges.
H4 Learners show higher satisfaction with ToolScape.
H5 Learners perceive design tasks to be easier when watching with ToolScape.
In addition to external ratings , our measures of success include self-efficacy  and self-rating .
To display step annotations, we created a prototype video player named ToolScape.
ToolScape augments an ordinary web-based video player with a rich timeline containing links to each annotated step and its respective before and after thumbnail images .
ToolScape is a Javascript library that manages a timestamped list of steps and before/after images, which can connect to any embedded video player with a "play from this time point" Javascript API call.
In the timeline, the top and bottom streams represent annotated steps and thumbnail images from the video, respectively , .
Participants could freely browse and watch the 10 how-to videos we provided .
After each task, we asked questions on task difficulty, self-rating, and interface satisfaction.
We also asked the selfefficacy questions again to observe any difference, followed by a 15-minute open-ended interview.
Finally, we asked four external judges to evaluate the quality of all transformed images by ranking them, blind to user and condition.
They ranked the images from best to worst, based on how well each participant accomplished the given task.
Educational psychology research shows that self-efficacy, or confidence in application of skills, is an effective predictor of motivation and learning .
Positive self-rating has also been shown to accurately predict learning gains .
Finally, we chose not to count errors made in repeating tutorial steps as in , because our goal was to help users explore and learn new skills in open-ended design tasks.
Participants: We recruited twelve participants through university mailing lists and online community postings.
Most rated themselves as novice Photoshop users, but all had at least some experience with Photoshop.
They received $30 for up to two hours of participation, on either a Mac or PC.
Tasks and Procedures: Our study had 2 x 2 conditions: two tasks each using ToolScape and baseline video players.
We used a within-subject design with interface, task, and order counterbalanced.
Each participant performed two image manipulation tasks in Photoshop: applying retro effect and transforming a photo to look like a sketch.
In both interface conditions, we provided participants with the same set of how-to videos; the interface was the only difference.
In addition, we disallowed searching for other web tutorials to ensure that any effect found in the study comes from the interaction method, not the content.
After a tutorial task covering all features of the video player interface, we asked participants self-efficacy questions adapted from Dow et al.
The questions asked: On a scale of 1  to 7 , how confident are you with.
H1  is supported by our study.
For the four self-efficacy questions, we take the mean of the 7-point Likert scale ratings as the self-efficacy score.
The participants' mean initial score was 3.8; with the baseline video player, the score after the task was 3.9  whereas with ToolScape the score was 5.2 , which meant that learners felt more confident in their graphical design skills after completing tasks with ToolScape.
Participants rated their own work quality higher when using ToolScape  versus baseline .
The overall ranking was computed by taking the mean of the four judges' ranks.
The mean rankings  for output images in the ToolScape and Baseline conditions were 5.7 and 7.3, respectively.
Furthermore, nine of the twelve participants produced higher-rated images with ToolScape.
The ranking method yielded high inter-rater reliability  for ordinal data.
Mean ratings for ToolScape and Baseline were 6.1 and 4.5, respectively.
H5  is not supported: The mean ratings for ToolScape and Baseline were 4.0 and 3.7, respectively.
Combined with H2 and H3, this might indicate that participants did not find the tasks easier yet still produced better designs with greater confidence.
In conclusion, ToolScape had a significant effect on learners' belief in their graphical design skills and output quality.
They also produced better designs as rated by external judges.
Note that participants were watching the same video content in both conditions.
Thus, the video annotation browsing interface affected design outcomes.
Participants especially enjoyed being able to freely navigate between steps within a video by clicking on annotations.
Participants noted, "It was also easier to go back to parts I missed.
All participants frequently used the ability to click on timeline links to navigate directly to specific images and steps.
They clicked the interactive timeline links 8.9 times on average  in a single task.
We also analyzed the tracking log, which records an event when the user clicks on an interactive link or a pause button, or drags the playhead to another position.
The learners watched videos less linearly with ToolScape: The ToolScape condition recorded 150 such events, versus only 96 in the Baseline condition.
In ToolScape, 107 out of 150 events were interactive link clicks and 43 were pause button clicks or direct scrubbing on the player.
These findings indicate that interactive links largely replaced the need for pause or scrubbing, and encouraged the stepwise navigation of the procedure.
The study results suggest that annotated step information makes how-to videos much more effective for learners.
However, the bottleneck is in obtaining the annotations.
Here are some lessons from our experience annotating videos by hand: * Extracting step information from how-to videos involves detecting timing, generating a natural language description of a step, and capturing before and after states.
Before knowing what each step is, the annotator cannot extract before and after thumbnail images.
This experience supports a design choice to split the work into multiple stages so that in each stage, the annotator's attention is focused on a single, simple task.
Roughly three times the original video length was required by trained annotators to annotate each how-to video.
Sometimes there is an interval between when a step is spoken and demonstrated.
Also, if the goal is to find a starting time of a step, the annotator has to watch, verify, and scroll back to mark as a valid step.
These lessons informed the design of our crowdsourced howto video annotation method, which we now present.
Inspired by crowd design patterns that segment a bigger task into smaller micro-tasks , our workflow decomposes the annotation task into three stages and each video into shorter segments.
This design addresses the task complexity and multi-pass overhead problems of manual annotation.
We developed a generalizable crowd workflow pattern called Find-Verify-Expand  for detecting temporal and visual state changes in videos, such as steps in a how-to video, highlights from a sports game, or suspicious incidents from a surveillance video.
The unique Expand stage captures surrounding context and causal relationships  by expanding on the detected event .
To better handle crowd output coming from timing detection and image selection, we apply clustering algorithms and text and visual analysis techniques to intelligently merge results from workers.
Using lessons from our formative study, we designed a threestage crowdsourcing workflow for annotating how-to videos with procedural steps, timings, textual descriptions, and before and after thumbnail images.
This workflow works with any how-to video regardless of its domain, instructional style, and presentation.
It also collects annotations with untrained crowd workers .
This crowd task collects timestamps and text descriptions for possible steps from a video segment.
While watching the video, the worker adds a step by clicking on the "New Instruction" button every time the instructor demonstrates a step .
Each time the worker clicks on the button, the task prompts the worker to describe the step in free-form text .
The same segment is assigned to three workers, whose results get merged to create candidate steps.
Pre-processing: A video is segmented into one-minute chunks.
We learned from pilot runs that longer video segments lead to lower annotation accuracy toward the end and slower responses on Mechanical Turk.
We address this issue by including a five-second overlap between segments, and attaching the final segment to the prior one if it is shorter than 30 seconds.
Task Design: For quality control, the task first ensures that the user has audio by giving a test that asks the worker to type in a word spoken from an audio file.
Our pilot runs showed that labeling accuracy drops significantly when the worker does not listen to audio.
Secondly, we disable the Submit button until the video playhead reaches the end to ensure that the worker watches the entire segment.
Finally, when the worker clicks on the "New Instruction" button, the video pauses and a dialog box pops up to ask what the step was.
Our initial version simply added a tick on the timeline and continued playing without pausing or asking for a label.
But this resulted in workers clicking too many times  without thinking.
The prompt adds self-verification to the task, which encourages the worker to process the workflow by each step.
The prompt also includes an example label to show the format and level of detail they are expected to provide .
Post-Processing: The workflow intelligently merges results from multiple workers to generate step candidates.
To cluster nearby time points given by different workers into a single step, we use the DBSCAN clustering algorithm  with a timestamp difference as the distance metric.
The clustering idea is shown in Clusters 1 and 2 in Figure 8.
The algorithm takes as a parameter, which is defined by the maximum distance between two points that can be in a cluster relative to the distance between farthest points.
We train once initially on a small set of pilot worker data and ground truth labels.
Our tests show that the values between 0.05 and 0.1 yield high accuracy, regardless of domain or video.
We configured the algorithm to require at least two labels in every cluster, similar to majority voting among the three workers who watched the segment.
We considered other clustering algorithms such as K-Means, but many require the number of clusters as an input parameter.
In video annotation, the number of steps is neither known a priori nor consistent across videos.
We bias the algorithm to overgenerate candidate steps  and aim for high recall over high precision, because the first stage is the only time the workflow generates new clusters.
We improve the initial clusters in three ways, with the goal of higher recall than precision.
First, we take into account the textual labels to complement timing information.
The clustering initially relies on workers' time input, but using only time might result in incorrect clusters because steps are distributed unevenly time-wise.
Sometimes there are steps every few seconds, and other times there might be no step for a minute.
We run a string similarity algorithm between text labels in border points in clusters, to rearrange them to the closer cluster.
Second, we break down clusters that are too large by disallowing multiple labels from one worker to be in a cluster.
Finally, if there are multiple unclustered points within between clusters, we group them into a candidate cluster.
For each cluster, we take a mean timestamp as the representative time to advance to the Verify stage.
Here the worker's verification task is to watch a 20-second clip that includes a candidate step and textual descriptions generated from the prior stage, and vote on the best description for the step .
The workflow assigns three workers to each candidate step, whose votes are later merged.
Pre-processing: For each of the candidate steps from Stage 1, the workflow segments videos into 20-second clips around each step .
Task Design: To prevent workers from selecting the first result without reviewing all options, we randomize the order of options presented each time.
We also lowercase all labels to prevent capitalized descriptions from affecting the decision.
Also, the Submit button becomes clickable only after the worker finishes watching the 20-second clip.
In addition to candidate text descriptions, two additional options are presented to workers: "I have a better description",
The workflow assigns three workers to each step.
Pre-processing: This stage uses a 20-second video clip of a step verified in Stage 2, and uses its final text label to describe the step.
It creates thumbnails at two-second intervals to present as options, 10 seconds before and after the step.
Task Design: Our initial design asked workers to click when they see good before and after images, but this resulted in low accuracy due to variable response time and the lack of visual verification.
We then simplified the task to a multiple choice question.
Selecting from static thumbnail images makes the task easier than picking a video frame.
Post-Processing: Similar to the Verify stage, we apply majority voting to determine the final before and after images.
For merging and tie breaking, we use Manhattan distance, an image similarity metric that computes pixel differences between two images.
The workflow uses majority voting to make the final decision: If two or more workers agreed on a description, it becomes the final choice.
If workers are split between three different options, it checks if some of the selected text descriptions are similar enough to be combined.
We first remove stop words for more accurate comparisons, and then apply the Jaro-Winkler string matching algorithm .
If the similarity score is above a threshold we configured with initial data, we combine the two descriptions with a longer one.
If not, it simply picks the longest one from the three.
The decision to pick longer description for tie-breaking comes from a pilot observation that longer descriptions tend to be more concrete and actionable .
We deployed our annotation workflow on Mechanical Turk and evaluated on: * Generalizability: Does the workflow successfully generate labels for different types of how-to tasks in different domains with diverse video production styles?
How do textual descriptions generated by crowd workers compare to those generated by trained annotators?
This final stage collects the before and after images of a step, which visually summarize its effect.
This stage captures surrounding context and causal relationships by expanding on what is already identified in Find and Verify.
We used our workflow and Mechanical Turk to fully extract step information from the 75 how-to videos in our annotation corpus, with 25 videos each in cooking, makeup, and graphics editing software .
We did not filter out videos based on use of subtitles, transitions, or audio, to see if our annotation workflow is agnostic to presentation styles.
Out of 75 videos in our set, 7 did not have audio, and 27 contained text overlays.
Our evaluation focuses on comparing the quality of step information produced by our crowdsourcing workflow against ground truth annotations from our corpus.
The Turk crowd and trained annotators  generated similar numbers of steps .
In Stage 1, 361 one-minute video segments were assigned to Turkers, who generated 3.7 candidate steps per segment, or 53.6 per video.
Clustering reduced that to 16.7 steps per video.
Stage 2 further removed overgenerated steps, resulting in 15.7 per video, which is nearly equivalent to the ground truth of 15 steps per video.
Precision indicates how accurate extracted steps are compared to ground truth, while recall shows how comprehensively the workflow extracted ground truth steps .
We present precision and recall results considering only the timing of steps , and both the timing and the textual description accuracy .
For matching crowdextracted steps to ground truth steps, we use the Hungarian method  whose cost matrix is filled with a time distance between steps.
We apply the same threshold as what we configured in the workflow for tie breaking in the Verify stage.
The precision and recall both go down when the text similarity condition is added, but precision recovers from the post-processing of steps in this stage.
Two enhancements contribute to this recovery: removing steps that workers indicated as "no instruction" from the task, and merging nearby steps that have identical descriptions.
In 76% of the steps, two or more Turkers agreed on a single description.
For the rest, the tie breaking process determined the final description.
For 13% of the steps, Turkers provided their own description.
We consider only precision and recall of times in the Stage 1 evaluation because final textual descriptions are not yet determined.
Detecting the exact timing of a step is not straightforward, because most steps take place over a time period, verbal and physical steps are commonly given with a time gap.
To more accurately account for the timing issue, we set a highest threshold in time difference that accepts a Turkermarked point as correct.
We set the threshold to 10 seconds, which indicates that a step annotation more than 10 seconds off is discarded.
This threshold was based on heuristics from step intervals in our corpus: We hand-annotated, on average, one step every 17.3 seconds in our video corpus , so a maximum 10-second difference seems reasonable.
The mean distance between ground truth steps and extracted steps  was only 2.7 seconds.
This suggests that for matched steps, the timebased clustering successfully detected the timing information around this distance.
When considering only time accuracy, our workflow shows 0.76 precision and 0.84 recall .
This evaluation should judge if crowd-selected before and after images correctly capture the effect of a step.
Because this judgment is subjective, and there can be multiple correct before and after images for a step, we recruited six external human evaluators to visually verify the images.
We assigned two evaluators to each domain based on their expertise and familiarity with the domain, and gave a one-hour training session on how to verify before and after images.
For each workflow-generated step, we presented an extracted text description along with a before and after image pair.
Their task was to make binary decisions  on whether each image correctly represents the before or after state of the step.
We used Cohen's Kappa to measure inter-rater agreement.
Results show that on average, both raters marked 60% of before and after images as correct.
At least one rater marked 81.3% as correct.
Here we combine the accuracy of both timing and text descriptions.
Precision for this stage captures what fraction of steps identified by the workflow are both placed correctly on the time line and whose description reasonably matches the ground truth.
The analysis shows 0.77 precision and 0.81 recall over all the videos .
We created a total of 8,355 HITs on Mechanical Turk for annotating 75 videos.
The Expand stage was more costly  than the first two; thus, time points and text descriptions can be acquired at $2.50 per video.
The average task submission time was 183, 80, and 113 seconds for Find, Verify, and Expand, respectively.
In summary, our workflow successfully extracted step information from 75 existing videos on the web, generalizing to three distinct domains.
The extracted steps on average showed 77% precision and 81% recall against ground truth, and were 2.7 seconds away from ground truth.
Human evaluators found 60% of before and after images to be accurate.
We now discuss qualitative findings from the experiment, which might have practical implications for future researchers designing crowd workflows.
Detecting precise timing of a step.
We observed that Turkers add new steps with higher latency than trained annotators, resulting in Turker-labeled time points being slightly later than those by annotators for the same step.
The trained annotators often rewinded a few seconds to mark the exact timing of a step after seeing the step, whereas most Turkers completed their tasks in a single pass.
While this might be a limitation of the workflow, our results show that a reasonable window size mitigates such differences.
We will explore time-shifting techniques to see if timing accuracy improves.
Handling domain and video differences.
Extraction accuracy in our workflow was consistent across the three domains with different task properties.
This finding validates our domain-agnostic approach based on the general properties of procedural tasks.
Photoshop videos were often screencasts, whereas cooking and makeup videos were physical demonstrations.
Cooking videos contained higher number and density of steps than makeup or Photoshop videos, while Photoshop and makeup videos often had longer steps that required fine-grained adjustments and tweaking.
Also, some videos were studio-produced with multiple cameras and high-quality post-processing, while others were made at home with a webcam.
Our workflow performed robustly despite the various differences in task properties and video presentation styles.
Extracting steps at different conceptual levels.
Video instructors present steps at different conceptual levels, and this makes it difficult to keep consistent the level of detail in Turkers' step detection.
In a makeup video, an instructor said "Now apply the bronzer to your face evenly", and shortly after applied the bronzer to her forehead, cheekbones, and jawline.
While trained annotators captured this process as one step, our workflow produced four, including both the highlevel instruction and the three detailed steps.
Turkers generally captured steps at any level, but our current approach only constructs a linear list of steps, which sometimes led to redundancy.
Previous research suggests that many procedural tasks contain a hierarchical solution structure , and we plan to extend this work to hierarchical annotation.
For example, ingredient search for cooking or tool name search for Photoshop can show all videos and time points that cover a specific tutorial element.
Furthermore, video players can present alternative examples to a current step.
If a learner is watching how to apply the eyeliner, the interface can show just the snippets from other videos that include demonstrations of the eyeliner.
This allows the learner to hop between different use cases and context for the step of interest, which can potentially improve learning outcomes.
We believe the Find-Verify-Expand pattern can generalize to annotating broader types of metadata beyond steps from howto videos.
For example, from a soccer video this pattern can extract goal moments with Find and Verify, and then use Expand to include a crucial pass that led to the goal, or a ceremony afterward.
Generally, the pattern can extract metadata that is human-detectable but hard to completely automate.
It is a scalable method for extracting time-sensitive metadata and annotating streaming data, which can be applied to video, audio, and time-series data.
This paper presents a scalable crowdsourcing workflow for annotating how-to videos.
The Find-Verify-Expand pattern efficiently decomposes the complex annotation activity into micro-tasks.
Step information extracted from the workflow can enable new ways to watch and learn from how-to videos.
We also present ToolScape, an annotation-enabled video player supporting step-by-step interactivity, which is a potential client of this workflow.
Our lab study shows the value of accessing and interacting with step-by-step information for how-to videos.
Participants watching videos with ToolScape gained higher self-efficacy, rated their own work higher, and produced higher-rated designs.
Our future work will explore applying the workflow to additional procedural task domains such as origami, home DIY tasks, and Rubik's cube.
We will also explore procedural tasks that require a conceptual understanding of the underlying concept, such as solving algorithm or physics problems.
Another direction for research is collecting task information using learners as crowd.
We believe learners can potentially provide more advanced, higher-level, and richer information not possible with Turkers, if their learning interactions can naturally provide useful input to the system.
Combining crowdsourcing with "learnersourcing" can extract rich annotations from existing resources while enhancing learning.
