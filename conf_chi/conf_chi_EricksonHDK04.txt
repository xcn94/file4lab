This paper describes an approach to managing tasks and processes that are distributed across a large number of people.
The basic idea is to use a social visualization called a task proxy to create a shared awareness amongst the participants in a task or process.
The process awareness provided by the task proxy enables its users to monitor the task state, the states of participants, and to communicate with those in particular states.
We describe the concept, a first prototype, its evaluation, and discuss future directions.
In June of 2003, a worm appeared on our organization's internal network.
The IT department sent a broadcast email to the organization, detailing the measures to be taken , and stressing the need for prompt compliance.
Figure 1 provides a look at the management and monitoring of the task by one manager, as seen through her email in-box.
Callouts 1 and 2 indicate the original request from IT and the manager's subsequent broadcast message to her seven direct reports, in which she requested that they complete the task and acknowledge its completion via email.
Upon receiving the request, one of several things happened: some did the task and reported back promptly ; others did the task but forgot to reply; still others deferred the task; and one vacationing employee didn't get the message right away.
Over all, five days passed  before the final message  verifying task completion came in.
Although the task itself is simple, managing it required a disproportionate amount of time and effort by the manager .
First, responses  are scattered through the email queue, requiring extra effort by the manager to locate responses.
Second, responses are usually embedded in the email, and not readily apprehensible without having to open each message.
We are interested in supporting communication and coordination among members of distributed groups.
In this paper we describe the design of a widget intended to support the coordination of relatively simple tasks that are spread across large numbers of participants.
In this section we begin with a real example of the problem we intend to address, and discuss how it exemplifies a general class of problem.
In the remainder of the paper we discuss related work, introduce the concept of a task proxy, describe its embodiment in a working prototype, and its evaluation via a user study.
We conclude with a discussion of future work.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Finally, because this task is just one of many with which employees and managers must cope, the multiple instances of such tasks contribute to information overload and attention management problems.
In our organization this sort of complete-and-acknowledge task occurs frequently.
Other examples include certifying that employees have attended diversity training sessions; verifying that business guidelines have been read; completing inventories of equipment; submitting individual plans for self education; submitting end-of-the-year reports and acknowledging their review; and so on.
Note that in tasks of this sort the acknowledgement of completion is as important as actually completing the task.
The organization needs to be able to demonstrate that the task has been completed, and as a consequence needs to assure accountability on the part of its divisions, departments, groups and so on.
In addition to these sorts of tasks, which are characteristic of large organizations with highly developed bureaucracies, analogs of this type of task occur across or outside of organizations.
One apropos example is that of managing paper reviews carried out by a distributed set of reviewers.
As with the worm task, the review process is distributed across a number of people, and it is important that all  complete the task in a timely fashion.
In addition, knowing which tasks have been completed  is helpful in suggesting how to proceed: if all a paper's reviews are complete, it is an opportune time to read them and try to integrate their findings; if none of a paper's reviews are complete, it may be a good time for the review manager to panic.
In summary, the sorts of tasks with which we are concerned have three characteristics: they are distributed across more than a few people, it is desirable that most or all of the participants complete their bit of the task; and it is helpful for some  participants to be aware of the task's state.
In the last decade many researchers have turned their attention to the middle of the continuum.
From the structured end, researchers have explored ways of increasing the flexibility of workflow.
For example, the Freeflow system  enables users to step out of the workflow model, even as the system notes and tracks the "constraint violation" to ensure that it is not forgotten.
Similarly, investigators have explored ways to add limited amounts of structure to systems at the unstructured end: for example, the Taskmaster system  embeds resources for managing tasks directly in email clients.
Our approach, too, represents a foray into the middle part of the continuum.
However, rather than attempting to incorporate information about the structure of the task into the system, our approach is to provide participants with a shared awareness of each others' states vis a vis the task or process in which they are engaged.
In doing so, we draw from three other bodies of work, integrating elements of each into our approach.
First, there is a large class of systems that successfully support collaboration without using explicit task models.
These include configuration management systems, bug tracking systems, help desks, and review management systems such as that used for CHI.
By and large such systems do not use visualizations of the state of the task components .
Nor are they generally designed explicitly to support shared awareness, although that may be one of their benefits.
Grinter, for example, in describing the use of a configuration management system, notes that it provided an overview of who had checked out which code modules that enabled developers to "reorganize their work as ... their view changed" .
Second, there is a large body of work by the CSCW community on awareness interfaces and on the value of shared awareness.
For example, in an ethnographic study of a securities trading house, Heath et al.
Similarly, in empirical studies Gutwin et al.
Overall, as noted by Dourish and Bellotti, shared awareness "provides a context for individual activities and thus facilitates group progress" .
Third, our approach to providing participants in a task with shared awareness relies on visualization.
In this we build on work from the HCI, CSCW and Information Visualization communities, most particularly upon a body of designoriented work in social visualization.
Social visualization focuses on portraying characteristics of  large groups of people.
An interest in supporting distributed work has a long history.
While a thorough review is beyond the scope of this paper, we lay out the basic approaches to supporting distributed tasks and position our work relative to them.
To do so, we rely on the common notion that systems for supporting distributed work can be arrayed along a continuum of structure.
At one end we have applications such as email and instant messaging which, whilst allowing people to coordinate their work, `know' nothing about the work being done.
As our worm example illustrates, and as is more systematically demonstrated by others , the use of email to manage tasks has limitations and can result in email overload.
At the other end of the continuum are workflow systems such as The Coordinator , and those described by  and .
Would the proxy be a new application, a new aspect of an email or calendaring system, or a component that lives on a web page?
While the design sketch raised these and other questions, it did little to answer them.
It seemed clear that it would be valuable to proceed by building a working prototype and collecting feedback from its users.
The task proxy originated as a design sketch, accompanied by scenarios of how it could support various complete-andacknowledge tasks such as the worm and paper review management tasks.
The basic idea was that a small visualization could serve as a `proxy' for the task, providing an overview of each participant's status vis a vis the task.
The initial sketch envisioned the task proxy as a packed set of hexagons, each representing a person, with its color reflecting the task status .
Borders around groups of hexagons showed work groups and other levels of organizational structure .
Hexagons were a mostly arbitrary choice, although we did feel that the visualization's resemblance to a honeycomb was an apt way of portraying workers in an organization.
The task proxy as envisioned here enables two sorts of things.
First, it permits the overall status of a task to be visualized .
This affords two possibilities: most obviously, it enables a manager to exercise oversight over a task for which he or she is responsible; but also, if the proxy is visible to everyone, it opens the possibility for non-centralized social phenomena such as imitation  and peer pressure .
Second, the task proxy provides a contextualized means of communication that is tied to the task and its state: for example, the manager of a task might want to send email to only those who have not yet started it.
As we considered how the design could support various scenarios, it was apparent that privacy was an issue.
We developed the idea that task proxies would have visibility policies that would govern who could see what about whom.
Visibility policies could range from `transparent'  to `translucent'  to `opaque' .
Thus, if the task were to organize a potluck, with `status' indicating the type of dish each person was bringing, a transparent policy would be appropriate; if the task were more sensitive, a more opaque policy would be better.
The process of creating, reflecting on, and discussing the task proxy concept raised a number of issues, such as: Who would use it?
Is there a real need for it?
Is the basic concept understandable?
How would it be implemented?
How would task statuses be entered and updated?
Would users be able to understand the concept of visibility policies?
The Task Proxy Space supports a wide range of tasks and users.
It enables users to view task proxies in which they are participants, to manipulate their state information, and to create and manage new task proxies.
It also enables managers of a task to email participants in a particular state , and allows participants to set reminders.
The Task Proxy Space was developed as a web-based client that used Scalable Vector Graphics  SVG Viewer 3.0 to produce the visualization of the task proxy and its user interface.
It uses a recursive algorithm to lay out the hexagon visualization so that it can dynamically support changes in organizational structure.
The task proxy data is stored in a DB2TM database; JavaTM Server Pages and Java Servlets are used for database interactions.
We will begin by focusing on a single task proxy visualization, describing its static appearance, and then the interactivity built into it.
Then we describe the task proxy as a whole, and the creation of new task proxies.
Figure 2 shows a task proxy  for a single work group at four points in time.
Each hexagon represents an individual: the user's hexagon is marked with an asterisk, and hexagons representing managers have what users came to refer to as `hats' .
A hexagon's color represents its user's state with respect to the task: for the proxy shown, white means that no state has been entered, yellow  means "in progress," green  means "completed."
Thus, the progression in Figure 2 depicts the gradual completion of a group's task over time.
Figure 3 shows the entire Task Proxy Space; in this case the proxy shows an organizational division that contains four departments, each of which contains work groups .
Figure 3a shows the static view that permits users to see the general state of an organization wide task; it also shows the organizational hierarchy through subtle variations in background color .
When a user mouses over an element of the task proxy, it dynamically pops up borders, shadows, and  labels that show the location of the person or group in the organizational hierarchy, as shown in Figure 3b.
A task proxy  in its static state and  responding to mouse over events.
When a user mouses over his or her own hexagon, the user's name and task status is displayed in the lower margin.
Depending on the visibility policy in effect, users may or may not be able to see the names and statuses of coworkers in their group, department or division.
Clicking on a hexagon pops up a dialog that reveals more information about the user and task status , and allows users to change their own task statuses.
Each proxy also has a title bar and legend with task related information; clicking on a proxy's title bar pops up a window containing a full description of its task.
Finally, the Task Proxy Space menu bar allows users to create and manage task proxies.
Creating a new task proxy is a matter of filling in the name, description, deadlines, etc., for the task.
Users specify the number and names of states a hexagon can reflect, the set of people who will be represented in the task proxy , and the visibility policy that governs who can see what about whom.
As a consequence, a wide range of task proxies can be specified.
In the prototype, all of an individual's task proxies are consolidated on a single page.
The task proxy contained the appropriate portion of the organizational hierarchy , so users were able to log in as themselves and see their coworkers and managers located appropriately.
The aim of the first task  was to get users to explore the proxy.
We asked them to log on, find themselves in the proxy, find their group, find a different group, and update their task status.
For each step, the user to attempted the action on his or her own; if a minute or so passed without success, we provided a hint; if that failed, we guided the user through the step.
The aim of the second task was to allow the user to experience the same task proxy  from the perspective of a different user who--because of the visibility policy in effect--would see different information.
This would allow us to gauge the extent to which users understood visibility policies.
Thus, we asked the participant to log on as his or her second level manager .
Then users proceeded through a series of steps as before .
In the third task we asked the participant to create a new task proxy using a scenario involving soliciting quarterly highlights for a department status report.
The aim of this task was to get feedback about proxy creation in general, and the construction of visibility policies in particular.
As with the other tasks, this task was divided into steps.
Following the tasks, a questionnaire with a five point Likert scale was used to collect quantitative data, and a series of open-ended questions were used to get qualitative feedback.
All sessions were videotaped and had two experimenters present: one running the study, another taking notes.
Our goals were to obtain feedback on the user interface and interaction techniques, assess the extent to which users understood the basic concepts, solicit comments on the perceived value of the idea, and explore other issues such as privacy.
Thus the study was designed to elicit qualitative feedback via dialog between the experimenters and users, rather than to collect quantitative performance metrics.
We recruited 12 participants by posting a request for volunteers on our division's mailing list.
All had spent at least two years in the company and had expertise in computer science.
Three were  managers; participants were equally divided between genders.
After an initial explanation of the task proxy concept, participants were asked to perform three tasks, each consisting of a series of steps.
The tasks used in the study were familiar to these participants.
Table 1 summarizes the responses to the questionnaire.
Note that since the questionnaire was administered at the experiment's end it reflects participants' retrospective views rather than their on-going experience.
Overall, users' ratings of the task proxy were quite positive, as can be seen by the predominance of ratings on the left side of the scale .
While positive answers must be interpreted cautiously, given that participants are often predisposed to respond in line with their expectations about the experimenters' desires, we note that their questionnaire responses were mirrored by their performance.
We will consider the details of the ratings in the discussion.
Participants were encouraged to talk aloud throughout the experiment.
We paused after each task to talk, and occasionally prompted them in the midst of a task if they had been silent for a while or seemed confused.
Participants also talked as they filled out the questionnaire, and, of course, during the final period with open-ended questions.
Participants showed no hesitation in voicing confusions, criticisms and suggestions.
We will consider the qualitative responses in the discussion session.
Overall, the generally smooth performance on the tasks, the responses to the questionnaire, and the participants' comments all suggest that the basic concept of the task proxy was understandable, and that its use--in the large--was not difficult.
As seen in Table 1, majorities gave positive responses to the first three statements, with the least positive response  coming in response to the statement 2, which asked about the interaction with the task proxy.
We believe that this reflects various usability problems that users encountered while doing the tasks.
These included problems in knowing what to click , difficulties in relating the area of proxy being moused over to its label , a cumbersome syntax for specifying the mapping between task states and hexagon colors, and problems with labels and instructions.
These problems, now that they are known, have obvious fixes.
We discuss two more significant problems in the next sections.
More generally, it is clear from participants' comments that having a recognizable organizational hierarchy embodied in the task proxy was a clear aid in their coming to understand and use it.
That is, their ability to find themselves, identify co-workers, and see where various members of their management chain appeared in the visualization helped them to quickly make sense of it.
Because such familiarity would be present for most of those using a task proxy for real, we do not see this as an unrealistic advantage.
From their activities and comments, it was clear that the visualization design has a number of problems that stem from its complex and dynamic nature.
That is, the visualization aims to show the state and names of individuals, work groups, departments , and divisions .
Thus, as a user moves the pointer across the visualization, labels, lines and shadings that depict group and departmental boundaries highlight as appropriate, producing a complex and mutable display.
While users did understand the basics of the visualization, its dynamic nature made a number of tasks  more challenging than they might be.
We see two approaches to addressing these problems.
First, it is possible to build support for particular tasks into the visualization.
For example, when asked in one of the study tasks to count the number of people in a group who had finished it, several participants commented that the computer should just give them the numbers directly.
This is obviously a good point, and would be easy to support.
However, we think this approach is premature, because we don't yet really know how people will want to use the proxy.
Note that the only reason users needed to count was because we asked them to, and the reason for that was because it was a simple way to get them to interact with the proxy.
Thus, we intend to defer providing functionality tailored to particular interactions until we are able to observe a more naturalistic use of the Task Proxy Space.
A second approach to simplifying the visualization is, of course, to redesign the visualization itself.
One approach is to retain the basic concept, but to make it somewhat less dynamic, by designing the visualization so that the organizational structure is obvious without having to mouse over it .
This approach is suggested by the relatively positive ratings of the proxy's understandability, as well as the fact that many users, when asked to name positive aspects of the system, said they liked the compact nature of the visualization.
However, we also believe that it may be worthwhile to explore some different approaches to designing the visualization, perhaps along the line of Treemaps .
One other interesting issue arose from the user study.
Several study participants argued for an egocentric visualization.
That is, their position was that `I am most concerned with myself and my group,' and therefore my group and I ought to be in the most prominent location in  of the visualization.
While this is an understandable position, it stands in tension with another position: To serve as a resource for larger groups , it is desirable for everyone to have  the same view of the organization.
Thus, in redesigning the visualization, we aim to explore a number of techniques for ameliorating the tension between personal and collective use of the proxy .
The most troublesome area of the task proxy has to do with the notion of visibility policies.
This is reflected in the mixed responses to statement 7  which asked users whether they understood why they could see information about some groups but not others.
Given that this is a retrospective rating--that is, it was generated after they'd had time to figure things out--this clearly indicates a problem.
And, indeed, the response to statement 7 is mirrored by comments and confusion during and after the second task : users often didn't understand why they saw different information.
Some of this may be an artifact: the worm task was not generally viewed as one where privacy was an issue, and thus having a restrictive visibility policy  didn't make sense to some users.
But, on the other hand, when users were asked to construct their own proxy in task 3, they often expressed surprise at the proxy that they generated.
Since users also claimed to understand the need for visibility policies , and were adept at giving examples of situations in which one would want different policies, our working hypothesis is that we need to focus more on how to portray the effects of visibility policies .
To our surprise, users did not express much concern with privacy issues.
They understood the need for different visibility policies for different situations, noting, for example, that the issue of whether a person had completed their anti-worm task was not as sensitive as whether their year-end evaluation had been accepted.
Perhaps the lack of concern is due to the fact that the tasks themselves are familiar, and those that are sensitive have strong  privacy policies already associated with them, and it was assumed that these would remain in effect.
While participants noted the possibility of phenomena like peer pressure, they did not see it as a problem.
First, they noted that peer pressure could help them complete tasks they needed to finish.
Second, if they could see that few others had finished a task, this would provide a rationale for deferring the task until there was more pressure .
The large majority of study participants saw value in the task proxy concept.
Among the 35 responses to the last three statements in Table 1, 2 were negative, 5 were neutral, and 28 agreed that being able to see the status of a task distributed across the organization was valuable.
Users also commented that being aware of their peers' state was not only valuable as a form of `peer pressure,' but that it would also enable them to see which of their colleagues had completed the task, and thus whom they might go to for help or counsel .
All except one user saw the usefulness of differing visibility policies.
And all except two users  thought that the proxy would be useful for managing tasks.
The sole dissenter argued that the task proxy would not actually support managing tasks unless it provided some means of communication or control.
In fact, the proxy does allow email to be sent to everyone in a particular state , but the feature was turned off for the user study to prevent broadcasting multiple rounds of email to the entire division.
Other participants agreed on the importance of communication, many commenting that it would be useful to be able to email or instant message with those in the task proxy.
One reaction that surprised us was that participants very much liked being able to have a coherent and compact view of their organizational hierarchy.
They liked being able to easily browse their division, seeing who else, for example, was in the same group as someone they knew.
Other indications of value come from the suggestions for other uses of the task proxy.
These included: * Non-organizational task management: A number of users commented that the task proxy was useful for more than official, organizational tasks.
Some users liked the idea of having a single place to track the complete-andacknowledge tasks in which they were involved, versus having them scattered across email queues and web sites.
Rather than having a cluster of hexagons represent people involved in a distributed task, several users commented that hexagons could represent different elements of a task.
Some users suggested integrating task deadlines into the display so that  one could watch task proxies gradually drifting towards a tangible deadline.
While our results provide reason to be encouraged about the understandability and usefulness of the task proxy concept, there is more to do.
Our user study suggests that more work should be done on refining the visualization and on making visibility policies easier to construct and understand.
We also need to explore ways of managing the trade off between tailoring a task proxy to the needs of its particular user, and making sure that it is useful as a shared resource for the group.
Advances on these fronts seem likely to provide value for developing other sorts of task proxies .
In addition, the work we've described in this paper has a number of limitations that we hope to address in the future.
First, because this was the first working prototype, we opted not to deploy it to our division of a 140+ people; instead, we choose to do lab-based user testing.
As a consequence, there were a number of issues that we did not get direct feedback on.
Chief among these was the question of whether the task proxy's visualization would be successful in supporting group-based phenomena such as imitation and peer pressure.
Although our users assumed such phenomena would occur when talking during the study, direct evidence that bears on this will only come through an actual deployment of the system.
Second, the working prototype, as it stands, is not well integrated with users' digital worlds.
While this seems a natural consequence of iterative development--the basic functionality of the prototype is implemented and tested, and only after that seems sound does one pursue integration with other systems--nevertheless it results in a number of problems that will need to be addressed as we move forward.
Perhaps the most obvious is that task proxies rely on their users to manually update their states.
While this is acceptable for the complete-and-acknowledge tasks we initially focused on--these are organizationally mandated tasks, and neither their performance nor their separate acknowledgement is optional--it is well known that systems that rely on users to update state are prone to failure.
Fortunately, developing proxies that automatically update their states in response to events sent by other programs seems possible.
Another integration problem has to do with how task proxies are organized and viewed by their users.
In the prototype, all of a user's task proxies were displayed in a single, web-based task proxy space.
Given that people vary widely in how the organize their work, it would be valuable if task proxies could be displayed in different places in users' systems--for example, associated with a calendar, and/or an email client, and/or on the desktop, and/or a PDA.
Finally, the potential value of task proxies needs further exploration.
Task proxies represent a middle ground in various genres of task management, from locally initiated `grassroots' tasks, to formal, enterprise-wide workflows.
One interesting challenge would be to extend task proxies to more complex and abstract tasks, such as executing corporate-wide business strategies.
How might a proxy representation help organizations self-organize to meet strategic objectives?
How might progress towards such objectives be tracked through the constant reality of organizational change?
And to what extent might task proxies mitigate the needs for top-down organization and control?
Supporting such tasks remains for future work.
Grinter, R. E.  Workflow Systems: Occasions for Success and Failure.
A Usability Study of Awareness Widgets in a Shared Workspace Groupware System.
Heath, C., Jirotka, M., Luff, P., and Hindmarsh, J. Unpacking Collaboration: the Interactional Organisation of Trading in a City Dealing Room.
C o m p u t e r Supported Cooperative Work, Vol.
Hughes, J.A., Randall, D. and Shapiro, D. Faltering from ethnography to design.
Johnson, B., and Shneiderman, B. Treemaps: A spacefilling approach to the visualization of hierarchical information structures.
MacKay, W. E. More than just a communication system: Diversity in the use of electronic mail.
Medina-Mora, R., Winograd, T., Flores, R., Flores, F. The action workflow approach to workflow management technology.
W. Discourse Diagrams: Interface Design for Very Large Scale Conversations" in the Proc.
Hawaii International Conference on System Sciences , IEEE Computer Society, .
Suchman, L. Do categories have politics?
Whittaker, S. and Sidner, C. Email overload: Exploring personal information management of email.
Winograd, T. Cateogries, disciplines, and social coordination.
Thanks to Christine Halverson for assistance in designing and setting up the user study, to Jason Ellis, Jeremy Sussman, and Tracee Wolf for advice on the design and implementation, to Paul Matchen for assistance with SVG, and to the participants in our user study.
Thanks as well to Judy Olson and several anonymous reviewers for helpful comments on the paper.
Bellotti, B., Ducheneaut, N. Howard, M. and Smith, I.
Taking Email to Task: The Design and Evaluation of a Task Management Centered Email Tool.
Bowers, J., Button, G. and Sharrock, W. Workflow from Within and Without.
Visual Who: Animating the Affinities and Activities of an Electronic Community.
Dourish, P. and Bellotti, V. Awarenss and Coordination in Shared Workspaces.
