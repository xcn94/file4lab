Abstract: Convivial systems encourage users to be actively engaged in generating creative extensions to the artifacts given to them.
Convivial systems have the potential to break down the counterproductive barrier between programming and using programs.
Knowledge-based design environments are prototypes for convivial systems.
These environments support human problem-domain communication, letting users to work within their domains of expenise.
One of the design rationales behind design environments is to ease the construction and modification of artifacts designed within the environment.
But because design environments are intentionally not general purpose programming environments, situations will arise that require modifications to the design environment itself.
The rationale and the techniques for these later modifications are discussed in this paper.
Our conceptual framework for end-user modifiability is illustrated in the context of JANUS, an environment for architectural design.
Evaluating our system building efforts against our objectives shows the subtleties of integrating end-user modifiability in these kinds of systems.
Acknowledgements: The authors would like to thank Anders Morch and Raymond McCall, who w~re major contributors in the development of the JANUS system.
Thomas Mastaglio, David Redmiles, Brent Reeves, and Curt Stevens provided valuable comments on earlier drafts of this paper.
The research was partially supported by grant No.
IRI-8722792 from the National Science Foundation, grant No.
MDA903-86-C0143 from the Army Research Institute, and grants from the Intelligent Systems Group at NYNEX and from Software Research Associates , Tokyo.
Convivial systems encourage users to be actively engaged in generating creative extensions to the artifacts given to them.
Convivial systems have the potential to break down the counterproductive barrier between programming and using programs.
Knowledge-based design environments are prototypes for convivial systems.
These environments support human problem-domain communication, letting users work within their domains of expertise.
One of the design rationales behind design environments is to ease the construction and modification of artifacts designed within the environment.
But because design environments are intentionally not general purpose programming environments, situations will arise that require modifications to the design environment itself.
The rationale and the techniques for these later modifications are discussed in this paper.
Our conceptual framework for end-user modifiability is illustrated in the context of JANUS, an environment for archilectural design.
Evaluating our system building efforts against our objectives shows the subtleties of integrating end-user modifiability in these kinds of systems.
Unfortunately, the potential for conviviality exists only in principle for most current computer systems.
Many users perceive computer systems as unfriendly, un-cooperative and too time consuming.
They find that they are dependent on human specialists for help, they notice that software is not soft , and they spend more time fighting the computer than solving their problems.
Knowledge-based design environments contribute to the goal of convivial computing.
They resolve the conflict between the generality, power and rich functionality of modem computer systems and the limited time and effort that domain specialists are willing to spend in solving their problems.
In this paper we first develop a conceptual framework for end-user modifiability.
We illustrate this framework in the context of JANUS, a knowledge-based design environment for architectural design that allows end-user modifiability.
These system building efforts are compared to the conceptual framework, providing ideas for extensions and future research in the conceptual as well as the system building area.
Convivial tools and systems  allow users "to invest the world with their meaning, to enrich the environment with the fruits of their vision and to use them for the accomplishment of a purpose they have chosen."
Conviviality is a dimension which sets computers apart from other communication and information technologies  that are passive and cannot conform to the users' own tastes and tasks.
Passive technologies offer some selective power, but they cannot be extended in ways which the designer of those systems did not directly foresee.
They are too far removed from the conceptual structure of the problem, and it takes too long to get a task or a problem solved.
Coming from the other end, good turn-key systems contain features that make them modifiable by users without having to change internal structures.
Editors allow users to defme their own keys , and modem user interfaces allow users to create and manipulate windows, menus, icons etc.
In our work we have tried to replace hwnan computer communication with hwnan problem domain communication .
The latter approach makes the computer an invisible instrument allowing knowledgeable, task-oriented scientists and designers to work with the abstractions and concepts of their domains.
Figure 1 shows the layered architecture underlying the JANUS system discussed in this paper.
End-user modifiability in the context of a layered architecture means that users can change the behavior of the system in the layers near the top where changes remain in the context of the problem space.
If a change extends beyond the functionality provided by one layer, users are not immediately thrown back to the system space but can descend one layer at a time.
A Taxonomy of End-User Modifiability.
End-user modifiability is of crucial importance in knowledge-based design environments, because these systems do not try to serve as general purpose programming environments but provide support for specific tasks.
In cases where designers of these environments have not anticipated specific activities, users must be able to modify the design environment itself.
The changes supported by a modifiable system include the following :
Why is End-User Modifiability Important?
Pre-designed systems are too encapsulated for problems whose nature and specifications change and evolve.
A useful system must accommodate changing needs.
Domain experts must have some control over the system because they understand the semantics of the problem domain best.
The trade-off between low-functionality and high-functionality systems with respect to end-user modifiability is: it is easier to locate existing objects in low-functionality systems, but the potential for fmding an existing object, which is close to what one needs, is higher in high-functionality systems.
The figure also illustrates that the extend of the required modification depends on the desired new object: object "I" is closer than object "2" to the existing functionality.
End-user modifiability is not a luxury, but a necessity in cases where the systems do not fit a particular task, a particular style of working or a personal sense of aesthetics.
End-user modifiability is equally important for knowledgebased systems which by their nature are never completely specified, and undergo continuous change and growth.
The evaluation of the MYCIN system  showed that one of the major reasons that MYCIN was never used in a real setting was that the system's knowledge base was outdated by the time the system was fmished.
This lack of modifiability prohibited an evolution of the underlying knowledge base.
Before machine learning can make major contributions to the knowledge acquisition problem, end-user modifiability is a promising approach to increase the amount of shared knowledge between a system and a user.
There are high costs associated with a failure to support end-user modifiability.
Users are not in control of the interaction designed to achieve their goals.
They have to put up with an unsatisfactory state of affairs, or they may not use a system at all, if it does not fit their needs.
The limited success of modification as a major programming methodology is in our opinion directly related to the lack of support tools for exploiting the power of high-functionality systems.
Having a large set of existing building blocks without good retrieval tools is a mixed blessing.
The advantage of reuse and redesign is that existing buildings blocks - which have been used and tested before - already fits the users' needs or comes close to doing so.
The problem is that it may take a long time to discover these suitable building blocks or to find out that none exists.
Locating promising parts of the system is just the first step in the modification process.
In the next, step users have to comprehend an existing object in order to carry out the modifications.
External modifications that do not require an understanding of the internal workings of an existing object are preferable to internal modifications.
In addition, a system constructed using a layered architecture  is very helpful.
In such an architecture, users can remain in the higher layers during the comprehension process.
The last step in the modification process is to carry out the modifications.
To do so, users should have a clear understanding of the implications of the change with respect to the problem domain.
The system should support the mechanics of the change .
Such systems can increase our productivity and efficiency by providing many built-in facilities that users would otherwise have to construct.
They have the potential to support a "copy&edit" strategy  for making modifications from a rich, initial foundation.
Instead of starting from scratch, new functionality can be achieved by modifying an existing part of the system.
Figure 2 illustrates the difference of supporting end-user modifiability in a low-
This screen image shows the different components of JANUS-CRACK: the Palette contains the building blocks; the Work Area is used for the design and modification of a kitchen; the Catalog offers existing kitchen designs which can be used for redesign; the menu bar contains often used commands; the Commands pane is used issuing less frequently used commands; the Messages pane shows the critique generated by the critics and the Design State pane enumerates the objects in the current design.
The JANUS System JANUS  is a design environment that allows designers to construct architectural floor plan layouts of kitchens and at the same time to learn about the general principles underlying such constructions.
JANUS does not try to automate the design process by replacing the human designer with an expert system, but rather it cooperates with the designer to enrich traditional design practices, amplifying the power of human designers rather than "deskilling" them.
JANUS-CRACK  is a knowledge-based system supporting the construction of designs.
JANUS-VIEWPOINTS is an issue-based hypertext system containing useful information about general principles of design.
Empirical evidence  demonstrates that construction kits are necessary but not sufficient conditions for useful design environments.
Design environments need embedded knowledge for distinguishing "good" designs from "bad" designs and explanations for justifying these distinctions.
Kitchen design is more than selecting appliances from a palette; it also involves knowing how to combine these simple building blocks into functional kitchens.
Knowledge about kitchen design includes design principles based on building codes, safety standards, and functional preferences.
This knowledge, combined with critics which can use it, extend construction kits to design environments.
Situations will arise in which users want to design a kitchen with appliances that are not provided by the design environment.
For example, the palette in JANUS  does not contain a microwave.
The command "New Class" activates a system component supporting the addition of new elements to the palette.
Property sheets help users defme new design unit classes or modify existing ones by eliminating the need to remember names of attributes.
The modification process is supported with context-sensitive help .
If values are required, users cannot leave the sheet without providing these values.
End-User Modifiability in JANUS The possibilities for modification in earlier versions of J ANUS were restricted to making modifications easy for artifacts constructed within the design environment.
Experimental use of JANUS by professional and amateur kitchen designers indicated that situations arise that require the modification of the design environment itself.
We have extended the JANUS systems with knowledgebased components to support the following types of modifications: 1. introducing new classes of objects into the palette , 2. adding new critic rules to the system , 3. allowing the definition of new relationships , and 4. supporting the creation of composite objects .
These different types of modifications will be described below in more detail.
The knowledge-based components supporting these modifications provide a uniform interface for all modifications in the form of property sheets.
Although a new class can be defined from scratch, it is much easier to fmd an existing class that comes closest to the new one and to copy and edit it .
This changes the modification task from "telling the system about x" to "finding an already known x' that's similar to x".
Even if a new class is defmed from scratch.
The system supports the finding of an appropriate class by displaying the class hierarchy.
Under the assumption that each class in the hierarchy has a name meaningful in the problem space, the classification of the new class is reduced to a selection problem among meaningful names.
Depending on the type of the modification, it is sometimes belter to introduce a new common superclass  rather than making the new class a subclass of an existing one.
For example, a microwave and a stove could have the common superclass cooking unit.
The rules and attributes of stove that also apply to microwave can then be moved to cooking unit .
The support of the system for this modification can be further improved by describing the purpose of every class with respect to the problem space.
After the user presses the HELP key in the field .. Super Classes," a window with the class hierarchy is displayed .
Every class in the hierarchy is mouse-sensitive.
A window with the list of rules that are applicable to a class is displayed by a mouse click on that class .
The rule names are also mouse-sensitive, and a mouse click opens a window with the defmition of a rule .
It may not be possible to do this automatically but the system could at least assist the user.
For example, if an existing class and a new class both have the description "cooks food" , the system could offer three options: make the new class a subclass of the old one, do it vice versa, or generate a common superclass that contains the common feature.
After a new class is located within the hierarchy, the differences between it and its superclass need to be defined.
This is done by defining new attributes and redefming inherited ones.
The system supports users in this task by providing a list of all inherited attributes and by giving help for the definition of new ones .
On the other hand, users probably do not want to have different rules for the statements "a refrigerator should be near a sink" and "a sink should be near to a refrigerator."
If there is more than one sink or more than one refrigerator, a mechanism is necessary for specifying whether these statements should apply for all possible combinations or only for one sink-refrigerator pair.
Relations usually describe spatial relationships between design units .
They are used in rule conditions.
In J ANUS, most relations are defined in terms of distance between design units.
As shown in Figure 8, the between relation can be defined in terms of other relations.
A deeper knowledge about the relations in the system helps detect conflicts between rules.
For example, it is not possible for design units to accommodate the relations near and away-from at the same time.
It is desirable for a user to be able to describe spatial relationships by showing an example to the system.
Unfortunately, one can usually extract more than one relationship from an example.
An attribute is described by a name and "keyword-value" pairs.
When specifying a new attribute, pressing the HELP key shows all inherited attribute descriptions.
Users can redefme inherited attributes, e.g., by specifying a new prompt or a new default value.
TIle attributes inherited from the class design-unit deal with size and position of a design unit.
Other classes defme problem-<lomain specific attributes .
In the current version of the system, any LISP expression can be used to define the condition part of a relation making it hard to assist users in the definition of relations.
At least three layers are required: 1. existing relations and logical operators , 2. distance functions between design units, accessing functions for the position and size of design units, arithmetic and comparison functions , and 3. more useful Lisp functions .
New relations should be defined within the top layer whenever possible.
The infonnal evaluations indicated that the additional power and flexibility does not come for free.
Learning is required at different levels: users have to operate on different descriptive levels and they must familiarize themselves with the interaction mechanisms that are necessary for the modifications.
Adding system components to allow for end-user modifiability in a system constructed without this goal in mind is a nearly impossible task.
It should include an illustration of the consequences of different approaches.
Modifications need to be classified whether they are local to one user's environment or global to a whole user community t and whether they are temporary or permanent * End-user modifiable systems have the potential drawback that they result in multiple versions of the same systems violating standardization and portability goals.
In JANUS, these intermediate abstractions are called "work centers."
For example, a sink and a dishwasher could be combined into a cleanup center.
Designers start designing a kitchen with work centers and replace them later with their components .
The components supporting end-user modifiability in allow the creation of composite objects to be performed on different levels .
On a lower level, JANUS supports user-defmable grouping of graphical presentations of design units so that they can be moved and rotated together.
On a higher level, J ANUS provides a palette of work centers; the command "Switch Context" switches between the palette of work centers and the palette of appliances.
Each work center has its own critic rules.
Composite objects introduce an additionallayer of abstraction for a design environment.
Modifying icons or creating new ones requires changing method definitions.
That forces users to descend into the lower layers of our architecture .
Another solution must be found.
The current system also makes it impossible to define an on-top-oJ relation at a higher layer in the architecture, because the system represents only a two dimensional space.
A on-top-of relation is needed if users want to have a rule that enforces that one design unit is always on top of another .
An alternative solution for this problem might be the introduction of a new class that models the two units together.
The system should have knowledge structures that assist users in exploring these alternatives.
Modifiable systems generate new problems as consequences of these modifications.
In earlier versions of JANUS, the layout of the palette could be determined at the time the design environment was created.
The current layout of the palette puts classes that have the same superclass in the same row.
Designers might want to have different layouts, e.g., positioning the design units most important to their work at the top of the palette.
By allowing users to dynamically add new objects to the palette, the layout of the palette will change as well.
This requires either that users determine the new structure  or that the system has enough knowledge Lo compute it.
Hypertext systems  have to be treated differently, because information structures can be interpreted by other humans and need not be understood by the system.
The goal of making systems modifiable by users does not tnmsfer responsibility for good system design to users.
A vcrage users will never build systems of the quality a professional designer would; but this is not the goal of convivial systems.
Only if a system does not satisfy the needs and the taste of its users  should they be able to carry out a constrained design process to modify it The strongest test of a system with respect to user modifiability and user control is not how well its features conform to anticipated needs, but how easy it is to modify it in order to perform a task the designer did not foresee.
Composite objects allow designers to design at different levels of abstractions.
After having completed the design of the kitchen at the work center level, users can proceed to the detailed design of the centers.
The figure shows how the cleallup ullter is expanded to iu cornpooents sink and dishwasMr.
On the Epistemological Status of Semantic Networks.
Rule-Based Expert Systems: The MYCIN Experiments of the Stanford Heuristic Programming Project.
Addison-Wesley Publishing Company, Reading, MA, 1984.
Construction Kits and Design Environments: Steps Toward Human ProblemDomain Communication.
Constrained Design Processes: S~ Towards Convivial Computing.
Human Factors in Computing Systems, CHI 85 Conference Proceedings , ACM, New York, April, 1985, pp.
Design Environments for Constructive and Argumentanve Design.
Human Factors in Computing Systems.
JANUS: Integrating Hypertext with a Knowledge-Based Design Environment.
CYC: Using Common Sense Knowledge to Overcome Brittleness and Knowledge Acquisition Bottlenecks.
Can the Principles of Cognition Lower the Barriers of Programming?
PHIBIS: Procedurally Hierarchical IssueBased Information Systems.
Proceedings of the Conference on Architecture at the International Congress on Planning and Design Theory, American Society of Mechanical Engineers, New York, 1987.
New Perspectives on Human-Computer Interaction, Lawrence Erlbaum Associates, Hillsdale, NJ, 1986, Chap.
Object-Oriented Programming: Themes and Variations.
Ada.J>tability and Tailorability in NoteCards.
2nd IFIP Conference on Human-Computer Interaction , North-Holland, Amsterdam, September, 1987, pp.
Document Examiner: Delivery Interface for Hypertext Documents.
Hypertext' 87 Papers, University of North Carolina, Chapel Hill, NC, November, 1987, pp.
