On the technology side, advances in interactive computer graphics hardware, coupled with low-cost mass storage, have created new possibilities for information retrieval systems in which UIs could play a more central role.
On the application side, increasing massesof information confronting a business or an individual have created a demand for information management applications.
In the 1980s, text-editing forced the shaping of the desktop metaphor and the now standard GUI paradigm.
In the 1990s, it is likely that information accesswill be a primary force in shaping the successorto the desktop metaphor.
This article presents an experimental system, the Information Visual/mr , which explores a UI paradigm that goes beyond the desktop metaphor to exploit the emerging generation of graphical personal computersand to support the emerging application demand to retrieve, store, manipulate, and understand large amounts of information.
The basic problem is how to utilize advancing graphics cecnnologyto lower the cost of finding Information and accessing it once found .
Visualizer Overview We take four broad strategies: making the usel:'S immediate workspace larger, enabfing user interaction with multiple agents, increasing the realtime interaction rate between user and system, and using visual abstraction to shift information to the perceptual system to speed information assimilation and retrieval.
Technology Advances Since the early d e v e l o p m e n t of the standard GUI, hardware technology has continued to advance rapidly.
Processor and m e m o r y technology have far greater p e r f o r m a n c e at far lower cost.
At the same time, software s u p p o r t for real-time operating systems and e m e r g i n g industry stand a r d open graphics libraries  are simplifying the 3D p r o g r a m m i n g task.
T h e trend will bring these technologies to the mass m a r k e t in the near future.
These technology advances have created many possibilities for user interface innovation.
Yet the basic Windows-Icons-Menus-Pointing  desktop m e t a p h o r has not changed much since its emergence in the Alto/Smalltalk work.
Nonetheless, there is a great desire to explore new UI paradigms.
Experiments with pen-based notebook metaphors, virtual reality, and ubiquitous computing are proceeding and may eventually influence the mass market.
It is this kind o f technology change that is driving o u r research in the Information Visualizer.
I n f o r m a t i o n Access vs. D o c u m e n t Retrieval C o m p u t e r - a i d e d access to information is often thought o f in the context o f methods for library automation.
In particular, d o c u m e n t retrieval  is usually defined m o r e or less as follows: T h e r e exists a set o f documents and a person who has an interest in the information in some o f them.
Those documents that contain information o f interest are relevant, others not.
T h e problem is to find all and only the relevant documents.
T h e r e are two standard figures of merit for c o m p a r i n g and evaluating retrieval systems: Recall is the percentage o f all the relevant documents found; and precision is the percentage o f the documents f o u n d that are rel-
While this formulation has been useful for comparing different approaches, we propose extending the document retrieval formulation to take the larger context into account.
From a user's point of view, d o c u m e n t retrieval and other forms of information retrieval are almost always part of some larger process of information use .
Examples are sensemaking , design , decision making , and response tasks .
In each of these cases: 1.
Information is used to produce more information, or to act directly 2.
T h e new information is usually at a higher level of organization relative to some purpose I f we represent the usual view of information retrieval as Figure 2, we can represent this extended view as Figure 2.
Framing the problem in this way is suggestive: what the user needs is not so much information retrieval itself, but rather the amplification of information-based work processes.
T h a t is, in addition to concern with recall and precision, we also need to be concerned with reducing the time cost of information access and increasing the scale of information that a user can handle at one time.
I n f o r m a t i o n Workspaces From our observations about the problem of information access , we were led to develop UI paradigms oriented toward managing the cost structure of information-based work.
This, in turn, led us to be concerned not just with the retrieval of information from a distant source, but also with the accessing of that information once it is retrieved and in use.
T h e need for a low-cost, immediate storage for accessing objects in use is common to most kinds of work.
T h e common solution is a workspace, whether it be a woodworking shop, a laboratory, or an office.
A workspace is a special e n v i r o n m e n t in which the cost structure of the needed materi-
C o m p u t e r screens provide a workspace for tasks done with the computer.
However, typical computer displays provide limited working space.
For real work, one often wants to use a much larger space, such as a dining room table.
T h e Rooms system  was developed to extend the WIMP desktop to multiple workspaces that users could switch among, allowing more information to reside in the immediate work area.
T h e added cost of switching and finding the right workspace was reduced by adding the ability to share the same information objects in different workspaces.
Rooms also had an overview and other navigational aids as well as the ability to store a n d retrieve workspaces, all to remove the major disadvantages of multiple desktops.
T h e essence of our proposal is to evolve the Rooms multiple desktop metaphor into a workspace for information access--an Information Workspace .
T h a t is, instead of concentrating narrowly on the control of a search engine, the goal is to improve the cost structure of information access for user work.
With this system, we use four methods for improving the cost structure of information access:
Make the Immediate Workspace virtually larger, so that the information can be held in low-cost storage 2.
Delegate part of the workload to semiautonomous agents 3.
Maximize interaction rates with the h u m a n user by t u n i n g the displays and responses to real-time h u m a n action constants 4.
These define the goals for our UI paradigm.
Each o f these is intended to decrease the costs for p e r f o r m i n g information-intensive tasks, or, alternatively, to increase the scope o f information that can be utilized for the same cost.
Figure 3 shows how these goals are applied to the r e f o r m u l a t e d information access p r o b l e m shown in Figure 2.
We use two methods to make the workspace larger: We a d d more  screen space to the I m m e d i a t e Workspace by using a version o f the Rooms system.
We increase the density of information that can be held in the same screen space by using animation a n d 3D perspective.
To delegate part o f the workload, we use agents to conduct searches, to organize information into clusters, or design presentations o f information.
We manage this by means o f a scheduling architecture, called the Cognitive Coprocessor , that allows multiple display and application processes to r u n together.
A kind o f user interface agent, called Interactive Objects, is used to control and communicate with the system.
To maximize h u m a n interaction rates, we use the properties o f the scheduler to provide highly interactive animation and communication with the Interactive Objects.
To tune the system to h u m a n action times, we require certain classes o f actions to occur at set rates.
To enforce these rates u n d e r varying computational load, we use a G o v e r n o r mechanism in o u r scheduler loop.
To speed the user's ability to assimilate information a n d find patterns in it, we use visualization o f different abstract information structures, including linear structures, hierarchical struc-
There have been many systems that have supported interactive animation-oriented UIs, starting with Ivan Sutherland's thesis  at the dawn of computer graphics.
As with Sutherland's thesis, early examples required specialized and/or expensive computing machinery and were oriented toward specialized tasks.
Cockpit simulation systems are a good example.
T h e architectures for such systems share the animationloop core with our system.
The drop in cost for 3D animated systems and the increase in capability has accelerated experiments in using this technology as the basis of a new mass market user interface paradigm.
One strategy has been to work up from building blocks.
Van Dam's group at Brown has been working on an object-oriented framework for interactive animation, 3D widgets , and modeling time in 3D interactive animation systems.
Silicon Graphics has recently introduced a high-level 3D toolkit, called Inventor.
Another tack has been to drive the development by focusing on applications, for example, continuously running physical simulations.
Their architectural approach is similar to ours, but focuses more on continuously running simulations.
D. Zeltzer and colleagues at M I T  have built a constraint-based system for interactive physical simulation.
Our system, by contrast, is oriented toward the access and visualization of abstract nonphysical information of the form that knowledge workers would encounter.
How can the architecture provide a systematic way to manage the interactions of multiple asynchronous agents?
How can the architecture provide smooth interactive animation and solve the Multiple Agent problem?
How can 3D widgets be designed and coupled to appropriate application behavior?
How can the user rapidly and simply move the point of view around in a 3D space?
How can objects be easily moved about in a 3D space?
The Small Screen Space Problem.
How can the dynamic properties of the system be utilized to provide the user with an adequately large workspace?
Many o f these problems are well known.
The Multiple Agent and Animation problems are less obvious, and since they define the basic organization of the Information Visualizer, we describe them in more detail.
We want our architecture to support multiple agents to which the user can delegate tasks.
In fact, we have previously argued  that T.B.
Sheridan's analysis of the supervisory control of semiautonomous embedded systems  can be adapted to describe the behavior of an interactive system as the product of the interactions of  three agents: a user, a user discourse machine , and a task machine or application.
These agents operate with very different time constants.
For example, a search process in an application and the graphical display of its results may be slow, while the user's perception of displayed results may be quite fast.
The UI must provide a form of "impedance matching"  between the various agents as well as translate between different languages of interaction.
T h e application itself may be broken into various agents that supply services, some of which may run on distributed machines .
In order to achieve the goals set forth in Table 1 we have been led to a UI paradigm involving highly interactive animation, 3D, agents, and visualizations.
This is one of the UI regimes now being made practical by current and predicted advances in hardware and software technology.
There are several problems, however, which need to be addressed in order to realize such a UI paradigm:
Even the UI may itself contain agents .
These additional agents have their own time constants and languages of interaction that must be accommodated by the UI.
Impedance matching can be difficult to accomplish architecturally because all agents want rapid interaction with no forced waiting on other agents, and the user wants to be able to change his or her focus of attention rapidly as new information becomes available.
For example, if a user initiates a long search that provides intermediate results as they become available, the user should be able to abort or redirect the search at any point , without waiting for a display or search process to complete.
T h e UI architecture must provide a systematic way to manage the interactions of multiple asynchronous agents that can interrupt and redirect one another's work.
Over the last 65 years, animation has grown from a primitive art form to a very complex and effective discipline for communication.
Interactive animation is particularly demanding architecturally, because of its extreme computational requirements.
Smooth interactive animation is particularly important because it can shift a user's task from cognitive to perceptual activity, freeing cognitive processing capacity for application tasks.
For example, interactive animation supports object constancy.
Consider an animation of a complex object that represents some complex relationships.
When the user rotates this object, or moves around the object, animation of that motion makes it possible  for the user to retain the relationships of what is displayed.
Without animation, the display would j u m p from one configuration to another, and the user would have to spend time  reassimilating the new display.
By providing object constancy, animation significantly reduces the cognitive load on the user.
T h e difficulty is that smooth animation requires a fixed rate o f g u a r a n t e e d computational resource, wlhile the highly interactive and redirectable s u p p o r t o f multiple asynchronous agents with different time constants has widely varying computational requirements.
T h e UI architecture must balance and protect these very different computational requirements.
In fact, the animation problem is one aspect of a b r o a d e r Real-Time Interaction problem.
Services need to be delivered u n d e r real-time deadline, u n d e r varying load, while simultaneously handling the Multiple Agent problem.
Table 2 summarizes the I n f o r m a t i o n Visualizer's solutions to each o f the problems described earlier.
T h e next few sections describe these solutions.
T h e heart o f the I n f o r m a t i o n Visualizer arclhitecture is a controlledresource scheduler, the Cognitive Coprocessor architecture, which serves as an animation loop and a scheduler for Sheridan's three agents a n d additional application and interface agents.
It manages multiple asynchronous agents that operate with diffe~rent time constants and need to i n t e r r u p t and redirect one another's work.
T h e s e agents range from trivial agents that u p d a t e display state to continuous-running simulations and search agents.
This architecture provides the basic solution to the Multiple A g e n t and Animation problems.
T h e Cognitive Coprocessor is an impedance matcher between the cognitive and perceptual information processing requirements of the user and the properties o f these agents.
In general, these agents operate on time constants different from those of the user.
T h e r e are three sorts o f time constants for the h u m a n that we want to tune the system to meet: perceptual processing  , immediate response  , and unit task  .
The perceptual processing time constant.
In o r d e r to maintain the illusion o f animation in the world, the screen must be r e p a i n t e d at least every 0.1 second .
T h e Cognitive Coprocessor therefore has a Governor mechanism that monitors the basic cycle time.
W h e n the cycle time becomes too high, cooperating r e n d e r ing processes reduce the quality o f r e n d e r i n g  so that the cycle speed is increased.
The immediate response time constant.
A person can make an u n p r e p a r e d response to some stimulus within about a second .
I f there is m o r e than a second, then either the listening party makes a back-channel response to indicate that he is listening  or the speaking party makes a response  to indicate he is still thinking o f the next speech.
These serve to keep the parties o f the interaction i n f o r m e d that they are still engaged in an interaction.
In the Cognitive Coprocessor, we attempt to have agents provide status feedback at intervals no longer than this constant.
I m m e d i a t e response animations  are designed to take about a second.
I f the time were much shorter, then the user would lose object constancy and would have to reorient himself.
I f they were much longer, then the user would get b o r e d waiting for the response.
The unit task time constant.
Finally, a user should be able to complete some elementary task act within about 10 seconds  .
This is about the pacing o f a point and click editor.
I n f o r m a t i o n agents may require considerable time to complete some complicated request, but the user, in this paradigm, always stays active.
A user can begin the next request as soon as sufficient information has developed from the last request or even in parallel with it.
T h e basic control mechanism  of the Cognitive Coprocessor is called the Animation Loop .
It maintains a Task Queue, a Display Queue, and a Governor.
T h e task machine  couples with the Cognitive Copocessor in various ways.
More details o f this architecture can be f o u n d in .
T h e basic building block in the Information Visualizer, called Interactive Objects, forms the basis for coupling user interaction with application behavior and offloading work to an agent to handle user interaction.
Interactive Objects are a generalization of Rooms Buttons .
T h e y are used to build complex 3D widgets that r e p r e s e n t information or information structure.
Rooms Buttons are used for a variety o f purposes, such as movement, new interface building blocks, and task assistance.
A Button has an appearance  and a selection action .
T h e most typical Button in Rooms is a d o o r - - w h e n selected, the user passes from one Room to another.
Buttons are abstractions that can be passed from one Room to another, and from one user to a n o t h e r via email.
Interactive Objects are similar to Buttons, but are e x t e n d e d to deal with gestures, animation, 2D or 3D appearance, manipulation, objectrelative navigation, and an extensible set o f types.
A n Interactive Object can have any 2D or 3D a p p e a r a n c e defined by a draw method.
T h e notion o f selection is generalized to allow mousebased gestural input in addition to simple 'pressing'.
W h e n e v e r a user gestures at an Interactive Object, a gesture parser is involved that interprets mouse movement and classifies it as one o f a small set o f easily differentiated gestures .
Once a gesture has been identified, a gesture-specific m e t h o d is called.
These gesture methods are specified when the Interactive Object is created.
In the current implementation, these include static text, editable text, date entry, number entry, set selection, checkmark, simple button, doors, sliders, and thermometers .
T h e basic set o f 3D widgets s u p p o r t e d for Interactive Objects can be easily extended.
Interactive Objects are generalized to the point that every visible entity in the simulated scene can be an Interactive Object .
Thus, the surfaces o f the 3D Room  are Interactive Objects.
All the controls  are Interactive Objects.
A n d finally, the application-specific artifacts placed in the r o o m are Interactive Objects.
Search agents are also used to offload user work.
T h e Information Visualizer uses an indexing and search subsystem , which allows search for documents by keyword or by iterative "relevance feedback" .
Associative retrieval based on such linguistic searches can be used to highlight portions o f an information visualization.
T h u s we can combine traditional associative searches with structural browsing.
In addition, clustering agents are used to organize information.
Using a near-linear clustering algorithm , which allows interactive use of clustering, a structure can be induced on an unstructured  body o f information.
T h e r e are several ways this can be of use.
For unstructured information, a user can induce a subject hierarchy, which can then be browsed with our hierarchy visualization tools.
For information that already has a structure, the clustering results sometimes reveal problems with the existing structure.
T h e 'Walking Metaphor'  has virtual joystick controls superimposed as heads-up displays on the screen and controlled by the mouse.
T h e controls are operators related to the way a h u m a n body might be moved .
This scheme is fairly general and works well for exploratory movement, which has no particular object as its target.
Large information spaces, however, involve numerous objects and/ or highly detailed objects that require the user to move back and forth from global, orienting views to manipulate detailed information.
Therefore, an important requirement for such systems is a movement technique that allows the user to move the viewpoint  rapidly through large distances,  with such control that the viewpoint can approach very close to a target without collision.
We call this the problem of rapid and controlled, targeted 3D movement .
Point of lnterest  Logarithmic Flight.
O u r second navigation technique uses.
Current techniques for moving the viewpoint  are not very satisfactory for targeted movement.
They typically exhibit one or more of the following three problems:  inefficient interactions and movement trajectories, typically caused by 2D input devices;  difficulties controlling high velocities when the technique is based on flying or steering the viewpoint through the workspace; and  limits on h u m a n reach and precision when the technique is based on directly positioning the viewpoint.
Most viewpoint movement techniques focus on schemes for directly controlling the six degrees of freedom of viewpoint movement  or their rate derivatives--a complex control task.
Our solution is to have the user select a point of interest  on the surface of an object and use the distance to this POI to calculate a logarithmic motion function.
Two keys on the keyboard are used to indicate logarithmic motion along the ray toward and away from the POI.
T h e viewpoint is automatically oriented during the flight to face the surface being approached by using the surface normal at the POI.
Another control allows movement perpendicular to the surface normal.
This allows for scrolling over extended objects  or circumnavigation around spherical objects 
The mouse cursor is used to control a ray that determines the lateral position of the object of interest  and the same keyboard keys are used to control the position of the object on the ray.
However, the user must be able to control object position at a distance, where logarithmic motion is not effective.
T h e solution is to use an acceleration motion clipped by a logarithmic motion.
POI logarithmic flight and object of interest logarithmic manipulation both allow simple, rapid movement of the viewpoint and of objects in a 3D space over multiple degrees of freedom and scales of magnitude with only a mouse and two keyboard keys.
We believe these techniques provide a mouse-based solution for the viewpoint movement and object movement problems that are as good or even better than those requiring special 3D devices.
T h e chief advantage of a mouse-based solution is that mice are ubiquitous.
Also, many users o f information visualization  are n o t likely to be willing to wear special equipment .
Even so, the techniques could be adjusted to work with 3D devices such as the glove.
T h e 3D/Rooms system supports Doors that allow a user to move from one room  through to a home position in another room.
T h e Door is an Interactive Object that supports either manual control or scripted animation of opening and walking through to the other room.
As with Rooms, 3D/ Rooms contains an Overview  allowing the user to view all the 3D workspaces simultaneously.
This is a navigation technique that lets the user view all the rooms and go to any room directly.
In 3D/ Rooms the user can also reach into the Rooms from the Overview, move about in them, and manipulate their objects.
3D/ROOmS 3D/Rooms extends the logic of our Rooms system to three dimensions.
In the classical desktop metaphor and the original Rooms system, the view of a Room is fixed.
In 3D/ Rooms, the user is given a position and orientation in the Room, and can move about the Room, zoom in to examine objects closely, look around, or even walk through doors into other Rooms.
T h e effect o f 3D/Rooms is to make the screen space for immediate storage o f information effectively larger .
T h e effect o f rapid zooming, animation, and 3D is to make the screen space effectively denser .
By manipulating objects or moving in space, the user can disambiguate images, reveal hidden information, or zoom in for d e t a i l - - r a p i d l y accessing m o r e information.
Both the techniques for making the Immediate Storage space virtually larger and the techniques for making the space virtually denser should make its capacity larger, hence the average cost of accessing information lower, hence the cost o f working on large information-intensive tasks lower.
Information Visualization Recent work in scientific visualization shows how the c o m p u t e r can serve as an intermediary in the process o f rapid assimilation o f information.
Large sets o f data are r e d u c e d to graphic form in such a way that h u m a n perception can detect patterns revealing underlying structure in the data more readily than by a direct analysis o f the numbers.
Information in the form of documents also has structure.
Information visualization attempts to display structural relationships and context that would be more difficult to detect by individual retrieval requests.
Although much work has been done using 3D graphics to visualize physical objects or p h e n o m e n a , only a few systems have exploited 3D visualization for visualizing m o r e abstract data o r information structure.
T h e SemNet  system is an early example o f the exploitation o f 3D visualization of information structures.
T h e structures visualized in SemNet were mostly large knowledge bases, and were often arbitrary graphs.
T h e n-Vision system  exploits 3D to visualize n-dimensional business data.
Multivariate functions are displayed in nested coordinates systems, using a m e t a p h o r called worlds-within-worlds.
Although nVision focuses on continuous multivariate functions, it does exploit the h u m a n 3D perceptual apparatus to visualize abstract data.
Silicon Graphics has recently released an u n s u p p o r t e d system, called File System Navigator  , which explores what they call Information Landscapes.
In this system the file system hierarchy is laid out on a landscape, with each directory represented by a pedestal which has boxes representing individual files on top o f it.
T h e y effectively use the 3D space to present structure, while using box size to represent file size and color to represent age.
FSN uses a technique called 'artificial perspective', a form of fisheye effect , to make more effective use o f screen space.
In the I n f o r m a t i o n Visualizer, we have explored 3D visualizations for some o f the classical data organizations: 1.
Hierarchical: T h e Gone Tree visualization  .
Linear: T h e Perspective Wall visualization  .
Spatial: T h e spatial structure of a building  can be used as a structural browser for people.
Selecting an organization will p r o d u c e the names and pictures o f its members and select their offices.
Clicking on offices retrieves their inhabitants.
Continuous Data: In the Data Sculpture , the user can walk a r o u n d or zoom into this visualization containing over 65,000 sampling points as if it were a sculpture in a museum.
Unstructured: T h e Information Grid  is a 2D visualization for unstructured information.
These visualizations use interactive animation to explore dynamically changing views o f the information structures.
T h e visualizers attempt to present abstractions o f large amounts o f data tuned to the pattern detection properties of the h u m a n perceptual system.
For example, they use color, lighting, shadow, transparency, h i d d e n surface occlusion, continuous transformation, and motion cues to induce object constancy and 3D perspective.
Visualizing Hierarchical Structure: Cone Trees Hierarchies are almost ubiquitous, a p p e a r i n g in many different applications, hence are good information structures to exploit.
In some cases, arbitrary graphs can be transformed into hierarchies , so the utility o f hierarchy visualization is f u r t h e r enhanced.
Cone Trees are hierarchies laid out uniformly in three dimensions.
Figure 7 is a snapshot o f a simple Cone Tree.
Nodes are drawn as 3- x 5-inch index cards.
T h e top o f the hierarchy is placed near the ceiling of the room, and is the apex o f a cone with its children placed evenly spaced along its base.
T h e next layer o f nodes is drawn below the first, with their children in cones.
T h e aspect ratio o f the tree is fixed to fit the room.
Each layer has cones o f the same height .
Cone base diameters for each level are r e d u c e d in a progression so that the bottom layer fits in the width o f the room.
T h e body o f each cone is shaded transparently, so that the cone is easily perceived yet does not block the view o f cones behind it.
T h e display o f node text does not fit the aspect ratio o f the cards very well, hence text is shown only for the selected path.
Figure 8 shows an alternative layout, which is horizontally oriented and has text displayed for each node.
W h e n a node is selected with the mouse, the Cone Tree rotates so that the selected node and each node in the path from the selected node up to the top are b r o u g h t to the front and highlighted.
Typically, the ,entire transformation is done in about a second.
T h e tree can also be rotated continuously to help the user u n d e r s t a n d substructure relationships.
A 2D layout o f the same structure using conventional g r a p h layout algorithms would not fit on the screen.
T h e user would have to either scroll t h r o u g h the layout or use a size-reduced image o f the structure.
Most hierarchies enc o u n t e r e d in real applications tend to be b r o a d and shallow.
This typical hierarchy aspect ratio is problematic for 2D layouts .
A 3D layout uses d e p t h to fill the screen with m o r e information.
To see dais effect analytically, consider the aspect ratio o f a 2D tree, ignoring the size o f the nodes.
I f there are l levels and the branching factor is b, the width o f the base is bt-1 a n d the aspect ratio is bt-1/l.
Aspect ratio for 2D trees increases nearly exponentially, and is much worse as the branching factor gets larger.
Figure 9 shows what h a p p e n s for small branching factors .
In contrast, the Cone T r e e aspect ratio is fixed to fit the r o o m by adjusting level height and cone diameters to fit.
T h e line near the bottom o f Figure 9 is a typical aspect ratio o f four to three.
Alt h o u g h fixing the aspect ratio introduces a limitation on the n u m b e r of levels that can be effectively displayed , it makes Cone Trees i n d e p e n d e n t o f the n u m b e r of nodes, branching factor, and numb e r o f levels .
In addition to perceptual effects already mentioned, the 3D perspective view o f Cone Trees provides a fisheye view  o f the information, without having to describe a degree o f interest function, as in general fisheye view mechanisms.
T h e selected path is brighter, closer, and larger than other paths, both because o f the 3D perspective view and because o f coloring and simulated lighting.
O u r fisheye view effect is f u r t h e r enhanced by selection rotation, because the user can easily select a new object o f interest and have the structure quickly reconfigure to highlight it.
Cone Tree: Examples In Figures 7 and 8, Cone Trees are used for a file browser, showing one user's directory hierarchy, with each node r e p r e s e n t i n g a directory in a Unix file system.
I n f o r m a t i o n access is d o n e on file names and file contents.
We have also visualized an entire Unix directory hieffarchy, which contained about 600 directories and 10,000 files.
To o u r knowledge, when we did this in 1989, it was the first time anyone had ever visualized an entire Unix file system.
T h e directory hierarchy was surprisingly shallow and unbalanced.
Since then, both FSN  and T r e e M a p s   have been used to visualize entire file systems.
Cone Trees have also been used as an organizational structure browser.
Search is done in a database of facts about each person  and a database o f autobiographies.
Users can search for other people with biographies similar to a selected person's biography.
We have i m p l e m e n t e d several organization charts.
T h e largest contained the top 650 Xerox Corporation executives.
Since this requires 80 pages on paper, this is the first time the organization chart could be seen in one visualization.
We also have used Cone Trees to visualize a company's o p e r a t i n g plan.
Text narratives describe each portfolio, p r o g r a m , and project, and are a u g m e n t e d with project highlights  from the previous year.
A typical search finds all projects related to a selected project.
Cone Tree manipulation mechanisms are used d u r i n g early stages o f operating plan definition to reorganize the plan to a desired structure.
Visualizing Linear Structures: Perspective Wall Case studies indicate that tasks often involve spanning properties  that structure information linearly .
This linear structure results in 2D layouts with wide aspect ratios that are difficult to accommodate in a single view.
T h e principal obstacles to a visualization o f linear information structures are  the large a m o u n t o f information that must be displayed and  the difficulty o f accommodating the extreme aspect ratio o f the linear structure on the screen.
These problems make it difficult to see details in the structure while retaining global context.
A c o m m o n technique for viewing linear information while integrating detail and context is to have two simultaneous views: an overview with a scale-reduced version o f a workspace, and a detailed view into the workspace where work can be accomplished.
T h e overview typically contains an indication o f the detailed view's location that can be manipulated for r a p i d movement t h r o u g h the workspace.
However, a uniform scale reduction o f the workspace causes it to a p p e a r very small.
Furthermore, i m p o r t a n t contextual information, such as the n e i g h b o r h o o d o f the viewing region, is just as small as u n i m p o r t a n t details.
Finally, if the display space for the overview is increased to make the workspace appear larger, the space for the working view becomes too small.
Rather than a u n i f o r m overview o f a workspace, an effective strategy is to distort the view so that details and context are integrated.
Fisheye views  provide such distorted views by thresholding with Degree o f Interest functions to d e t e r m i n e the contents o f the display.
However, thresholding causes the visualization to have gaps that might be confusing or difficult to repair.
F u r t h e r m o r e , gaps can make it difficult to change the view.
T h e desired destination might be in one o f the gaps, or the transition from one view to a n o t h e r might be confusing as familiar parts o f the visualization suddenly d i s a p p e a r into gaps.
Spence and Apperley developed an early system called the Bifocal Display that integrates detail and context through another distorted view .
This 2D design is a conceptual ancestor of the Perspective Wall system.
T h e Bifocal Display was designed for professional offices that contain information subdivided into a hierarchy of journals, volumes, issues and articles.
Abstractly, the workspace consists of information items positioned in a horizontal strip.
T h e display is a combination of a detailed view of the strip and two distorted views, where items on either side of the detailed view are distorted horizontally into narrow vertical strips.
For example, the detailed view might contain a page from a journal and the distorted view might contain the years for various issues o f the journal.
The Perspective Wall integrates detailed and contextual views to support the visualization of linearly structured information spaces, using interactive 3D animation to address the integration problems of the Bifocal Display.
T h e Perspective Wall folds a 2D layout into a 3D wall that smoothly integrates a central region for viewing details with two perspective regions, one on each side, for viewing context .
This intuitive distortion of the layout provides efficient space utilization and allows smooth transitions of views.
Space utilization analysis of the Perspective Wall technique indicates at least a three-fold improvement over simple 2D visualization .
Perspective Wall: Implementation The Perspective Wall's physical metaphor of folding is used to distort an arbitrary 2D layout into a 3D visualization , while automatically retaining any 2D task-specific features.
More important, no special large- and small-scale versions of items must be designed .
T h e perspective panels are also shaded to enhance the perception of 3D.
This intuitive visualization provides efficient space utilization for 2D layouts with wide aspect ratios.
T h e Perspective Wall in Figure 10 holds cards that represent files in a c o m p u t e r system that are structured by modification date  and file type .
T h e perspective view has the further advantage that it makes the neighb o r h o o d o f the detailed view larger than m o r e distant parts o f the contextual view.
A major advantage o f the Perspective Wall is that its intuitive 3D metap h o r for distorting 2D layouts allows smooth transitions a m o n g views.
W h e n the user selects an item, the wall moves that item to the center panel with a smooth animation, as if it were a sheet in a player piano moving selected notes to the center o f view.
This animation helps the user perceive object constancy, which shifts to the perceptual system work that would otherwise have been required o f the cognitive system to reassimilate the view after it had changed.
F u r t h e r m o r e , the relationship between the items in the detail and contexl: is obvious.
Items even b e n d a r o u n d the corner.
T h e Perspective Wall has the additional feature that the user can adjust the ratio o f detail and context.
This is quite i m p o r t a n t when the detailed view contains a lot o f information.
T h e m e t a p h o r is to stretch the wall like a sheet o f rubber.
T h e Perspective Wall has been used to visualize various types o f information.
Vacations a n d other work patterns are clearly visible.
T h e technique has also been used for corporate memor a n d a and reports, which also have a useful linear structure.
T h e technique is particularly effective when combined with a retrieval technique that allows the user to select an item and find similar related items.
T h e Perspective Wall makes it easy to visualize the resuhs o f such retrievals because it shows all similar items simultaneously and in context.
T h e r e is a large class o f applications for which these techniques work.
It seems clear that interactive animation can effectively shift cognitive processing load to the perceptual system.
A n d it seems plausible  that 3D can be used to maximize effective use o f screen space.
Formal user studies are n e e d e d to verify and e x p a n d on these conclusions.
T h e I n f o r m a t i o n Visualizer we have described is an experimental system being used to develop a new UI p a r a d i g m for information retrieval, one oriented toward the amplification o f information-based work.
It is based on o u r analysis o f several aspects o f information use that have led us to r e f r a m e the information retrieval p r o b l e m as a problem in the cost structuring o f an information workspace.
This, in turn, has led us to evolve the c o m p u t e r desktop m e t a p h o r toward  the Cognitive Coprocessor interaction architecture ,  3D/Rooms , and  information visualization .
Collectively these techniques alter the cost o f retrieving information from secondary storage and the cost o f using it in workspace.
Future work will focus on how these techniques aid in sensemaking, and will continue to explore the rich space o f techniques for visualizing information.
Acknowledgments We would like to thank a n u m b e r o f people who have been involved in the use and d e v e l o p m e n t o f the Information Visualizer: Doug Cutting, Peter Pirolli, Kris Halverson, Walt Johnson, J a n Pedersen, Ramana Rao, Dan Russell, Mark Shirley, Mark Stefik, a n d Brian Williams.
Information visualization, information visualizer, information access, information cost structure About the Authors: GEORGE G. ROBERTSON isa principal scientist at Xerox Palo Alto Research Center.
STUART K. CARD is a research fellow and manager of the user interface research group at Xerox Palo Alto Research Center.
JOCK D. MACKINLAY is a member of the research staff at Xerox Palo Alto Research Center.
To copy otherwise, or to republish, requires a fee and/or specific permission.
The decoupled simulation model for virtual reality systems.
Supervisory control of remote manipulators, vehicles and dynamic processes: Experiments in command and display aiding.
Spence, R. and Apperley, M. Data base navigation: An office environment for the professional.
Sketchpad: A manmachine graphical communication system.
Tesler, J. and Strasnick, S. FSN: 3D Information Landscapes.
Man pages entry for an unsupported but publicly released system from Silicon Graphics, Inc. Mountain View, Calif. Apr.
25, Zeltzer, D., Pieper, S. and Sturman, D. An integrated graphical simulation platform.
CR Categories and Subject Descriptors: H.3.3 : Information Search and Retrieval-retrieval models; H.5.2 : User Interfaces--interaction styles; 1.3.6 : Methodology and Tech-
Network Broker manages the complexities of inter-communication among heterogeneous or homogeneous networks.
Complexities that are often unavoidable such as different vendor's protocols, operating systems, and host computers.
By using an intelligent software e n v i r o n m e n t - - the Virtual Network - - Network Broker exploits the inherent concurrency in distributed systems, and insulates your working applications from their underlying platforms.
So there's less coding in the front door, and reduced maintenance in the back door.
First implemented in 1988, Network Broker is a proven development tool designed specifically for use with the ADA progratnming language.
Network Broker for C - language developers will be available later this year.
To find out how Network Broker can simplify the design, implementation, integration, and maintenance of your distributed applications, call our Software Engineering Division directly, 312-2259.
