We close with the pmentation d PAC*, a new arehitectuml fmmwodc for modelling and designing the sdsvare amhitectm of multi-user systems.
PAC* is a motivated combination of existing anAiteetuml models seleeted for the complementarily of their "good properties".
These include operational heuristics such as rules for deriving agents in accordance to the task model or criteria for reasoning about replication as well as properties such as support for style heterogeneity, portability, and reusability.
User intetiace genemtom do not alleviate t.k problem either.
Worse, they tend to provide a f~ sense of confkienm that softvvamamhitectum is no longer an issue.
Actually, the sotbwue designer must fm understand the ftmtional covemge of the generated code in order to devise what mats to be developed by hand.
Seeom developem have to discover how to integrate and coordinate the handaded portion with the generated code in a way that supports the system requirements.
Without an architeetuml fmmewoxk to stmehue the problem it is difficult to achieve this task properly.
Completed with pmctieal experiexe in SA modelling for single-user interactive systems, it cannot be ignmed for the software design of multi-user systems.
Ad-hoc unmotivated acceptable for threw-away solutions, are eatainly prototypes.
However, the iterative nature of user intedke desi@ `leads developm to put too much don into ti prototype and thus, be tempted to turn the softwrue into a product.
Them in the absence of an explicit aMec@ml framewodc ad sound design W.ionale, the resulting system is difllctdt to maintain and cannot evolve adequately.
One additional problem in Human Computer Interaction  is that off-tksMf tools, such as application fmmewodcs and user hlerface generatom, do not make explicit tk link between the functionalities they provide and their underlying architectuml fmmework.
The softswm amhitectme is lost in the resulting code.
This article Eports our nAkction on softwue amhitecture modelling for multi-user systems .
It is structured in the following way: f~, we introduce the notion of softwme arehiteehuc ad make explicit the design steps that most software desigmm in HCI tend to blend in a fiwzy way.
Building on gerwal cmrxpts and pmctiee flom main stream softsvam engineering we then present a comparative analysis of the most signifbnt architecture models developed for single-user and multi-user systems.
We close with the presentation of PAC*, a H architectural fmrnework for modelling and designing the sot%wue arehiteetm of multi-user interactive systems.
PAC* draws on the contributions fxom main stream software engimxxing and blends together the best of singleuser architechue modelling with the state-of-the art in multi-user systems.
Actually, there is more to software a.mhiteettue rnodelling than identifying components and their connections.
As in any design activity, the deftition of a soilsvam architecture is the @t of a process.
In ~ a design process involves considering multiple concerns, thus developing multiple perspectives of the sum design problem.
Def* the structure of the systen4 that is, providing a static description of the form of the system in terms cf components and connectors.
This structwe may erneqy fmm implicit handaafted knowledge or it can be inspinxi fmm architectural styles such as pipes and filters or layers of abstract machines.
Allocating functions to the structure, i.e., mapping the functional breakdown onto the structural description of the system.
One component may encapsulate multiple functional pieces.
Describing the coordination that is, the dynamic txhvior of the amhitectme.
This perspective on a system architecture is orthogonal to the specification of k structure.
Depeding on the sotlware development environment, the designer may be concerned with additionrd issues such as allocating structural components to processes and allocating processes to physical processcm.
Gmupwme development tools such as Groupkit  and Suite , tend to alleviate the problem of process and processor allocation, While the application of principled design is widely mognised in the scdlware community, the~ is very little material to help amhitectuml desigrws to cope with a number of major diffkxdties.
These include finding the right balance between multiple sources of requhements, iden@ing the right level of Rfinerrxmt to mson about tk system properties, and coping with heterogemity.
As demonstrated by Shaw , styles have very spmific properties.
As a resultj all of the system Equirements may not be covexwl with a single style, In amhitectuml desi~ heterogeneity is a necessary trouble.
Typically, the user intafxe partition of an interactive system is built partly from existing code with its own style , d partly fmm fnxh cock which may follow yet another style.
Architect models for single-user systems primarily provide fmrnewofi for performing fuxtional partitioning and for allocating functions to structuml components using both system and user+mtemd properties.
We have selected the most signifkant contributions in the field starting with the seminal Seeheim and Arch models.
Them we pmemt tk current t.nmd with agenthsed models, followed by PAC-Amodeus, a hybrid model that combines Amh with the PAC agent style.
We observe that, with the notion of Application Irlmfke Model, Seeheim has i&ntified an explicit location h resolving possible mismatches between the fimctiomd cm and tk user intdace partition.
Seeheim can be interpreted as a framewodc for pm functional partitioning or can be viewed as a stmctural decomposition where boxes denote monolithic soflwu components dedicated to a single functional role, and whe~ arrows represent some communication mechanism.
For example, in the mideighties, user-system interaction was primarily viewed as a -ge-w dialogue.
In 1991-1992, the Arch model revisited tk fictional coverage of the SeeMn partitions, introduced an additional adaptor for the presentation side, and its Slinky meta-model aclumwledged the fictional migration across the stmctmd components .
With regard to functional coverage, &ch raised the level of abstraction of the user tierface partitions.
In particular, the token assembly mle of the Seeheim Dialogue Component has been Eplaced with the mpcmsibility for task-level sequencing.
Token assembly, which is now performed by reusable software, has shifted to the low level Interaction Toolkit Component.
To minimize the effects of futme modifications, Arch has insulated the Dialogue Component fmm the diversity and variations d its functional partners, the Domain Specific and the Interaction Toolkit Components.
By introducing the Domain Adaptor Component and the Presentation Compone@ Arch has provided explicit hooks ti modifhbility as well as for portability of the user interface.
Although Arch is a reliable densnce, its ovemll decomposition is not always suftlcient for reasoning about a prticukw softwm mchitecture design.
Agent4msed models, which promote ~fmement, tend to satisfy this need.
An agent has a state, possesses an expertise, and is capable of initiating and reacting to events.
Agents that cmnrnunicate directly with the user me sometimes called interactors.
The terms "interactof', "agent" and "interaction object" are sometimes used indiffenmtly even i there is no di~ct interaction with the user.
Agent models stress a highly pamllel modular organisation and distribute the state of the interaction among a collection of m operating units.
A number of agent-based models and tools have been developed along these lines.
All of the agent-based styles and tools push forwmd the fimctionai separation of commns advocated by Seeheim.
They genemlise the distinction between concepts and presentation techniques by applying the separation at eve~ level of abstraction and refmment.
In otier to do so, they distribute the fimctionai separation of concerns among distinct co~perating agents.
For example, in PAC , the tkets of an agent rue used to expess diffe~fi but complementary and strongly coupled computational perspectives of the sarm entity.
Agent-based models differ however in the way they petionn the functional decomposition of an agent and in the way they make explicit or not the I/O communication channels and the levels of abstractions.
For example, in MVC, and in contrast to PAC, inputs and outputs me processed by two distinct ti  wimxeas them is no provision for expmsing dependencies between the functional facets of an MVC agent.
Fi~6 the capacity for the sotlwzue designer to allocate a particular functional role at the adquate level cf abstraction.
Secoml the multi-faceted structure of an agent can be exploited in diffemri ways.
The issue is not that "my facets m better than yours", the point is that agents have multiple functional perspecdves that should be exploited appropriately.
As mentioned Wore, an iuchhectwe is an expression of what is signifbnt.
For example, in the AMF model, PAC agents have been augmented with fxets to provide help or to log signifhnt events to perform usability testing from obsemwd behavior .
Other illustmtions of dedicated facets to expnxs si@lcant fimctions will be illustrated with PAC*.
Agent styles model interactive systems in an homogemous way: ail of the functional aspects of ti system am expessed using a single style.
This homogeneity is &sirable wkn the designer's goal is to reason about the system properties.
Homogeneity is also acceptable when the style is conveyed by the implementation tool such as MVC within the Smalkaik development environment and wlm the entire system can be developed with the same tool.
As mentioned above, heterogeneity is generally unavoidable.
PAC-Amodeus has been designed to cope with this problem.
A hybrid modei: PAC-Amodeus PAC-Amodeus uses the Amh model as the foundation fcr t.k functional partitioning of an interactive system and populates the Dialogue component with PAC agents: Amh supports the existence of reusable code and defines two adaptws for accommodating style heterogeneity, h anticipating changes and portability.
On the other ha@ Arch does not provide any guidance about how to stmctme the Dialogue Component in a way that is compatible with the user's task reqkments.
PAC supports task interleaving as well as multiple grains of task decomposition but f~ at making explicit the link with existing styles.
PAC-Amodeus gathers the best of b two worlds.
Figure 2 shows the resulting Iimctional breakdown, As in A@ PAC-Amodeus otkrs two-way tiormation flows between the primmy components of the arch The nature of the cmmectors between the functional boundaries is left opened since it depends heavily on the casE at hand.
A PAC agent has a Presentation ket , an Abstraction , and a Control to express dependencies.
The Control of an agent is in charge of communicating with otlm agents as well as expressing dependencies between the Abstmct and Pnxentation hcets of the agent.
In the PAC style, no agent Abstraction is authorized to communicate directly with its conesponding Presentation and vice versa.
In PAC, depemiewies of any sort me conveyed via Controls.
Cmtrols sewe as the glue mechanism to express coordination as well as formalism transformations that sit between abstmct and conmte perspectives.
In additiom t.k flow of information between agents transits through Controls in a hierarchical way .
The diversity and the novelty d the technical problems explain both h profusion of d-b models and the lack of canonical models that would demonstrate Sufficieti genericity and coverage.
Our "clover model", presented nem provides a high level partitioning for reasoning about the using classes of fimtions a groupwrue may support.
A PAC agent may be dated to the DA and PC components through its Abstmction and Presentation f%cets respectively.
Its Absbaction fhcet may be coruuxted to om or multiple domain objects of the DA .
Similarly, a Presentation ket may be cmmected to one or multiple presentation objects of tk PC .
The design rationale for the "horizontal flow" is perfonname.
Abstract tionnation from the DA may not need additional processing from tk parent agents.
Similar reasoning holds for the presentation part.
In this situatio~ flying through the PAC hieramhy would be both time consuming and useless.
We have identified a set of heuristic rules to help tk designer in ident@ing the agents of h Dialogue Control.
Each of these rules proposes a contigumtion of agents, or patte~ that fits a particular situation.
A pattern descriies a pmikukw reaming design probleu proposes a ptedefimd scheme for its solutiom and includes heuristic rules fm lmw and when to use it .
The complete set of PACArnodeus ndescantx found in .
We have selected one of them that will be used to illustmte PAC*.
Ifuser's actions am distributed over multiple agents and f these actions me mean@@ for the system, then a cement agent should be introduced to synthesise these actions distributed over multiple agents.
This situation is illustrated in Figure 3.
It primarily cmmponds to editing systems.
Typically, a palette of concepts is pmented to tk user along with an editing area.
For example, to draw a circle, the user selects the circle icon fmm the palette then specifies the circle in the dmwing area.
Our notions of production and coordination spaces correspond to Ellis' ontological and coordination models while our communication space complements Ellis' view of the functional decomposition of groupware .
Contrary to Ellis's model, user interface issues do not constitute a third functional aspect of groupware.
Instead it is orthogonal to all fictional aspects of groupware.
Intemtingly, the relative importance of the three t%nctionai spaces depends on the particular groupware system at Iia.md and may vary over time.
Typically, shared editom i%or pnxiuction wkmzts communication functions rue first class issues in medaspaces.
In additiom this functional  shift may wuy over time .
For example, at some point in the group activity, coordination is * fusing computer-mediated Of attentio% possibly cmnnumication to plan future common production.
Layers shad between users form the base of the system .
At some point, tk base gives rise to bmnches which me Rpiicated for every user .
Information flow between layem occurs vertically between adjacent layers along the input and output axis as well as horizontally between peer and non peer replicated layers for synchronizing states.
Dewan's model can be seen as an extension of Patterson's "zipper model" : when a layer is mplicate~ all layers below it me rwessariiy replicated.
This hypothesis does not comply with situations whm multiple users, like in MMM , slum tk same physical workstation.
On the other hand, this model offers a good basis for implementing various forms of coupling as well as for allocating fumtions to processes .
For example, one can choose to execute the base and each branch within distinct processes.
Similarly, without any automatic support fmm the underlying platforrm the model helps reasoning about allocating processes to processors.
Genericity in Dewan's model comes fmm the notion cf layer whose functional mle and number can be adapted to the case at hand.
Layers S to L+l are common to all usem and not qlicated.
Layers L to O am replicated.
Arrows denote information flow: the horizontal ones express the existenm of some coupling between peer layers; the diagonal ones denote some coupling between non peer components.
ALV associates a personal interface componen$ a View, to eveV user and uses Link components to connect views to a shad Abstraction .
Links are in charge of expressing constraints between the views and the shad abstraction and of maintaining their mutual dependeties by a bidinxtional propagation of events.
Clearly, ALV addresses synchronous multi-user systems based on a centdhd shared fimctionrd core.
ALV can be seen as an instantiation of Dewan's model using thee layers whe the semantic level is mapped to the hued abstmction and wlme bmnches are comprised of links and views.
Experimental evidence indicates that ALV primarily covem the production space based on direct manipulation am to a lower extex addresses the coordination space.
Experience shows that the fwe level bnmkdown d Amh offem an operational way of thinking about a system.
As discussed above, Arch accommodates style ktemgemity, portability as well as code moditlcations.
Whereas Dewan's axhitectum adopts a strict zipper model, PAC* comeptually authorizes multiple fodcs and joins along the levels of abstractions.
But we have no experimental evidence of the soundness  of this genemlity.
PAC-Amodeus, an agent style is appropriate for modeliing a Dialogue Control component in SCCOto the task model.
Going one step fiut.kr than PAC-Amodeus agents, b fictional role of each agent in PAC* is dined along two orthogonal axes: the PAC functional breakdown and the clover decomposition of groupware.
Similarly, the services for Coordination and h Communication have their own Presentation Abstraction and Control.
For example, let us consider an extended version of tk multi-user scrollbar developed for the collaborative document editor SASSE .
The extended SASSE scrollbar SUppOlts both PKXhCtiO~ COO17hiltiO~ and communication.
Referring to PAC-Amodeus rules, the extension may occur within the Presentation facet of the agent or within the Presentation Compcme@ or even in the Intemction Toolkit component.
The Control tbcet is in charge of one way dependencies between the users list ad their locatio% and the number of elevators and their ~sition in the left scrollbw,
Communication in PAC* inherits the cmnnumication rules devised for the models it is based on.
As in Dewan's model, PAC* supports vertical communication belwcen adjacent local layers as well as horizontal communications between remote peer layers.
As discussed nexL communication between ~piicated Dialogue Control components are performsd at a finer groin than in Dewan's model.
Within Dialogue Control components, agents communicate according to the PAC-Amodeus rules: local agents communicate with each other in a hiemtchicai manner through their C fat@ for eve~ functional aspect of the gmupwam clover, they may communicate directly through their P and A facets with their local neighboum, respectively the local Pnxentation and the local Domain Adaptor Components.
In addition to the local PACAmodeus based communicatio~ agents may cmnmunicate with peer remote agents through their C facet.
Finally, within an agent for eve~ functional aspect of the gmupwzue clover, the Abstmct and Presentation l%cels communicate through their mpective Control t%cet, Communication between the Production Coordination ad Communication views depends on the refinement chosen for PAC* agents.
The elevators cannot be moved by the local user but they show the cunent location of the other users within the document: the left scrollbar supports coordination by double clicking on an elevator of the left scroll bar, the local user can open an audio-video connection with ti distant owner of the elevator this extension of the SASSE multi-user scrollbar participates to the communication space.
Agents of a Dialogue Control component m derived from the PAC-Amodeus rules .
Most agents support a single aspect of the groupwtm clover they me pure PAC agents.
The SASSE scmllbar, on the other m covers multiple fimctions of the clover.
Thmefon+ it may be mfimxi along the tluee clover pempectives as discussed above.
Although interface buildm tend to alleviate the problem they rue limited in scope aml apply to mundane cases for which the user intake is otlen a second class component.
AIchitccture design of user interfaces is not a luxwy but a necessity and reeds better support.
To mpcmd to this requiremen~ we have developed PAC*, a motivated combination of existing amhitectuml models selected for tk complementarily of their "good properties".
These irchxle opcmtional heuristics such as rules fix deriving agents in a%dance to the task model or criteria for msoning about replicatio~ as well as properties such as genericity and suppmt for style heterogemity, portability, and nmsability.
PAC* is being applied to the software amhitectuml design of two ongoing projects: CoMedL a prototype media-space for experimenting with both social and technical aspects d Computer Mediated Communication , and CATCHI, a sofhwm environment that mpports ti design of multi-user war games simulators.
So far, PAC* has proven useful in triggering the right softsw-ue design questions and in providing opemtional answers for most cases.
We do Eel however that PAC* patterns need to be devised to ESPOMI to mcunent but diffkult problems in multi-user systems such as mponse time and fault tolerance.
This handle is in charge of dependencies between the agents of the cluster as well as of the communications with the external world.
The choice between a bundled "Neapolitan PAC" and the various configurations of the PAC* cluster depends on the mqui~ments of the system as well as on the development tools.
Figure 9 illustrates PAC* with a SASSE-like multi-user editor running on a heterogeneous environment.
The top cf the @we SIWWS the view observed by -h user.
The ovemtl architecture of the system is shown in Figm 5b: the Functional Core  maintains an abstract nqxesentation of the shared document.
Domain adaptom  have been defined for each platform to resolve possible mismatches between the FC and the user interface portion of the system.
The bottom of Figure 9 shows a zoom on the Dialogue Control components represented hae for two users.
Since eve~user hasthesame user interface rtmning on remote workstations, Dialogue Control components am replicated.
The user-centenxl iterative design d collabcnative writing sofhvare, in Proceedings of the Workshop on Reai Time Group Drawing and Writing Tools, CSCW' 92 .
