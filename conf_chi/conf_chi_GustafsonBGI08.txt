To overcome display limitations of small-screen devices, researchers have proposed techniques that point users to objects located off-screen.
Arrow-based techniques such as City Lights convey only direction.
Halo conveys direction and distance, but is susceptible to clutter resulting from overlapping halos.
We present Wedge, a visualization technique that conveys direction and distance, yet avoids overlap and clutter.
Wedge represents each off-screen location using an acute isosceles triangle: the tip coincides with the off-screen locations, and the two corners are located onscreen.
A wedge conveys location awareness primarily by means of its two legs pointing towards the target.
Wedges avoid overlap programmatically by repelling each other, causing them to rotate until overlap is resolved.
As a result, wedges can be applied to numbers and configurations of targets that would lead to clutter if visualized using halos.
We report on a user study comparing Wedge and Halo for three off-screen tasks.
Participants were significantly more accurate when using Wedge than when using Halo.
As a result, Halo outperforms arrowbased techniques when distance matters .
Halo's performance advantages, however, were tested with no or little overlap between the rings .
Larger numbers of targets as well as targets located in the same direction can cause halo arcs to overlap, as acknowledged by Baudisch and Rosenholtz.
Figure 1a illustrates how 8 targets--only three more than tested by Baudisch and Rosenholtz--can already lead to substantial clutter.
Arcs blend together, reducing the main strength of Halo, which is the pop-out effect of small-radius arcs among less-curved arcs.
Note that overlap gets worse if multiple targets are located in the same direction, as commonly happens when the view is panned and off-screen targets gather along an edge or a corner.
When viewing large graphical documents on a small screen device, objects of interest are often located off-screen.
In the case of a map for example, some of the locations required to plan a route might be invisible.
Spatial cognition tasks that are comparably easy when all relevant locations are visible can now become difficult.
Researchers have proposed several techniques for visualizing off-screen objects.
Arrow-based techniques such as City Lights  place dashes or arrows at the edge of the screen to indicate the direction towards an off-screen location.
Halo  surrounds off-screen locations with rings just large enough to intrude onto the screen.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
In this paper, we present a visualization technique we call Wedge.
As suggested by the three triangles overlaid onto Figure 1b, wedges have the shape of an acute isosceles triangle.
Each wedge represents an off-screen location: the tip coincides with the off-screen target, and the two corners are located on screen.
A wedge conveys location awareness primarily through the two legs pointing towards the target.
This allows users to triangulate the target location.
Wedge therefore offers the same location functionality as Halo.
However, each wedge offers two additional degrees of freedom  and in combination with the layout algorithm we present in this paper, this allows the wedges to avoid each other and thus overlap and clutter.
In the following sections, we review related literature in visual workspaces and selection techniques.
We then present an experimental comparison between Wedge and Halo that found significant benefits for Wedge in terms of error rates and user preference.
Contextual views  are generally derived from fisheye techniques.
While traditional fisheye views typically convey a distorted, yet complete view of the periphery, contextual views tend to represent only objects of interest, represent these objects using abstract shapes , and then overlay these proxies onto screen space.
Consequently, these techniques can only be used if the semantic information about objects and locations is available, which may not always be the case.
Arrows pointing into off-screen space appear in a number of different contexts such as on maps, documents, and more commonly in games, such as Nintendo's 1990 small screen game Tecmo Bowl.
City Lights are "space-efficient fisheye techniques" .
Unlike its arrow-based predecessors, it also conveys the size of off-screen objects by projecting these objects onto the display window's edge, so that each off-screen object results in a line along the window border.
City Lights also offer an abstract and coarse representation of object distance by giving lines one of two colors, each representing a specific distance range.
EdgeRadar  extends on City Lights by improving its notion of distance.
EdgeRadar reserves a border along the screen edge to represent off-screen space.
Replacing City Light's color coding, EdgeRadar represents distances as distances by compressing them proportionally into the border.
EdgeRadar was shown to be useful for tracking moving objects .
All contextual view techniques have in common that they use a symbolic or distorted representation of distance.
In order to interpret distance, users therefore need a legend explaining how distance cues map to actual distance.
Overview+detail techniques present a miniature view of the entire workspace in a separate window.
The overview window can be displayed next to the detail view or as an overlapping inset window, while the main display shows a zoomed-in view.
Users move the detail view either by panning or by dragging a viewfinder in the overview.
Zoom lenses such as DragMag  may be considered overview+detail technique, except that the larger window shows the overview and the smaller inset window shows detail.
The representation of a document in an overview is typically produced by simple geometric zooming; some systems, however, use a special representation designed to preserve and highlight specific features .
Overview+detail views have been shown to be effective , but they impose additional cognitive processing on users by requiring them to reorient themselves when switching between views .
Additionally, overview windows require additional space, or, if overlaid onto the detail view, occlude part of the context in the main window.
Baudisch and Rosenholtz introduced Halo  to improve on the limited distance awareness of arrow-based techniques.
Unlike its predecessors, Halo does not attempt to convey location by conveying direction and distance--Halo instead conveys location directly using a partially-out-ofthe-frame approach, known in cinematography .
As a result, Halo's notion of distance is scale-independent and thereby overcomes the need for an explanation of any cueto-distance mapping.
Using a slightly different set of tasks, Burigat et al.
They reproduced Baudisch and Rosenholtz's finding that Halo improved performance when precise distance was required, and also found that scaled and stretched arrows were faster and more accurate than Halo in an off-screen target ordering task.
Techniques and applications that use Halo include Perspec-
Focus+context techniques such as fisheye views  eliminate the need for multiple windows by presenting a distorted view of the entire workspace.
They provide a smooth transition between an enlarged focus region and the surrounding context .
In a study conducted by Rohs and Essl, participants selected off-screen targets in a one-handed navigation task on handheld devices more efficiently when using Halo than when using zooming .
In the commercial world, Halo has been employed to show map objects on PDAs, and in the user interfaces of interactive applications, such as Second Life.
Two projects use oval halos to provide users with awareness of off-screen objects.
In an experimental system for panning and zooming large trees, Nekrasovski et al.
Hop uses oval halos in an attempt to reduce overlap and clutter .
However, the authors suggest that the distortion impacted distance awareness and that oval halos were not sufficiently accurate for locating objects offscreen.
Based on these insights, we discarded the oval approach and did not include it in our experimental comparison.
Several studies show that amodal completion occurs rapidly: from 100 msecs to 300 msecs .
Shore and Enns  have recently demonstrated that shape completion time also depends on the size of the occluded region.
Our design of Wedge reflects this by making the on-screen portion of a wedge sufficiently visible and proportional to the "occluded" off-screen portion.
The theoretical underpinning of both Halo and Wedge is the theory of amodal perception or amodal completion.
It suggests that the human visual system will complete parts of an object even when it is only partially visible .
Amodal perception is rooted in evolutionary and ecological adaptation of our visual system and allows humans to recognize partially occluded objects in their environment .
The ability to amodally complete objects works also for visual displays.
The image in Figure 2a, for example, triggers the perception of a circle occluded by a square.
As shown in Figure 3, each wedge consists of three line segments: two legs of equal length and one terminating line called the base.
The legs are the key element.
In order to locate the off-screen object referred to by a wedge, users visually trace the legs, extrapolate them across the display edge, and estimate where they intersect.
The intersection point is the location of the off-screen object.
The base connects the legs, which plays an equally important role.
On a screen with multiple wedges it is the bases that allow users to pair up legs, thus preventing users from tracing a pair of legs each of which belonging to a different wedge.
To function properly, the bases of two or more wedges should overlap as little as possible; we will explain how we prevent this from happening when we discuss the wedge layout algorithm.
The base may be a straight line as shown in Figure 3 or it can be an arc with its center point located at the off-screen location.
Both form factors have benefits and drawbacks.
The angles produced by the straight base can serve as an additional cue reinforcing distance.
The curved base, in contrast, offers a distance cue by means of circle completion, as introduced by Halo.
In the case of a curved base, however, vertex angles do not provide any additional cues, as they are always 90 degrees.
In the following sections, we focus on the straight base version; in the user study we used a curved base.
Gestaltists attribute object completion to our innate ability to identify complete objects or wholes out of parts .
Global models hypothesize that the perceptual system tends to adopt the most regular or symmetrical solutions   and might explain why halos are perceived as complete wholes based on a portion of their visible arcs.
Local models suggest that the visual system completes the occluded part by connecting the extension of the visible contours  .
In these models, good continuation and simplicity are the prevailing principles.
The design of Wedge is therefore based on local models.
Figure 6 illustrates the concept.
While we tend to think of legs as the first part of a line pointing towards the off-screen target, there is a certain amount of uncertainty about the angle.
As a result, the shape emerging from a leg is not a line, but a cone.
The intersection of the two beams is where the user would expect to find the off-screen target--this is the orbital.
In reality beams and orbitals have a fuzzy perimeter, but for the sake of simplicity we illustrate them as solids.
The size of the orbital depends on two factors: beam spread and intersection angle.
The three degrees of freedom of each wedge can be used for three different purposes: 1.
To avoid overlap with another wedge .
To resolve the overlap of the two wedges, we can either rotate the upper wedge upward , reduce its aperture , or reduce its intrusion .
To maximize the location accuracy communicated by the wedge.
The goal of each wedge is to allow users to accurately locate the respective off-screen targets.
A look at Figure 5 suggests that some of these wedges work better than others.
The thin wedge in Figure 5c, for example, might not work as well as the rotated wedge in Figure 5b.
The spread of each beam depends on the length of the leg it emerges from.
The same way that a rifle fires more accurately than a pistol, long legs  resulting from deeper intrusion result in thinner beams than the shorter legs of a wedge with shallow intrusion .
Note that the orbital of a wedge is infinite if the outside edges of the two beams diverge, as is the case in Figure 6b.
In this case a wedge provides users with an estimate of the minimum target distance, but not with an estimate for the maximum distance.
The angle under which the two beams intersect depends on the aperture separating the wedge legs.
Increasing the aperture of a wedge  generally leads to a larger angle, resulting in a shorter orbital.
Rotating a wedge decreases the spread of one beam at the expense of increasing the spread of the other.
This results in a skewed orbital .
To serve as an additional cue or proxy for distance.
Any of the three degrees of freedom can also be used to communicate a certain target property by convention, similar to how City Lights uses two colors to distinguish between two distance ranges.
An easily-interpreted distance cue is important for tasks not involving absolute distances, such as determining which of two targets is closer.
The primary goal of wedge design is to achieve maximum accuracy, which means to minimize orbital size.
On the other hand, it is clear that overlap and clutter have a huge affect on the readability of wedges, ultimately impacting accuracy more than any other factor.
When designing the wedge layout algorithm we therefore prioritize as follows:  avoiding overlap,  maximizing location accuracy, and  providing an additional distance cue.
This prioritization is not strict, since we must still provide a balance of the three goals described above.
This mapping serves as the primary cue for target distance.
The constants were the result of several pilot studies and balance orbital size and risk of overlap: larger apertures would have led to smaller orbitals, but at the expense of a significantly increased risk of overlap.
We considered three primary options for mapping distance to intrusion:  constant intrusion,  shorter intrusion for longer distances, and  longer intrusion for longer distances .
While constant intrusion led to increased overlap between wedge outlines , the other two mappings naturally reduced overlap.
These two mappings also had the potential to serve as an additional distance cue.
Screen corners have traditionally been a challenge for all contextual views because they represent a large proportion of off-screen space .
At the same time, they offer less space for the proxy representing the target.
The halo arc in the bottom left corner of Figure 1, for example, is cropped, reducing its accuracy substantially .
The additional degrees of freedom offered by wedges help alleviate this problem, yet this case still requires additional attention.
Wedges for extremely distant objects would be cropped by the edges of the screen when displayed in the corners.
To alleviate this, the leg length function increases the legs only up to 20 pixels.
If the new intrusion was still insufficient to show wedge legs, the algorithm would decrease the aperture to the point of making the wedge fit in the corner.
As a result of this, wedges always showed legs in the corners.
The distances used in the experiment were rarely large enough for this to occur.
As a positive side effect, it allowed us to nest wedges in some cases as shown in Figure 7c.
Rotation is the primary means of avoiding wedge overlap.
Figure 8 shows a cluster of wedges before and after resolving overlap using rotation.
Fortunately, rotation has little impact on intrusion and aperture, so it does not affect the distance cues conveyed by intrusion and aperture.
Rotation is computed using a simple iterative algorithm.
It is computationally inexpensive and offers real-time performance for maps with up five overlapping wedges.
Initially, wedges located along a screen edge are placed perpendicular to that edge.
If a wedge is near a corner, the algo-
Next, the algorithm iterates to resolve overlap.
In each step, the algorithm traverses all wedges on screen in clockwise order .
The algorithm rotates wedges away, by a small amount, from neighbors with which it overlaps.
This can propagate overlap to neighboring wedges and is resolved through repetition as shown in Figure 9.
If there is no solution the algorithm will terminate after a fixed number of iterations, leaving wedges with as little overlap as possible.
18 participants  between the ages of 18 and 30 were recruited from an undergraduate computer science program.
Participants were given course credit in exchange for their participation.
None of the participants were familiar with either Halo or Wedge, and all had normal or corrected-to-normal vision.
After the data was collected, two participants were removed due to extremely high error rates in all conditions, leaving 16 participants in the analysis.
We compared performance with two types of visualization: Halo and Wedge.
Halo was implemented using the original code written by Baudisch and Rosenholtz .
Wedge was implemented exactly as described above except that each wedge base was curved  instead of straight.
We controlled the total on-screen line length between the two conditions.
This was done by choosing functions for wedge aperture and leg length such that the overall average on-screen line length for every target used in the study were equal .
To explore whether overlap affects the visualizations, we tested two different organizations of targets.
In sparse conditions, the targets were organized such that there were minimal overlapping halos.
In dense conditions, the five targets were organized so that all of the on-screen visualizations were packed into a smaller area.
The sparse conditions were programmatically converted to dense conditions by folding the display  such that each target was placed onto the same side of the display at the exact position as they were on the other side.
As a result, the dense condition simulated the amount of clutter that would be equivalent to 20  or 10  off-screen objects.
This procedure ensured that sparse and dense maps were comparable.
The objective of the study was to compare the effectiveness of Wedge with the commonly used Halo.
We hypothesized that Wedge will be more accurate than Halo, primarily when they represent objects that get mapped to the corner of the display.
We were also interested in identifying the effects of each of these techniques in high density layouts.
The Locate task directly assessed the accuracy of each visualization, while the two other tasks were secondary tasks and looked at how the visualizations could be used in realistic problem solving.
The users clicked in the off-screen space at the expected location of the off-screen targets indicated by each of the two visualizations.
Users located targets in any order and the system automatically picked the closest match.
As "ambulance dispatcher," the user was to select the hospital farthest from traffic jams.
Each map contained indicators of five on- or off-screen traffic jams, and three blue cross-shaped icons representing hospitals.
Each map contained a blue car icon and five red wedges/arcs representing restaurants.
The user's task was to click on the halo/wedge corresponding to the off-screen location closest to the car.
The first task asked participants to click on the locations of the off-screen objects indicated by each wedge or halo on the screen.
We gathered data about error amount and completion time to locate each of the five targets.
The error amount was the Euclidian distance from the guessed position to the target's position.
Figure 11 shows the error amounts for Halo and Wedge in all conditions .
We carried out a 2x2x2 ANOVA  to test for differences.
As can be seen from Figure 11 larger errors were seen in corner trials  than in side trials .
There were also larger errors in dense configurations  than sparse configurations .
The overall difference between visualizations was about 10 pixels .
As shown in Figure 11, the difference between visualization types is considerably larger in corners than on the sides of the screen, which supports our hypothesis that the reduced space in corners causes additional problems for Halo interpretation.
The study used a 2x2x2 factorial design with three factors: * Visualization  * Density  * Position  Participants were shown the study system and were given a brief demonstration of both Halo and Wedge.
They then carried out the three tasks: there were four training maps at the start of the task, and then 16  or 32  test maps.
The order of tasks and display conditions were fully counterbalanced.
After the session, participants were asked to state which visualization type they preferred for each task.
The study system collected error and completion time data.
Subjective results reinforce these findings - Wedge was strongly preferred for the Locate and Avoid tasks, in which Halo has several problems and few advantages.
Overall, our results confirmed our hypotheses and show the benefits of the new visualization.
These benefits are more pronounced when off-screen objects are clustered into corners, where wedges allow users to triangulate the location of off-screen objects more precisely.
We believe that Wedge's overlap-avoidance algorithm aids users in determining direction and distance.
While we chose a bruteforce approach for the layout algorithm, we will soon look into using proper optimization techniques to fit and lay out the wedges in the limited display space.
To successfully complete these tasks, it appears that participants employ different strategies.
It is clear that for the Locate task, participants are extrapolating the full shape of the wedge and halo to locate the off-screen object.
In this task, we reason that the visual shape of the wedge more clearly shows the shape completion process needed to perform the Locate task.
In the case of the Avoid and Closest tasks, users have to rely primarily on distance cues.
As we see from our results, the distance cues in Wedge are as good as those provided by Halo, and in some cases even better.
In our algorithms we maintained the aperture of each wedge directly proportional to the distance of the target.
In future work we need to investigate the effects of variable aperture size and intrusion depths, particularly for objects in the corners.
We will also look at new designs that can better show large differences in distance, as Halo was able to do in the Closest task.
Based on the results of our study, we propose the following recommendations to designers: * Use Wedge.
Off-screen object information should be displayed using Wedge as the primary visualization technique: it offers significant improvements over Halo.
Designers should reduce overlap in any visualization of off-screen objects, as overlap leads to reduced accuracy and greater difficulty identifying objects.
None of our participants were concerned about the rotation of the wedges, although several comments were received about the difficulty of the overlapping Halos.
Therefore, we believe that rotation should be chosen over either cropping or overlap for off-screen visualizations.
Our results confirm that designers need to pay significant attention to the design of off-screen visualizations so that they work equally well in the display corners.
Designers need to strike a fine balance in selecting parameters for off-screen visualizations to avoid as much overlap as possible, maximize location accuracy and to serve as a cue to distance.
After the experiment the participants were asked to state which visualization they preferred for each task.
Table 3 summarizes the subjective preferences.
In the Locate and Avoid task there was a clear preference for Wedge; in the Closest task, however, Halo was preferred.
Comments made during the trial suggested reasons for the advantages for Wedge over Halo.
One user said, "I found that when the rings overlap it is almost impossible to tell which is the right ring.
And another stated, "overlapping rings made it very confusing at times.
Directional wedges helped a lot, and they also seem to take up less space.
More information meant less thinking with the wedges."
Participant's comments also provided some insight into the reasons why Halo was preferred for the Closest task - that the difference between distant and close off-screen objects was easier to determine with Halo, since there is a large visual difference in this case.
One participant stated that, "the sizes of the arcs did not require too much calculation or thinking to spot the smallest ring."
Our hypotheses were that Wedge would be more accurate than Halo, and that this effect would be stronger in corners.
The Locate task provides evidence in support of both hypotheses: accuracy with Wedge was significantly higher than Halo, and the difference was larger in corners.
We did not find any interaction between Visualization and Density for the Locate task, however; it appears that people can successfully tease out the level of overlap seen in our tasks, although we plan to study higher levels of clutter in future studies.
In the Avoid and Closest tasks where people had to make use of this accuracy, we did not find significant differences between Wedge and Halo .
Part of the reason for the lack of difference is that these tasks involved strategy more than the Locate task; therefore, it is possible that strategy choice overshadowed the beneficial effects of Wedge that were seen in the Locate task.
We introduced a new off-screen visualization technique, Wedge, which reduces the amount of overlap on the display.
We investigated the design space for this new technique; Wedge optimizes three valuable design principles that aid users in reducing interpretation costs and increasing accuracy.
The wedge layout algorithm was designed to strike a balance between multiple factors; i.e., avoid overlap, provide accurate location information, and provide good distance cues.
Wedge reduces clutter and is less prone to problems of corner-based clustering.
We carried out a study that showed significant accuracy advantages for the Wedge over the Halo; in addition, we found that Halo and Wedge provide equally good cues to distance information.
In future iterations of Wedge we will augment distance cues, and we will test the visualization with higher levels of clutter and other realistic tasks.
Overall, our results indicate that Wedge is a simple but effective off-screen visualization technique that can enhance the utility of any application that relies on it.
