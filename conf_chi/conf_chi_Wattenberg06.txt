This paper introduces PivotGraph, a software tool that uses a new technique for visualizing and analyzing graph structures.
The technique is designed specifically for graphs that are "multivariate," i.e., where each node is associated with several attributes.
Unlike visualizations which emphasize global graph topology, PivotGraph uses a simple grid-based approach to focus on the relationship between node attributes and connections.
The interaction technique is derived from an analogy with methods seen in spreadsheet pivot tables and in online analytical processing .
Finally, several examples are presented in which PivotGraph was applied to real-world data sets.
A common goal in exploratory data analysis is to form hypotheses about a graph.
In contexts ranging from social networks to Markov chains, it can be important to understand the properties of a graph and make inferences about why it looks the way it does.
Because of the complex structure and large size of many graphs, such an analysis can be difficult.
Visualization is one solution to this problem.
In one popular approach, nodes of a graph are represented by a dot, and edges by lines or curves linking them.
A second common approach is a matrix view, or density table, that displays a graph's adjacency matrix overlaid on a grid .
Both node-and-link diagrams and matrix views emphasize link structure.
For example, a graph where nodes represent people may be accompanied by details about each person's race, gender, and age.
Such attributes may be continuous  or discrete and categorical .
Such a structure will be called a multivariate graph in this paper.
Each property that a node might have  will be called a dimension of the graph.
This paper focuses specifically on visualizing multivariate graphs where the nodes have several discrete categorical dimensions.
Because multivariate graphs are so common in practice, many popular graph visualization tools  include ways of displaying them.
The most common technique is to use a standard node-and-link layout but to draw nodes differently based on their values; often attribute values are associated with different colors or shapes.
A second method is to use a matrix view, and to group the positions of nodes on the axes based on their values in one or more dimensions.
Although both techniques are natural extensions of familiar displays, each has drawbacks.
Colored node-and-link diagrams are poor for quantitative comparisons between groups.
Answering a question such as "who has more connections, men or women?"
For an analyst who wishes to see the interaction between two variables--e.g., how race affects patterns of communication between genders--matrix views quickly become unwieldy since the axes must be sorted on two variables at once.
This paper presents a software tool called PivotGraph that makes multidimensional comparisons straightforward.
The technique introduced in PivotGraph has the potential to be an effective complement to traditional graph topology diagrams.
It may be of interest to the HCI community both as a new visualization and interaction technique, and as a practical tool for those who wish to analyze graphs.
Section 2 describes the basic method used in PivotGraph along with motivation and related work.
Section 3 describes the software itself along with a detailed discussion of the design rationale.
Section 4 describes a series of three pilots in which the software was tested by subject-matter experts on real-world data sets they had previously analyzed, to see whether they found patterns they had previously missed.
Section 5 discusses a set of natural extensions and future research directions.
The classic example of a data cube is a collection of sales transactions where each sale is associated with a product, a store, a salesperson, and so on.
OLAP has two key reporting operations.
The first is roll-up, a summarization query of the form "Show me total sales of each product" or "Show me total sales for each product/store combination."
The second is selection, where a user can ask for information on a subset of items; typically selections are combined with roll-ups in queries such as "Show me the total sales of product X at each store."
Users who are more familiar with spreadsheets than databases may recognize these as the same techniques used in a pivot table.
One of the benefits of roll-up and selection operations is that they reduce the number of dimensions of a data set.
A natural question is whether similar techniques could be used to transform a large multivariate graph into a simpler summary graph that is easy to visualize and manipulate.
In fact, it is straightforward to apply the OLAP operations to multivariate graphs; the nodes already form a data cube, and there is a natural extension for edges.
This generalization is described below.
Roll-up of a simple social network on "gender" dimension.
Numbers indicate weights of edges and sizes of nodes.
The graph-theoretic analogue of the roll-up operation is a combination of classical node aggregation and edge contraction techniques.
Informally, to roll up a graph on a set of dimensions, one simply aggregates all nodes that have the same values on each of those dimensions, and aggregate edges accordingly.
Divide the nodes of G into a set of n equivalence classes S={S1, S2, ...., Sn} where two nodes are equivalent if they have same value on each dimension in D. For 1i n, define a node Ni of RD, with the size of Ni set to the sum of the sizes of nodes in Si.
Finally, for 1j n, RD is defined to have an edge between Ni and Nj if i  j, and there are any edges in G between the nodes in Si and Sj.
The weight of the edge between Ni and Nj will be the sum of the weights of all edges between nodes in Si and Sj.
An analogue of selection is a simpler operation that results an induced subgraph .
The idea is to take a subset of the original graph whose nodes have specified values on a particular set of dimensions.
Figure 3 gives an example; formally, for a set of m dimensions D={D1, ..., Dm} and m values {V1, ..., Vm}, the nodes of selection graph SD,V are all the nodes N of G such that Di=Vi for each 1i m. The edges of SD,V are all edges of G that connect nodes of SD,V.
Node-and-link diagram versus PivotGraph The two types of diagrams have different strengths.
While the node-and-link diagram makes the topology clear, the PivotGraph diagram makes it immediately obvious that there are connections between all gender/division pairs, with the exception of men and women in division 2.
The PivotGraph diagram uses circle size and line thickness to show node sizes and edge weights, allowing quantitative comparisons and conveying a sense of salience of nodes and edges.
Although the combination of a grid-based layout with these OLAP-style operations is new, the PivotGraph technique is related to several streams of previous work.
Aggregation of nodes and edges according to various criteria is a well-known technique for simplifying complex graphs , and there has been recent work on the idea of letting the user dynamically control the level of detail by aggregating based on topological criteria .
Systems such as Pajek , Tulip  and the InfoVis Toolkit  also have some degree of support for such computations.
Many social network analysis tools allow some form of selection  and some packages, such as NetMiner  and InFlow  can compute roll-ups on a single dimension.
The idea of placing nodes according to their properties  appeared in the work of Fekete and Wang .
Instead of working with a grid, however, they used a treemap to lay out nodes taking values in a hierarchy.
NetDraw  has a layout option based on node attributes but does not perform a roll-up operation.
PivotGraph is not the first visualization technique to depend on the OLAP paradigm.
The Polaris system , which led to the commercial Tableau product , has a sophisticated framework for visualizing traditional data cubes, although they do not treat graph-based data.
Finally, when rolled-up on one dimension, the PivotGraph layout is reminiscent of both the ThreadArcs visualization used for email threads in  and Arc Diagrams .
The roll-up and selection transformations both simplify a graph by removing dimensions from consideration, and in the process they typically reduce the number of nodes and edges as well.
As discussed above, one of the motivations for using them here is that simplifying a graph to fewer dimensions makes it easier to visualize.
In particular, once a graph has been reduced to two dimensions, D1 and D2, it has a natural scatterplot-like layout.
Each value of D1 is assigned a position on the x-axis, and each value of D2 is assigned a position on the y-axis.
Then a given node in G is assigned x and y coordinates based on its values on dimensions D1 and D2.
Figure 4 shows an example of this method.
At left is a standard node and link diagram showing an undirected social network where nodes are classified by gender  and company division .
At right is a scatterplot-style "PivotGraph diagram", based on a roll-up on the gender and division dimensions.
Note that in the roll-up view, node size corresponds to the number of nodes being aggregated, and edge thickness corresponds to the number of edges being aggregated.
This section describes the PivotGraph software that allows users to interactively explore roll-ups and selections of multivariate graphs.
PivotGraph is a desktop application written in Java.
See Figure 5 for a screenshot.
The PivotGraph interface has three components.
A traditional menu bar lets users handle files and change various viewing parameters.
At the left is a panel with three parts: two drop-down menus to determine roll-up dimensions for the x- and y-axes; a legend; and a set of drop-down menus, one for each dimension, that allow the user to specify selection parameters.
Finally, the bulk of the screen is devoted to the graph visualization itself.
The screenshot shows an anonymized view of a real social network within a corporation.
Nodes in the graph represent people, and edges represent communication.
The graph is rolled up by gender  and office location .
Several patterns can be seen in the visualization.
There is a large amount of crossgender communication in Location B, for example, but very little elsewhere.
Men in Location B seem to be especially central, with women in locations C, D, and E communicating more with them than with men in their own locations.
The node sizes provide an indication of how many men and women are at each location, and it is easy to see that in the graph one location  has only men.
Although the basic idea of the scatterplot representation described in the previous section is simple, it turns out there are a number of subtle challenges that need to be addressed for the visualization to remain legible.
Before diving into the details, it may be helpful to describe the data shown in Figure 5, which is a good example of the Figure 5.
Screenshot of PivotGraph in action.
Each node is represented by a circle whose x- and ycoordinates are determined by the current roll-up dimensions.
The area of each circle is proportional to the size variable of the node.
In an early version of the program, the sequence of dimension values on the axes was determined simply by alphabetical ordering.
A second version of the program rearranged the order of the values to create a more meaningful use of space.
As with direct-manipulation analysis tools such as Spotfire , the ability to rapidly modify views and drill down for details enhances the power of the underlying visualizations.
A critical aspect of the interactivity of PivotGraph is animation of the transitions when the user changes roll-up axes.
Instead of flipping directly from one roll-up to another, an animation smoothly interpolates between the two roll-ups.
Because usage of PivotGraph often involves moving between several different views, keeping a sense of orientation is a high priority.
The transitions were designed to clarify the action of switching roll-up dimensions by providing users with the sense that they are smoothly navigating through a unified information space.
Both informally and in the pilot tests described below, users were extremely enthusiastic about this feature.
The technical implementation of the transitions is not completely straightforward.
One issue is that to interpolate between two different 2-dimensional roll-ups can require an intermediate representation showing a roll-up of 3 or 4 dimensions .
For instance, consider a graph G with three dimensions A, B, and C. If A and B are the current axis dimensions, and the user switches to showing A and C, perform the following steps: 1.
Calculate a transitional graph T by rolling up G on .
Display T by choosing coordinates for nodes based on the dimensions A and B.
Use linear interpolation to animate to a view of T where coordinates of nodes are based on dimensions A and C. Switch to a view of the graph created by rolling up onto A and C alone.
A one-dimensional layout Edges are drawn between nodes, with widths corresponding to their weights.
When the edges are directed, they are given arrowheads.
Because of the grid structure of the graph layout, straight edges would almost always have serious occlusion problems.
To avoid this, the program draws the edges as quadratic curves with a slight bend.
In a one-dimensional roll-up, where all nodes are in a line, the bend angle is increased.
When the edges are drawn, they are rendered in order from thinnest to thickest, so that the largest  edges are less likely to be occluded.
Both nodes and edges are color-coded.
The nodes can be colored according to any quantitative attribute; this could correspond either to measured data  or derived statistics .
In theory the color could be tied to any measurement, just as for nodes, but in practice it seems that one particular is especially useful.
In this color scheme, darkness indicates the ratio of the weight of a directed edge to the size of the originating node.
With many data sets this statistic turns out to correspond to an intuitive notion of salience.
For example, in a graph that is formed by rolling up an initial graph of equally weighted nodes and equally weighted edges, this statistic describes the average number of edges per originating node.
In comparisons that involve two dimensions, and where the rolled-up nodes have different sizes, this normalized statistic can be critical.
PivotGraph allows several types of interactions, which are an integral part of the system.
The user can choose roll-up dimensions for the x- and y-axes from drop-down menus, and use drop-downs to make a graph selection.
Currently roll-ups are limited to two dimensions, but selections can be defined on any number of attributes.
As roll-up and selection parameters are chosen, the visualization changes immediately in response.
Because there can potentially be hundreds of edges, each one of which is a complex path of lines and quadratic curves, maintaining a reasonable frame rate  and visual simplicity requires some compromises.
First, during the animation the edges are drawn without anti-aliasing.
Second, and more important, is that the thinnest edges are not rendered during the transition.
It turns out that drawing just a few of the most prominent edges is enough to maintain a sense of orientation and continuity.
Figure 4 shows a very simple comparison of PivotGraph with a node-and-link diagram.
One might also ask how PivotGraph compares to an analogous matrix view.
As described in , a matrix view of a graph with n nodes displays an n x n grid, with the cell at  colored to show the strength of the connection between node i and node j. Matrix views allow a comprehensive view of all individual connections and it has been recently suggested that for some tasks they outperform node-and-link views .
To form a matrix view of a graph rolled up on two dimensions, one typically sorts the nodes by value on the first dimension and then, for nodes with the same value, sorts by the value on the second dimension as a tie-breaker.
Figure 7 shows such a matrix view of a synthetic graph rolled up on dimensions of "color" and "taste."
Figure 8 shows the PivotGraph view of the same data.
While the matrix view could be helpful to an experienced user, its emphasis on the first sort dimension  hides some information.
For example, in both figures it is easy to see that there are no connections between "green" nodes.
On the other hand, in the PivotGraph view it is equally easy to see no "sour" nodes are connected, while the matrix view makes this fact somewhat obscure.
Thus for inspecting certain relations on two dimensions at once, the PivotGraph view may be preferable.
Although this paper argues that PivotGraph represents a useful tool, the technique has some limitations in scope that should be noted.
In particular, several aspects of graph topology are not preserved under roll-up and selection transformations.
For example, after roll-up a disconnected graph may become connected and an acyclic graph may become cyclic.
Selection can also change global properties such as connectedness.
Thus a traditional node-and-link diagram is preferable when analyzing topological properties.
PivotGraph diagrams cannot replace traditional methods, but rather should be used alongside them as a complementary technology.
A second limitation comes from the method of ordering category values on the axes.
The technique described above does not always produce perfect results, and can potentially be slow for very large graphs.
As described in the pilot usage below, it may be desirable to allow users to change the ordering by hand.
A final restriction is that PivotGraph can use at most two dimensions for coordinates.
This does not mean, however, that it is limited to analysis of effects that involve one or two variables.
More complex effects can be explored through use of the selection operator and by interactively changing the choice of roll-up axes.
In this way PivotGraph is analogous to a tool like Spotfire, in which the user manipulates a 2D scatterplot view on high-dimensional data.
The section on future directions discusses potential techniques for displaying additional dimensions directly.
In each case, the users had employed other sophisticated tools for previous analyses.
Since the goal of PivotGraph is to help users find new patterns and spot undiscovered features of graph data, one test of its value was to watch experts analyze familiar data to see if they would find previously unknown facts and patterns.
For each of the three pilots, each analyst was given a copy of the program which automatically loaded their data.
The author then engaged in a semi-structured interview in which the program was first described, and then the analyst was asked to spend some time using it while they explained what they were looking for and what patterns they were finding.
In each pilot a subject found patterns which they had not been aware of before.
All users reported a positive response to the tool; while this is potentially due to a novelty effect or desire to please the interviewer, in several cases users took actions that backed up their reports.
Specifics are below, although names have been changed and details have been removed for reasons of privacy and confidentiality.
The initial motivation for the creation of PivotGraph came from a project that involved analysis of a transition matrix consisting of 521 states  and 2,671 transition probabilities .
Each state had four associated categorical attributes.
The group studying this data had worked with it for several months and used custom-built database reporting and charting tools for viewing and analysis.
In conversations with the author they expressed interest in having a new way of visualizing the data.
The first version of PivotGraph was created in response to this interest.
Three of the people on the project ran PivotGraph: Allen, a computer scientist; Deanna, a software developer, and Bob, a senior executive.
Bob, the executive, began trying different x- and y-axis combinations as soon as he was shown the tool.
He pointed to several cross-variable trends, including one he termed "weird and interesting."
Bob said he had not previously spotted any of these patterns, despite having "stared" at the data before, and said he definitely wanted to use the program again.
During the session Bob continued to change the view configuration and made several positive comments on the animated transitions.
Deanna, the developer, said that she saw "totally different" patterns in the data than she had seen before.
As the keeper of the database that contained the transition information, she had spent a significant amount of time handling the data.
Like Bob, she made many cross-variable comparisons.
She too said she would like to use the program again.
When Allen, the computer scientist, began using PivotGraph, he quickly pointed to a series of anomalous transitions.
Liz, a social network analyst and researcher, had recently analyzed data on communication patterns in a community of 146 people within a large company.
Each person in the community was classified on five dimensions, such as corporate division and geographic location.
The network had directed edges, with an edge from person A to person B meaning that person A had reported communicating recently with person B. Liz used both UCINet/NetDraw  and Microsoft Excel to study the data.
An anonymized screenshot of one view of her data in PivotGraph is shown in Figure 10.
Communication network of people in a large company.
X-axis is division, y-axis is office geography.
The division in the leftmost column has far more cross-location communication than the others.
As with other users, when using PivotGraph she pointed out one and two-variable comparisons as she used the software.
Inspecting a roll-up on the company division variable, she said, "There is more communication between Division X and Division Y than between Division X and Division Z."
She also pointed to examples of communication asymmetry which she said she had not noticed in previous analyses.
She compared the tool favorably to sorted matrix views which she had also tried, but which required "hunting" to make these comparisons.
She also pointed to the varying widths of the edges--in particular, the very small widths of low-weight edges--as helpful for keeping the graph relatively uncluttered.
Liz said she like the fact that the program could automatically aggregate nodes, since she had sometimes done this by hand in NetDraw.
One unexpected aspect of Liz's use of the tool was to roll up her graph on two variables, A and B, and then use the selection menus to cycle through values of A, allowing her to rapidly switch focus between different one-dimensional slices.
Liz also suggested some additional features for the program.
She pointed out that it would be helpful to have an option to manually remove certain distracting nodes.
She also noted that the automatic axis ordering occasionally interfered with the natural ordering of an axis, and asked for a manual override of this feature.
All pointed to the ability to make comparisons across variables as an important feature, and all exploited the interactivity to look at many different views of the data.
The pilot tests made certain limitations clear as well.
In particular, several users noted that PivotGraph would be best as a complement, rather than a replacement, for current tools due to its emphasis on aggregate values and lack of support for viewing graph topology.
The PivotGraph technique lends itself to a number of interesting potential extensions.
Several users have suggested that it would be helpful to compare more than two dimensions at once.
An obvious method to try would be a 3D representation, in which the z-axis could correspond to a third categorical property.
Some initial experimentation indicates that labeling and occlusion will present difficult challenges, but they may well be solvable.
It may also be possible to present extra dimensions of data by drawing several graph diagrams at once, following Tufte's "small multiples" concept .
The PivotGraph approach has a certain inherent scalability because it relies on summarizing graphs.
A graph with a 1,000,000 nodes can be visually tractable when rolled up on just two categories with a small number of values each.
Performance in summarization may still be an issue, however.
When there are many possible categories, it might be helpful if the computer could recommend particular combinations--a kind of graph-based projection pursuit.
In addition, with more complex data sets, sophisticated dynamic query interfaces may be needed.
Another natural direction is to visualize other types of attributes.
This paper has focused on discrete-valued dimensions, but it would be interesting to investigate extensions to dimensions with continuous values; the challenge here is that projection onto real-valued dimensions is much less likely to create a simplified graph with a reduced number of nodes and edges.
It would also be helpful to display graphs in which edges are multivariate as well as nodes.
In our experience graphs with multivariate edges are somewhat less common in practice than ones with multivariate nodes, but they do arise.
In social network analysis, for instance, it is often helpful to characterize the relationships between people along several dimensions.
Extending the pivot mechanism to edge types as well as node types poses interesting visualization and interaction challenges.
Michael, an organizational change consultant, offered to share anonymized data from an engagement with a company that had recently undergone a merger.
The data described communication patterns among employees of the company, with each employee classified according to five different dimensions .
Michael had previously used InFlow  to study the data.
Using PivotGraph, Michael made comparisons involving different patterns of communication between men and women, which he said he found particularly interesting.
He said his favorite way to use the tool was to keep one axis tied to a given variable and skip between other variables on the other axis.
Michael had not previously used a tool that automatically aggregated nodes on multiple dimensions.
He said that this made the tool unsuitable for some analyses, but that it would provide new insights on intergroup dynamics.
He indicated he would like to use the program again; it turned out that he was sufficiently motivated to do so that he wrote a custom data converter to transform his InFlow data into a format readable by PivotGraph.
These views are designed for generating hypotheses about how connections relate to multiple attributes.
Early tests with expert analysts suggest that the visualizations in PivotGraph may provide a different perspective from traditional graph visualization tools, which could potentially help people find previously unnoticed patterns.
Finally, this paper has outlined a number of promising directions for future research that build on the simple data and interaction model used by PivotGraph.
Freeman, L. Visualizing Social Networks.
A Comparison of the Readability of Graphs Using NodeLink and Matrix-Based Representations.
IEEE Symposium on Information Visualization .
Gray, J., Bosworth, A., Layman, A., and Pirahesh, H.: Data Cube: A Relational Aggregation Operator Generalizing Group-By, Cross-Tab, and Sub-Total.
13. van Ham, F. and van Wijk, J. Interactive Visualization of Small World Graphs.
IEEE Symposium on Information Visualization .
Herman, I., G. Melancon, M. Scott Marshall.
Graph Visualization and Navigation in Information Visualization: A Survey.
Kaufmann, M. and D. Wagner, Eds.
Drawing Graphs, Methods and Models.
Lecture Notes in Computer Science, Springer.
IEEE Symposium on Information Visualization  17.
Stolte, C., Tang, D. and Hanrahan, P. Polaris: A System for Query, Analysis and Visualization of Multidimensional Relational Databases.
IEEE Transactions on Visualization and Computer Graphics, Vol.
Methods for Understanding Hierarchical System Structures.
Wattenberg, M. Arc Diagrams: Visualizing Structure in Strings, IEEE Symposium on Information Visualization .
The PivotGraph system has benefited from the design suggestions and help of many people: Li-Te Cheng, Kate Ehrlich, Dan Forno, Deepika Kakrania, Michael Martin, John Patterson, and Mark Squillante.
This paper has been improved greatly by comments from Steve Rohall, Fernanda Viegas, and the anonymous referees.
Auber, D. Tulip: A Huge Graph Visualisation Framework.
In P. Mutzel and M. Junger, eds., Graph Drawing Software, Mathematics and Visualization, Springer-Verlag, 2003.
Batagelj, V., and Mrvar, A. Pajek - Analysis and Visualization of Large Networks.
In P. Mutzel and M. Junger, eds., Graph Drawing Software, Mathematics and Visualization, Springer-Verlag, 2003.
Graph Drawing: Algorithms for the Visualisation of Graphs, Prentice Hall.
IEEE Transactions on Visualization and Computer Graphics, 1 .
Ucinet for Windows: Software for Social Network Analysis.
Fekete J.-D., The InfoVis Toolkit, IEEE Symposium on Information Visualization , 9.
Overlaying Graph Links on Treemaps.
