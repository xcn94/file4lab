Interface guidelines encourage designers to include shortcut mechanisms that enable high levels of expert performance, but prior research has demonstrated that few users switch to using them.
To help understand how interfaces can better support a transition to expert performance we develop a framework of the interface and human factors influencing expertise development.
We then present a system called Blur that addresses three main problems in promoting the transition: prompting an initial switch to expert techniques, minimising the performance dip arising from the switch, and enabling a high performance ceiling.
Blur observes the users interaction with unaltered desktop applications and uses calm notification to support learning and promote awareness of an alternative hot command interface.
An empirical study validates Blurs design, showing that users make an early and sustained switch to hot commands, and that doing so improves their performance and satisfaction.
Conversely, interfaces designed for experts  allow high performance ceilings, but only after extensive training.
Although it is clear that these expert interfaces can provide performance advantages , their success in practice has been limited, and several researchers have reported that users fail to switch to expert interface methods .
Furthermore, while there has been considerable research into interfaces for either novices or experts, there has been relatively little on the transition to expertise.
We therefore form a framework encapsulating the factors influencing expertise development, with a focus on those affecting the switch to expert interface mechanisms.
These factors include lack of knowledge about the availability or the performance benefits of the alternative UI; concern about the time or effort required to make the switch; the prevalence of satisficing , in which good enough strategies are maintained; and fears about the drop in performance that can occur because the user must start from scratch with the new interface.
This drop in performance  is particularly important, because it can deter switching in the first place, but also because it negatively affects the users first impressions.
The framework suggests that any system attempting to support a switch to expert interface mechanisms should have three goals: first, maximize the likelihood that the user will initiate a switch to the expert modality; second, minimize the cost of doing so; and third, enable a high performance ceiling to rapidly reward use.
To investigate supporting these goals, we have developed a new system  that uses calm notification and hot commands to support a transition from WIMP interaction to a more efficient command-based interface.
Through calm notifications, Blur provides an immediate and bidirectional translation between WIMP and command line  methods - WIMP inputs are immediately displayed as equivalent CLI outputs, promoting learning and awareness of the CLI.
Through the hot commands mechanism, Blur enables CLI control of the interface without altering the underlying GUI, thereby supporting gradual exploration of the CLI without requiring users to completely abandon use of familiar WIMP interaction.
Windows, Icons, Menus, Pointer  interfaces mediate most communication between humans and computers.
Their success is partly due to their natural support for novice users - the phrase see and point versus learn and remember  describes how novices benefit from using visual search for salient controls, rather than retrieving command names from memory or manuals.
However, the very mechanisms that make WIMPs effective for novices fail to support users as they become more experienced, and they can trap users in a beginner mode of interaction that has a low performance ceiling.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
We carried out a study using repetitive tasks in PowerPoint to see how well Blur supports users transition to the expert CLI.
Results showed that Blur supported users transition to the expert interface much better than standard shortcut keys - all 20 participants switched to Blur within the first three trials, whereas none switched to built-in Alt-shortcuts.
The study also showed that Blurs performance dip was small and that its ultimate efficiency was faster than the WIMP and shortcut interfaces.
Blur demonstrates a general and reproducible strategy for supporting users transition from a WIMP interface to a CLI-style interface.
Blur provides both a mechanism for learning and promoting the expert interface while the user carries out WIMP actions, and a means for allowing gradual exploration and adoption of the higher-performance CLI interaction.
Specifically, we make three contributions on expertise development:  A framework of issues influencing expertise development within and across interface mechanisms.
Design of Blur, which promotes the transition to expert interaction through calm notification and hot commands.
Empirical evidence demonstrating Blurs success.
Many interfaces, however, support more than one interaction mode for the same task.
For our purposes modes are distinguished by the interaction mechanics used to control the interface.
Our framework characterises intermodal expertise development by combining two power law curves .
This characterisation postulates that users are likely to suffer a performance dip when switching to a new modality, even if it offers a higher ultimate performance ceiling.
For example, a user who frequently uses the bulleted lists toolbar item may decide to learn the keyboard shortcut, spending time to determine, memorise, and make autonomous its key sequence.
While the curve characterises the users actual performance when switching modalities, the users perception of future performance critically influences whether the modality switch is made - if users perceive that an interface will be hard to learn, temporarily slow, or ultimately inefficient they will ignore it, and thus never attain the high performance ceiling it actually enables.
Figure 2 summarises the properties of the intra and intermodal performance curves, and the interface and human factors affecting them, which are described in the following sections.
The right hand side of Figure 2 also shows the techniques that our system, called Blur, uses to influence expertise development.
We describe Blur and its relationship to the framework later in the paper.
Learnability is consistently identified as a critical component of usability , but as Grossman et al.
However, evaluation methodologies are applied after an interface has been designed, and current best-practice guidelines for supporting expertise are often high level generalisations, such as provide shortcuts  that provide little direct guidance or insight into underlying design issues.
This section presents a framework of the interface and human factors influencing expertise development.
Our focus is on issues of how interfaces can support users transition to expertise, rather than on fundamental issues in human skill acquisition and strategic thinking; see  for a review of human skill acquisition and  for an analysis of the development of expert interaction strategies.
The framework adapts Newell and Rosenblooms  power law of practice, using it as a qualitative guideline for characterisation, rather than a mathematical model.
We use the power curve shown on the left side of Figure 1 to characterise intramodal expertise development: how user performance improves over time with a single interaction modality, subdividing the curve into three segments for initial performance, extended learnability, and ultimate performance.
However, explicitly manipulating the effort of interaction is risky as users are prone to frustration when training is too difficult and boredom when activities are mundane.
Incidental learning to extend vocabulary.
Psychology literature also suggests that users should learn interface components as a side effect of their display while using other components.
Shelton  showed that subjects memory in a paired-associate learning task was improved simply by prior exposure to the stimuli.
Jones  therefore hypothesised that hypertext browsing would result in greater incidental learning than indexed search , but experiments failed to find significant differences.
Mappings and metaphors  promote initial interface familiarity, but supporting such mappings in command languages is difficult because of the variability in words used to describe actions .
In hotkey assignment creating meaningful mappings is further complicated by the limited expressive capacity of the input language: once P is assigned to Print, for example, Paste, Previous, etc., must be assigned additional modifier keys or less symbolic letters.
Visibility and `ready to hand'.
The notion that controls should be visible to be learned is also well expressed in most usability guidelines, but the corollary of making novice things visible is that expert things are often suppressed, reducing the likelihood that they will be discovered.
A related concept is that appropriate interface controls should be ready to hand , where controls and feedback are available for use but not obstructing task completion.
Size of the command set.
Large command vocabularies are likely to take longer to learn than small ones.
Carroll and Carrithers  exploited this effect with their Training Wheels interfaces, which intentionally reduced the vocabulary size to aid learning.
Related ideas were recently pursued with multi-layer interfaces .
The final characteristic of the intramodal curve is the asymptote, or performance ceiling.
There is extensive literature on supporting and understanding expert interface performance .
In particular, the seminal work of Card, Moran and Newell  provides strong predictive models and empirical evidence of expert performance of routine tasks, including analysis of one user who repeated the same editing task thousands of times to study progression to automaticity.
Five interface characteristics for high performance ceilings follow: Flat command structures.
GUIs typically contain more controls than can be easily displayed at once, necessitating interface partitions such as windows, tabs, and menu hierarchies.
Navigating through these partitions takes time, and consequently there are potential performance benefits in flattening the command structure to make more items accessible at once.
Several research and commercial systems have used CLIs to improve interface performance: e.g., Quicksilver 1, Spotlight2, Enso3, and GEKA .
Powerful interfaces communicate a lot of meaning in rapidly expressed actions.
For example, a single alphabetic character can discriminate 26 commands, or 52 with case sensitivity; increasing to 2704 with two case-sensitive characters.
However, there is often a tension between supporting terse, expressive power and meaningful mappings: for example, Alt-shortcuts in Office 2007 allow access to most controls, but they are abstract and hard to remember .
Several factors influence the rate at which performance increases after initial familiarisation.
Our review focuses on interface techniques that improve the efficacy of recall and on assisting users in establishing a good vocabulary.
Psychology researchers have proposed that "deeper" cognitions, which take longer to process,
Users interactive behaviour is often repetitive , and interfaces can aid efficiency by explicitly supporting repetition.
Despite the desirability of spatial stability it is often compromised due to display space constraints - interface controls are often elided and repositioned as window geometry is manipulated, and this is necessary because widgets typically do not scale.
There are interesting design opportunities in spatially stable interfaces that dynamically scale widgets.
A final property of high performance interfaces is that they help the user focus on their primary activity, which typically involves their data.
WIMPs rely on visual presentation, which consumes screen real-estate that might otherwise be used for data.
This is critical on small devices, such as Netbook computers.
For example, the window border, Ribbon, ruler and foot controls in Office 2007 applications consume approximately 195 vertical pixels, and the default Windows 7 Taskbar consumes another 30, for a sum of 225 pixels, which is 38% of a 600 pixel Netbook.
Satisficing and optimising for immediate needs.
The notion that users have a tendency to maintain existing strategies and use what is known and ready to hand in preference to new and improved ways of working is encapsulated by several theories, including Simons satisficing  and Maslows hammer  .
In HCI, Carroll and Rossen  named the effect the paradox of the active user , in which users "are likely to stick with the procedures they already know, regardless of their efficacy".
Incidental learning, as described with the intramodal factors, can also be used to promote learning across modalities by exposing users to alternative ways of achieving their tasks as a side effect of their interactions.
More forcefully, interfaces can demand that users experience the new modality by requiring that actions are completed through it.
Grossman  experimented with a variety of schemes for assisting hotkey learning.
These included visual and audio schemes to expose users to the hotkeys, a delay-based technique to deter use of the GUI , and a technique that forced hotkey use following each menu selection.
Their results showed that forced use and audio feedback worked well, with 72.8% and 66.6% of experimental selections being made with hotkeys.
Subjective data showed no significant adverse response to the audio and forced use.
One concern for hotkey strategies, though, is that Grossmans results suggest that users may only be able to learn a small hotkey vocabulary.
In their experiment 73% of selections could be completed using six hotkeys, and 83% with eight, yet the participants mean use was less than 73%.
Current desktop applications support hundreds of commands, and it is unclear how well audio feedback or enforced use can work in practice.
Compared to the extensive literature on intramodal expertise development, there has been much less on the factors influencing whether, how, and when users switch from novice to expert mechanisms.
Note, our analysis does not review end-user programming  or interface customisation , which raise their own challenges ; although some of the factors identified below are applicable.
In the following analysis, we address three critical points on the intermodal performance curve shown in Figure 1: first, factors influencing the initial switch to a new interface modality; second, the performance dip that a user is likely to experience when switching from a familiar interface to an unfamiliar one; and third, factors influencing the maintenance of the new modality.
The size of the performance dip that occurs after switching to a new interface modality will be influenced by the magnitude of the semantic and syntactic differences between the pre- and post-switch interfaces.
Interface semantics determine the interface and data states that can be attained with the interface.
Frequently, these states differ across modalities, with one modality supporting a subset of the other.
For example, it is common for only a subset of controls to be accessible via hotkeys.
Semantic differences are likely to discourage users from investigating secondary modalities as the effort invested in seeking new facilities may go unrewarded  or require formation of a new model .
Perception of the new modality.
As Figure 2 shows, the probability of switching to a new modality is likely to be influenced by how the user perceives any future interaction with the new modality, so all of the intramodal factors described above play a role.
Interface syntax is determined by the mechanics of control and the manner in which control elements are combined.
Marking menus  are an excellent example of promoting expertise by minimising the syntactic differences between novice and expert interaction modes.
Their commands are arranged radially around the cursor, like segments of a pie.
Novices attend the visual feedback and learn the dragrelease movement directions for specific selections, such as print is East.
Experts, however, can use precisely the same interface syntax  to select items without need for visual feedback.
Figure 4 shows Blurs feedback  after clicking the button in Microsoft Word.
After one second, the transparent window gradually contracts back to its tab state.
Blurs window can be clicked through, allowing continued manipulation of the underlying GUI while Blur is visible.
Controlling interfaces with Blur's hot commands.
Blur allows users to control the focal application, launch new applications, and manipulate windows using typed CLI hot commands.
The user presses the Escape key to display Blurs translucent window, and command recommendations are shown in response to each successive typed letter.
Whether users continue to use a new modality after making an initial switch depends on the magnitude of the performance dip they encounter and on their perception of their future performance with the modality, including how quickly they expect to outperform the original modality, and their estimation of their ultimate performance ceiling.
These issues primarily depend on intramodal issues, described earlier, as shown in Figure 2.
The framework highlights three main challenges that Blur aims to address in assisting users to make a transition to expert interaction: promote an initial switch, minimise the dip in performance, and enable a high performance ceiling.
Figure 2 shows how Blurs two main features of calm notification and hot commands  are designed to map onto these components of the framework.
Blurs calm notification provides transitory feedback revealing the command name that is equivalent to each mouse initiated action.
Calm notification is primarily intended to reduce the tendency to satisfice and to promote an initial intermodal switch to Blurs hot commands.
However as Figure 2 shows we also intend that it will provide a visually salient and continual reminder of the availability of the hot command alternative, as well as supporting incidental learning of the hot commands.
Importantly, we also intend that calm notification will help users identify that there is a one-to-one correspondence between each WIMP action and each hot command.
This means that the users mental model of interaction is largely unaffected by the transition between interface modalities.
In other words, Blurs hot command interface does not change the structural decomposition of tasks into interface actions, and calm notification is the mechanism to communicate this absence of change to the user.
This consistency is intended to minimise the performance dip associated with switching to Blurs hot commands.
Blur observes and controls interactions with unaltered desktop applications on Microsoft Windows platforms.
Blur's calm notification feedback during WIMP use.
As Figure 2 shows, Blurs hot commands are primarily designed to support a high performance asymptote, but as mentioned above they are also designed to provide a one-toone mapping to WIMP commands to minimise the performance dip.
This one-to-one relationship is unusual for CLIs, which normally require a different style of working typified by action-object syntax, where data is identified through parameters following the command.
Blurs hot commands are symbolic , which should aid learning through appropriate mappings and metaphors.
They are terse and expressive, allowing unambiguous access to thousands of controls in a few keypresses.
Hot commands also adapt to the users interaction history by ordering command recommendations by frequency of use.
Finally, Blurs interface consumes very little screen space.
Blur uses Microsofts UI Automation API5 to discover the GUI control elements that users interact with.
All applications implementing this interface can therefore be observed and controlled by Blur.
When the user clicks an interface widget Blur intercepts the event to determine the control under the cursor, retrieving the command name and the shortcut key sequence that can be used to activate the control.
The action can then be performed by typing the command into Blur, which automatically translates the command into corresponding keyboard shortcuts and sends them to the application, controlling the GUI.
Blur orders command recommendations according to three candidate classes: exact matches, prefix matches and substring matches.
Within each class, commands are sorted by frequency of use, and are displayed to the user.
Typo correction is provided by remembering the most likely candidate at each keypress.
If, at any point, the users input matches an empty set of candidates, the most likely candidate from the previous keypress is suggested.
Blurs command recommendations are also context sensitive to the focal application.
Consequently, the characters "se" may match "Send" while using an email system and "select all" when using a word processor.
Context sensitivity has several advantages including fewer matching commands for any typed string, and reduced probability of illegal commands .
Blur also supports global interface controls such as window management and application launching.
For example, window focus can be manipulated by typing any substring of the window title, .
Global commands are not context sensitive.
We conducted an experiment to answer four key questions about Blurs performance, focusing on the point of modality transition rather than long term maintenance.
Do users switch to Blurs expert modality?
How does performance with Blur compare to performance without it and with other methods?
How large is the performance dip with Blur?
What is the subjective response to Blur?
The experiment involved a repetitive series of tasks using an unaltered version of Microsoft PowerPoint 2007, with and without Blur running.
Repetitive tasks were used to compress long term interaction experiences into the short duration of a lab study, similar to Grossmans  study of hotkey learning.
The target state for each task was shown on a sheet of paper placed alongside the computer.
Five different PowerPoint slides were created, each containing five drawn objects of varying sizes and shading as shown in Table 1.
The target state was shown on a sheet of paper at the side of the keyboard.
All target states could be attained in a minimum of four commands, such as Select All, Align Left, Group, Flip Vertical.
Participants were instructed to complete tasks as quickly and accurately as possible.
Automatic logs recorded all user interactions, including task time data.
Blur is primarily designed to encourage an early and sustained switch to a command line interface.
Blurs main mechanisms for supporting this are calm notification and hot commands, and importantly the hot command interface provides a one-to-one mapping to the WIMP interface.
Although many previous research and commercial systems have supported CLIs , none have explicitly investigated the mechanisms used to initiate the modality switch.
At the start of the experiment participants were given a two minute introduction to Blur using a PowerPoint slide containing a single text field.
They were instructed to make the text Bold, Italic, Bulleted and Numbered using the GUI and to observe Blurs feedback, and then repeat the same actions by typing Blur commands.
Participants completed NASATLX worksheets  and gave comments after Tasks 2-5.
Task 1 was used to familiarise participants with PowerPoints alignment, rotation, grouping and flipping controls, with instruction as necessary.
Participants then repeatedly moved from initial to target states five times.
Tasks 2 and 3 were completed with the WIMP and with Blur .
Before using Blur, participants were instructed to "complete the tasks as you please."
Finally, as Figure 6 suggests, there is a significant interface x block interaction , which is best explained by the relatively small cross block performance improvement with blur-max  contrasting with the large improvement with alt.
Task 4 was completed following explicit instruction to "use Blur's facilities as much as possible".
This condition was included because we wanted to be certain to obtain measurements of Blurs performance.
We could not rely on Tasks 2/3 to produce this data because participants had the option to ignore Blur entirely.
This task was included because it was possible that the existing shortcut facilities would outperform Blur.
In Task 2/3, where participants were instructed to complete tasks however they liked, all chose to use Blur.
Two of the participants briefly returned to using the WIMP after their first use of Blur, but switched back and continued using Blur through the final trials .
Several used prior knowledge of Ctrl-a for select all, and nearly half used Ctrl-g for group, but many expressed surprise similar to the statement "there's no shortcut for group" after visually inspecting the menu .
A final data point indicating that Blur enabled higher levels of performance is that 90% of the participants had their fastest task completion time when using Blur.
Performance with Alt-shortcuts was particularly slow, and participants commented that they were painful' and awful'.
35% of the participants stated that they were aware of Alt-shortcuts before the experiment, but none attempted to use them except during their enforced use in Task 5.
Our framework postulates that changing modality causes a performance dip, so we analysed performance data at the point that users switched to using Blur.
Mean trial completion times are shown in Figure 7, with the solid line showing times immediately preceding and following the switch in the blur condition, and the dashed line showing data for the first four trials in the wimp condition for comparison.
Importantly, Blurs performance dip was relatively small, and consequently the participants were not discouraged from continuing to use it.
The performance dip with alt, in contrast, was large , and participants would have immediately discontinued use if not required to do so.
The final stage of the experiment involved asking participants to switch between windows and launch applications, performing minor operations in each: conducting an image search in Firefox, copying one of the resultant images to Paint, cropping the image, pasting it into a Microsoft Word document, checking their email inbox, then repeating the process with a different image search.
They were instructed to complete the tasks in any way they liked, and that Blur was available.
The participants made extensive use of Blur throughout the task.
Participants commented that "I especially like it opening and running programs instead of the start menu" and that "I liked fast switching".
Finally, two participants stated a desire for recency ordering in command recommendations: "The ranking system should give higher precedence to the last used command " and "Items should be promoted faster".
Participants responded positively to Blur, and provided many suggestions for improvements.
At the end of the experiment they ranked the three interfaces  in order of preference, with 1 most preferred, and 3 least.
We measured how intrusive participants found Blurs calm notification.
One participant stated that it was "annoying", and another that it was "distracting, but easily ignored".
The mean response to the question "Blurs feedback was distracting"  was 2.45 .
Blurs calm notification and hot commands interface was designed to promote an initial modality switch, to minimise the performance dip associated with doing so, and to offer a high performance ceiling .
The experiment validated the design, showing an early switch to hot commands, that the performance dip was small, that users continued to use Blur, that it enabled higher levels of performance than the normal UI and Alt-shortcuts, and that users preferred it.
NASA-TLX worksheet responses, summarised in Table 2, show significant interface differences for mental demand, perceived success, amount of work, and insecurity, but the main cause is the poor performance of Alt-shortcuts, rather than differences between wimp and blur conditions.
Mean ratings for Blurs ease of learning were the same as the normal interface , despite their brief exposure to it; their rating of Alt-shortcuts learnability was much worse .
Blur is a realistic system that works with unaltered desktop applications.
We designed calm notification and hot commands as generalisable and scalable transitionary mechanisms that could work in real work settings.
Furthermore, our framework suggests that modality switches depend on many factors, including perception of the efficiency of expert modalities.
Consequently, it is difficult to isolate the independent contribution of Blurs design elements in supporting the modality switch - while the gestalt design succeeds, we do not know whether this is due to the perceived efficiency of hot commands, the readyto-hand reminder provided by calm notification, the one-toone semantic relationship of hot commands, and so on.
The participants comments similarly highlight different aspects of Blurs perceived and actual utility.
We believe that calm notification and hot commands are useful and generalisable approaches for interfaces wishing to support a transition to expertise, but further work is needed to tease out their independent and interacting value.
The study used a small command vocabulary, so there are risks that Blur may not generalise to larger command sets .
Two issues encourage us to believe that Blurs approach is robust to large vocabularies.
First, the final stage of the experiment involved relatively unconstrained interaction within and across applications.
The participants continued to use Blur throughout these activities, and were enthusiastic about its support for window switching and application launching, which were not heavily repeated.
Second, we believe that the strategies of one-to-one Blur/GUI command relationship and of populating command names from the GUI create a strong and symbolic mapping that helps users anticipate commands.
For example, Blurs command for is subscript , and the Zoom control is zoom , but the built -in hotkeys are much less symbolic and  harder to remember: Ctrl+=  and Alt+wq.
Participants in the experiment will have inferred that we were interested in their performance with Blur, which may have drawn them to use it.
We counter this concern in two ways.
First, Alt-shortcuts were also novel to most of our participants, but their response was strongly negative.
Second, any user who installs a system like Blur is also likely to be curious about its behavior.
Real work has different engagement and time pressure than experimental tasks.
This is true of nearly all controlled experiments, but is particularly important in our experiment where we are concerned about reducing the tendency to satisfice.
We believe that our participants were genuinely trying to optimize their performance, but understand that this may have artificially eliminated some of the tendency to satisfice.
We will examine Blurs logs of real use in the coming year.
Our concerns about real-world use are eased by our own experiences in using Blur over the last few months.
Two of the authors are enthusiastic users , particularly for two activities and settings.
First, application launching and window switching is extremely rapid .
Second, Blurs control of applications is invaluable when using a laptop computer without a mouse 
We have found that the threshold for using Blur is influenced by the pointing device.
When using a mouse, the threshold often favours Blur, but not when tasks predominantly involve direct manipulation .
However, when using a less precise device, like a trackpad, Blurs benefits are substantial.
One also stated that Blurs hot command window should remain open until explicitly dismissed, allowing multiple commands with a single Escape keypress.
Alternative implementations of calm notification and hot commands.
Blur could be adapted to support other expert modalities such as a ListMap , which provides a spatially stable miniaturized representation of UI controls .
Calm notification could alert users to the location of selected controls within the ListMap.
We are currently implementing this approach.
Removing limitations of the platform.
Blurs support is limited by the capabilities of the UI Automation API and by how applications implement it.
Many applications do not fully or properly implement the API, which requires Blur to implement work-arounds, such as parsing the control tree when an application is launched and dynamically detecting shortcuts for applications that do not properly connect the control tree.
These issues increase implementation complexity and constrain functionality, but software vendors like Microsoft and Apple could ease the limitations by refining their scripting and automation technologies, and by promoting their use in applications.
Despite these limitations, Blur is a useful tool in its current implementation, and we have been using it successfully in unaltered Windows environments for several months.
Many office workers use their desktop applications for hundreds of hours each year, yet there is tendency to resist making the transition to expert strategies that could dramatically improve their performance.
This paper provided a framework for understanding the human and interface factors influencing the transition to expert interface modalities.
We also described the design and evaluation of Blur, which uses calm notification of hot commands to prompt an initial switch to its expert modality, to minimise the performance dip associated with doing so, and to enable a high performance ceiling.
Experimental participants made an early and sustained switch to Blurs hot commands, they benefited from doing so, and they preferred it to the normal interface.
There are several directions for further work.
We will experiment with ListMap strategies for mouse-driven expert interaction, and with associated spatial means for calm notification.
We will also refine and extend Blurs capabilities to assure that it is robust and functionally rich both within and across a wide range of applications.
We will continue to empirically assess how its design features contribute to the initial modality switch, and finally, we will deploy Blur and assess its real-world use through field studies and log analyses.
