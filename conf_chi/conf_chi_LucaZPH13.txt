In this paper, we present a concept using fake cursors to disguise on-screen password entry.
We performed two user studies with different amounts of dummy cursors and differently colored cursors.
The results show that dummy cursors significantly improve security.
At the same time, decrease in performance is kept within an acceptable range.
Depending on the required degree of security, the studies favor 8 or 16 differently colored cursors as the best trade-off between security and usability.
Password entry is a ubiquitous task.
In many instances, the user has to authenticate in a public or semi-public setting like internet caf es or office environments, exposing the password to onlookers.
On-screen keyboards are often used to minimize the possibility of losing the password due to keyloggers and other malicious software.
For instance, this is commonly used by online banking websites.
They enforce the use of virtual keyboards or keypads to input the secret credentials.
While being more secure against keyloggers and the like, this approach is highly vulnerable to shoulder surfing attacks, that is, an attacker observing the input from a nearby position.
It is almost impossible to hide the input as this would mean covering a large portion of the screen space.
One of the most common solutions to this problem is adding overhead to the input to make it hard to follow.
A famous example is the spy-resistant keyboard by Tan et al.
Unfortunately, indirect input makes the interaction with such a system quite slow.
Graphical authentication systems like the one presented by Wiedenbeck et al.
The randomness introduced with these systems makes them slower and significantly reduces memorability.
Finally, some research focuses on using additional hardware to make the input invisible to an attacker  or dislocate the input from the terminal .
We propose a shoulder surfing resistant input method using multiple fake cursors.
The idea is inspired by Ninja cursors .
In their work, the authors propose using several concurrent cursors that move in the exact same way to quickly reach objects on big screen spaces.
As opposed to Ninja cursors, in our system, only one cursor performs the actual input while the other cursors act as distraction for an attacker.
That is, they do not move in line with the genuine cursor.
Quite recently, Watanabe et al.
The main differences to their work are that we use an intelligent cursor algorithm instead of pre-recorded cursor movements; that we introduced coloring to improve the usability of the system; and that we performed extensive evaluations of the approach to prove its appropriateness to secure on-screen password entry.
The results of the studies show that, depending on the required level of security, using 8 or 16 differently colored cursors provides a good trade-off between security and usability.
In either case, the approach significantly improves shoulder surfing resistance of on-screen password entry.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Figure 1 shows an on-screen keyboard with 16 colored mouse cursors, 15 of them fake cursors.
The active cursor has a random color.
Off-keyboard cursors would easily be identified as fake.
By itself, on-screen keyboard-entry is already slow.
Adding fake cursors does further reduce the input speed but at the same time significantly improves its resistance to shoulder surfing attacks.
Such an approach is not meant for contexts with several authentication sessions per day but for systems with high security demands like online banking.
We recruited 16 participants for the study.
That is, the Latin square design was applied two times.
Participants received a 5 Euro voucher for an online shop.
Search strategies are not only interesting from a point-of-view of usability but they are also related to security.
A bad strategy can influence whether an attacker can identify the active cursor or not.
This strategy can influence the security since the fake cursors do not behave this way.
This is not duplicated by the algorithm and thus, based on good hand-eye coordination, the active cursor can be identified.
Performance-wise, the most interesting results are on the time required to finish the task, to identify the active cursor and to keep track of it.
Keeping track refers to the fact that the user has to be able to follow the cursor and not loose track of it.
The fastest task completion time was achieved with four colored cursors , the slowest one with 24 white cursors .
A 4 x 2  within participants analysis of variance of task completion time revealed a highly significant main effect for Cursors .
We considered the time to hit the first target as the time required to find the active cursor and the time from the first to the second  target as the performance of keeping track of the active cursor.
Analyzing the data based on these assumptions revealed an interesting finding.
While the color did neither significantly influence the overall performance nor the time to find the active cursor, it significantly influenced the tracking performance.
Keeping track of a colored active cursor  was significantly easier than of a white cursor .
In addition, the positive influence of Color increases with the amount of cursors.
The approach was designed to be resistant against shoulder surfing attacks.
For a successful attack, the attacker needs to observe all cursors or immediately identify the active cursor.
No visual feedback of clicked buttons is given.
The most promising attack on the system is video-based .
This would enable comparing the mouse movement to the movement of the cursors on screen and therewith identify the active cursor.
Attack-resistance is highly depending on the strategy that the user employs to identify the active cursor as described later in this paper.
If fast unnatural movements are used, the current algorithm of the fake cursors does not keep pace and the active cursor becomes obvious.
We conducted a pre-study with a simple pointing task using a repeated measures factorial design with two independent variables: Cursors  and Color .
We did this to test whether color makes it easier to keep track of the active cursor.
To minimize learning effects, we used a 2x4 Latin square design resulting in eight cases.
The study took place in an isolated room at our premises.
For each combination of the independent variables, the participant had to find the active cursor and then use it to click two targets, located on the screen, in a predefined order.
The location of the targets was not varied.
Three trials were allowed to correctly perform each task.
If successful or after failing three times, the next task started.
After each trial, the cursors  were randomly arranged on the screen.
That is, the active cursor had to be found again.
The task order was automatically assigned by the prototype based on the user ID.
Each participant performed each possible subtask twice resulting in 16 tasks per user.
The main study was firstly conducted with 39 people and then repeated with 20 of those participants.
The first part will not be presented here and was only done to have access to trained users for the second iteration.
We used a repeated measures factorial design with three independent variables: Cursors , Color  and Password .
Passwords consisted of six characters.
Non-dictionary passwords were randomly created containing upper case and lower case letters as well as digits and special characters.
German, the mother language of all participants.
Please note that a new level was introduced to Cursors.
Level 1 was required to have a baseline to compare the performance of the system.
To minimize learning effects, we used a 2x5 Latin square design resulting in ten cases.
An example with 16 colored cursors is shown in figure 1.
Having 20 participants allowed for two repetitions of the Latin square design.
All participants were familiar with the system from the first study iteration.
Finally, "click time" indicates how easy it is to keep track of the active cursor.
The results of overall and search time are depicted in figure 2.
It shows that while it takes longer to find the active cursor with more cursors, Color and Password did not influence that time but it is much lower for one cursor.
It is interesting to note that search time only slightly rises with the amount of cursors.
Post-hoc tests showed significant differences between 16/24 cursors and all other levels of Cursors  and no significant difference between 16 and 24 cursors.
For overall time, effects of all three independent variables can be observed.
One cursor using dictionary passwords was the fastest input method .
24 cursors without color and random passwords was the slowest .
Post-hoc tests showed that colored cursors were faster  and dictionary passwords were faster than random passwords .
Additionally, there were significant differences between 16/24 cursors and all other numbers and no significant differences between 16 and 24 cursors.
The results for click time are shown in figure 3.
Post-hoc analysis results are similar to overall time.
We again asked the participants which strategies they used to find the active cursor.
13 of them used the strategy of moving the cursor to one of the borders of the interaction area.
Two users based finding the cursors solely on performing specific shapes with the cursors.
The final five used both strategies depending on the situation.
No new strategies were found.
The study took place in an isolated room at our premises.
It was filmed with a high definition camera from the right side of the user, recording both the mouse and the screen.
At the beginning, the password task was explained to the participants.
For each combination of the independent variables, they had to input two passwords .
When it was not correct, the next task did not start and the user had to fix it by deleting the input pressing "backspace" on the virtual keyboard.
The start position of the cursors was randomized after each task.
The participants received a unique list from the experimenter containing their passwords in the order of the experiment.
It should be noted here that the users did not get the same passwords that they used in the first iteration of the study.
At the end of the study, the participants were asked to fill out a questionnaire collecting demographics and qualitative data.
Nine of them were female.
Again, 5 Euro vouchers for an online shop were given out as incentives.
This is supported by the results of the questionnaire, in which we asked the participants to rank the different combinations with respect to the best security-usability trade-off.
One participant chose 24 colored cursors.
In addition, on Likert scales from 1  to 5 , 19 participants either fully  or partially agreed  that the colors improve ease-of-use.
13 participants either fully  or partially agreed  that the approach improves security .
The video material was used to perform shoulder surfing attacks.
The attacker was highly familiar with the system.
He was allowed to watch the input once to steal the password.
The result was compared to the original password using the Levenshtein distance, a measure of similarity between two strings .
Distance "0" indicates a correct guess.
Overall, the analysis of all video material took the attacker one full day.
Figure 4 shows the results for the security analysis.
In the worst case , 90% of passwords were successfully shoulder-surfed.
The most secure instances were 16 cursors  and 24 cursors  with 5% success rate.
There is no obvious improvement using 24 cursors compared to 16 cursors.
Additionally, color does not seem to influence the security of the system as well.
The Levenshtein distance produces parametric data  and thus allows for using parametric significance tests.
No other main effects and no interaction effects could be identified.
Post-hoc tests revealed  significant differences between all levels of Cursors with the exception of 16 and 24 cursors .
There was no influence of strategies to find the active cursor on the amount of stolen passwords per user.
This was most probably since the number of users that did not use the border strategy, at least to some extent, was quite low.
However, we could observe awareness of the fact that the strategies might influence the security.
For instance, one user stated that "I avoided moving the cursor to the border as I think this would negatively influence the security of the system ...".
We presented a system using fake cursors to hide password entry on on-screen keyboards.
Two user studies showed good usability properties and a significant increase in security.
The best trade-off between usability and security was achieved with 8 and 16 differently colored cursors respectively.
Even though the participants were trained, they cannot be considered experts.
We could not test for learning effects but believe that there is room for improvement.
For instance, one study participant mentioned that he "did it several times now and it gets easier every time".
An open question is therefore how the system performs at long-term use.
We plan to conduct a long-term web-based study to answer this question.
For instance, it will be interesting to find out if users become significantly faster after long-term use and if they develop more advanced search strategies.
We have a few ideas on how to avoid the border strategy and improve authentication speed.
The most promising one is to assign a fixed color or a fixed start location to the active cursor.
This way, the cursor can be identified by simply looking for the cursor with that color or at the specific key.
We argue that this will at the same time reduce authentication speed and make the current algorithm more efficient as unusual behavior is not anymore necessary to identify the active cursor.
The results show that the advantage of colored cursors kicks in after the active cursor has been identified.
That is, it is easier to keep track of the active cursor if all cursors are differently colored.
On the other hand, security was not influenced by colors.
We argue that depending on the required degree of security, 8 or 16 colored cursors are the best trade-off between security and usability.
For high security contexts like online banking, 16 cursors present the best solution.
The very low error rates across all conditions support this claim.
