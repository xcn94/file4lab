A curriculum was developed to introduce users to the Smalltalk object-oriented programming language.
Applying the Minimalist model of instruction , we developed a set of example-based learning scenarios aimed at supporting real work, getting started fast, reasoning and improvising, coordinating system and text, supporting error recognition and recovery, and exploiting prior knowledge.
We describe our initial curriculum design as well as the significant changes that have taken place as we have observed it in use.
Discussions of object-oriented programming are filled with hope - an organization of communicating objects is supposed to be a "natural" model for many programming problems.
Building new programs by selecting from and specializing a large set of existing object classes is supposed to speed code development.
While an idealized analysis of the paradigm does indeed suggest many psychological benefits , the small amount of empirical evidence in hand indicates that these have a significant usability cost  10.
Our observations of professionals learning to use the Smalltalk language have identified some of these costs .
They take a variety of forms: understanding computation as a series of messages sent among objects; use of the powerful but complex programming environment; navigating and becoming familiar with Smalltalk's extensive class library.
Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery.
To copy otherwise, or to republish requires a fee and/or specific permission.
One consequence of these problems we have labeled the "user interface tease" - Smalltalk's rich class library and sophisticated programming tools make it an attractive environment for rapid prototyping, for experimenting with interactive applications.
However, user interface functionality is among the most complex in the system, and experienced users caution the inexperienced to set aside their desire for "real" applications until more simple programming tasks have been mastered.
In the case of Smalltalk/80, for example, the two major texts concentrate on an introduction to the programming environment  and on the non-user-interface components of the system ; the long-awaited book describing user interface functionality has yet to appear!
In the tutorial shipped with Smalltalk/V286 , learners work through eight of ten chapters before they experiment with graphics or window objects.
The earlier chapters drill users on concepts, tertninology, control structures, and support classes like Integer and Collection.
The result is that it generally takes weeks before a new user is "ready" to develop code for an interactive system.
Is it any surprise that many learners give up along the way?
Our response to the problems of learning Smalltalk has -been to develop our own introductory curriculum.
We provi,de "scaffolding" for learners , applying the Minimalist model of instruction .
Minimalism emphasizes the streamlining of instructional materials, and a task-oriented approach to determining and organizing the content of manuals, tutorials or other educational artifacts.
The goal is to support users in accomplishing real and meaningful tasks quickly, and to allow them to take advantage of their existing task knowledge in learning about a new system.
We started our design project with.
We then engaged in a design analysis phase, applying and extending the principles of the Minimalist model to the domain of Smalltalk programming.
In general, the text for each block was minimized, incorporating only as much explanation as was needed to accomplish and make sense of the programming task at hand.
The goal of getting started quickly was also supported by the structure of the curriculum itself.
In the first block, users play a model-only version of the game.
The game is played in a Workspace; users create objects and send messagesto move through the game states.
In the second block, users play the same game, but use a model-k user-interface version; the game functionality is identical, but the game state is displayed in a window, and game functions are accessed through the window's menus.
During users' exploration of the game in these frst two blocks, the code executed in response to messages is not available for analysis, so that the user won't get stuck on code-level details and can focus instead on communication among objects.
In the third and fourth blocks, the curriculum spirals back through the model-only and model+ user-interface versions, but provides access to the code assoc.iated with the messages explored earlier.
Fast start-up was further supported by tools specially developed to facilitate Smalltalk learning.
Code development in Smalltalk involves the navigation, understanding and modification of a huge hierarchical class and method library .
This work is supported by the Class Ilierarchy Browser.
WC replaced this tool with the Bittitalk Browser , identical in function and appearance to the standard tool, but providing a filtered view of the classes and methods .
Our Bittitalk Browser was customized to the BlackJack application, so that only classes and methods relevant to the project at hand were available for exploration .
As for any progr amming language, real work in the Smalltalk context means the understanding and development of applications, programs that do something.
It does not mean reading pages of text describing the syntax of message sending, or the distinction between classes and instances.
It does not mean the creation and manipulation of Collections or Bags  in a Workspace with no meaningful task agenda for their use.
It does not mean practice with the system tools just for the sake of learning how they work.
Our curriculum addresses the desire for real work by introducing all information about Smalltalk, and providing all practice with its elements, in the context of a working program, a BlackJack game.
The program was designed to be simple enough for novices to understand, fun to use and explore, and to exemplify important characteristics of the language .
Block 5 is an advanced topics block that users are given to take away with them.
A second tool, the View Matcher , structured learners' introduction to user interface programming.
This tool provides an integrated view into a running application, in this case the BlackJack game.
The application's visible state, messages producing this state, the class and method associated with a given message, and special View Matcher commentary describing the role of the message in the application are displayed and updated simultaneously.
Integration in the View Matcher centers on the message execution stack, a stack that grows and shrinks as messages  are sent and the corresponding method code evaluated.
The View Matcher allows the application programmer to place halts in "interesting" points in the method code.
The application proceeds normally until it reaches such a halt.
At that point, the execution stack is displayed, and a user can investigate the contents of the stack.
In our curriculum, the halt points corresponded to input events and to display updates.
Thus the tool allowed us to focus users' attention on the Smalltalk activity involved in BlackJack's user interface.
To make sense of this suggestion, they must consolidate earlier experience learning about typing, selecting, and using the "Show it" menu option.
We also included open-ended questions and activities within each block.
These suggestions were not necessary to accomplish the task at hand, but were intended to stimulate self-directed exploration.
Indeed, the entire topic of inheritance  was treated in this fashion - although passing mention was made of inheritance in working with the BlackJack game, direct exploration of the inheritance relationships implicit in the BlackJack class structure was encouraged only through a few operi-ended suggestions at the end of the fast block.
When instructional material is very directive and complete, learners may simply follow the instructions "blindly", without noting the consequences that their actions have for system states .
In the worst case, the system and training get out of phase, so that the learner is executing instructions that make no sense given the system's state.
To help users coordinate activity on the screen with our textual explanation, we used checkpointing descriptions: We followed directions  with a description of what the screen should look like  Similarly, we described the objects returned  when messages were evaluated.
Besides providing a direct coordination between text and screen, we tried to get users out of the book and into the system.
In the View Matcher scenarios, we directed users to the messages in the execution stack.
However, rather than explaining each message individually, we pointed to other information displayed by the View Matcher ; the manual was then a guide to coordinating this situationally more specific on-line material.
At some points in the learning scenarios, particular problems were likely.
For example, because we knew the Smallt,alk defaults for wind0.w size and placement, we could guess the point at which users would first need to move or to scroll within a window.
We anticipated such needs, providing the relevant information in the appropriate situation.
The curriculum also had a general recovery mechanism.
The version of Smalltalk/V needed for each block was packaged on a separate diskette.
Thus, if a user got caught in some completely mysterious state and was unable to recover, there was always the option of turning off the machine, re-loading the files from the appropriate diskette, and starting the block over.
In general, when users were instructed to perform some action, the corresponding explanation began with a simple description of what the consequence of the action should have been .
This was done to help users recognize whether they had carried out the intended action.
Our choice of the BlackJack game as the learning example was based partly on our expectations about users' prior knowledge.
We hloped that the game would not only be simple to understand and fun to play, but also that most users would already be familiar with it.
As a result, they would be able to focus on understanding the Smalltalk analog of the card game, to leverage off their knowledge of card games to investigate and learn how the program itsetf works.
We were aided in this by the nature of object-oriented program design, which permits programmers to model problem entities rather directly - so, for ex-
We hoped that these class names and their associated functionality would map well onto learners' prior knowledge of card games.
We also tried to capitalize on prior knowledge about programming that many users would bring to the learning situation.
One example is evident in the design of the View Matcher, which centers on exploration of a message execution stack.
This focus was intended to promote transfer to system tools .
But we also hoped that programmers familiar with stacks  would be able to use that knowledge to understand the embedded message sending that takes place within Smalltalk methods.
In many areas, however, Smalltalk requires a qualitatively different approach to programming than procedural languages.
The spiral structure of our curriculum was an effort to aid programmers in making this shift, and reflects an extension of the notion of prior knowledge: Rather than relying only on knowledge that procedural programmers will bring to the learning experience, we organized the instruction to build on itself: J-earners' early introduction to Smalltalk  was explicitly functional: users played the Smalltalk game by creating objects, sending messages, and observing the results.
They did not see the code associated with these activities.
The goal was to evoke the object communication metaphor inherent in Smalltalk; activities take place through the sending of messages, rather than by the execution of a "program".
In later topics, we spiraled back through the same game-playing activities, but now gave learners access to the code behind a given message .
This spiral was intended to give users a basic understanding of the object-based computational model, so that they could use that understanding to organize subsequent learning about writing Smalltalk code.
Embedded within the function-to-code spiral was a second spiral aimed at teaching the Smalltalk user An important interface programming framework.
Our design of the BlackJack game made an explicit distinction between model and user interface functionality.
As can be seen in Figure 1, learners first played the game in a Workspace, using a model-only version; they then spiraled back through this game-playing activity, but now using the model+ user-interface version in the View Matcher.
Blocks 3 and 4 reflected a similar spiral; learners explored and modified model methods, then worked on user interface modifications entailed by the changes to the model.
Our curriculum design phase has been followed by a period of intensive testing.
The goal of this work has not been to test hypotheses , but rather to provide detailed, qualitative information for redesign.
At this point, we have observed five professionals working through Blocks l-4; in addition, thirty professionals working in pairs in a classroom setting, were observed as they completed Blocks 1 and 3.
Our analysis of these learners' experiences has led to significant design changes.
Many of the changes reflect the iterative tuning inherent in Minimalist design projects.
Minimalism is very heuristic - it does not tell you the exact position to take on a particular trade-off , just that you should be oriented toward certain goals .
An assumption is that you will observe your instructional artifact in use, to determine where on a trade-off you can afford to be.
A good example comes in the trade-off between getting users started fast, and encouraging them to reason and improvise.
Our initial version of Block 1 was not open-ended enough: our concern for getting users started quickly led us to provide too much direction about what messagesto send to the BlackJack object.
Our frost user worked only with the Workspace, typing and evaluating exactly what we suggested; she had no need to explore the classes and method names available in the Bittitalk Browser, and thus learned very little about the structure of the BlackJack game, and nothing about using the browser to find relevant methods.
The directions in subsequent versions of Block 1 were much less complete.
Instead of instructing users to "Type and show Game I stay", they were sent to the browser to find the appropriate method themselves, "In the Browser, fmd the message you can send to a BlackJack instance to end your turn".
A consequence of this was an increased demand that method names and comments be informative with respect to the method's function.
This demand of course is typical of work in Smalltalk - where much "programming" consists of searching for useful methods - but it was only after we decreased the directiveness of our instructions that it became a salient component of the learning situation.
Other modifications reflect our better appreciation of learners' prior knowledge.
So, for example, several of our users were much less familiar with the BlackJack card game than we had expected; they knew it as a game, but were not familiar with even our simple version of the rules.
Some of our early users also had considerable difficulty with the message execution stack presented in Block 2.
We initially attributed this to a lack of general programming experience.
However, even experienced programmers had difficulty coordinating the message stack with the BlackJack window contents, because the stack reflects messa.ges not yet executed .
This forced us to expand the text offered as a guide to users' exploration of the message execution stack.
An important class of modifications came from fmding where in the learning situation to embed some bit of information.
So, for example, the concept of instance varia6Ies  is fust introduced in Block 3.
Our original version centralized the presentation of the relevant i&n-nation, and positioned it at a point where users first accessed an instance variable .
Ilowever, several of our users had difficulty understanding the distinction between accessing instance variables indirectly via messages in a Workspace, and accessing them directly by name within a method.
We realized that this was probably because they had not yet looked "inside" a method, and moved that piece of information to a later point in the exercise.
As these examples suggest, many of our changes reflected a better appreciation of the difficulties in learning Smalltalk, and the interaction of these problems with our learning scenarios and tools.
Other changes, however, reflected extensions of the Minimalist approach demanded b:y its application to this new task domain.
Ultimately, this has led us to generate a separate "interaction tips" sheet, which users can refer to whenever a need arises - while knowledge of interaction techniques is a prerequisite to using the Smalltalk environment, it is the programming itself that constitutes real work.
The spiral curriculum approach is intrinsically sequential; each block builds on previous learning experience.
This sensitized us to the transitions from one block to the next.
But while our initial design did try to :provide transitions, we didn't fully appreciate what learners were experiencing until we observed them moving through the block:s. One example comes in the transition between the fust two blocks, where users moved from the model-only version of the game played in the Workspace, to the model-t- user-interfice version played in the View Initially, we tried to capitalize on the Matcher.
This mode kept a historical record of some of the messages sent in the process of playing the now-interactive BlackJack game.
However, while the history list was easy to understand, it produced the wrong expectations concerning the message execution stack, interfering with subsequent View .Matcher interactions.
This led us to replace the history mode with an %nimate" mode: as users interacted with the game, the stack was continuously updated.
This new mode allowed us to re-visit the message-sending paradigm explored in Block 1, while providing a simplified introduction to the "halt" mode used for the remainder of the Block 2 scenario.
Another example involved the: transition from the third to fourth block.
In Block 3, users saw Smalltalk code for the first time, and explored the code of individual methods.
In the View Matcher scenario of Block 4, the complexity of th.e situation increased tremendously; because the scenario was driven by the message execution stack, users were given access to lo- 15 related methods at once.
They responded either by making a  attempt to understand as much of the code as possible, or by just ignoring it.
Later versions of the curriculum addressed this transition by suggesting a strategy for e:xploring the stacked methods  and by enhancing the View Matcher to support this activity .
Initially, our view of "real work" included all activity associated with understanding or developing a Smalltalk program.
We made no distinction between activities pertaining to the language  and activities pertaining to interaction with the environment .
All new information was introduced in the context of the BlackJack game scenarios.
From the start, we observed that learners had difflculty with Smalltalk's interaction techniques.
The mechanics of scrolling or re-sizing windows often overwhelmed the exploration of BlackJack.
Our initial response was to further customize our treatment of these interaction techniques.
We carefully observed where a need for them would frost arise, and provided succinct "hints" at just that point in the scenario.
We enclosed the hint texts in boxes to increase their initial salience and to make more useful for later reference.
At this point, our design work on the Smalltalk curriculum is converging.
We are encouraged that our Minimalist approach is feasible, that we can get programmers started more quickly on the application prototyping tasks that interest them.
CHI 90 Rweediws four to live hours, and based on a post-training interview, they seem to have a good initial grasp of the Smalltalk's user interface paradigm.
For example, they generate sound suggestions for enhancements to the BlackJack game and how they might be carried out.
Perhaps even more importantly, some have asked to take our instructional environment away with them, so that they can continue to explore the BlackJack game on their own!
We had foreseen this desire - Block 5 in Figure 1 depicts our "take-away" environment, populated with additional game programs that can be used to explore more of the Smalltalk system.
These indications are important: our learners have progressed 1-2 orders of magnitude faster than we, or anyone we know of, did in understanding and working with interactive Smalltalk applications.
Our immediate plans are focused on criterion testing of the curriculum , but we are questioning our initial commitment to controlled benchmark tests.
Our materials are so much faster for getting people started on the tasks we targeted that it hardly seems worth plodding through a time trial.
The bottom-line criterion in the real world is whether we can help programmers enhance their professional skills and change their practice.
Accordingly, we are now preparing for a more naturalistic assessment; we have packaged our materials for self-instruction and are offering them to programmers on condition that they participate in interviews with us over a period of weeks and months.
Finally, we are learning new things about Minimalist instruction through this design project.
Programming interactive applications in Smalltalk is a more complex task domain than any to which we or others have applied the Minimalist approach .
The range of tasks one can undertake in Smalltalk is virtually unbounded, which is not true of even rather complex application systems.
Accordingly, we had to direct far more effort to designing the user's task - rich enough to be meaningful and interesting, narrow enough to impose intrinsic structure on the learning.
This problem did not arise in domains like word processing in which the basic user tasks seem obvious.
The complexity and novelty of the Smalltalk domain also impelled the decision to use a linearly structured  curriculum.
In prior work, we have eschewed as much as possible such forced ordering on user activity.
Here we saw no other course.
NOTES Rachel Bellamy is a graduate intern from Cambridge University and the MRC Applied Psychology Unit, Cambridge, UK.
Usability Carroll, J.M., and Rosson, M.B.
A View Matcher for learning Smalltalk.
ACM, New York, New York, in press.
Digitalk, Inc. Smalltalk/ V 286: Object-oriented programming system.
Goldberg, A. Smalltalk-80: The interactive programming environment.
Goldberg, A., & Robson, D. Smalltalk-80: The language and its implementation.
Learning to use office systems: Problems and prospects.
