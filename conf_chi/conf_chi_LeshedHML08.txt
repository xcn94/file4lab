All recorded scripts are saved to the CoScripter wiki , where users can find scripts created by members of the CoScripter community, as well as their own scripts.
Users can edit both their own scripts and scripts created by others, improving the knowledge captured in this shared repository.
CoScripter  is a system for recording, automating, and sharing procedural tasks performed in a web browser.
This paper describes a user study that investigated proceduresharing practices to understand the degree to which CoScripter can support them.
We found a common desire for better sharing of `how-to' knowledge, yet existing practices are informal and uneven.
After trying CoScripter, users found it useful to capture their procedures and seek procedural knowledge recorded by other employees.
In this study we were interested in learning about existing practices of procedure-sharing in the enterprise.
We also wanted to understand the degree to which CoScripter supports these practices.
We visited nineteen employees of a major corporation in their offices, for an interview and a usability study that lasted about one hour.
We chose a variety of positions including administrative assistants, managers, human resource professionals, engineers, and so forth.
Our participants had a wide range of experience in their job, from few weeks to more than three decades.
Five of our participants had some experience with CoScripter, as it has been available in the enterprise since November 2006.
The first part of the session consisted of an interview, asking employees about their roles and the procedures they perform, especially those carried out online.
We also asked how they learned the procedures and whether they shared them with other employees.
In the second part, we introduced CoScripter and had participants find and run an existing script, record a new script, and browse the wiki to find potentially useful scripts.
Sessions were video-recorded and later transcribed and analyzed.
Modern businesses are full of complex, idiosyncratic processes such as travel arrangements, expense reimbursements, purchasing, and hiring.
The people who perform these tasks have varying levels of skill, knowledge, and experience.
Formally automating these processes may be inappropriate, given a constantly changing environment .
We suggest that one way to overcome this discrepancy is by situating the development and execution among the employees themselves.
Participants primarily discussed two types of processes they carry out in their work.
The first includes simple, repetitive processes, such as checking conference room availability and signing online forms.
Although these tasks do not take much time, performing many of these in total accumulates to a time-consuming activity.
The second type includes infrequent, hard-to-remember procedures.
The steps for performing them are usually non-obvious and require trial-and-error or obtaining help.
For example, interviewees complained about cumbersome systems for making travel arrangements and submitting expense reimbursement requests.
Participants expressed a desire to share their how-to knowledge and retrieve this kind of knowledge from others.
We found a variety of non-mutually exclusive practices for sharing procedures and learning them.
These practices can be classified into two primary categories:
CoScripter  is a system that allows users to automate and share web-based processes carried out in a browser.
This consists of recording the user's interactions with the browser, including clicking links and buttons, filling out fields and making menu selections.
The recorded script can later be played back, automating procedures that are either time-consuming, too complicated to remember, or both.
The interaction with CoScripter is carried out through a sidebar added to Mozilla FireFox .
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
The CoScripter sidebar in the FireFox browser Social networking.
Fourteen participants described activities that involve contacting acquaintances or people to whom they had been referred.
As a few examples, participants reported sending email with `best practices' to their colleagues and keeping those emails that were sent to them; sharing `tips and tricks' between a mentor and her protege about how to work through the travel reservation system; and calling out loud to a colleague next door to help in a procedure when they `got stuck'.
Eleven participants reported using online databases accessible through the email client to find out procedural instructions and to post information there.
Others reported using the firm's intranet search engine, and one participant reported searching the intranet's wikis and forums both to search for answers for `how-to' questions, and to respond to these types of questions.
Sometimes these online repositories were described as seldom used, perhaps because of limited search capabilities.
However, 13 interviewees reported learning a how-to procedure simply by trial-and-error.
Furthermore, sharing this knowledge was reported as uncommon.
Interviewees found the infrequent procedures too complicated or unique to capture and explain to others, some reported that they did not feel competent enough to teach others, and one said she does not wish to `show-off'.
By contrast, frequent, almost-automatic procedures were not considered worth sharing, as they were perceived as too obvious.
As a result, despite the wish to share with and learn from others, most participants reported maintaining individual sets of instructions for processes they carry out in their work.
The CoScripter wiki, showing the list of scripts created by one person they perceived very complicated.
For example, one participant found a script for scheduling a web conference, and said: "I haven't done this in a long time, I would definitely have to at some point, to schedule a web conference  if I had a boss that wanted me to, then I would definitely have to go to that."
The five participants with experience in CoScripter reported practices in line with the previous results: They created sets of scripts unique for their own work and used the wiki to find useful scripts to carry out procedures they did not know how to do.
An interesting dynamic was found between a manager and her assistant: the assistant recorded scripts for the manager, for instance, to create a blog on the firm's intranet, instead of giving her instruction lists.
This exemplifies CoScripter's potential for sharing procedural knowledge within the organization.
In total, 15 of our 19 interviewees said they would definitely use CoScripter or continue using it.
Other participants said they do not carry out enough web-based tasks to make it worthwhile, or they were not sure they will remember to make it a common practice of their daily routine.
In an earlier paper we reported on the mechanics of CoScripter .
Here we report on an early user study that attempts to capture the value of CoScripter in real-world settings, for sharing procedures within the enterprise.
We found that given various poorly integrated sets of practices to share and learn `how-to' knowledge, CoScripter has the potential to support employees with better practices to both spread their knowledge and seek it from others.
Future work will involve measuring CoScripter's use within and across enterprises as it becomes more widely available.
After installing CoScripter on their browser, participants were asked to search for a specific script on the wiki, run a script, create their own script, edit a script, and browse through the wiki for scripts that might be useful for their regular activities.
Our participants were intrigued by two primary concepts encapsulated in CoScripter.
First, they liked that it captured and stored unique procedural knowledge needed in their own daily work.
For example, one participant reported that every time she purchased items online, she had to change the default values in one of the forms.
Recording this task as a CoScripter script also recorded her changing these values, so that she did not have to type them again.
