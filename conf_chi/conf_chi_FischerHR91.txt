Traditional information access systems generally assume that a well-articulated query exists, and that once an object i found, it can be readily understood.
Although this asumption works for retrieving text objects, in more compi x domains, such as retrieving software objects for reuse, queries must be incrementally constructed and support is n ded for comprehending what is retrieved.
Therefore, information access methods need support for query con..tnIction and relevance evaluation as an integral part of the I tion process.
Two prototype systems are described for supporting this n d: CODEFINDER for query construction and EXPLAINER r explanations of program examples.
These systems interact to support the processes of locating and comprehending software objects for reuse.
In the domain of text objects, the relevancy of information found can easily be judged by users.
When retrieving more complex objects, such as software, comprehending these objects becomes a significant problem .
Text objects use a familiar form of language that allows the gap between the situation and system model to be rather small.
This is not the case with software objects, in which users may have problems understanding the language, abstractions, and interdependencies upon which the software object is built.
This causes the gap between situation and system models to be large enough to require support for judging whether the item meets the information need.
Cooperative problem-solving systems are needed to change the role distribution between humans and computers where currently users construct queries and a system applies queries to its information space 18.
The traditional distribution gives no support to two critical problems: query construction and relevance evaluation.
Systems should effectively execute well-specified queries, but they must also support users in articulating what they want and judging the adequacy of objects found.
Traditional information retrieval research assumes that a well-articulated query can be easily thought out and concentrates primarily on retrieval efficiency .
Although this assumption works in well-known domains, it does not scale to ill-defined problem domains, in which users need to elaborate and experiment with a problem before the information need is fully identified.
Defining the problem is a large part of the problem, and support is needed for an incremental process of exploring the information space While refining the query.
Even in well-known information domains, the problem of query specification can be formidable.
Users may know what they are looking for, but lack the knowledge needed to articulate the problem in terms and abstractions that the computer can understand.
Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for dIrect commercial advantage, the ACM copyright notice and the of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing chinery.
To copy otherwise, or to republish, requires e fee nel/o, specific permission.
Software reuse is often touted as the solution to the software engineering crisis .
This long-term goal of software reuse is thwarted by an inherent design conflict: to be useful, a reuse system must provide many building blocks, but when many building blocks are available, finding and choosing an appropriate one becomes a difficult problem.
The large number and diversity of objects increases the chances that an object closely related to a problem task exists.
However, finding such an object among so many is difficult.
The process of cooperative problem formation in software reuse intimately intertwines the processes of location and comprehension .
Once an item is found, users may not be able to assess its relevancc.
The software object must be studied to determine not only what it does and how it is used.
Once an understanding is achieved, the user is in a better position to understand what his necds are.
An informal study we conducted revealed that people conceptualize the problem of drawing the object shown with one of the situation models indicated.
Indexing for situation models corresponds to application goals.
If drawing a car, drawing a tire would be an example of an application goal.
The two system models  show how system models are indexed by implementation units.
The system model can transcend individual functions.
In another study, we observed how people adapted a complete program example from the system to implement a new task in their situation model.
Illustrated here is how one subject adapted a diagram of modularity in a cyclic group to drawing a clock face.
Retrieval by reformulation is a method of constructing and refining retrieval cues.
It is based on empirical evidence that ideas are nol defined precisely to begin with, but are continuously elaborated upon and evaluated until appropriate cues arc constructed, and that people think about categories of things in terms of prototypical examples as opposed to formal or abstract attributes .
This paradigm has been applied to create a cooperative relationship between users and systems giving users the ability to incrementally im-
In another study, we have observed problem-solving behavior of people in a large hardware store  known for its knowledgeable salespeople .
We observed that customers did not come in with well-articulated queries, but used a number of specification techniques to eventually arrive at a solution.
In Figu re 1, we prese nted an examp le of how software ohjec ts coul d be accessed by application goals ill addi ti on to implementation units.
Figure 5 shows how this can be applied in the CODEFtt<DER archi tecture.
The keywo rd ring is nClt co nnec ted to draw-ring, wh ich draws the ohject shown in Figure 1 Oil the Symholics system, If ring is give n in the query, it wi ll ac ti vate th e draw-circle node, which in turn acti va tes keywo rd nodes lire and doughot/ l. These ke ywords will th en wo rk togeth er to aetiv3tt:: the dr ah'-rillg node.
Alt hough the experiment w~s performed on a ve ry sma ll informario n space.
Some subj ects fail ed to find a solution wi th HELGON, hu t all succeeded with CODEFtNDER.
The first is J cJtcgory hierarchy, whic h decomposes the inform ation space into a nu mber of ahstract ca tegories.
Key words cnn he assigned by the designe r of th e so ftware ohject and can be added, deleted, or otherwise modified directly thro ugh the CODEFi NDER in terface.
An informal study was performe d to compa re the query co nstructio n methods of CODEFIt< DER and HELGON.
Figure 2 il lust rates th at judg ing the rel evan ce of software objects was ma rc complicated tha n retrieval of simpl e objccls such as literat ure refe rences.
Once ret ri eved, softwa re objects need to he adapted to the task at hand.
Both the j udgment of relevancy and th e adaptation of software o b~ jeets req uire th e user to unde rstand the retrieved object.
The EXPLAtNER systcm su pports thi s need by allowing users to explore th e design, impl!.
The Category Hierarchy window displays a graphical hierarchy of the information space loaded.
In this instance, the information space is a sct of graphics functions for the SYMBOLICS LISP Machine.
The Query pane shows the current query.
The top part of the query specifies two categories  and a parameters attribute.
The hottom part specifies keywords and related items.
The query parts combine to retrieve the items in the Matching Items pane.
The Rxample oC the Matching Items pane shows the full entry for an item in Ihe information space.
The Choose This button loads the example item into ExPL\JNER for a detailed explanation.
The Bookmarks pane holds a history of the objects that have appeared in the Example oC the Matching Items pane.
The Matching Items pane shows all items matching Ihe current query, by order of relevance to the query.
The Related Keywords pane shows keywords retrieved by the query.
Any of these keywords can be added to the query through mouse action.
The remaining panes allow users to specify commands by mouse action or keyboarding .
Many studies support the general assumption that examples are helpful in programming  and problem solving .
A preliminary study we carried out observed specific ways programmers would use examples within our design framework .
Through a description of this study, we discuss below the specific issues of judging relevance, bridging the situation/system model gap, and supporting problem reformulation.
We observed subjects solving simple graphic programming tasks in order to determine what types of questions they would ask about an example and in general what kinds of information they would seek.
They were told that the example was related 10 a potential solution of the programming task, i.e., as if a query and location had already taken place.
They worked in an EMACS editor buffer and directed questions and comments to a human; the EXPLAINER prototype had not yet been implemented.
One task was to write a program to draw a clock face .
The subjects were given the example now represented in the EXPLAINER system and shown in Figures 1 and 7.
Subjects were observed through questions they asked, spontaneous talking aloud, and mouse cursor movement as they studied different parts of an example's code.
The indexing architecture of CODEFlf"DER makes usc of both a hierarchical arrangeme nt of categories and an associative index of keywords.
The function drrm:-circle i~ divided int?
A connCClion between a keyword and code object means that there is an excitatory association between the keyword and code object.
An arrow from a code object to a categor y means the object is contained within the category.
Other features, such as the need to draw numerals, were not so obvious.
Subjects studied and/or asked questions about the part of the example code that draws the labels_ Bridging the Situation/System l\lodel Gap.
The ex amp le code obviated some aspects of the system model : e.g., the name of the specific functions on the SYMBOLICS for drawing circles ,wd string labels.
The interdependency of location  and comprehension  in our conceptual framework  Occurs when users reformul ate their notion of the ta"k and its solut io n_ For example, one subject decided that the numeral s on the clock dial shou ld he calculated as integers and then converted to strings for plotting.
In the provided ex ample , lahels were computed in a different way.
The sUhject as ked for an additional exampl e that showed the type of conversion he wanted.
This is a rclati\Tly simple reformulation, and applies to only a part of the problem SO lution.
Reformulations that replac e the initial example entirel y are expected wh en hoth the CODEFINOER and EXPLAINER systems ope rate in nll1re rl'alistiL' sl, ttin g".
Some of the burden of query construction and relevance assessment must be shifted to the syste m by supplying knowledge in the world  that supports the cognitive tasks of location and comprehension.
Know ledge in the world can complement knowledge in the head.
They break down for two reasons:  users arc unahle to articulate complete queries and  in most sys tem s, so ftware objects are indexed under impkment:.lIion units and not application goals, leading to a mi sma tch between the situation and systelll model.
CODEFINDER is a starting point towa rd solving the se probl ems hy combining retrieval by reformul ation with associative techniques of retrieval.
Retrieval for complex ohjects such as software demands tools to aid in comprehension as well as location.
Users need to IIl1dersla lld the relrie\'ed object.
The EXPLAINER system emphaSi zes user-directed expl anati on of example programs to support users' comprehension of sofl\\'are ohjec ts.
Users enter the EXPWNER system after searching for possible examples in COOEFINDER.
For each example, EXPWNER begins by displaying the code and sample graph on the left half of the screen.
An initial description of a few lines of text is displayed on the right.
A pane at the bottom allows menu commands to be typed in manually as desired.
The pop-up menu is shown here in the center of the screen.
The constructed question is reflected in the Explanations Pane in italic type.
The text shown here reflects a history of a question-answer dialog in progress.
The "other examples" menu item allows users to see other possibilities found in CooEFINDER.
The conceptual framework in which we developed CoOEFINOER and ExplAINER was based on small knowledge bases to test the applicability and functioning of the basic mechanisms.
Problems of scaling information access methods to larger information spaces are well documented , and we will continue to evaluate our systems on larger information spaces.
In the experiment that led to the development of the scenario, users were allowed to ask questions about both domain and system knowledge.
To direct the expansion of the example base, we will test the system against userdefined tasks.
Our scenario is based on experiments in which users were assigned graphic programming tasks.
The value and the cost of a well-structured knowledge base must be compared to the benefit that can be obtained from requiring little a priori structuring.
The effort of constructing rich knowledge representations in CoOEFINOER and EXPLAINER is offset by what can be gained with better tools in the subdomain of graphics programming.
Two operational prototype systems, CooEfINDER and EXPLAINER, are being used to explore and clarify issues involved in this integration.
Future evaluations of the systems will continue to improve our understanding of the relationship between query specification and relevance evaluation.
We would like to thank the other members of the ARI project, especially Evelyn Ferstl , Petcr Foltz, Walt er Kint sch, and Curt Stevens with whom we shared m3ny discussions about the ideas and the systems discussed in this paper.
The resea rch was supported by Grant No, MDA903* B6-CO l~3 from the Army Research Institute.
Lewis, P. Reimann, R. Glaser.
Self-ExJ?lanation s: 1I0w Students Study and Use Examplcs III Learning to Solve Problems.
Information Retrieval by Constrained Spreading Activation in Semantic Networks.
Foltz, W. Kintsch, H. Niepcr-Lemke, e. Stevens.
Personal Illformation Systems and Models of Human Memory.
Department of Computer Science, University of Colorado, Boulder, CO, 1989.
End-User Modifiability in Design Environments.
HELGON: Extending the Retrieval by Reformulation Paradigm.
Human Factors in Computing Systems, CHI'S9 Conference Proceedings , ACM, New York, May, 1989, pp.
An Empirical Study of Retrieval by Reformulation on IIELGON.
The Vocabulary Problem in Human-System Communication.
Defining the Roles of Humans and Computers in Cooperative Problem Solving Systems for Information Retrieval.
Proceedings of the AMI Spring Symposium Workshop 011 Knowledge-Based Human Computer Commu1l/catioll, March, 1990.
Phase Transitions in Artificial Intelligence Systems.
The Role of Knowledge in Discourse Comprehension: A Construction-Integration Model.
Women, Fire, and Dangerous Things: What Categories Reveal About the Mind.
The University of Chicago Press, Chicago, IL, 1987.
Cambridge University Press, Cambridge, UK, 1988.
Can the Principles of Cognition Lower the Barriers of Programming?
Getting into a System: External-Internal Task Mapping Analysis.
Human Factors in Computing Systems, CHI'S3 COllference Proceedings , ACM, New York, December, 1983, pp.
Illductive Illformation Retrieval Using Parallel Distributed Computation.
ICS Report 8400, Institute for Cognitive Science, University of California, San Diego, La Jolla, CA, June, 1984.
The Psychology of Everyday Thillgs.
Descriptions: An Intermediate Stage in Memory Retrieval.
The Role of Learning from Examples in the Acquisition of Recursive Programming Skills.
Findillg alld Choosillg the Right Object in a Large Hardware Store -- An Empirical Study of Cooperative Problem Solvin$ amollg Humans.
Department of Computer SCience, University of Colorado, Boulder, CO, 1990.
An Essay 011 Software Reuse.
