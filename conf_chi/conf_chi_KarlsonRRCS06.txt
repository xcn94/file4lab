In this paper we describe a novel approach for searching large data sets from a mobile phone.
Existing interfaces for mobile search require keyword text entry and are not suited for browsing.
Our alternative uses a hybrid model to deemphasize tedious keyword entry in favor of iterative data filtering.
We propose navigation and selection of hierarchical metadata , with incremental text entry to further narrow the results.
We conducted a formative evaluation to understand the relative advantages of keyword entry versus facet navigation for both browse and search tasks on the phone.
We found keyword entry to be more powerful when the name of the search target is known, while facet navigation is otherwise more effective and strongly preferred.
While existing solutions do cater to small screens and low bandwidth, they are modeled after desktop web search, posing three primary usability issues for the mobile setting.
First, they rely on text entry as the method of input, even though the persistent trend toward smaller phones is directly at odds with the goal of achieving the efficiency of full-size keyboard text entry.
Second, the focus has been on search off the device, under-utilizing the device's expanding processing power and storage capabilities and thus unnecessarily impoverishing the search UI.
Finally, both the SMS and web search models support directed search tasks, but are less appropriate for browsing and exploratory search scenarios  that are quite complementary to the mobile setting .
We propose instead FaThumb: a keypad-driven, compact query interface for browsing and searching large data sets from a phone.
FaThumb uses a hybrid model to deemphasize tedious keyword entry in favor of fluid, iterative data filtering using hierarchical faceted metadata navigation and selection, with incremental text entry to further narrow results.
Our design is general enough for a wide variety of data sets both on and off device.
After introducing FaThumb , we report on a first iteration user study designed to understand the role of textbased versus facet-based search on a mobile phone.
Nearly 780 million mobile phones will be sold this year, with yearly worldwide demand projected to top 1 billion by 2009 .
As the mobile user base expands, so do device storage capacities and wireless services.
Not only are these phones accumulating more device-resident data such as email, appointments and photos, but they are also increasingly used as front-end interfaces to ever-larger external data sets, including web sites, traffic information, and Yellow Pages data.
Unprecedented volumes of data in the pockets of users have made mobile search a particularly timely topic.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Many information access interfaces present data attributes  that users can include in queries to large data sets, rather than expecting users to remember them.
Dynamic query interfaces  encourage iterative composition and refinement of complex queries by providing continuous visual update of the query results as users restrict data attributes included in the query.
When network latency prohibits dynamic queries, query previews  provide an overview of the data to lend insight into distribution characteristics and help avoid queries that return either massive or empty result sets.
Many desktop systems  have successfully integrated these concepts to improve exploration and understanding of large data sets.
FaThumb retains the spirit of these approaches, and maps hierarchically-organized attributes to the phone keypad in an attempt to offer the greatest access efficiency in the smallest display footprint.
Hierarchical classifications have been used previously in search interfaces.
Search results that include hierarchical labels can help users identify relevant items or further refine  searches.
Search engines such as Yahoo and OpenDirectory order results by relevance, but display each with a human-assigned hierarchical category; following the category hyperlink allows users to browse via the hierarchical category directory.
Other systems help users quickly identify appropriate subsets from voluminous results by organizing results into hierarchical categories .
FaThumb is most directly influenced by Flamenco  which couples faceted hierarchical attributes with query previews for use across all stages of search: query formulation, refinement and results browsing.
A large number of research solutions have been proposed to facilitate web search from a handheld device, primarily by improving results understanding and navigation for small screens , with only  designed specifically for the keypads.
FaThumb instead emphasizes efficient query formulation for keypad-based interaction.
Standard bookmarks and saved queries  help speed page revisitation, but most systems rely on device-specific text entry methods for ad hoc keyword search.
Word prediction and completion algorithms such as Tegic's T9 have the potential to reduce the number of entered characters, but also have the drawback that most fail for non-dictionary words, and may still require users to select from several alternatives.
While FaThumb supports keyword search, it favors dynamic result refinement through navigation and selection of hierarchically organized attribute values.
Several search engines and wireless service providers offer solutions to mobile search, either modeled after desktop web search  or using text-based queryresponse .
Unique navigation and presentation techniques are required to accommodate the constrained input and output capabilities of small devices.
FaThumb's approach most closely resembles category  above, but uses a zooming technique inspired by ZoneZoom for hierarchical navigation: ZoneZoom provides image zooming capabilities by spatially mapping areas of the display to hardware keys; pressing a key causes the display to zoom into the corresponding area of the user interface.
Information seeking strategies take many forms depending on the task at hand, user knowledge, and target data set.
For example, a user may have in mind a specific document she wishes to find on her desktop.
Though the task may be considered one of directed search, her approach will be influenced by whether she remembers the name of the file  or only the period of time in which it was last modified .
If the task involves finding a research paper on the web, she might instead search by some combination of topic, author, or related papers.
This approach may appear superficially similar to one she would use if instead she were generating a list of references, although in that case it might be considered a browsing activity given its openended nature.
We will use the following definitions for the purposes of this paper: a directed search is one in which the user knows the precise target in advance, while a browsing task is one characterized by specifying criteria that describe a data need, and which may evolve during search.
These concepts map closely to what others term navigational and informational queries for web search .
Leveraging data attributes for search has received much attention in recent years.
This approach not only reduces cognitive load through recognition, but allows users to reliably restrict results by attribute values rather than by keyword alone.
Hearst's evaluations over both text and image-based data sets have established the efficacy of faceted metadata within integrated search and browse environments.
Although the metadata values within a facet can be organized hierarchically, attribute values need not have a unique classification.
This means that the faceted hierarchy is in fact a directed acyclic graph, and that an attribute value may be reached via multiple paths in the hierarchy.
The same holds true for each data record, which may be found via any of its attributes.
For example, the "Terrier" record may appear in a pet database under the "Small" value in the "Size" facet, the "Brown" value of the "Color" facet, and the "Dog" value of the "Type" facet.
With FaThumb, we propose an analogous method for search both on and off device.
We have developed a prototype to explore whether the approach scales to mobile devices.
In our study, we use a Yellow Pages data set for the Seattle metropolitan area , but our design is intended to generalize to a variety of data sets, including personal 
Drawing on these existing on-line Yellow Pages resources and intuition, we therefore developed our own attribute classification hierarchy targeting small screens with the following properties: eight top-level facets, a maximum of eight metadata attributes at each lower level, maximal depth of five, and just over 200 terminal attributes.
Some attributes were naturally hierarchical , while for others, hierarchy was imposed as an organization strategy .
To ensure Yellow Pages entries could be navigated by business type, we developed a mapping between SIC codes and more user-friendly business types, organized hierarchically into a top-level category facet.
We obtained a Yellow Pages data table for Washington state with attributes of business name, address, phone number, latitude, longitude and associated Standard Industrial Classification  code number .
For the purposes of investigating a realistically rich data set, we augmented the metadata to include neighborhood, relative distance from four pre-set static locations , price , rating , hours, and days of operation.
Location-based values were computed from latitude and longitude for each item, while values for the remainder were assigned randomly, with only restaurants receiving price and rating classifications.
The FaThumb interface has four distinct structural regions .
Among the top three regions  an orange activation border serves to identify the active region, which is the one receiving input from the keypad.
In Figure 2a, the Facet Navigation region is the one that is active.
Users change the active region by pressing the up or down directional keypad arrows, causing the border to animate to the adjacent region.
In keeping with Smartphone design guidelines, the bottom region  is reserved for two menus accessed via proximal hardware buttons.
The menus' availability and functionality are dependent upon the state of the active region.
The Facet Navigation region represents a navigable tree of hierarchically organized facets, which contain metadata attributes of the Yellow Pages data set.
Each non-leaf node in the tree depicts a 3x3 grid of nine zones .
Each zone displays a facet or attribute label and a number indicating how many data records can be characterized by the label.
Figure 2a displays the root of the facet tree, from which we see that Yellow Pages listings can be described according to business category, relative distance from both predefined and real-time locations, absolute location, hours of operation, price classification, and consumer rating.
Three zones at the root level have specialized functionality.
The Favorites and Shortcuts facets are reserved for future use.
Favorites will store entire queries  the user has chosen to save, and Shortcuts will populate dynamically with labels from arbitrarily-deep locations in the overall value tree based on usage patterns, such as most recently or most frequently used, values.
The middle zone, on the other hand, is not a facet at all, but an Overview zone which serves as a spatial overview during navigation.
Most mobile phones lack touch screens so FaThumb is optimized for keypad interaction.
The Facet Navigation region is intentionally designed to map spatially to numbers 1 though 9 on the numeric keypad .
While this design restricts the branching factor of the hierarchy , its depth and balance are dictated only by the target data set.
For any domain, we believe consistency of facet location is crucial to promoting user mastery of the hierarchy.
Thus we opted for a terminating tree, meaning users must return to the top of the tree to explore paths that lead from other top-level facets.
On the other hand, as data sets grow, it may be appropriate to dynamically generate nodes within the facet tree to provide more efficient distribution of data among the available zones .
Dynamic strategies may be most effective at lower levels of the tree, since users may be more willing to browse a less familiar but more useful set of choices once they have already narrowed the data set by a few familiar initial selections.
Users perform facet-based queries by interacting in the Facet Navigation region.
A user navigates the facet space by selecting the zone she wishes to explore within the 3x3 grid.
Pressing a number on the keypad zooms the display into the associated zone: internal tree nodes zoom to the next hierarchical level, while leaf nodes expand to occupy the entire navigation region .
Each traversal propagates navigation state information to the Results region, which serves as a query preview by showing the data set filtered by the selected facet value.
A zooming animation accompanies each navigation.
At each traversal, the left menu changes to display the selected attribute label, both to remind the user of the filter that has been temporarily applied to the data set, as well as to allow the user to add the attribute permanently to the current query; pressing the left menu button adds the attribute label to the top Filter region as a search term .
Pressing the left menu button a second time removes the attribute term from the Filter region.
When displaying nodes other than the root, the right menu button serves as a shortcut to the top of the facet hierarchy.
Alternatively, pressing the back button returns to the previous level, and updates menus and results accordingly.
As an example of query formulation via facet selection, a user interested in inexpensive restaurants in downtown Seattle, might  navigate to and select Location SeattleDowntown,  return to the root, navigate to and select CategoryRestaurants,  return to the root, navigate to and select Price$.
Elements of  are shown in Figures 2 and 3.
Although navigational context might take many forms 
The Overview can be thought of as a stepped-pyramid viewed from above; each hierarchical level corresponds to a layer of the pyramid, with the root as the pyramid's foundation.
In the root view  the Overview serves as a key for FaThumb's color cues, which map each level of the tree to a color.
When a user presses a number on the keypad to navigate into a facet, the Overview captures the selection by displaying a block whose color corresponds to the current depth, and whose position within the Overview corresponds to the spatial position of the selection on the keypad.
For example, pressing 3 at the root to navigate to Location adds a purple block to the Overview in the upper right corner since 3 is in the upper right position of the numeric keypad .
As the user navigates deeper in the hierarchy, smaller levels are added to the pyramid to preserve previous selections , and thus convey the entire spatial selection sequence from the root.
This design is able to give both a sense of where the user is in the hierarchy and what command sequence resulted in that location.
The distribution of data across the zones  serves as a preview to encourage or discourage exploration of a path, depending on the task.
Zones corresponding to facet tree nodes with no associated data records are deemphasized using gray text , and cannot be selected.
Each facet-based search term added to the Filter region is visually tagged with a colored border in the Facet Navigation region.
The visual tags propagate to higher levels when the selected facet is buried within a zone's sub-tree as a way of providing information scent for the query terms .
By default, results are ordered alphabetically by identifier, but they can instead be ordered by other data attributes.
Pressing the right soft-key triggers a menu of available order options, which for the Yellow Pages data include: by alphabetical sort , by relative distance , by neighborhood, by price and by rating .
A checkbox is displayed in the menu next to the current ordering.
Each option is numbered 1 to 9; selecting the associated number reorders the result list and displays the selected sort attribute in each record's attribute column.
For example, in Figure 4c, the results have been ordered by consumer rating.
Once a user is satisfied with the search terms that have been added to the query , she can explore the remaining records by using the Results region.
When the Results region becomes the active region, it expands from the original five records to accommodate the first nine records .
The visible items are then numbered from 1 to 9 to support single-key access to listing details.
The left menu indicates the number of results which follow those displayed, if any .
Pressing the left softkey displays the next page  of results.
Once the end of the result list is reached, the left menu allows users to continue from the beginning of the list.
Users can page backward through results using the back button on the keypad.
We chose to not use the up and down directional keys for scrolling of the results because these buttons are dedicated to moving between regions of the interface.
A result record consists of two pieces of data: an identifier  and an attribute .
The Filter region holds both the facet-based attributes and freeform text terms which define the current search query, generically referred to as filters.
Filters are displayed in the Filter region as colored, labeled blocks that each occupy one third of the screen width.
The Filter region can hold an arbitrary number of filters.
While a maximum of only three filters are visible at any time, white arrows are displayed along the left and right borders of the Filter region to indicate the presence of off-screen filters.
Facet-based filters partition the data into two sets: items with metadata that match the given attribute, and items without.
Freeform text filters also partition the data, but instead by performing a string match over all meaningful record text.
Although an attribute may have a hierarchical "address" describing its position within the facet hierarchy, only the text of the leaf node in the hierarchical path is displayed in the filter bar.
However, the entire address from node to root is used as the filter criterion.
In contrast, no assumptions are made about the context of a freeform text term, which is matched against a predefined subset of the data and metadata.
In the former case, only Italian restaurants will appear in the result set.
The latter query term will include all of the listings of the former, as well as those that have "Italian" in any indexed attribute, such as a business named "Italian Auto Specialists".
Remaining filters then slide left to remove gaps and visually reinforce the current query.
Zero-length text filters are also removed.
For facet-based filters, the right menu serves as a shortcut to its position within the facet navigation hierarchy.
Pressing the right softkey animates movement of the activation border to the facet navigation region, at the same time animating a traversal through the hierarchy to the target filter.
The shortcut may be convenient in the case that a user wants to expand a query to explore options at the same level in the facet hierarchy as a previously selected facet.
We believe such convenient exploration interaction eliminates the need for an explicit OR query operator.
When the Filter region becomes active, the leftmost filter is automatically selected and shown with an orange selection border .
The left and right buttons move the selection border to adjacent filters within the Filter Region, scrolling to off-screen filters as necessary.
Moving the activation border beyond the rightmost filter adds a new  text filter to the query.
As long as the Filter region has focus, users can enter freeform search text using the numeric keypad.
If the active filter is a text filter, text will be appended to the existing filter text.
If instead the activation border is over a facetbased filter, the existing filters will slide right to make room for a new text filter .
Multi-word text in the same filter is treated as a phrase, while multiple separate text filters are treated as separate search terms.
At present, FaThumb supports multi-tap text entry, whereby each keypad number 2-9 is assigned 3 or 4 alphabetic characters.
Pressing a key once enters the first character, twice the second, etc.
A 600ms timeout determines whether a consecutive tap on the same key overwrites the last character or appends a new character.
After each timeout, the entire query is reissued and results updated, effectively providing incremental text search.
Substrings in the results region that match any of the freeform text filters are displayed highlighted in light blue .
Multi-tap is the original method for text entry using a numeric keypad.
While T9 single-tap word prediction has gained popularity, without modification it is unlikely to be effective for search over domains that use proper names  or user defined names .
FaThumb can be adapted to incorporate the most appropriate technique for the data.
FaThumb is implemented on top of Piccolo.NET , chosen because it runs on both desktop PC's running Windows and on the Microsoft Windows powered Smartphones.
Piccolo.NET supports zooming and animated transitions, both key design elements of FaThumb.
The current prototype runs in a simulated phone environment on a desktop PC that has the same display and input limitations as the Smartphone.
For the user study, we use an external keypad programmed to have the same key layout as the Smartphone.
The multiclause faceted queries defined by the FaThumb users' interactions are implemented by building and executing dynamically-generated Structured Query Language  statements for wide portability across a variety of database systems.
The prototype currently connects to a desktop Microsoft SQL Server database, but it is expected that a full SQL  will be available soon on the Windows Mobile Smartphone platform.
Meanwhile, our desktop prototype can lend insight into the value of faceted search.
When the selection border is over a filter, menu options only affect the active filter.
The left softkey allows users to preview the removal of a filter.
When pressed, the selected filter is disabled and removed from the query: the filter text becomes gray and the Results and Facet Navigation regions repopulate to reflect the new query.
Pressing the left softkey again re-enables the filter, again propagating to the Result and Facet Navigation regions.
This toggling behavior lets users easily see how that filter narrows the results set.
This behavior is especially important when the user is inspecting data with which they are unfamiliar.
We conducted a user study designed to help us understand the value of facet-based navigation compared to text-based search on a mobile phone.
It seemed clear to us that textbased search should be better for certain types of tasks, like looking for a particular business when the name is known.
It also seemed clear that facet-based navigation should be better for less well-defined or more complex searches.
For example, finding the closest, expensive, Chinese restaurant would be quite hard  using only text-based search, since the name of the business is not known.
But to level the playing field between the two methods of search, we allowed search of the facet space using text entry.
That is, users could type "Chinese" and "$$$$" and get a list of expensive Chinese restaurants.
The study was designed to test the above hypotheses as well as assess subjective preferences for the two techniques, in addition to collecting first iteration feedback about the FaThumb user interface.
Participants were recruited with the following characteristics: each must have owned a mobile phone with numeric keypad entry for 3 months and have sent at least 2 text messages a week.
Seventeen participants  ranged in age from 20 to 53 with an average of 29.2 years of age and sent an average of 17 text messages per week.
Participants received 2 software gratuities for their time.
Search Type Directed Search Depth  Shallow  Deep  Shallow  Deep  Shallow  Deep  Task Text  What is the address of the BlueBottle Art Gallery?
What is the address of the Safeway Grocery closest to me?
What seafood places are there in Issaquah?
What inexpensive  repair store in Queen Anne is closest to me?
What's the name of the 24-hour pharmacy in Fremont?
The study design was a 2  x 3  x 4 trials within subjects design.
Input type was counterbalanced across participants, as were the task sets .
However, search type was presented to subjects in order of increasing complexity, moving from directed to simple to complex browse.
The study was run using a desktop simulation of the Smartphone user interface.
A 2.8 GHz Pentium 4 Compaq PC with 2G of RAM was used to drive two side-by-side NEC MultiSync LCD 1880SX monitors set at 1280x1024 resolution.
Users interacted with the FaThumb interface using an Ergodex DX1 Input System configurable keypad arranged to mimic the Smartphone keypad.
A Compaq keyboard and Microsoft Intellisense mouse were used as input for question answering at the completion of each task.
Dependent variables collected during the study included task time, error rate, logs of interactions per task, user satisfaction ratings and overall preference.
We also collected observed usability issues and comments from our participants.
All measures other than satisfaction ratings and preferences were automatically collected via logging tool installed on the participant's machine.
To investigate whether facet navigation could outperform keyword search, even with an unfamiliar hierarchy, task were carefully balanced for query complexity.
Under these constraints, we did not expect to faithfully preserve userbased tasks.
Tasks were therefore chosen to be representative of those we imagined real users would perform on their phone under various conditions: at work, at home, and while in mobile situations.
Twelve pairs of isomorphic tasks were developed.
To be representative, four task pairs were assigned to each of three search types, which increased in complexity based on the number of facet selections or free-text terms required .
For example, directed search tasks involved searching for a specific business, while browse tasks presented varying numbers of target attributes.
We also classified tasks as "shallow" or "deep" according to the minimum number of hierarchical levels visited to complete the task, although final analysis was strictly by search type.
Tasks were ordered by complexity  to provide users familiarity with the hierarchy before proceeding to more complex tasks, which might be unfairly penalized otherwise.
Participants were run in pairs with experimenter present.
After greeting the participants, the experimenter presented the study procedure and walked the participants through an interactive tutorial, highlighting all key interaction features of the interface design.
Upon completing the tutorial, eight practice tasks representing each condition of the study were carried out with the experimenter watching.
Once the practice phase was completed , the study proper was begun.
Participants performed all tasks relating to either text entry or faceted navigation in a single block of trials before moving on to the other input type.
Study control software was run on the left monitor and the interface was presented on the right.
A trial consisted of the following steps.
After reading the task, users hit a start button to begin task timing.
Upon finding the search target, users hit a stop button and entered the answer in a text field.
While correctness was not required to move onto the next trial, we did analyze for percent correct after the session.
Participants hit a `next task' button to proceed.
Upon completion of all 12 search trials  for a given input type, users completed a satisfaction questionnaire and proceeded to the next block of trials.
At the end of the entire session, users provided overall preference ratings and general comments.
The experimenter debriefed the participants as to the purpose of the study,
A 2  x 3  x 4 trials repeated measures Analysis of Variance  was carried out on the task time data.
In order to run the analysis, averages were used to fill cells of missing data.
Missing data was a problem because incorrect answers were sometimes provided and could not be included in the task time analysis .
In addition, 4 trials were lost due to system failure and 3 trials were thrown away due to misleading task phrasing.
On average, facet navigation was slightly faster than text entry, , but the difference was not significant.
As for search type, post hoc analyses with Bonferroni corrections showed that the simple browse condition was significantly faster than either directed search or complex browse at the p=.05 level.
The trials did show an increase in complexity as per design, since the fourth trial was significantly slower than the others .
For an explanation of the search x input interaction, see Figure 5.
Starting with text entry, it is clear that going from directed search to simple and then complex browse slows the user down.
This is not surprising since knowing a name of a search target  is advantageous to the text entry task.
However, this was not the case for faceted search task times.
The faceted simple browse condition was significantly faster than the others.
However, it is also clear that when the task provided a specific target name as in the directed search condition, facet navigation was much slower.
A 2  x 3  x 4 trials repeated measures Analysis of Variance  was carried out on the percent correct data from the search trials.
No significant main effects were observed at the p=.05 level.
The input x trial interaction can be explained by the fact that as trials got increasingly more complex, text entry became more difficult, while faceted navigation did not suffer as much.
The search x trial interaction suggests that the simple browse search tasks suffered more from the increasing complexity  of trials than did the other two search task types.
A 2  x 13  RM-ANOVA was carried out on the satisfaction questionnaire ratings.
Text entry was rated significantly lower in terms of satisfaction than was facet navigation overall .
Scales for mental demand, physical demand, and frustration were reversed so that high ratings indicated positive opinion.
Average ratings for each input type are indicated in Figure 6.
User ratings were high overall for both input types given this was a first iteration study of FaThumb.
User comments were optional, and overall quite positive.
We report only on the strongest trends, starting first with those for text entry, then those for facet navigation.
Although two users' comments were strongly supportive of text entry, the remainder  tended toward neutral or negative.
Participants most consistently  expressed frustration with text entry when tasks included constraints that were not searchable, such as days or hours of operation.
By contrast, participant comments suggested general enthusiasm for facet navigation, including that it was easy to learn and use , fun , fast  and effective in increasing response confidence .
The most common negative comment was frustration with identifying the appropriate business classification for task targets.
Because the four facet navigation practice tasks provided users only minimal exposure to the hierarchy prior to the timed phase of the study, users were forced to rely on exploration and intuition to locate facets, which at times resulted in lengthy navigation.
Results scan errors : When sorting could not be used to place the target item at the top of the results list, participants made identification and copy errors when scanning results.
These problems were likely due to the fact that the prototype did not allow users to highlight or select items, which otherwise would have allowed users to visually anchor or verify choices.
Item selection within the result list presents similar problems to those for menu item selection.
In this case, however, a 3x3 layout is inappropriate since the dynamics of the list make fast linear scan a priority.
Using up/down arrows to highlight items is also problematic, since it interferes with their dedicated use in activating interface regions.
Fortunately, highlighting an item by pressing numbers 1-9 has a lower commitment cost than for menus, which close immediately upon item selection.
Here, users can verify a selection before pressing "enter" for further details.
5. Business classification errors : Small zones limited the length of facet and attribute labels, while a narrow, relatively shallow navigation tree lead to business categories that were quite general.
Both issues resulted in classification ambiguity.
At the same time, some facets were arguably misclassified .
Iterative refinement of the hierarchy and user familiarity would certainly reduce these errors, but they are likely to be typical of errors encountered for any new classification.
This makes it all the more encouraging that users provided such strong preference for facet navigation.
Participants primarily requested minor feature additions rather than offered fundamental usability suggestions.
Thus we draw on our analysis of user error types and experimental observations to better understand usability issues in the current design.
To investigate reasons for error, we reconstructed navigation paths for tasks answered incorrectly, and then classified error types into 5 categories: 1.
Incomplete search criteria : The majority of errors occurred when users failed to use all search criteria, or used incorrect criteria.
Since these errors manifested only for tasks that required multiple search terms, the most likely explanation is that complex tasks taxed user memory.
Had tasks originated from personal needs, such errors may have been greatly reduced.
Failure to sort : Users sometimes forgot to  sort the data set, which resulted in task error.
This suggests that some users do not map tasks involving comparison terms 
Incorrect sort criteria : While some portion of the sorting errors can be attributed to memory errors, the sort interaction clearly posed a usability problem.
To order results, users were required to map a linear list of menu items to the numbers 1-9 on the keypad.
Despite visual feedback provided during they key press, users were observed returning to the menu to verify selection.
Serial item selection using the up and down arrows may have improved confidence and reduced errors, but would have been slower.
Based on user feedback and our own observations, we found users adapted quickly to the facet navigation and selection, suggesting the spatial arrangement and hierarchical structure of facets holds great potential for search.
However, users were at times frustrated when items were not classified as expected, and some either did not understand the role of sort for search tasks or did not understand how sort was supported in FaThumb.
FaThumb's primary challenge may be its generalization to alternate data sets.
Given the positive response to facet navigation, successes must have either been more common than failures, or otherwise were more gratifying than user mistakes were frustrating.
Even so, first-time users struggled with the classification scheme for some tasks.
We would like to extend the FaThumb paradigm to a wider variety datasets such as email, contacts, appointments, photos, cached web pages, traffic information, stocks, music collections, or movies listings, in order to understand the elements of classification structures that promote satisfying user experiences.
Another potential concern is that some users did not sort the result list when necessary.
One user gave insight into the problem when he commented he would have liked "closest to me" as an attribute in the facet tree.
This suggests some users may not view attribute selection and sorting as fundamentally distinct operation types.
We would therefore like to investigate whether integrating a subset of sort operations into the facet space improves performance for appropriate classes of tasks.
We designed FaThumb as a search solution for devices with limited input and display capabilities - specifically keypadbased mobile devices.
While we have demonstrated the viability of our interface, technical limitations prevented us from validating the design under mobile scenarios.
We therefore plan to port our prototype to Smartphones and study FaThumb in the field with up-to-date databases either stored locally or accessed remotely via GPRS.
Finally, we anticipate user comfort with zone-based navigation will transfer across a broad array of devices and contexts.
We intend to investigate its potential for phonebased menu structures, as well as explore how a zone-based faceted search interface might gracefully transition from a phone to a desktop to a wall-size display form-factor.
We described a novel search user interface for navigating large data sets on a mobile phone.
We discussed our design motivations and explored their efficacy via an empirical user study using a wide variety of search complexity in the tasks.
The user study confirmed our basic hypotheses - if you know something specific like the target name, text entry  is faster.
If you only know data characteristics, facet navigation is faster.
Ultimately, both techniques are needed because real world tasks require both.
Comments made by study participants suggest that when users become familiar with the taxonomy, the FaThumb facet navigation technique is highly desirable.
