Finding relevant information within the vast amount of information exchanged via feeds is difficult.
Previous research into this problem has largely focused on recommending relevant information based on topicality.
By not considering individual and situational factors these approaches fall short.
Through a formative, interview-based study, we explored how five software developers determined relevancy of items in two kinds of project news feeds.
We identified four factors that the developers used to help determine relevancy and found that placement of items in source code and team contexts can ease the determination of relevancy.
In this paper, we take this direction and present the results of a small formative study that investigated two questions: how does a user determine relevance and can the context of the situation be used to help a user to determine relevance?
Our aim was to allow the formation of data-driven hypotheses that can be subjected to more detailed testing.
We chose to study a team of software developers because this situation allowed us to study multiple individuals working with similar information items in a similar work environment.
Our formative study involved a team of five developers who use IBM's Rational Team Concert  environment.
RTC includes a default feed reader that provides updates about several information streams, including changes to shared work items and changes to shared code.
Over the period of a week, we interviewed each developer two times, presenting each with a subset of the information items in their feed reader and asked them questions related to the relevance of those items.
In all, we studied 291 news items.
We found that each user had their own definition of relevance, ranging from an item being relevant because it impacted the individual's work in the present to more generic determinations that the item may help to do one's job in the future.
We also found that users use the kind of information stream, the content of an item in the stream, the target of the content, their relationship with who created the item and whether or not the news had been discussed elsewhere to determine relevancy of individual items.
Finally, we found that presenting news items in the context of a fragment of a developer's work appears to hold promise for easing relevancy determination.
These findings lead to hypotheses that can inform future studies and that can suggest new approaches for automated support for managing information streams.
Information streams--tweets, status updates from social networking services and other RSS feeds--enable users to stay aware of information that might be relevant to them.
Users of such information streams face two problems.
First, they must determine which streams contain information of information.
Second, in many cases, not all of the information in a stream is relevant, forcing the user to separate the wheat from the chaff.
Malone identified this second problem in the context of distribution lists more than twenty years ago .
Surprising to us, there appears to be very little formative research about the question of how to determine relevant information in a stream.
Instead, the research has focused on how to recommend items within a stream, largely based on topicality; for example, the approach of Chen et al.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
How users determine relevance of information has been considered in terms of email systems .
Two of the factors for determining relevance identified in our study overlap with these findings, specifically "content" and "relation with creator".
Our work independently finds these factors without presupposing that message characteristics are the only way of exploring relevancy.
In addition, our work identifies that the structure of information, such as links between work items and change sets, can also play an important role in relevance determination.
Our study extends this work by investigating how context, such as the source code or the team, can help in this sorting.
A number of researchers have attempted to determine relevancy automatically using recommender-based approaches.
These approaches do not try to understand how users define an item of information as relevant to their current situation.
Other research has looked at the problem of staying aware of relevant information.
Palantir , for example, provides awareness of changes to the source code in context of a developer's workspace by decorating code in the environment as to whether or not it has been changed by someone else.
In contrast, our approach focuses on a feed view of changes and considers the placement of news items in the context of a fragment of source code instead of the entire system.
In addition, Palantir only indicates a change, whereas our approach presents the news item, which also provides a rational for the change, such as the work item causing the change.
They did not consider how developers assess the relevancy of the feeds or the items within, which is our focus in this paper.
For each participant, we randomly selected the items to present from the set of all items that had occurred for the participant over the previous three days.We ensured that the presented items represented both feeds and that the participant was not the creator of the item.
In each session we asked each participant to review the items and to tell us whether or not the item was relevant, how relevant the item was and why the item was relevant .
Participants had the option to read and explore the item and related information as much as desired.
We deliberately did not define relevance for the participants to allow investigation of differing ideas of relevance between the participants.
In the first interview session, the news items were presented in a list, based on the interface of traditional feed readers .
In the second interview session, we asked the participants to review an additional 30 news items.
We first showed these additional items in the context of a fragment of the related source code .
If the item was not related to the source code, it was shown in a flat list below the code.
We asked the participant whether the context changed his determination of the item's relevance and whether or not the context was helpful.
Next, we showed the items in terms of a team context , in which a news item was shown underneath the team member who caused the creation of the news item.
We asked the participant the same questions for the team context as for the source code context.
We chose to investigate source code and team contexts because developers had earlier described this kind of information as critical to many questions they need to answer .
In this paper, we examine whether using this information as context can help a developer determine the relevancy of new information.
Each interview session took between 20 and 60 minutes.
All interviews were recorded and the interviewer  took handwritten notes.
Due to the exploratory nature of our study, we parsed our data using an open coding technique to develop and identify categories of data .
For our study we interviewed a sample of five developers  from a development team within a large corporation.
The team was chosen based on their use of an environment that contains project feeds  and the access we were granted to their project specific changes and information.
The participants had between 4 and 24 years of professional development experience  and at least 20 months of experience using RTC .
We interviewed each participant twice, with four days in between the first and the second interview.
In each interview, we presented the participant with a list of 30 items1 from two default feeds that exist in RTC.
During the study period, a mean of 50  items per day were available to the participant in their feed reader, created by a mean of 5  authors.
In total, our study gathered feedback on 291 news items.
Participants perceived more of the change set news items as relevant compared to work item news; participants perceived 54 of the 81  change set news items as relevant or somewhat relevant, whereas only 49 of the 210  work item news were considered relevant or somewhat relevant.
Since all participants worked on the same team, many of the news items overlapped.
In the second set of interviews, we placed the items into the source code context .
Of the 150 news items considered in these interviews, 37  were related to the source code on which the team was working.
All of the news items could be related to team members and could thus be shown in the context of the team member that authored the item .
More than the five developers in the study were referred to by news items so the team context involved eleven team members.
Although all participants knew of the feed reader in RTC, only one participant described using the view on a regular basis.
Others just used it occasionally or very rarely.
Instead, they often used other, more specialized views available within RTC to monitor changes.
In particular, all participants stated that they regularly monitor changes to the source code, the information summarized in the change set news, using a view called the Pending Changes View.
Each participant defined relevancy of a news item differently: a news item is relevant when it impacts the code that I am familiar with , when the information is useful to me now or in the foreseeable future , when it's in an area in which I am an expert of, interested in and almost are lacking expertise , when it helps me to do my job at some point  and if it is in an area that I see myself as a keeper or knowledgable in or critical to the project .
Classification of the detailed reasons given by participants when determining relevancy suggests nine broad categories .
Some of the categorized reasons were used mainly for identifying an item as relevant.
For example, in 16 cases, participants described that the item being about a change set is why the item was relevant.
Other categories are about why an item was irrelevant, such as an item being not from someone on the participant's team.
Finally, some of the categorizes were used to identify items as relevant as well as irrelevant.
As described below, participants did not apply consistent criteria for determining relevancy.
All participants generally rated change set news as more relevant than work item news.
One participant even went as far as saying that all change set news for the project are relevant but that work item news are not relevant as too many items appear and much of the information was available for the team on a physical white board .
This content-based approach is well-supported by today's tools that support feed subscription based on content.
However, as only 67% of all change set news and 23% of work item news were considered as relevant, this statement is not well supported by the data from all participants.
Furthermore, this same participant  admitted that because he generally ignores work item news, he also misses questions asked of him through work items, suggesting that a content-based approach has significant drawbacks.
Other participants considered the type of the content, as opposed to the type of the feed, to determine relevance.
For example, most participants stated that work item news concerning test cases were not relevant.
Other factors did override these general trends.
For instance, the participants described that the state of the project affects the relevancy of work item news referring to test cases.
In some project states, such as when the system fails to run, work item news related to testing is more likely to be deemed relevant.
This trend of using the type of an item was also seen in other work item news deemed irrelevant, such as items on the addition of a work item to a feature  or on the change of a subscriber to a work item .
As with the content, the relevance based on the target of the content is also very dependent on the situation and the individual.
For instance,  stated that even though an item is not in an area he worked on, it could be useful for the future and thus perceived as relevant.
Tools could be built to help automate this factor of relevance determination; tracking data about which code a developer touches and changes could be used to filter information streams to only show items on which a developer does  work.
Three more participants  conceived the team context as helpful, in particular in situations in which you do not have to work with a lot of source code, such as quality control.
In most cases, an item created by a developer not on the direct team of the participant was perceived as less relevant .
However, when the participant worked with a developer from a different team on a regular basis due to project dependencies, the item was perceived as highly relevant .
Some participants stated that a combination of factors may make an item relevant; for instance, if an item was created by a certain teammate and touched an area of related work it was relevant .
Tools could be built to support the use of combinations of factors in automating determining relevance of items.
A better understanding of how users determine relevance of items from feeds is needed to build better tool support to help users deal with the vast amount of information flowing to them in this form.
Our study of how developers determine the relevancy of items in project-related feeds resulted in a description of four factors that impact relevancy.
Only one of these factors, the type of information stream, is wellsupported by today's tooling.
Other factors such as the target of the content and the relationship with the creator appear plausible to develop.
The fourth factor, previous interaction, requires additional study to better understand its impact in the determination of relevancy.
Our study also shows that the placement of information stream items into user-oriented context, even as fragments, can be helpful in determining relevance.
Further study is needed to understand how these factors generalize into other settings.
Whether or not the news had been discussed in another setting had an impact on the perceived relevance of the corresponding news item when it appeared in the feed.
Some stated that work item news were not interesting because the news had already been discussed in the planning sessions .
Others stated that seeing a news item related to a previously discussed issue was relevant as it confirms what is known .
One participant  had mixed views and identified one item as relevant and another one as irrelevant based on having previously discussed these items.
Providing support to automatically determine if news had been seen in another setting appears much more challenging.
A better characterization of the impact of this factor would be helpful to ascertain in future studies.
Short and tweet: experiments on recommending content from information streams.
Understanding email use: predicting action on a message.
N. Ducheneaut and V. Bellotti.
E-mail as habitat: an exploration of embedded personal information management.
T. Fritz and G. C. Murphy.
Using information fragments to answer the questions developers ask.
A. Sarma, Z. Noroozi, and A. van der Hoek.
Palant ir: raising awareness among configuration management workspaces.
A re-examination of relevance: toward a dynamic, situational definition.
A. C. Strauss and J. Corbin.
Basics of Qualitative Research: Grounded Theory Procedures and Techniques.
Awareness 2.0: staying aware of projects, developers and tasks using dashboards and feeds.
Although participants stated that their knowledge about the part of the code to which the news item related was used in determining relevance, only 37 of 150  were easily determined to relate to the code on which the participants worked.
In 20 of the 37  cases, participants considered the source code context to be helpful.
In 9 of 37  cases the participants referred to it as being somewhat helpful and in 8  cases as being not helpful.
In particular, when the short form of the summary used to identify the news item was too generic, such as "delivered 2 change sets", the context provided a significant benefit to the participant in explaining the item.
When asked about source code context in general, three out of the five participants considered the placement of news items in context helpful .
One of the three stated that he "had problems with the  out of context, but  the ones within,  pretty quick" .
