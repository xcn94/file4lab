We describe an approach to acquiring infonnation during the creation and use of domain-oriented design environments.
Our model consists of three phases: seeding.
A seed for a domainoriented design environment is created through a participatory design process between environment developers and domain designers by incorporating domain-specific knowledge into a domain-independent architecture for design environments.
Evolutionary growth takes place as domain designers use the seeded environment to undertake specific projects.
Reseeding is a process that reinvolves the environment developers to help domain designers better Ofganize, formalize, and generalize knowledge added during the use phases.
The approach described in this paper is motivated by how large software systems, such as SymboJics' Genera.
Unix, and the X Window System, have evolved over time.
In such systems, users develop new techniques and extend the functionality of the system to solve problems that were not anticipated by the system's authors.
New releases of the system often incorporate ideas and code produced by users.
This paper describes our work on the creation of a seed , the evolutionary growth , and reseeding efforts organize the content of the information spaces.
We illustrate our conceptual framework in the domain of computer network design, which involves complex artifacts that are con.
The domain itself is also constantly changing as new technologies are developed.
The following sections describe  the problems we are addressing,  the evolution of the information spaces, and  the details of our approach.
We have developed domain-oriented design environments  to support design in a variety of domains, including user interfaces , buildings .
Permission to copy without fee all or part of this material is granted provided that the copies ate not made or distributed for direct commarcial advantage, the ACM copyright notice and the titla of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery.
Knowledge acquisition is a crucial issue in the creation of effective information systems of all types .
There have been two extreme approaches: one is to input information in advance of use  and the other is to start with an empty system and allow its information base to grow and become structured as a consequence of use .
Neither approach is adequate for the information needs of designers.
Traditional knowledge acquisition approaches  fail to capture tacit knowledge l9}, because designers know more than they can tell environment developers.
Tacit knowledge is a part of human expertise that surfaces only in the context of solving specific problems.
The "just-provide-an-empty-framework" approach requires too much work of designers in the context of a specific project.
The difficulties of capturing design knowledge from design projects are well known .
Documenting interferes with the thinking process itself, disrupting design and requiring substantial time and effort that designers would rather invest in design.
Designers typically find it difficult to structure their thoughts in a given fonnat, regardless of the fonnat used .
In addition, domain designers often lack the knowledge and the interest to fonnaIize Imowledge so it can be computationally interpreted 24.
Argumentation is a semiformal representation in which informal textual and graphic records are linked by formal associations.
Our process model for continual development of design environments from an initial seed through iterations of growth and reseeding is illustrated in Figure 1: * The seeding process, in which domain designers and environment developers worle together to instantiate a domain-oriented design environment seeded with domain knowledge.
To illustrate the evolution of design environments, we discuss seeding, evolution through use, and reseeding in detail in the following three sections.
To overcome the problems described above, we developed a process model that supports continual development of design environments.
Designers are more interested in their design task at hand than in maintaining At the same time, important the knowledge base.
Rather than expect designers to spend extra time and effort to maintain the knowledge base as they design, we provide tools to help designers record infonnation quickly and without regard for how the information should be integrated with the seed.
In our model, knowledge base maintenance is periodically perfonned by environment developers and domain designers in a collaborative activity.
Our domain-independent design environment architecture plays an important role in the continual development of design environments.
It provides a structure for domain knowledge and mechanisms for delivering knowledge as it is needed to support the design task at hand.
The architecture consists of the following five components:  a construction component,  an argumentation component,  a catalog of interesting design examples,  a specification component, and  a simulation component.
Design environments contain information encoded using a variety of representational fonnalities.
Construction kits and critics are considered formal representations of design knowledge because they are interpreted by the computer.
A seed is built by customizing the domain-independent design environment architecture to a particular domain through a process of knowledge construction.
Although the goal is to construct as much knowledge as possible during seed-building, for complex and changing domains complete coverage is not possible.
Therefore, the seed is explicitly designed to capture design knowledge during use .
Domain designers must participate in the seeding process because they have the expertise to detennine when a seed can support their work practice.
Rather than expecting designers to articulate precise and complete system requirements prior to seed building, we view seed building as knowledge construction  rather than as knowledge acquisition .
New seed requirements are elicited by constructing and evaluating domain-oriented knowledge structures.
The seeding process for the NETWORK design environment  was driven by observations of network design sessions, prototypes of proposed system functionality, and discussions centered on the prototypes.
In design sessions, a logical map of the network being designed served to ground design meetings, discussions, what-if scenarios, and disagreements.
The logical map was chosen as the central representation of the artifact in network design, and a prototype construction kit was implemented based on the logical map .
During seeding, environment developers and domain designers collaborate to create a design environment seed.
During evolutionary growth, domain designers create artifacts that add new domain knowledge to the seed.
In the reseeding phase, environment developers again collaborate with domain designers to organize, formali7.e, and generalize new knowledge.
NETWORK seed indicated that designers need support for communication in the form of critiques, reminders, and general comments 21.
Pointer, annotation, and sketching tools were integrated into the constmction kit so talking about the artifact takes place within the artifact.
An important lesson we learned during the seeding of NETWORK was to base our design discussions and prototyping efforts on existing artifacts.
Discussing the existing computer science network at CD Boulder was an effective way to elicit domain knowledge because it provided a concrete context that triggered domain designers' knowledge .
We found high-level discussions of general domain concepts to be much less effective than discussions focused on existing domain artifacts.
Information to seed NETWORK was acquired from existing databases containing information about network devices, users, and the architectural layout of our building.
The NETWORK seed contains formal representations of ~ proximately 300 network devices and 60 users.
Autocad databases created by facilities maintenance personnel provide architectural details of about 100 rooms.
This information is represented in NETWORK's construction kit and in the underlying knowledge representation formalisms.
The informal part of the NETWORK seed includes notes from the systems administration class, knowledge about the various research groups, and electronic mail of the network designers.
During the use phase, each design task has the potential to add to the knowledge contained in the system.
New construction kit parts and mles are required to support design in rapidly changing domains .
Issue-based information in the seed can also be augmented by each design task as alternative approaches to problems are discovered and recorded.
The information accumulated in the information space during this phase is mostly informal because designers either cannot formalize new knowledge or they do not want to be distracted from their design task.
Our approach to this challenge is to view the design environment seed as a medium for communication as well as design.
Our critique of current design systems is that they function as "keepers of the artifact," in which one deposits representations of the artifact being designed.
Talking about an artifact requires talking with the artifact.
Therefore later interpretation of the discussion requires that the discussion be embedded in the context in which it was originally elicited.
The most important implication of this view is that design artifacts must not be artificially separated from the communication about them.
Observations of collaborating designers using NETWORK show that artifacts serve as medium for communication.
Furthermore, discussions about the artifact guide the in-
When communicating asynchronously via textual annotations.
This integration was seen in two ways.
First, in design sessions videotaped for analysis, deictic references 
A long-term study of network designers showed that users took advantage of embedded annotations and made frequent use of deictic references .
Second, discussion about the artifact guided the incremental design process.
Designers took every opportunity to illustrate critiques.
Only rarely was a detailed comment made and not accompanied by changing the artifact.
The logical map mentioned above served not only to represent the real network, but also as a medium through which changes were considered and argued .
It focused as well as facilitated discussion.
Collaborating designers preferred to ground discussions in design representations.
The logical maps served to  point out inconsistencies between an appealing idea and its difficulty of implementation,  remind participants of important constraints, and  describe network states before and after changes.
The task of reseeding involves environment developers working with domain designers.
After a period of use, the information space can be a jumble of annotations, partial designs.
One class of tools suggests possible formalizations that could be added to the information space based upon the variety of infonnation that the system already has available from both the seed and information added during use.
The formally represented information, along with the placement, textual content, and textual attribute values, can be used by these tools.
For example, one tool in NETWORK looks for vocabulary in textual values of attributes that might relate to other objects and suggests replacement  by a relationship between the two objects.
An example of this would be a workstation  in the design that has an attribute "disk server" with the value "c3dl" as a text string.
Tools can also make use of possible references found in the textual display of objects to suggest new attributes and relations.
As an example we will discuss the text annotation in Figure 3, which was taken verbatim from an electronic mail message between network designers.
Recognizing some of the references to concepts already formally represented in the system provides domain- and design-specific cues as to the content of the object.
Based on the occurrence 'of these text references.
In this example, the system has recognized references to devices, and places already known to the system.
Further, these new attributes can be used later to locate related information.
Other Goals of Reseeding In addition to the goal of formalizing information, reseeding h~ the goal of having environment developers help to orgaruze and generalize the information added to the information space during the use phase.
The organizational aspect of reseeding is necessary because the information space, through modification by designers using the system, eventually becomes inconsistent.
When an information space is disorganized, it becomes difficult for designers to locate information that they need.
This also makes it more difficult to find the "right" place to add new information, thereby compounding the problem.
Disorganization can occur when information about the same topic has become located in separate parts of the information space, or when information has been put in a location where designers cannot find it.
Reuse of information between projects requires the generalization of task-specific information entered during use.
The goal is to create more generally applicable information by integrating information about specific situations.
This is related to the need for reorganization when variations of the same ideas have been added in project--oriented parts of the information space.
An example of generalization in the network domain is that while documenting changes to a design , infonnation concerning the conversion of sections of a network to a new networking standard will likely appear with each conversion of 11 subncl.
The model successfully addresses a number of important issues.
On the one hand, it is an intentional effort to recognize the importance of specialization at the expense of expressive generality 4}.
By ~roviding a significant seed of knowledge for domain-oriented design environments, specific design projects do not have to recreate domainoriented abstractions but only have to extend the seed where it is incomplete or inaccurate for their task.
New designs can be described using concepts.
The model avoids the pitfalls of expert systems approaches.
Our model shares many objectives of other group memory projects, including the need for a maintenance activity separate from day-to-day use 1, 27}.
However, our emphasis on domain orientation sets our approach apart.
In particular, domain orientation is an interesting perspective from which to view two major challenges for shared and evolving information spaces:  the development of classification conventions that support information location, and  the ability to actively deliver information to users when it is relevant to their task at hand .
Systems designed for general information storage and retrieval face the difficult task of developing information categories that make sense to the individuals who share the information I}.
General categorization schemes are dependent on the group members that develop and use them, and therefore will change as group members come and go.
Design domains, on the other hand.
Domain conventions have developed over time to enable designers to conceptualize design problems and to communicate important ideas.
The relative stability of domain conventions make domain-oriented systems less sensitive to turnover in group personnel.
General-purpose information spaces can have only a limited notion of the user's task at hand.
Domain-oriented design environments exploit domain semantics and the design context 8 to actively notify designers when there is information about which they should know.
Active information delivery helps designers to detect inconsistencies early in the design process, and to learn about design concepts of which they were unaware.
A seed is a collection of knowledge and procedures capable of growing - of sustaining growth - through interaction with domain designers during day-to-day use.
It stimulates, focuses, and mediates discussion - and thus knowledge capture - during the incremental growth phase.
The seed must be capable of capturing the information elicited from the use of the system.
There is no absolute requirement for the completeness, correctness, or specificity of the information in the seed.
In fact, it is often its shortcomings in these respects that provoke input from designers.
Evolutionary growth during system use is a process of adding information related directly or indirectly to the artifact being designed.
Thus, the artifact  is the foundation for evolutionary growth.
During the growth phase the designers who use the system are primarily focused on their task at hand.
Information input is highly situation specific - tied to a specific artifact and stated in particular rather than in general.
For a while, information grows in an orderly manner, but eventually order breaks down and the system begins to degrade in usefulness.
Reseeding is necessary when evolutionary growth stops proceeding smoothly.
During reseeding, the system's information is restructured, generalized, and formalized to serve future design tasks.
The reseeding process creates a forum to discuss what design information captured in the context of specific design projects should be incorporated into the extended seed to support the next cycle of evolutionary growth and reseeding.
Tools contained in design environments support reseeding by making suggestions about how the information can be formalized.
ACKNOWLEDGMENTS The authors would like to thank the members of the Human-Computer Communication group at the University of Colorado, who contributed substantially to the conceptual framework and the systems discussed in this paper.
In particular, Kumiyo Nakakoji provided invaluable assistance.
The research was supported by  the National Science Foundation under grants No.
Where Did You Put It?
Issues in the Design and Use of a Group Memory.
Human Factors in Computing Systems, INTERCHI'93 Conference Proceedings.
SUMMARY This paper has described a process model for the evolution of domain-oriented design environments through use.
We consider design environments as seeds that grow by accumulating design knowledge as they are used to support design tasks.
Periodically, a reseeding process is necessary to ensure that new knowledge is accessible to the design environment's computational mechanisms and therefore is accessible to designers using the environment.
We claim that such an approach is necessary to support design in complex and open-ended domains.
Comxuter Science and Technology Board.
Scaling Up: Research Agenda for Software En~neering.
Proceedi~/ of the 7th Annual Knowledge-Based Software nJineering  Conference .
IEEE Computer Society Press, Los Alamitos, CA, September.
Supporting Indirect, Collaborative Design with Integrated Knowledge-Based DeS~ Environments.
Embedding Computer-Based Critics in the Contexts of Desi~n.
Human Factors in Computing Systems, INTERCHI93 Conference Proceedings, ACM, 1993, pp.
End-User Modifiability in Design Environments.
A Small Matter o~ Programming.
The Role of Embedded Communication and Artifact History in Collaborative Des3n.
