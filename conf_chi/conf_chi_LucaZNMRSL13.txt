This paper presents BoD Shapes, a novel authentication method for smartphones that uses the back of the device for input.
We argue that this increases the resistance to shoulder surfing while remaining reasonably fast and easy-to-use.
We performed a user study  comparing BoD Shapes to PIN authentication, Android grid unlock, and a front version of our system.
Testing a front version allowed us to directly compare performance and security measures between front and back authentication.
Our results show that BoD Shapes is significantly more secure than the three other approaches.
While performance declined, our results show that BoD Shapes can be very fast  and that learning effects have an influence on its performance.
This indicates that speed improvements can be expected in long-term use.
Current standard authentication systems for smartphones include passwords, PINs, and Android's grid unlock .
Research has shown that they are not safe and easily susceptible to simple attacks like shoulder surfing  or so-called "smudge attacks" , which use smudge stains on the display to infer the password pattern.
Preventing shoulder surfing attacks is difficult as long as the authentication process takes place at the front of the device - which is the area that is most easy to look at.
By shifting the authentication step to the back of the device, this confidential input is moved out of the "normal" view of possible observers, rendering attacks much more difficult.
Back-of-device interaction has been proposed to address the so-called "fat finger" problem  where the user's finger occludes information during touchscreen interaction, in particular on small devices .
Back-of-device interaction is already commercially available in the form of the Playstation Vita, since early 2012, which comes with so-called "rear touch".
In July 2012, NTT Docomo showed a smartphone prototype with support for back-of-device interaction .
It is thus very likely that commercial smartphones will soon feature touch sensitive backsides as well.
We developed several concepts for supporting back-of-device authentication on smartphones.
Based on theoretical analyses and a formal user study, we identified the best candidate, "BoD Shapes".
Today's smartphones provide a whole new level of user experience.
Even though their main use case is still communication , they now hold large amounts of potentially sensitive information that go well beyond call logs: emails, photos, chat messages, and both private and professional documents.
Smartphones are also increasingly used as security tokens .
Many users are concerned about others accessing this wealth of information, should they ever lose their phone .
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Other biometric approaches require more time to make a decision over acceptance or rejection.
These include systems analyzing the users' keystrokes on a virtual keyboard , recognize users based on their gait , their file system activities , or by using behavioral patterns .
The disadvantage is that they leave a large window for attacks.
Thus, they need to be combined with an ad-hoc authentication system.
Our review of prior work leads to three important implications that we wanted to fulfill in the design of our authentication method: 1.
This increases the chances of the system actually being realized.
Besides being vulnerable to direct observational attacks, pattern-based authentication mechanisms have manifold advantages.
We wanted to exploit these advantages like motor memory effects  and thus opted for a patternbased system design.
A common approach to make authentication more secure is to add overhead to the input.
This is something that we wanted to avoid.
By performing the input on the back side of the device, we argue that it provides high resistance to shoulder surfing without burdening the user with a complex input system.
The main goal of most ad-hoc authentication methods is securing the phone from unwanted access.
In many cases, additional hardware-capabilities of the mobile device are used.
In Vibrapass, De Luca et al.
As a casual observer cannot detect the vibrations, differentiating between the "real" secret and false input becomes difficult for the attacker.
However, due to the randomness of this approach, memorizing passwords or PINs over time becomes much more difficult for the user.
In a similar way, Phonelock  and Spinlock  by Bianchi et al.
In addition, they significantly slow down authentication speed.
Instead of a hidden secondary channel, we move the interaction to the back of the device, thus hiding it from a casual attacker.
Another approach to securing authentication is to constantly vary the security question, so that observing a single entry will not allow an observer to answer subsequent challenges.
While memorizing many different PINs or password is impractical, graphical memory is well suited for this.
The AwasE system by Takada et al.
While they could attest good usability properties, the systems' security properties were not satisfying.
Our approach addresses memorability issues by using a shape-based authentication system that exploits the users' motor memory .
Both systems allow for a very large password space while still being fast.
Their disadvantage is that authentication can be easily observed.
As a solution to this problem, Kirschnick et al.
Similarly, De Luca et al.
This way, they try to ensure that even if attackers are in possession of the device and know the password, they will still be rejected as they perform it differently.
The main problems of biometric systems are high false rejection rates.
We assume a "shoulder surfer" that is close to the user while authentication takes place.
This includes standing close or sitting in the vicinity of the user.
In most cases, such an attack will take place in a public or semi-public setting, an environment in which the user lacks full control .
Additionally, the attacker has the ability to gain possession of the user's device.
A back-of-device authentication method should in principle be more secure against such attacks, since input takes place in a position less visible to bystanders.
In order to avoid suspicion, an attacker needs to be in a "natural" position with respect to the victim.
Having an attacker duck or kneel down in front of the victim in order to get a better view would certainly raise suspicion.
Camera attacks would need to be located close to the floor facing upwards, which should make it equally harder to correctly align the shot.
The basic idea of using a back-of-device authentication method was to provide a mechanism that is fast to use and easy to memorize, while being significantly more secure against shoulder surfing than PIN, password, and grid unlock.
During informal brainstorming sessions, we first developed several ideas for such an authentication method, then settled on two final candidates: "BoD Pattern Unlock" and "BoD Shapes", outlined below.
Including the shells, the prototype was 1.5 cm thick.
Figure 3 left, shows an assembled prototype.
During the experiments, we used rubber band covers  to prevent test subjects from accidentally hitting the standard capacitive buttons  on any of the devices.
We installed a custom application on each device that used Wi-Fi Direct to connect the two smartphones to each other, randomly assigning one of them to be the "rear" device.
The application then collected touch events on the back and sent them to the front, translating each touch into the local coordinate system of the front device.
The first candidate is a back-of-device version of the Android grid unlock.
To authenticate, the user has to draw a shape between nine different dots located on the screen.
To be shoulder surfing resistant, no feedback such as lines between the connected points must be shown.
This means that the user has to correctly hit the  start dot among the nine dots shown on the front of the device, using the touch sensitive back, then draw out the right pattern by dragging between the dots.
The system thus requires the user to perform absolute movements between specific points on the back of the device.
The second candidate, BoD Shapes, uses relative rather than absolute movements.
The secret input  consists of the consecutive drawing of three shapes.
Each shape is an arbitrary combination of up to three horizontal and vertical strokes .
A "Down" stroke with one hand is shown in figure 1.
The decision to use only horizontal and vertical strokes was made when pre-tests showed that diagonal movements were hard to perform on the back.
In contrast to BoD Pattern Unlock, this method does not require the user to precisely hit any target.
In addition, the strokes drawn by the user have no predefined length, leaving it up to the user how to draw them.
This supports the individual physical properties of the users' hand.
In order to evaluate our concepts, we built a fully functional prototype that allowed us to simulate a smartphone with a touch-sensitive rear.
The prototype uses two HTC One S smartphones mounted back-to-back and rotated by 180 in order to accommodate the protrusion of the camera lens.
To allow for an easy replacement of a defective device, we used two hardcover protective shells that we glued to each other.
The study featured a simple pointing and dragging task.
Given the 16:9 aspect ratio of the screen, we subdivided the area into 4x2 = 8 evenly sized regions as shown in figure 4, left.
Each task showed two circles, simply labeled "1" and "2" .
The subject had to point at target 1, drag to target 2 and then lift off the finger, all on the back of the device.
If one of the targets was not correctly hit, the task could be repeated up to three times.
Testing all possible directions two times resulted in a minimum of 8  7  2 = 112 input tasks, the order of which was randomized.
The whole procedure was performed twice, once forcing the participants to use one hand only  and the other time allowing them to use two hands .
The order of forced and freestyle interaction was counterbalanced.
The interface was displayed on the front device, interaction took place on the back.
No virtual pointer was provided, since visual feedback would minimize the security of an authentication system based on such input.
Before starting the actual task, participants were trained using random occurrences of the touch points.
We recruited 20 participants with an average age of 26 years , seven female.
Thus, the analysis is based on 4480 pointing and dragging tasks .
Error rates are the most important indicators whether it is easy to hit a target on the back of the device.
Errors in this work are defined by the users' inability to either correctly hit target 1, or drag to target 2.
Overall, error rates for dragging were even higher.
Even though the prototype allowed for a certain threshold, that is, the user did not have to exactly hit the target but 50 pixels within its vicinity, target hit accuracy was low.
To get a better overview of the results, we subsequently group the results into "top" and "bottom" targets.
Figure 6 shows the amount of errors over all participants for hitting a start point at either the bottom or the top with one hand  and in freestyle mode.
The best case result - freestyle mode in the top area - saw 9% or 102 errors.
The worst case - hitting a bottom target in forced  mode - had 39% or 440 inputs that were not accurate enough.
The overall worst performance was by a user failing at 40 of 112 inputs .
A 2 x 2  within-participants analysis of variance of error rate revealed a highly significant main effect for Hand .
Interaction in freestyle mode  outperformed interaction in forced mode .
Overall, our feasibility study showed that it is hard to precisely hit a target and drag to another target using the back of the device, without providing a visible pointer.
Of particular importance are the results for one-handed input, as the second hand is often occupied with a primary or secondary task .
Even with the relatively high threshold, one-handed back-ofdevice pointing seems not to be usable in practice.
BoD Shapes uses three consecutive shapes to authenticate.
Each shape consists of a maximum of three strokes.
A stroke can be one of Up, Down, Left, or Right.
An example for a password is shown in figure 2, right.
In order to support single-handed operation, authentication takes place in the upper 40% of the back area.
To make sure that the remaining area was not touchable in our prototype, we used sponge rubber as shown in figure 3, right.
In several experiments with different materials, we found that sponge rubber offers a good trade-off between avoiding touch and acceptable weight.
A typical hand posture and interaction example of this setting is shown in figure 1.
Strokes are extracted using the ShortStraw algorithm .
Every time the finger is lifted from the back, the preceding touch points are analyzed.
In informal pre-tests we realized that the algorithm tends to duplicate simple strokes .
Since a single shape in BoD Shapes must always be a set of consecutive strokes, such duplicates are not possible.
We can thus simply delete repeating strokes from the results.
The final set of strokes is stored as a shape and the input is acknowledged by displaying a dot on the front device's screen .
After three shapes are input, the system compares them to the user's stored secret and determines whether the authentication session was successful.
Given four strokes to choose from  and the constraint of not directly repeating any stroke , each stroke can be followed by one of three other strokes.
There are thus 4 single-stroke shapes, 4  3 double-stroke shapes, and 4  3  3 triple-stroke shapes.
With three shapes, the theoretical password space of BoD Shapes is thus 523 = 140, 608.
This is around 14 times bigger than for a four-digit PIN , and more than three times bigger than a grid unlock pattern with up to 8 strokes .
For comparison: the password space for three shapes with only up to two strokes each is only 3 = 4, 096.
To store the shape-based password, strokes are translated into characters as shown in figure 2, left.
For example, the internal representation for "Up, Down, Left" is "UDL".
This is because users tend to draw strokes at the same location, as observed in our study, which means that the smudges of different strokes are overlapping each other, making it hard or impossible to reconstruct the actual input from them.
Finally, as with any back-of-device interaction, performing the input on the rear of the smartphone makes it harder to spy on .
The study took place in an office with only the experimenter and the participant present and sitting opposite from each other.
Two cameras recorded the interaction for performing a later security analysis.
One was mounted at approximately eye height of an imaginary attacker standing behind the user , one at approximately eye height of an equally imaginary observer seated across from the user.
The front camera represented the "best case" for inconspicuously spying on the back-of-device input, the back camera was ideally placed for observing regular front-of-device input.
We implemented an application supporting the four authentication systems.
While the back device was only required for BoD Shapes, it was not removed for the other tasks in order to have the same physical setup  for all authentication sessions.
Screenshots of the systems are depicted in figure 7.
To minimize learning effects, System was counterbalanced, requiring 4!
The order of Password and Difficulty was randomized within each of the four authentication systems.
The main goal of the study was to evaluate the usability and security properties of BoD Shapes in comparison to PIN and grid unlock.
We also evaluated a front version of the Shapes authentication method  to directly measure performance and security differences of the back-of-device interaction.
Note that Front Shapes also offered no visual feedback besides the confirmation dots, just like BoD Shapes.
We used a repeated measures factorial design with three independent variables: System , Password  and Difficulty .
Difficulty refers to how difficult it is to enter the password.
For instance, a 3-stroke shape takes longer to input and is harder to remember than a 2-stroke shape; a PIN with two identical digits in a row is faster to input and easier to remember than one without any repetition.
PINs consisted of four digits and grid unlock shapes of five strokes.
The difficulty rules for the given as well as the user-defined passwords, were as follows : * PIN Easy: Two identical digits in a row.
We first told participants that the goal of the study was "to evaluate a new authentication system that uses the back of the smartphone for input".
The two cameras were introduced as being part of the usability analysis, but we did not mention their use as an "attacker's view" for performing a security analysis later.
Instead, the participants were simply told not to perform the phone interaction outside a specific area on the table, in order to avoid leaving the camera's field of view.
The experimenter continuously checked the cameras to make sure that the interactions were correctly filmed at all times.
For each authentication system, four passwords were tested in random order: given easy, given hard, self-selected easy, and self-selected hard.
Each password had to be used successfully in three authentication sessions.
An authentication session ended when the password was input correctly, or if it was entered wrongly for three consecutive tries.
That is, per system and password, the participants performed at least three and at most nine inputs.
After this, the experiment moved to the next password or system.
Absolute numbers  of basic and critical errors, summed up and subdivided into easy and hard passwords.
Each system was used in 24  4  3 = 288 authentication sessions .
For each system, 288/2 = 144 sessions used hard passwords and 144 used easy passwords.
With four passwords per system, and each password requiring three successful authentications, each system was used in 4  3 = 12 authentication sessions per participant.
For 24 participants, this makes 12  24 = 288 individual authentication sessions per system.
Each session could either be error-free, feature a basic error, or a critical error .
Before participants used a system, the experimenter explained it in detail, followed by a training session with predefined passwords.
These passwords were different from the ones used in the actual study.
During training, participants were allowed to try authenticating as long as they wanted, until they felt familiar enough with the system to start the actual task.
The study ended with a questionnaire to collect demographic data and to assess the experience of participants in terms of problems, preferences and thoughts with respect to the usability and security of the four authentication systems.
Participants could also ask any question that they had about the goal of the study or the study in general.
Overall, the study took around 30 minutes per participant.
For the error analysis, we distinguish between basic and critical errors.
A critical error means that the user was not able to authenticate at all during an authentication session, i.e., the password was entered incorrectly for three consecutive inputs.
A basic error means that the user failed to authenticate once or twice in a session but was ultimately able to successfully enter the correct password, i.e., either on the second or the third try.
This separation into basic and critical errors is particularly useful in usability studies involving mobile phones or ATMs , as such systems typically block access after three failed tries.
Note that when a critical error occurred, it was not additionally counted as a basic error.
Thus, for each password/system combination, a maximum of three errors - critical or basic - was possible.
Overall, few critical errors occurred.
Figure 9 shows the results grouped by system and subdivided into easy and hard passwords.
PIN is the only system that created no critical errors.
With 11 occurrences, BoD Shapes using hard passwords performed worst.
However, this still means that only 7.6% of authentication sessions using hard passwords failed completely when being entered on the back of the device.
No interaction effects were found.
Overall, the numbers of critical errors are too low to reveal meaningful statistical results.
All results are Greenhouse-Geisser corrected.
For basic errors, the picture looks similar .
While PIN performed best with only 1 basic error, BoD Shapes and grid unlock with hard patterns created basic error rates of 19.5% and 26.4%, respectively.
That is, each 5th or 4th input had to be repeated at least once for these methods.
All results are Greenhouse-Geisser corrected.
Post-hoc tests confirmed that PIN performed best and BoD Shapes was the most error-prone .
Furthermore, easy passwords were less error-prone than hard passwords  and self-selected passwords caused less errors than given passwords .
BoD Shapes Error Categories: The previous results showed that around each 4th  or 5th  input using BoD Shapes had at least one basic error, i.e., it had to be repeated to successfully authenticate.
Thus, we performed an error analysis to find out whether and how they could be fixed.
There were three main categories.
All critical and 81% of basic errors could be attributed to one of those:
With the help of mailing lists and word-of-mouth we recruited 24 participants for the experiment, with an average age of 27 .
All had at least a university-entrance diploma and 17 had a graduate or undergraduate degree .
Nine participants used more than one touchscreen device on a daily basis.
On average, they were familiar with touchscreen interaction for around three years .
As an incentive, a 5 Euro online shop voucher was handed out to each participant after finishing the study.
In general, participants were concerned about their smartphone's data and thus, most of them used some form of protection.
18 used at least one kind of access control: 9 used PIN, 9 grid unlock.
The average stroke length of the grid unlock was 3.9 .
Four participants stated that they had experienced someone "shoulder surfing" them while authenticating.
In addition, ten participants mentioned that they use specific approaches to protect their input from bystanders, such as covering the input or changing the angle of the smartphone.
Unintentional strokes at the beginning or the end of a shape caused 29% of all critical and 41% of all basic errors.
This happened in cases when the participants accidentally touched the back screen before actually meaning to start and when they did not properly lift the finger after the last stroke.
Another common error was mixing up left and right which caused 50% of critical and 17% of basic errors.
For instance, instead of entering "Left, Right, Up", the user entered "Right, Left, Up".
The third category of errors is related to slips.
We could attribute 21% of critical and 23% of basic errors to this category.
Those were instances when a shape stopped too early since the participant accidentally left the touch area or slipped in another way.
For instance, the user entered "Down, Up" instead of "Down, Up, Down".
For BoD Shapes self-selected easy, the fastest user even managed to authenticate in 1.5 seconds on average.
All results are Greenhouse-Geisser corrected.
Post-hoc tests revealed highly significant differences between all instances of the independent variables System, Password and Difficulty.
Interestingly, in almost all cases with the exception of Front Shapes easy, the self-selected passwords  performed significantly faster than the given passwords .
In the case of both BoD and Front Shapes hard, this difference is larger than 1 second.
The time to authenticate was measured from the first to the last touch .
PIN was measured from touching the first digit  to touching the last.
Grid unlock was measured from touching the first dot until lifting the finger.
Shapes  was measured from the first touch until the lift-off of the third shape.
Only successful authentication attempts were counted.
That is, for each participant, at most 4  4  3 = 48  valid authentication sessions were considered for the analysis.
One outlier that took over 25 seconds to authenticate was removed.
The video material revealed that this participant had performed a long break after the first input, which lead to this delay.
The times required to authenticate can be found in figure 10 sorted by system and password difficulty.
PIN was the fastest system with around 1 second for each password.
BoD Shapes with hard given passwords was the slowest system .
This is almost twice as slow as BoD Shapes with an easy, self-selected password .
However, a closer look at the results reveals that BoD Shapes can be used significantly faster.
For the security analysis, we had a member of the research team look at the recorded video afterwards and simulate an attacker, i.e., try to guess the entered password for each successful authentication session.
While this "attacker" had naturally a high familiarity with all four systems, including BoD Shapes, the person was not involved in creating the list of given passwords  that were used in the study.
For PIN, grid unlock and Front Shapes, our attacker looked at the over-the-shoulder camera material.
For BoD Shapes, he used the camera that was "seated" opposite.
Two examples of these views are shown in figure 12.
We simulated two different levels of attack: a one-off shoulder surfing attack, and a more determined "video review" attack.
In the shoulder surfing attack, the video of a successful authentication session was shown to the attacker only once.
Then he was allowed to guess three times.
During this, he could make up to three further guesses.
That is, for all combinations of System, Password and Difficulty, there was either a successful shoulder surfing attack, a successful video review attack, or no successful attempt.
The attacker was allowed to take notes after the first failed guess.
Sounds and any other hints were removed from the video material.
The whole attack procedure took three full working days.
While video review attacks were highly successful, they constitute an attack that is less likely in a real-world setting as it requires careful and well-executed  video recordings.
All passwords could be identified in video review attacks, with the exception of two passwords in the BoD Shapes condition.
Shoulder surfing attacks, however, revealed interesting differences between the four systems, as shown in figure 11.
BoD Shapes was by far the most secure system with hard passwords being the hardest to observe.
In the best case, a hard self-selected shape, only 9 of 24 passwords  could be identified by the attacker.
In contrast, all other systems performed weak with respect to security, no matter what kind of password  was used.
The main reason for the few instances when our attacker was unable to guess the password for a front system during a shoulder surfing attack was extremely fast input by the user.
The main reason in turn for making BoD Shapes difficult to differentiate in these situations was that our sample attacker often ended up confusing angled movements like "Left Up" with linear movements like "Left Right" or "Down Up".
In the study, all participants were highly trained to PIN, while about one third were frequent grid unlock users.
BoD Shapes on the other hand was new to all of them.
Still, the performance was quite good while being much more secure than the other systems.
For instance, users could reach a speed of around 1.5 seconds for self-selected easy and 2.9 seconds for self-selected hard passwords .
Selfselection is the standard approach for smartphones and thus these results can be considered most representative.
One explanation for the higher speed and lower error rate of self-selected BoD Shapes passwords could be that participants invested sufficient thought into their creation before actually using them.
This made them more memorable and thus faster to use, which in turn indicates that a learning effect , even in such a short time, is likely.
We argue that performance will further improve when the system is used for a longer time.
However, this has to be evaluated in a long-term study.
In the questionnaire, participants were asked to rank the four systems with respect to security and ease-of-use.
21 out of 24 participants rated BoD Shapes to be the most secure.
The other three each picked one of the remaining systems.
For ease-of-use, BoD Shapes was rated worst by 21 participants.
All rated either PIN  or Grid Unlock  as being the easiest to use.
Both qualitative ratings support the quantitative results  of the study.
We also asked participants whether they would use the system if it was available for their device.
13 of them gave a definite "yes" as an answer.
Among the remaining eleven, there were two "yes under the condition that" replies.
Both stated that they would use it if shapes with less strokes were allowed .
One of the nine "No" statements was a user that did not use any protection for her smartphone in general, thus not seeing the need to use BoD Shapes.
We found that the way the input was performed influenced the security of the respective system.
For instance, the participants for which PIN could not be shoulder-surfed were either extremely fast  or used some special input method.
One participant used two-handed PIN-entry.
This was unexpected for the attacker, and following two hands at the same time proved too hard for a successful one-time shoulder surfing attack.
The way that input speed influenced the security of BoD Shapes was that for a quickly executed row of shapes, it was not clear to the attacker which strokes belonged to which password since finger lift-off "is extremely hard to see and the breaks are a good indication of when a new shape starts".
The Shapes system in itself is not secure - it is its input on the back that makes it more secure than others.
However, BoD Shapes is much better suited for this kind of input than systems that require absolute positioning, such as PIN-entry.
The security differences between Front Shapes and BoD Shapes illustrates well the security gain of moving input from the front to the back.
As described in the error section, most of the basic and critical errors occurred due to three reasons: unintentional strokes, mixing up left and right, and slips.
This shows that there is a lot of potential in reducing the error rates.
Mixing up left and right can be attributed to the fact that the participants were not familiar with the system and, more importantly, were not used to the passwords.
It can be assumed that after using the system for a longer period, motor memory effects will reduce such errors .
Unintentional strokes, the second biggest error group, can be reduced  with clever programming.
One could, e.g., discard strokes that are significantly shorter than the rest of a shape.
Finally, slips like accidentally leaving the touch-sensitive area cannot be avoided .
This might further be influenced by form factors of the device and the touch-sensitive surface.
Even though the algorithm copes with smaller strokes, some areas might just be too small for the users to perform the input.
This issue, including a minimum space requirement and its influence on error rates, are still to be evaluated.
It is also easy to remember.".
We argue that one of the main advantages of BoD Shapes is that it provides enhanced security for a realistic use case  without introducing detours, indirect input, or forms of randomization.
The study results indicate that in most situations and contexts, using BoD Shapes makes the authentication procedure more secure.
To cope with this, the concept can easily be adapted to support authentication on both sides of the device simultaneously.
This way, the user can make an ad-hoc decision about which side to use depending on the context and current security requirements.
For instance, BoD Shapes could be combined with Front Shapes .
The error rates of both BoD Shapes and grid unlock are significantly higher than for PIN.
This is interesting since grid unlock is a widely used system.
One of the reasons is that both do not provide an undo functionality.
If an error occurs, input has to be started all over.
Users do not mind this approach since it is considered an easy way of error recovery.
However, the number of available trials in a running system has to be increased since slips could otherwise easily lead to the device being blocked.
The current approach used for grid unlock in commercial systems is to block the device for x seconds after y failed attempts.
The variable x grows with the number of failed authentication sessions.
A similar approach would thus be appropriate for BoD Shapes.
Especially for one-handed interaction, the form factor of the prototype proved to be a burden for the participants.
As a result, all of them used two hands to interact with the system in the main study.
This means that we cannot infer any generalizable results on one-handed interaction.
However, this issue was the same for all systems and arguably influenced them all in the same way.
Still, in the future, we plan to test a thinner and lighter prototype to compare the results.
The security analysis was more adversarial than most realworld scenarios, in which camera attacks would not be feasible.
Additionally, none of the participants tried to protect their input - some even positioned the back of the device so the camera had a better view on it as they thought it would help with the analysis.
Furthermore, the attacker was aware of the strict password rules which allowed for disambiguating many observations that would have failed otherwise.
For instance, even if the attacker saw one stroke only but knew there had to be a second one, there was a 1 out of 3 chance to correctly guess the missing stroke.
This strategy worked several times.
In addition, we had only one attacker which might slightly bias the results.
More attackers were not feasible as the task took three full working days and it was simply impossible to get more than one expert to do this.
However, we argue that opting for an expert attack represents a worst-case-scenario that provides a good estimate of the security of an authentication mechanism.
Memorability is a crucial issue when it comes to the usability of authentication mechanisms.
Since BoD Shapes is patternbased, we argue that it has similarly high memorability properties as related systems .
However, we did not evaluate this yet as this requires a long-term study .
The security analysis showed that the angle, in which the device was held in relation to the camera, did not influence the results for front-entry.
This is because a shoulder surfer typically sees the display at a similar angle as the user.
However, the security of the back-of-device interaction was indeed heavily influenced by how the device was held.
For the user, however, the angle did not influence the performance.
In addition, it is much harder for an attacker to inconspicuously take up a position that makes it easy to spy on the input.
Thus, we argue that back-of-device authentication is more secure, even more in a real-world setting.
The participants' answers indicate that BoD Shapes is able to translate externally measured security into user-perceived security.
For instance, one participant stated that "I would use  in case that I need a really secure authentication system.".
In this paper, we introduced a new authentication system for smartphones using the back of the device, called BoD Shapes.
To authenticate, a user performs a row of shapes on the rear of the device.
In general, a shape can consist of an arbitrary number of horizontal and vertical strokes.
Performing the input on the back makes this approach much more resilient against shoulder surfing attacks.
Even though performance is decreased, it is still sufficient for everyday use with high potential for improvement in the long-term.
In the most secure case, hard self-selected passwords, the best user reached an average authentication speed of 2.9 seconds.
The main contributions of this work are:  the BoD shapes concept and its theoretical analysis  a user study that attested the system high security and good performance properties,  general findings of security and performance issues when applying back-of-device authentication to smartphones.
As we informally observed in the study, smudge attack resistance of BoD Shapes is very high since the consecutive shapes are performed on top of each other.
In the future, we will perform experiments to provide empirical proof for this claim.
At the same time, a practical evaluation of the memorability properties of BoD Shapes will be required.
In order to decide these two questions and therefore find out whether BoD Shapes is appropriate for real-world use, a longterm deployment is needed.
To do so, however, we will have to wait until commercial devices with back-of-device interaction support are available, or until the form factor of the prototype can be highly improved.
