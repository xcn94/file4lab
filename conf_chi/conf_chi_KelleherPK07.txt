We describe Storytelling Alice, a programming environment that introduces middle school girls to computer programming as a means to the end of creating 3D animated stories.
In a study comparing girls' experiences learning to program using Storytelling Alice and a version of Alice without storytelling support , we found that users of Storytelling Alice and Generic Alice were equally successful at learning basic programming constructs.
Participants found Storytelling Alice and Generic Alice equally easy to use and entertaining.
Users of Storytelling Alice were more motivated to program; they spent 42% more time programming, were more than 3 times as likely to sneak extra time to work on their programs, and expressed stronger interest in future use of Alice than users of Generic Alice.
With the broad impact of computer science comes the responsibility to ensure that the technologies our society creates meet the needs of all of its members.
One of the easiest ways to ensure that our technologies meet the needs of our society is to involve a representative sample of the population in the creation of new technologies.
While there are many important and under-represented groups in computer science, women are arguably the largest .
In 2005, 85.3% of computer science and computer engineering degrees were awarded to men .
Researchers have identified a variety of factors that may contribute to girls' low enrollments in computer science including disinterest in computers, concerns about the computing culture, lack of encouragement from peers, parents, and educators, and relatively fewer opportunities to interact with computers .
It is likely that many of these factors play some part in girls' decisions not to pursue computer science.
It may be difficult to correct some of the cultural factors that influence girls' decisions not to pursue computer science, but we can work towards making the process of learning to program, which is often a gateway to the study of computer science, more motivating for girls.
Many girls decide whether or not to seriously pursue the study of math and science based disciplines during their middle school years .
Although many girls express interest in science during their elementary school years, they have increasingly negative views of science, science classes, and science-based careers as they progress through middle and high school .
By late high school many girls have already opted out of the math and science classes that would enable them to pursue a mathematical or scientific major in college .
To maximize our potential impact on the number of girls who choose to pursue computer science, we chose to focus on creating a programming environment that makes the process of learning to program more motivating for middle school girls who are old enough to handle the complexity of computer programming but are less likely to have already decided against pursuing computer science.
We chose to focus on storytelling for the following reasons: Given a little bit of time, most girls can come up with an idea for a story they would like to create.
Stories are naturally sequential and are unlikely to require advanced programming concepts immediately, making them a good match for beginning students.
Stories are a form of self-expression and provide girls an opportunity to experiment with different roles, an important activity during adolescence.
Non-programming friends can readily understand and appreciate an animated story, which provides an opportunity for girls to get positive feedback from their friends.
In this paper, we describe Storytelling Alice, a programming system based around the activity of storytelling.
In a study comparing girls' behavior and interest using Storytelling Alice with a version of Alice without storytelling support  we found that participants who used Storytelling Alice and Generic Alice were equally successful at learning basic programming constructs.
Participants found both versions equally easy to use and entertaining.
However, participants who used Storytelling Alice were more motivated to program; they spent 42% more time programming, were more than 3 times as likely to sneak extra time to work on their programs, and were more interested in future use of Alice than participants who used Generic Alice.
In Toontalk, users can create 2D video games through demonstrating their programs in an animated 3D virtual environment .
Scratch  and Squeak EToys enable children to create 2D animations and games through dragging and dropping graphical tiles.
StarLogo TNG allows users to create games and simulations by moving 3D models in a virtual world; animations that require a character to move body parts such as walking or waving hello must be created using external software .
Alice 2 enables users to move and rotate 3D objects and parts of 3D object in a virtual world through a drag and drop based program editor.
Storytelling Alice is based on Alice 2, an open-source programming environment that helps overcome two difficulties beginning programmers often encounter: syntax errors and invisible state.
Users construct programs by dragging and dropping code elements, which removes the possibility for making syntax errors.
Running Alice programs are animated, which enables users to watch their programs execute and to see their mistakes.
NSF-sponsored studies have shown that exposure to Alice 2 increases the academic success and retention of at-risk computer science majors  in introductory computer science courses .
The development of Storytelling Alice was guided by formative testing with more than 200 girls over a two-year period.
The formative testing took place in a variety of formats ranging from 4 hour afternoon workshops to weeklong camps with groups of 3 to 20 girls ranging in age from 10 to 17.
The girls were recruited from technology camps, home-schooling groups, and the Girl Scouts.
During formative testing, girls created storyboards of movies they wanted to create and then tried to implement them in a version of Storytelling Alice.
There is a long and rich history of research on designing programming languages and environments to broaden the pool of people who learn to program computers.
The majority have focused on simplifying the process of learning to program using a variety of techniques from improving textual programming languages to creating environments that allow users to author programs without making syntax errors .
A smaller number of systems try to provide a motivating context for learning program.
A few systems have attempted to motivate computer programming through competitions: in AlgoArena users program sumo-wrestlers to fight tournaments; in Robocode users program battletanks for a "fight to the finish", in Rapunsel  users program competitive dancers.
Other systems enable users to create animations and video games.
Although it is possible to create animated stories in these systems, most provide users only general graphics capabilities.
It may be difficult to create stories from basic graphics commands because of the number of steps required.
Several systems allow users to create 2D animations by moving sprites and changing the graphical image associated with the sprite.
Stagecast Creator enables users to create 2D games and simulations by specifying graphical before and after conditions.
When girls are asked to plan an animated movie they want to create, their movies consist almost entirely of people and characters moving around different settings, and speaking and interacting with each other .
A typical story might include a scene like the following: A girl named Susie walks over to a group of more popular girls and invites them to a social event.
The popular girls say something mean to Susie.
Susie turns away from the popular girls and covers her eyes.
In Generic Alice, scenes like the one described above can be both tedious and difficult to create.
To create a basic walk animation requires that users individually rotate a character's hips, knees, and ankles.
In formative testing, we found that for many girls, animating stories using basic transformations like move and turn is both uninteresting and frustrating.
Storytelling Alice includes a set of higherlevel animations based on an analysis of storyboards girls created .
Using these high-level animations, scenes like the one described above are more readily attainable.
Many of the character-specific animations require explanation to make sense within the story.
In addition to animations requiring explanation within the story, we found that characters with clear roles can also be helpful in generating stories: a teacher or a lunch lady is nearly always an authority figure and a ninja character is frequently a hero or a villain.
Initially, the Alice tutorial was designed around examples chosen to demonstrate concepts as simply as possible.
However, user testing revealed a need to introduce users to programming in Alice within the context of stories similar to the ones they imagined creating.
Story-based examples, while more motivating, also tend to be more complex.
In one of the tutorials, the user constructs a story about a trouble-making fairy who casts a spell on a boy, causing the boy to fall in love with an ogre.
While we found that stories like the example above tend to be more motivating for girls, they add complexity both to the user interface and to the steps that users need to perform to complete the tutorial.
One factor that we found influences girls' motivation to learn to program in Storytelling Alice and their perseverance when they encounter problems is their ability to find a story that they want to tell.
User testing revealed that animations requiring an explanation within the story can prompt girls to generate story ideas.
An early example of the potential for animations to inspire stories came through a robot character who had an animation entitled "crazy go nuts."
To explain why the robot went crazy, girls created stories about topics ranging from parental troubles to the difficulties of being unpopular to failing a test.
To moderate the additional complexity of a story-based tutorial, Storytelling Alice presents the tutorial using Stencils , an interaction technique in which a transparent blue screen that catches mouse and keyboard events is drawn over existing interface.
The instructions for each step in the tutorial are displayed on "sticky" notes that are drawn on top of the Stencil.
Holes cut over interface elements necessary for the current step allow users to complete actions for the current step.
A total of 88 girls from local Girl Scout troops participated in the evaluation of Storytelling Alice; 45 were assigned to the control group and used primarily Generic Alice and 43 were assigned to the experimental group and used primarily Storytelling Alice.
The average age for the participants was 12.6 years  and nearly all participants were in grades 5-9, with the majority in the 7th and 8th grades.
Overall, 76 participants reported attending public school and 12  attend private school.
To encourage broad participation, we offered a $10 donation to the Girl Scout troop for each girl who participated.
The majority of the Girl Scout troops used our study as a fundraiser.
We instructed participants that they could talk freely to other participants in their own condition, but they could not talk with participants in the other condition.
All verbal instructions were given to both groups.
Participants were randomly assigned to either the control group  or the experimental group .
To avoid biasing participants based on the names Storytelling Alice and Generic Alice, we referred to Storytelling Alice as Alice Blue and Generic Alice as Alice Green.
Participants had two hours and fifteen minutes to complete the tutorial  and create a program  using the version of Alice to which they were assigned.
After two hours and fifteen minutes, participants took a programming quiz and completed a survey.
Then, participants were given 30 minutes to try the version of Alice to which they were not assigned .
At the end of the workshop, participants were asked to select either Storytelling or Generic Alice to take home.
Finally, participants were asked to select one of the Alice programs they created to share with others.
After completing the post-survey, participants took a seven item forced-choice programming quiz that asked them to predict the behavior of short Alice programs.
Each question showed a short segment of code in Alice and participants were asked to select the appropriate description of the program's behavior from four choices.
The programming quiz contained questions about sequential programming, events, parallel execution, loops, method calls, and parameters.
Based on an exploratory factor analysis of the programming quiz responses, we created a programming quiz scale that included the six questions that loaded on the same factor.
This factor reflected participants' understanding of programming structures like loops, do togethers, and method calls .
The remaining question on the quiz tested users' understanding of basic events, a topic the Storytelling Alice participants who created multiple scenes were more likely to encounter.
We instrumented both Storytelling Alice and Generic Alice to record all of the actions that users took within the program.
The survey also included 8 questions about participants' interest in using Alice in the future and their interest in pursuing computer science.
They were asked to indicate whether they agreed or disagreed with the statements and answered the questions using a five-point Likert scale.
Based on exploratory factor analysis, we created four scales for the survey data: Alice's ease of use, Alice's entertainment value, participants' interest in future Alice use, and their interest in computer science.
Example questions and the Cronbach's alpha for each scale are listed in Table 1.
Using the computer during the workshop today was fun.
Would you be interested in taking another Alice class?
Would you be interested in taking a computer science class in high school?
The focus on storytelling did not negatively impact participants' learning of programming concepts.
We observed that the programs participants created with Generic Alice were of four general types: arbitrary motion, character motion, story-like sequences, and choreographed dance routines.
Arbitrary Motion : 28 of the 45 worlds that users created with Generic Alice consist of seemingly arbitrary animation: characters and/or their body parts move around the screen without any coherence or clear purpose.
The programs in the arbitrary motion category seem to be largely experimental and show little evidence that users had explicit goals they were working towards.
Figure 5-1 shows a screen shot from a typical arbitrary motion program.
In this world, characters and their body parts rotate around different axes and fly to different positions in space.
Character Motions : 7 of the 45 users created programs which contained one or two simple character motions but were otherwise largely arbitrary motion.
Examples of character motions include having a cat swish its tail, a penguin open and close its mouth, and a bunny jump up and down.
These worlds seem to the result of users transitioning from experimenting with the Generic Alice animations to combining animations to animate their 3D characters.
Choreographed Dance Routines : 3 of the 45 users created choreographed dance routines for a group of characters.
The dance routines made heavy use of move and turn with characters performing the same motions together and in sequence.
Dance routines are a good match for Generic Alice; several characters doing simple motions in sequence or in parallel is well supported and can be visually pleasing.
Story-Like Sequences : 7 of the 45 users created short story-like sequences.
In most of the story-like sequences, users rely on the physical appearance of characters to identify them as heroes, villains, or victims.
We created several opportunities during the workshop for participants to express an interest in Alice through their actions.
We tracked which version of Alice users chose to take home, which program they selected to share with their peers, and whether or not they snuck extra time to continue working on their programs when there was no instruction or requirement that they be interacting with Alice.
By focusing on the motivational aspects of an educational software system, there is some risk that changes made to increase student motivation may reduce the educational value of interacting with the system.
In this study, there is no evidence of negative impact.
Other Programs  12 of the 43 programs created with Storytelling Alice do not fall neatly into a single category.
These miscellaneous worlds include two stories about finding lost dogs, two stories depicting running and swimming races, and three choreographed routines  similar in nature to the choreographed dance routines created by users of Generic Alice.
We observed that the programs participants created with Storytelling Alice were of three general types: relationship stories, good vs. evil stories, and miscellaneous programs.
Relationship Stories : 22 of the 43 users created stories about relationships, including romantic relationships, peer relationships, and familial relationships.
Some participants used their stories to think about and react to issues in their own lives.
For example, one story about divorcing parents depicted the children kicking the parents out of the house.
While a child would be unlikely to successfully evict their parents, this participant's story provided her with an opportunity to express frustration about her family's situation.
Other participants' stories addressed topics like the difficulty of being unpopular and how to handle a crush on a boy.
Evil Stories : 9 of the 43 users created stories depicting conflicts between good and evil.
The conflict between good and evil provides an easy source of tension, and one that is frequently used in mainstream movies and books.
In some stories, evil characters are defeated by more powerful good characters.
In one story, an evil samurai attacks an innocent pig.
A good magical tree comes to the pig's defense and helps the pig defeat the samurai.
In other stories, the evil characters triumph.
In one story an evil sheriff wants to take over the world.
When his minion expresses doubts, the sheriff disciplines him by tossing him across the room.
We analyzed the differences in the percentage of time participants spent on programming and scene layout using Storytelling Alice and Generic Alice with an unpaired ttest.
Overall, participants who used Storytelling Alice spent 42%  more time editing their programs and 54%  less time laying out their scenes .
There is a broad range in how users choose to spend their time in Generic Alice.
While some users spend as much as 60% of their time editing the programs , other users spend nearly all of their time on scene layout .
Storytelling Alice seemed particularly effective in motivating all participants to spend time programming.
12 of the 45 users of Generic Alice spent more than 50% of their time on scene layout.
None of the users of Storytelling Alice spent more than 50% of their time on scene layout.
Beyond parallelism, users of Storytelling Alice and Generic Alice tended to experiment with different programming constructs.
In part because of the need for multiple scenes in stories, users of Storytelling Alice were more likely to create and use new methods.
Users of Generic Alice were more likely to experiment with loops.
We used multivariate analysis to examine the impact of the version of Alice to which participants were assigned, participants' academic performance, and confidence using computers on how participants rated the Alice's ease of use and entertainment value as well as their future interest in Alice and computer science.
Users of Generic Alice and Storytelling Alice did not differ significantly in how much they enjoyed using their version of Alice .
While this may initially seem surprising, it is probably at least partially attributable to participants' enjoyment of selecting and arranging objects in the 3D world.
For many participants, the experience of browsing through the gallery, selecting 3D objects, and arranging them in the virtual world was a rewarding experience, although it has little educational benefit.
The questions in the entertainment scale focused on the experience of using Alice as a whole, rather than the experience of programming in Alice.
Generic Alice and Storytelling Alice may have been entertaining for different reasons.
Participants who used Storytelling had a stronger interest in continuing to use Alice in the future than those who used Generic Alice .
One potential explanation for this is that participants using Storytelling Alice may have felt that Storytelling Alice had greater "replayability" because the space of interesting stories is larger than the space of interesting arrangements of 3D objects.
Users of Generic Alice may have been more motivated by scene layout than programming and therefore less interested in continued Alice usage.
A single four-hour workshop is a fairly short period of time in which to change students' attitudes about and interest in pursuing computer science.
Not surprisingly, there was no significant difference in interest in pursuing computer science between users of Generic Alice and Storytelling Alice , although users of Storytelling Alice expressed slightly higher interest on most questions.
The fact that participants who used both Generic Alice and Storytelling Alice overwhelmingly chose Storytelling Alice as the system they wanted to take home demonstrates that Storytelling Alice has a stronger appeal than Generic Alice for most participants.
Table 3 shows the correlations between participants' scores on the programming quiz and the four attitude scales.
While these are correlations, they do provide some support for our strategy of developing a motivating programming environment to encourage middle school girls to consider computer science.
By asking participants to select an Alice program to share with their peers, we are asking them to select the program of which they are the most proud.
As with the choice of which system to take home, it seems reasonable to expect that participants would tend to show the Alice program that they had the most time to create.
In this case, we do see a tendency in that direction: 98% of the participants using Storytelling Alice showed a world from their assigned version of Alice and 68% of the participants using Generic Alice.
Only a single Storytelling Alice user  elected to show the program she created in Generic Alice.
We used three behavioral measures to gauge participants' preferred version of Alice and their motivation to program.
Because participants had 2 hours and 15 minutes with their main version of Alice and only 30 minutes with the other version, it is reasonable to expect that participants would tend to choose the version of Alice with which they had the most experience.
Of the users assigned to Storytelling Alice, 88% of them elected to take Storytelling Alice home with them.
Of the users assigned to Generic Alice, only 26.7% elected to take Generic Alice Home with them.
In three cases, there were siblings  in the testing groups who colluded to ensure that they had both versions of the system at home.
One way to gauge users' affinity for Alice is to examine the numbers of users who continue programming when there is no expectation that they do so.
At the end of the each evaluation session, we left a period of 5-10 minutes during which there was no expectation that users interact with Alice.
Users of Storytelling Alice were almost three times as likely to sneak extra time during this period to make final changes to their Alice programs.
Among the users of Generic Alice, only 16% of participants made changes to their Alice program before sharing it.
The increased tendency among Storytelling Alice users to sneak extra time provides additional evidence that the storytelling focus helped make learning to program more engaging for middle school girls.
The results of our study suggest that participants who used Generic Alice and Storytelling Alice were equally successful in learning programming concepts.
However, we found that participants who used Storytelling Alice showed more evidence of engagement with programming; they spent a greater percentage of their time programming, were more likely to sneak extra time to continue programming, and expressed greater interest in future use of Alice than participants who used Generic Alice.
We believe that users of Generic Alice may have enjoyed their overall experience with Generic Alice in part because they found the process of selecting and laying out 3D objects in the virtual world to be entertaining.
The fact that users of Generic Alice spent less time on programming than users of Storytelling Alice may provide some support for this explanation.
However, in future studies we would like to tease apart the motivational aspects of the different activities within Alice.
Further, 65% of job openings in science and engineering between 2004 and 2014 are expected to be in information technology related jobs .
Despite the strong need for computer scientists, student interest in studying computer science has dropped dramatically in recent years.
In the period between 2000 and 2005, the number of college freshman who listed computer science as their probable major dropped by 70% and computer science enrollments at research universities dropped by 50% .
One important direction for future work is to determine the effectiveness of Storytelling Alice at motivating all children, including boys and members of minority groups to learn computer programming.
One potential avenue for extending the length of time that users stay engaged with creating programs in Storytelling Alice draws inspiration from techniques used in interactive games.
Games, while not always educational, share the goal of keeping users engaged in an activity for lengthy stretches of time.
One interesting area for future research lies in applying the kinds of reward strategies used in games to reinforce users' engagement with computer programming.
Girls' storyboards and the questions they asked during user testing revealed a need for the ability to create film extras  for their movies.
Modeling the behavior of extras provides an opportunity to introduce conditional and random behavior as well as a context for discussing the use of computing as simulation.
Some of the systems for novice programmers have focused on simulation , but none within the context of allowing users to create extras for animated movies.
Simulations of extras may provide a context that motivates users to learn more advanced programming concepts.
Armed with an understanding of more complex programming concepts, users may be able to more directly relate their experiences with Alice to real-world use of computer simulations like predicting earthquakes and searching for new medications.
The ability to see a strong connection between creating animated movies in Storytelling Alice and real-world computer science may further reinforce users' interest in pursuing computer science.
Although we did offer a donation to Girl Scout troops to encourage broad participation and many troops used participation in our study as a fundraiser, participation in our study was voluntary.
Storytelling Alice might not be as successful in a typical school setting.
Further, all participants were girls.
We have done some informal testing of Storytelling Alice that suggests that the activity of storytelling may also be a motivating context for boys to learn programming.
However, there is a risk that Storytelling Alice may not work as well for boys as girls.
A highly motivated experimenter was present at all study workshops, which may have influenced participants' experience.
To minimize the impact of the experimenter, the experimenter did no teaching.
Participants learned how to write Alice programs through completing the tutorial in their assigned version of the system.
The experimenter was available to answer questions, but could not initiate contact with any of the participants.
In a typical classroom setting, the teacher would likely take a more active role, which could positively or negatively influence students' experiences using Storytelling Alice.
Although we focused initially on creating a motivating programming environment for middle school girls, our eventual goal is to create a programming environment that provides a positive introduction to computer programming for all students.
There is a strong predicted need for computer scientists.
Storytelling Alice provides a strong first step towards a programming system that can give girls a positive first experience with computer programming.
These positive first experiences with computer programming may help to inspire more girls to pursue computer science and begin to correct the longstanding under-representation of women.
As we continue to develop Storytelling Alice, we hope that it will become a motivating way to learn computer programming for all children.
Alice 2.0. http://www.alice.org American Association of University Women, How Schools Shortchange Girls: A Study of Major Findings on Girls and Education.
American Association of University Women, TechSavvy: Educating Girls in the New Computer Age.
American University of Women Educational Foundation, Washington, DC, USA, 2000.
Flanagan, M., Howe, D. and Nissenbaum, H. Values at play: design tradeoffs in socially-oriented game design.
Furger, R. Does Jane Compute?
Hecker, D. Occupational employment projections to 2014.
Kahn, K. Drawings on napkins, video-game animation, and other ways to program computers.
Using a Game for Social Setting in a Learning Environment: AlgoArena - A Tool for Learning Software Design.
Kay, A. Etoys and Simstories in Squeak.
