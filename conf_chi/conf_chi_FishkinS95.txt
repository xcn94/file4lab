Traditional database query systems allow users to construct complicated database queries from specialized database language primitives.
While powerful and expressive, such systems are not easy to use, especially for browsing or exploring the data.
Information visualization systems address this problem by providing graphical presentations of the data and direct manipulation tools for exploring the data.
Recent work has reported the value of dynamic queries coupled with twodimensional data representations for progressive refinement of user queries.
However, the queries generated by these systems are limited to conjunctions of global ranges of parameter values.
In this paper, we extend dynamic queries by encoding each operand of the query as a Magic Lens filter.
Compound queries can be constructed by overlapping the lenses.
Each lens includes a slider and a set of buttons to control the value of the filter function and to define the composition operation generated by overlapping the lenses.
We demonstrate a system that supports multiple, simultaneous, general, real-valued queries on databases with incomplete data, while maintaining the simple visual interface of dynamic query systems.
With it, users can incrementally construct full boolean queries by layering queries encoded as Magic LensTM filters .
Our work builds directly on two techniques for information visualization that were presented at CHI '94.
The second, the movable filter , supports multiple simultaneous visual transformations and queries on underlying data.
In this paper we combine the two techniques, enhancing the starfieId display by augmenting it with the flexibility and functionality of the movable filter.
The advantages in~lude: a direct manipulation mechanism for creating* general boolean queries, multiple simultaneous views, and a uniform mechanism for providing alternate views of the data.
We also demonstrate how our query mechanism was extended to support general, real-valued queries on databases c~mtaining missing fields.
After describing related work, we describe using magic lens filters to generate boolean queries over graphically displayed data.
We then discuss how they provide a uniform mechanism for generating multiple views of the data.
We then extend our model to support real-valued queries over incomplete data, and present our conclusions and plans for futlire work.
Concrete examples taken from an application for exploring US Census data are used throughout the paper.
Such systems are powerful and expressive, but not easy to use, especially when the user is unfamiliar with the database schema.
These systems have many advantages over language-based systems, including a visual representation that provides an intuitive feel for the scope of the data, immediate feedback, and incremental, reversible interactions.
There is a tension in such systems, however, between providing expressive power and ease of use.
To copy otherwise, or to rep~bllsh.
Such displays can encode large amounts of data and can provide an intuitive way to visualize groups of related data items.
Transformations of the display produce patterns that are easy to interpret, even for high-dimensional datasets .
When combined with a graphical representation of the database such as a scatterplot, users can rapidly explore different subsets of the data by manipulating the selectors .
The effect of combining slider filters is strictly conjunctive; disjunctive queries may only be performed by performing each sub-query sequentially.
The effects of the selectors are global; there is no way to limit .the scope to only a portion ofthe data except by zooming in on it.
Finally, the number of selectors, and hence the number of possible queries, is fixed in advance.
To incorporate grouping, we need a mechanism for encapsulating the expression defined by a stack of lenses.
The user creates such a compound lens by selecting a point on a stack of lenses through a Click-through button, a partially transparent button on an overlaying lens .
All lenses beneath this point are combined to create a compound lens that generates the same query as the stack.
The resulting lens also has a composition mode that defines how it is combined with other lenses.
This new compound lens can be manipulated by the user just as any other lens, providing a simple way to encapsulate a complex query into a single conceptual unit.
To create the query  OR , for example, we create compound lenses for the values in parentheses: CI= and C2=.
By giving lens C I a composition mode of OR, we can create the desired expression by positioning Clover C2.
Compound lenses may contain other compound lenses, allowing queries to grow to arbitrary complexity.
Since we can incorporate AND, OR, NOT, and grouping.
Complex queries can be incrementally built up by direct manipulation of the lenses and their modes.
Useful queries can be saved as compound lenses.
The resulting lenses can then be used to build up more complex queries in a completely uniform manner.
While we have implemented only -three common boolean composition modes, this model supports any of the boolean operators.
EXAMPLES To demonstrate these ideas we created an application to browse a database of US census data .
In this database, each row represents a city and the columns describe the city along various census metrics: population, crime rate, property tax rate, and so forth.
We chose this database because it is pUblicly available, lends itself to fairly interesting queries, and the data elements have an intuitive mapping to the 2D plane, namely the physical location of the city on a map.
In this implementation, each lens is implemented as an X window .
A lens manager server extends the X window system to support magic lens functionality.
Therefore, the .lenses can be manipulated using the regular window manager interface.
Using this facility, the application can generate PostScript pictures describing its screen appearance.
We used such generated PostScript for all the black and white figures in this paper.
Choosing this form, instead of a screen snapshot, allows us to customize the presentation to fit the space and color limitations of the proceedings.
The figures in the color plates are screen snapshots that show the screen appearance of the running application.
Color plate 1 shows a typical lens filter in action.
Each city is displayed as a blue-rimmed white box at a point proportional to its latitude and longitude.
The data attribute associated with the lens filter covering the center of the country, "1991 crime index," is displayed in the window header.
Below that on the left is a slider used to control the threshold value for the query, and a label showing the current slider value .
The buttons to the right of the slider control whether the user is screening for data less than  or greater than  the slider value.
The Aggregate Manipulator  as well as XSoft's Visual RecallTM  allow somewhat more powerful  queries, supporting disjunctive and limited compound composition via textual, hierarchical, menu-driven interfaces.
The conceptual prototype of Egenhofer  is a hybrid technique.
Magic lens filters  are a user interface tool that combine an arbitrarily-shaped region with an operator that changes the view of objects viewed through that region.
The operator can be quite general, accessing the underlying data structures of the application and reformatting the data to generate a modi'fied view.
The filters are spatially bounded, may be parameterized, and are interactively positioned over on-screen applications.
Filters may overlap, in which case they compose their effects in the overlap region.
Magic lens filters provide a number of advantages desirable for data visualization.
Since they are spatially bounded, they can perform their operation within a restricted focus while maintaining global context.
Since they can overlap, compositional semantics can be defined and controlled.
BOOLEAN QUERIES BY COMPOSITION Given some mechanism for displaying data in scatterplot format, we can use a set of lenses to create dynamic queries on the data.
Each lens acts as _ a filter that screens on some attribute of the data.
A slider on the filter controls a threshold for numeric data.
Buttons and other controls on the lens can control other functions.
When the lenses overlap, their operations are combined.
This provides a clean model for building up complex queries.
This physical, rather than merely conceptual, composition of multiple sliders appeals to existing user intuitions that spatial overlaps imply a composition, as shown in Venn diagrams and color circles.
To create boolean queries by composing magic lens filters, we need to provide a way to specify how the filters are combined.
To provide full boolean functionality, we need to provide a mechanism for the AND, OR, NOT and grouping or parenthe-* sizing operations.
We define for each lens a filtering function and a composition mode that describes how the result of the filtering function is combined with tlie output of lenses underneath.
More formally, a lens L=, where F is a filter and M is a boolean operator.
The filter, F, describes the output calculation for the filter on some datum.
The mode, M, describes how that output is combined with the output from lower filters.
Conversely, the effect of positioning L2 over Ll is .
We implement the composition mode as a button on the lens, making it easy to change the mode as needed.
The NOT operation can be encoded as a lens whose filter inverts the sense of the data coming in.
Using the formalism of the previous paragraph, an inverting lens N = .
That is, N applies a NOT to the output oflower filters, and has no intrinsic filter function.
For example, consider the query , where FI and F2 filter for various attributes, To implement this query, the user would lay down filter F2, then the NOT filter N, then filter FI with its composition mode set to OR.
For example, in this case, cities in the center of the country with a crime rate greater than 12158.5 are shown in red.
Buttons along the right edge of the application are used to spawn new lenses , and for application housekeeping.
Figure 1 shows the effects of applying different composition modes to the composition of two filters.
The composition mode for a lens is defined by a group of four radio buttons..
The buttons labeled AND and OR set the composition mode accordingly.
The SELF button causes the lens to display only the effect of its own filter, ignoring other lenses, and the NOP button sets the filtering function to NULL, disabling the effect of the lens.
These two modes are useful when interpreting complex queries.
In figure I  we look for cities which have high annual salaries and low taxes.
The SELF and NOP buttons can be used to examine these components separately, to determine which cities have high salaries and which have low taxes.
An alternative interface for setting the composition mode is to use a click-through tool.
In this interface, a single button on the lens indicates the current mode.
A click-through tool contains buttons that can be used to change the mode by clicking through them to the lens below.
The advantage of this interface is that it supports a large set of composition modes without visual clutter The disadvantage is that it requires more steps to change the mode.
Our application supports both interfaces; users can choose the interface they prefer.
An example of a lens with a single mode button is shown in color plate 2.
Simultaneous multiple queries can be performed by Position": ing different lenses over different parts of the display.
Each lens, and hence each query, can be independently customized by manipulating the controls on the lens.
We can also use lenses to generate altemate views of the data, such as magnifying lenses, callouts, sorted views, and other such transformations.
The user interface of these visual transformations is identical to that of the semantic transformations .
For example, a scatterplot representation of the data will often have clumps, where some set of data points'map to nearby points on the display or even overlap.
Figure 2 shows two examples of this clumping, and uses multiple visual filters to aid in viewing the data.
A small magnification lens is positioned over northern Califomia, letting us see that there are four cities clumped into the bay area.
Over southern California, a callout lens is placed.
This lens displays the cities as a list, making it easy to separate them.
The rest of the map is displayed in the usual manner.
This allows easy identification of cities in the dense region while maintaining global context.
The boxes next to the city names on the callout are active, so filters placed over them act exactly as if they were placed over the original map.
Cities listed without boxes are missing the data selected by the filter, "Median home price."
In the star-field paradigm, a user manipulates a set of selectors, and observes their filtering effect on the data.
By associating each selector with a single movable filter, we gain the ability to pose multiple simultaneous queries, each with its own set of parameters.
For example, suppose we wish to determine which cities in each region of the country have relatively low housing prices.
We have data available for the average housing price per city.
However, the range of values for this attribute is wide, and varies geographically.
For example, houses on the west coast are typically more expensive than houses in the midwest.
Therefore, we need to filter on a higher threshold on the west coast than in the midwest.
Figure 3 shows two filters with two different threshold values positioned overCalifomia and over Texas.
To support more powerful queries, we extended our system such that filters assign a real-valued score on the range  to each datum.
Data with a score of 0 fails the filter entirely, data with a score of 1 succeeds entirely, and data with intermediate scores partially satisfy the filter.
This provides more information about the value returned by the query.
In general, the scoring function could be arbitrary-a filter might prefer data with extreme values, or assign a gaussian falloff to data with the highest score going to data of a certain value, or other similar metrics.
Our implementation currently supports only linear and step scoring functions, but this is not due to any limitation imposed by the technique.
We present the score visually by showing each datum as a partially filled-in square; the higher the score, the more of the square is filled in.
For example, in figure 4 a boolean filter is screening for crime rate, and both Dallas and Fort Worth are* seen to have high crime rates.
The values displayed were computed as follows.
As in the boolean case, the filter slider value defines a threshold.
When screening for data greater than the threshold , data below the threshold is assigned a score of 0, as is the case for Arlington in Figure 4.
The city in the database with the greatest value for the data  is assigned a score of 1.0.
Cities with values between the threshold and the maximum are assigned a simple linear score equal to their value divided by the maximum value.
When screening for values less than the threshold , values below the threshold are assigned non-zero scores in a similar manner.
Computations can be performed on the output of real-valued filters.
For example, in figure 5 we have placed a sorting lens over a real-valued crime rate filter.
Only the cities under the sorting lens are sorted.
We can see that in Florida, Jacksonville has the lowest crime rate and Miami has the highest.
Real-valued filters require real-valued composition modes.
The real-valued MIN and MAX composition modes correspond to the boolean AND and OR as in fuzzy logic .
That is, MIN and MAX work the same on 0.0 and 1.0 as AND and OR do on 0  and 1 , but can also incorporate values in-between.
A real-valued NOT filter returns 1.0 minus its input value.
Just as boolean filters can be comPllsed with an arbitrary boolean operation, not just AND and OR, so too can real-valued filters be composed with an arbitrary numerical operation, not just MIN and MAX.
The DIFF composition mode is an example of a mathematical composition operator: it is defined as the absolute value of the difference between its two operands.
The filter above that, the "Very" filter, is an e~ample of an operator from fuzzy logic: Very is defined as x squared .
By overlaying a realvalued NOT filter above that, we ask where crime rate and poverty rate are NOT VERY DIFFerent.
The higher the score, the redder the city's box, the greater the correlation.
We can see that poverty and crime rate are highly correlated in most cities.
We visuaiize missing data by use of a special lens.
Normally, any city whose value as a result of a query is missing, or undefined, is simply not shown.
The "Show Missing Data" lens makes these cities visible.
For example, figure 6 shows a query, centered on the West Coast, filtering for cities with severe traffic delays.
Only San Francisco is shown to have such delays.
By adding a "Show Missing Data" lens, however, as shown in figure 6, we see that most of the other California communities don't have data for this category-perhaps San Francisco is not as unattractive as it first appeared.
We incorporated missing data into the semantics of composition by considering missing data to be analogous to the IEEE concept of a non-signaling Not-A-Number , a value that is defined to "afford retrospective diagnostic information inherited from invalid or unavailable data and results" .
Databases in general, and the US census database in particular, do not always have all data fully defined.
In the case of the US census database, for example,some cities may have population figures included but not crime data, or vice versa.
A robust information presentation system must address this problem to give lin accurate view of the data.
There are two issues: how such data is visually presented and how queries based on that data are performed.
Applying magic lens filters to the problem of exploring and visualizing data creates a user model that is expressive yet easy to understand.
Placing a lens over the data evokes the physicaJ model of using a lens for filtering or enhancing the view of the data beneath it.
Including a sJider on the lens allows the user to dynamically vary the query by adjusting the filter threshold.
Overlapping the filters creates a natural metaphor for creating compound queries.
By providing explicit composition modes and a mechanism for grouping expressions, the full power of a boolean query language can be expressed graphically.
We have also demonstrated how this language can be expanded to include real-valued functions that gracefully handle missing values.
Powerful queries can be built up incrementally, then preserved for future exploration.
In this way, the lenses provide a mechanism for capturing the result of a data exploration session.
Magic lens filters provide a natural mechanism for visual transformations as well as semantic transformations of the data.
We have shown examples of callout, magnification, missing data, and sorting lenses.
Other possible functions include alternate representations of score such as color or size, and overlaying geographic information* such as city or state boundaries.
In our application, magic lens filters have been combined with click-through tools to implement a. wide range of user-interface operations.
These can be used to manipulate the data, the filtering operations, or the tools themselves.
For example, click-through tools are used to create compound lenses, generate figures, provide additional parameters for the filtering operations, and to change the layout of the buttons and sliders.
In summary, magic lens filters provide a uniform, powerful and extensible mechanism for data visualization and exploration applications.
This will enable us to perform user studies to help quantify the value of this technique.
We are also interested in extending this work to apply to other types of data and other forms of information visualization.
ACKNOWLEDGMENTS We thank Jock Mackinlay for his enthusiasm, encouragement, and shared realization that magic lens filters could support disjunctive queries.
We thank Eric Bier for his user-interface and illustration design expertise, and Ken Pier for his help in the preparation of the paper.
Finally, we thank Xerox PARC for its continuing support.
Trademarks and Patents: Magic Lens and Visual Recall are PostScript is a trademarks of the Xerox Corporation.
Patents related to the concepts discussed in this paper have been applied for by the Xerox Corporation.
Christopher Ahlberg, Christopher Williamson, and Ben Shneiderman.
Dynamic Queries for Infonnation Exploration: an Implementation and Evaluation.
Christopher Ahlberg and Ben Shneiderman.
Visual Infonnation Seeking: Tight Coupling of Dynamic Query Filters with Starfield Displays.
Eric A. Bier, Maureen C. Stone.
Thomas Baudel, William Buxton, and Ken Fishkin.
A Taxonomy of See-Through Tools.
Eric A. Bier, Maureen C. Stone, Ken Pier, William Buxton, and Tony D. DeRose.
Toolglass and Magic Lenses: The See-Through Interface.
Proceedings of Siggraph '93 , Computer Graphics Annual Conference Series, ACM, 1993, pp.
Statistical Abstract of the United States 1993.
Interpretation and Execution of Fuzzy Programs.
In Fuzzy Sets and Their Applications to Cognitive and Decision Processes.
Grace Colby and Laura Scholl.
Transparency and Blur as Selective Curs for Complex Visual Information.
Manipulating the Graphical Representation of Query Results in Geographic Information Systems.
Proceedings ofthe 1990 IEEE Workshop 011 Visual Languages.
IEEE Computer Society Press, Los Alamitos CA, 1990, pp.
Jade Goldstein and Steven F. Roth.
Using Aggregation and Dynamic Queries for Exploring Large Data Sets.
The IEEE Standard for Binary Floating-Point Arithmetic.
How should Max and Min be defined?
Daniel A. Keim.and Hans-Peter Kriegel.
VisDB: Database Exploration Using Multidimensional Visualization.
George G. Robertson, Stuart K. Card, and Jock D. Mackinlay.
Infonnation Visualization Using 3D Interactive Animation.
Robert W. Scheifler, James Gettys, and Ron Newman.
Maureen C. Stone, Ken Fishkin, and Eric A. Bier.
The Movable Filter as a User Interface Tool.
The Visual Display of Quantitative Information.
