One of the key challenges of video game design is teaching new players how to play.
Although game developers frequently use tutorials to teach game mechanics, little is known about how tutorials affect game learnability and player engagement.
Seeking to estimate this value, we implemented eight tutorial designs in three video games of varying complexity and evaluated their effects on player engagement and retention.
The results of our multivariate study of over 45,000 players show that the usefulness of tutorials depends greatly on game complexity.
Although tutorials increased play time by as much as 29% in the most complex game, they did not significantly improve player engagement in the two simpler games.
Our results suggest that investment in tutorials may not be justified for games with mechanics that can be discovered through experimentation.
Learnability is widely accepted as a central component of usability, and it has been studied in the field of Human Computer Interaction for decades .
In this paper, we draw tutorial ideas from the HCI literature and present a large-scale comparative study of their effectiveness in video game tutorials.
Although many factors influence tutorial design, we chose to focus on four specific tutorial characteristics: the presence of tutorials, the context-sensitivity of tutorial instructions, the freedom given to users during the tutorial, and the availability of additional help on demand.
We examined the importance of these characteristics by conducting a multivariate experiment across three games that we developed: Refraction, Hello Worlds, and Foldit.
These games belong to different genres and vary in complexity.
We present results gathered from over 45,000 players showing that the value of tutorials depends greatly on the complexity of the game.
In Foldit, the most complex and least conventional game we studied, tutorials increased play time by as much as 29% and player progress by as much as 75%.
However, we found that tutorials had a surprisingly negligible effect on player engagement in Hello Worlds and Refraction, which are less complex and more similar to other games in their respective genres.
Giving tutorial instructions as closely as possible to when they were needed, rather than out of context in an up-front manual, increased play time by 16% and progress by 40% in Foldit but had no effect in the other two games.
We found no evidence to support the claim that restricting player freedom in order to focus the player's attention on a target concept improves learnability.
Providing help on-demand improved player engagement in Foldit, but had no effect in Hello Worlds and even negative effects in Refraction.
Our results suggest that investment in tutorials may not be justified for games that can be learned through experimentation, and that the players of these games, at least, seem to learn more from experimentation than from reading text.
Teaching new players how to play a game is challenging but crucial for engaging and retaining players.
As a result, game designers frequently utilize tutorials to aid the learning process.
Since tutorials are typically the first part of a game that new players encounter, effective tutorial design is important for retaining new players.
Although modern games employ a wide varety of tutorial styles, including hints, help buttons, manuals, and interactive training challenges, the relative effectiveness of these styles is not well understood.
As a result, designers must rely on intuition, personal experience, existing examples, and extensive user testing when designing tutorials.
A deeper understanding of how tutorial design decisions impact player engagement and retention would help game developers create more learnable interfaces and spend valuable resources more wisely.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
The first feature we considered was tutorial presence: whether the game provides a tutorial to its players or not.
Although some successful games provide no instructions to players, such as Tetris , Pac-Man , and Super Mario Brothers , the use of tutorials has become very common.
Therefore, we wanted to examine the impact of tutorial presence.
Hypothesis 1: Games with tutorials will exhibit better player engagement and retention than games without tutorials.
Another feature we considered was the context-sensitivity of tutorials.
Existing tutorials can be divided into two categories: those that provide contextually relevant suggestions from within the application interface and those that provide documentation outside of the application context.
HCI researchers have studied both types of tutorials extensively; however, the effect of context-sensitivity on tutorial success is unclear, and the existing literature does not show a clear preference for either type of information.
Historically, tutorials have been provided through primarily textual documentation that is accessed outside the application context.
While paper manuals and online documentation require minimal resources to generate, they present a number of challenges for users, who struggle to keep track of instructions when switching between the tutorial and the application .
As a result, many researchers have worked on improving external software documentation by incorporating screenshots, graphics, animations, and annotations into textual content .
Despite these improvements, many researchers argue that contextually relevant tutorials have greater potential for improving application learnability .
This idea is supported by situated learning, a popular learning model in education based around teaching concepts in the same context in which they will be applied .
Game expert James Gee also highlights the importance of teaching new mechanics just before the player needs to use them, rather than presenting them out of context .
Tooltips, which provide brief textual help when the user hovers over an interface component, are one of the most successful forms of contextual help .
On the other hand, context-sensitive help can be more frustrating than helpful, as shown by Microsoft's Office Assistant .
Commercial video games have used both context-sensitive and context-insensitive tutorials successfully.
Other games present instructions in-context, just as the player needs to use them.
This strategy can be seen in the highly-rated Flash game In the Company of Myself3 and the popular console game Portal .
To learn more about the value of context-sensitivity in game tutorials, we included both styles of presentation.
Hypothesis 2: Tutorials that present instructions in context will be more effective than tutorials that present information out of context.
We also considered tutorial freedom, or the degree to which tutorials force users to perform the mechanics being described.
While requiring users to practice specific game mechanics could improve tutorial effectiveness, it could also frustrate players.
As a result, it is not clear if and when reducing player freedom improves engagement.
Game designers have often cited the importance of allowing users to experiment while learning new concepts .
James Gee argues that such experimentation is most effective when it occurs in a safe environment where functionality is reduced and mistakes are not punished .
Software learnability researchers Kelleher and Pausch argue that restricting user freedom improves tutorial performance.
They found that an interactive tutorial for the Alice computer programming environment that restricts user freedom, called Stencils, helped users finish the tutorial sequence more quickly and with fewer errors than a paper-based tutorial with the same content .
How different types of interfaces are affected by reduced player freedom, however, is currently unknown.
Many video games provide players with complete freedom during the tutorial.
Braid , for instance, provides the player with background suggestions for keys to press during gameplay, but does not force the player to perform the suggested action.
At the same time, the use of more restrictive stenciling strategies is also popular, and can be found in PopCap's tower defense game Plants vs. Zombies , the simulation game SimCity 4 , and Facebook game Cityville .
We included tutorials of both types in order to determine the value of restricting player freedom.
Hypothesis 3: Tutorials that restrict player freedom improve engagement and retention.
In this study, we compare tutorials that restrict player freedom using the stenciling technique proposed by Kelleher and Pausch  and those that give players complete freedom to ignore the tutorial content.
Finally, we considered the availability of help.
Many applications provide access to documentation on-demand through help buttons, but it is unclear whether this type of information has a strong effect on interface learnability.
Although it seems likely that providing access to on-demand help would positively impact learnability, it is not known how much users take advantage of on-demand information when it is available.
James Gee argues that manuals are most effective when they are accessed on-demand, after the user has become familiar with the basic interface elements and has developed specific questions .
On-demand tutorials are also common in games.
For example, help buttons are available in the Flash game Epic Battle Fantasy 3 and the real time strategy game Starcraft 2 .
To determine the impact of on-demand help in games, we included tutorials with and without this feature.
Hypothesis 4: Having on-demand access to help improves player retention.
In this study, we compare games that provide access to tutorial manuals on-demand through a help button with games that do not, both with and without other types of tutorial instructions.
The goal is to use the pieces on the right to split lasers into fractional pieces and redirect them to satisfy the target spaceships.
The user can pick up and put down pieces by clicking on them.
The pieces are designed to be as intuitive as possible.
The grid interface, pipe-flow game mechanics, and spatial reasoning puzzles are similar to many other puzzle games.
Over the past decade, researchers have begun to use the Internet to collect large quantities of data on player behavior.
This has given rise to a data-driven evaluation methodology that has been widely used by companies like Amazon, Microsoft, and Google to support interface design decisions .
Such evaluation models frequently use simple A/B testing, in which a baseline sample is compared to a variety of singlevariable test samples.
This methodology has been used to evaluate games as well; Andersen et al.
In this study, however, we wanted to compare a large variety of tutorial designs defined by multiple variables.
We also had a limited understanding of which combinations of tutorial characteristics would be most effective.
As a result, we chose to perform a multivariate experiment considering four independent variables and a total of eight conditions, rather than using a simple A/B test.
Although Refraction was originally designed to teach math concepts, the game has found success with an adult audience on the popular Flash website Kongregate, where it has been played over 480,000 times since its release in September 2010.
The use of fractions as a game mechanic is relatively uncommon, but similar spacial reasoning puzzles and pipe flow mechanics appear in many other games on Kongregate and elsewhere.
The artwork for the laser sources, target spaceships, asteroids, and laser manipulators was designed to utilize affordances to make the functionality of each piece as clear as possible.
Refraction is freely available and can be played by anyone with a web browser.
We performed tutorial experiments on three games developed by our research group: Refraction, Hello Worlds, and Foldit.
All three games contain puzzle elements, but otherwise differ greatly in their format, complexity, and player bases.
We consider two of the games, Refraction and Hello Worlds, to be "casual" games.
We define "casual" games as those that rely on familiar game mechanics, take only a few hours to complete, and do not require a download.
Refraction, which involves solving spacial puzzles by splitting lasers into fractional amounts, was originally designed as a math-learning game.
Each level is played on a grid that contains laser sources, target spaceships, and asteroids, as shown in Figure 1.
Each target spaceship requires a fractional amount of laser power, indicated by a yellow number on the ship.
The player can satisfy the targets by placing pieces that change the laser direction and pieces that split the laser into two or three equal parts.
All targets must be correctly satisfied at the same time to win.
A level of Hello Worlds, a puzzle-platformer game.
The game interface is similar to thousands of other games in the platformer genre, except that the player exists in multiple worlds at the same time.
As a result, the basic game mechanics for navigating using keyboard input may be familiar to players.
The player advances through each level by opening and closing doors, a common goal mechanic.
The player must find a path through the worlds to reach various doors that open and close worlds or complete the level.
While the puzzle element of Hello Worlds is uncommon, the basic game mechanics for navigating using keyboard input are used in many existing platformers.
Hello Worlds is available for free on the Flash game website Kongregate, and has been played over 1,300,000 times since its release in May 2010.
As a result, participants are playing under their own motivation, and our findings reflect their natural behavior.
However, one important limitation is that we have no interaction with our participants, and we cannot know what they are thinking or feeling.
Therefore, we must infer the effects of tutorials on player engagement by measuring their behavior.
We measure player engagement in three ways.
First we count the number of unique levels each player completes.
Second, we calculate the total length of time that they played the game.
Since players occasionally idle for long periods, we aggregated moves the player made in 30-second intervals, removing periods of two or more consecutive idle intervals from the total play time.
Finally, we measured the return rate, defined as the number of times players loaded the game page in Refraction and Hello Worlds, and as the number of times the game was restarted in Foldit.
While these metrics are not precisely the same as "engagement" or "learnability," we argue that they are closely related, given that players are free to leave at any time and cannot advance in a game without learning its associated rules and strategies.
If the purpose of tutorials is to teach game mechanics to the player, the ability to complete levels should be the ultimate test of whether the player has learned those mechanics.
We modified each of the games to randomly assign new players to one of the eight experimental conditions.
We focused solely on new players for this experiment; veteran players who were already familiar with the games were not included in our analysis.
In Refraction and Hello Worlds, we tracked players using the approach described in , storing progress and experimental condition through the Flash cache.
One drawback of this method is that if players changed computers or deleted their Flash cache, they were treated as new players.
However, since the Flash cache is inconvenient to clear and this action deletes all progress in the game, we considered this risk to be small.
For Foldit, we tracked players using their Foldit account and stored the condition number locally on their machine.
Players who logged in on multiple machines were tracked by their account and discarded to prevent the inclusion of players who played multiple tutorial versions.
A puzzle in Foldit, a game in which players manipulate protein models and try to pack the shape as tightly as possible.
The game is complex, has an interface with many tools and buttons, and offers a gameplay experience that is very different from other games.
Therefore, players cannot rely on prior knowledge of other games very much when trying to learn how to play Foldit.
Foldit is a multiplayer, online game in which players compete and collaborate to fold protein structures efficiently .
Players can manipulate 3D protein structures, shown in Figure 3, by pulling on them, freezing pieces to prevent them from moving, and launching optimizations that will computationally improve the protein.
Each folded protein is given a score which is used to rank solutions.
Foldit has a set of offline tutorial puzzles designed to prepare players for online competitions, which we used for this study.
Foldit differs from Refraction and Hello Worlds in several key ways.
First, players must download and install Foldit from a website in order to play, and must create an account to participate in online competitions.
Second, the gameplay mechanics required to fold proteins are unique to this game, and as a result it is unlikely that players can benefit from past gaming experience when playing Foldit.
Finally, it is much more complex than the two "casual" games and requires an understanding of some unconventional mechanics, such as placing rubber bands to hold the protein together, or running a wide variety of optimizations.
Since Foldit players are working to solve complex, open scientific problems through gameplay, we do not consider this a "casual" game.
We performed a multivariate experiment with four variables: presence, context-sensitivity, freedom, and availability of ondemand help.
We picked these variables to capture the most salient differences in tutorial implementations seen in successful games.
We included a total of eight experimental conditions, shown in Table 2, each representing a combination of values for the four variables.
Table 1 shows a breakdown of the concepts that each game introduces and the order in which they are introduced.
The following sections explain how the four variables are implemented in each game.
Foldit Concept Clashes Pulling Sidechains Rotating the Camera Score Shake  Pulling the Backbone  Undo Voids Reset Wiggle  Hydrogen Bonds Wiggle Again  Rubber Bands  Translating the Camera Rubber Bands Again  Freeze  Backbone Color Rebuild  Hydrophobics Exposeds Tweak Rotate  Tweak Shift  Tweak Rotate Again  Secondary Structure Mode 
A breakdown of concepts taught in each game.
The concepts are listed by the order in which they were taught in the context-sensitive condition.
Concepts were either taught in a specific level as part of a context-sensitive tutorial or in the manual used by the context-insensitive tutorial and the on-demand help.
Concepts marked with an "" were stenciled during the blocking conditions.
Foldit is more complex than the other two games and required many more tutorials.
The eight tutorial conditions that we implemented for our multivariate experiment, based on four independent variables: presence, context-sensitivity, freedom, and availability of help.
These conditions were designed to represent a wide range of existing tutorial designs and evaluate multiple hypotheses simultaneously.
In Refraction, as shown in Figure 4, the instructions appeared in a notification bar at the top of the main grid.
Refraction also contained "just-in-time" messages that would activate when the player tried to do something that was not allowed.
For example, when a player powered a target spaceship with less than the required amount, a message saying "too little power" appeared over the spaceship.
Each of these messages appeared every time the spaceship was underpowered, but player could click "don't show again," which would cause that particular message to stop appearing.
Foldit tutorial messages appeared in pop-up boxes as shown in Figure 4.
In Refraction and Foldit, longer contextsensitive messages were sometimes displayed across multiple pages, which the user could advance by clicking on the "next" or "Tell me more..." button.
In Hello Worlds, shown in Figure 4, help icons were scattered throughout the game to give the player information when appropriate.
These help icons were activated whenever the player stood over them, as shown in 4.
When activated, the text relating to that help icon would appear in the space above the icon, allowing the user to easily read or ignore it.
If the player's avatar then moved off of the help icon, the text would immediately disappear.
If the player moved their avatar back over the help icon, the text would reappear.
For the context-insensitive version, we grouped the concepts of each game into multi-page manuals by topic and order of introduction.
Since each game requires a different number of concepts, the length of the context-insensitive manuals varied across the games: 9 pages for Refraction, 16 for Foldit, and 6 for Hello Worlds.
The manuals for Refraction, Foldit, and Hello Worlds are shown in Figures 5, 5, and 5, respectively.
For conditions in which there were no tutorials, the game explained nothing on its own and players were forced to either experiment or seek help outside the game.
The conditions with tutorials are further broken into more categories in the following sections.
To evaluate the effect of tutorial context-sensitivity on engagement and player retention, we introduced an additional variable, context-sensitivity.
For conditions in which tutorials were present, we organized the tutorials from each game into two versions: context-sensitive and context-insensitive.
For the context-sensitive version, we tried to introduce each concept as closely as possible to when the player needed to use it.
Therefore, for each of the concepts in Table 1, we added a short message explaining that concept to the first level in the game requiring knowledge of it.
Some tutorials also contained contextual images to reinforce the text.
Each message was controlled for size so that it could be easily ignored.
Additionally, the player could dismiss any tutorial message.
Screenshots of the context-sensitive tutorials.
For Refraction, shown in Figure 4, a window appeared at the top of the screen containing text, pictures, an OK button to continue, and a back button to return to a previous message.
Foldit's tutorial, shown in Figure 4, included a small box containing tutorial text, which related to the protein at hand, and a "Tell me more..." button to go onto the next message.
For Hello Worlds, shown in Figure 4, blue help icons could be found throughout the game.
Tutorial text appeared above an icon whenever the player's avatar overlapped with it.
Screenshots of the context-insensitive tutorials.
All three games featured a large window containing text, pictures, page numbers, "Next" and "Previous" buttons, and a "Close" button to help the player navigate and understand the concepts of the game.
The layout of this window varied from game to game.
Figure 5 shows the layout for Refraction, Figure 5 shows the layout for Foldit, and Figure 5 shows the layout for Hello Worlds.
These manuals appeared before the player could interact with any levels, forcing them to interact with the manual in some way before playing the game.
The player could navigate between pages with the "next" and "back" buttons and gauge their progress using page numbers present on each page.
The player could also close the manual at any time by clicking the "close" button.
Due to their length, we broke the Refraction and Foldit tutorials into logical "chapters."
As the player advanced, new chapters became available.
At each new stage, the contextinsensitive tutorial reappeared showing the first page in the new chapter, and the player could navigate to previous chapters if desired.
Refraction had three chapters, displayed at the beginnings of worlds one, five and six respectively.
Foldit had four chapters, displayed every four levels.
After completing the stencil, freedom to interact with the full user interface was restored.
We implemented stencils slightly differently in each game due to their different interaction styles.
In Refraction, when the player encountered a stencil, the game drew the player's attention to the target interface object by making the entire window gray except for that object, displaying the instructions on a notification bar at the top of the screen, adding an animated yellow arrow that pointed to the object, and ignoring all user input directed at anything other than the object.
This implementation is shown in Figure 6.
If a level had both context-sensitive tutorial messages and a stencil, then the game forced the player to click somewhere on the screen to advance each tutorial message before forcing the player to complete the stencil instructions.
In Foldit, the game displayed a message telling the player what to do, as shown in Figure 6.
The screen was not grayed out, and the user could still manipulate the camera and interact with game's user interface controls.
However, the game prevented the player from manipulating the protein in any other way until they performed the desired action.
To evaluate the effect of tutorial freedom, we divided the context-sensitive condition described above into two conditions: blocking and nonblocking.
To create the blocking condition, we identified several concepts from each game that involved using a new tool, a new interface object, or a new keyboard key.
Screenshots of the blocking tutorials.
A blocking tutorial prevented the player from continuing until they completed a specified action.
For Refraction, shown in Figure 6, the tutorial grayed out the interface except for a window containing tutorial text, an object for the player to interact with, and an arrow pointing at that object.
Foldit, shown in Figure 6, used a small text box to tell the player what action they needed to perform.
Hello Worlds, shown in Figure 6, grayed out the screen except for character, the tutorial text, and the interface buttons whenever the blocking tutorial was active.
In Hello Worlds, as in Refraction, a gray window was drawn over the entire game except for the player's avatar, the message text, and the user interface buttons.
Since the user primarily interacts with Hello Worlds through the keyboard, the displayed message associated with each stencil told the user what key to press to continue, as shown in Figure 6.
All other keys were ignored until the user pressed one of the valid keys.
The user was allowed to interact with the interface buttons, such as "quit," but could not make any progress on the level until completing the instructions in the stenciled message.
We collected data from Refraction and Foldit for approximately two weeks, accumulating 13,158 Refraction players and 9,743 Foldit players.
During this period, Kongregate added a new badge to Refraction, pushing the game to the top of the "new badges list" and attracting many new players.
Kongregate also featured Hello Worlds on the front page of its website as a "badge of the day," allowing us to collect data from 22,417 Hello Worlds players over a two-day period.
Table 3 shows the results of our experiment.
Our measurements of levels completed and time played were not normally distributed, so we used on a non-parametric test, the Wilcoxon/Kruskal-Wallis 2-sample test, to analyze levels completed and time played for large-scale effects.
The Z-value reported for this test is a standard normal random variable, a scaled version of the distribution of relative rankings of the lower-ranked condition.
For return rate, we used Pearson 2 analyses to compare the percentages.
The variance in our measures was very high, so a great deal of data was necessary to show statistical significance at the p = 0.05 level.
To evaluate whether players would look for help when they needed it, and to measure the effect of tutorial availability on player engagement, we added another variable, availability of help, with two possibilities: on-demand help, and no help.
We created a version of the game with on-demand help for each of the previously described conditions.
There are many ways to give tutorial information on-demand.
For this experiment, we added a help button to the main toolbar of each game.
Since Foldit's main toolbar can be closed, another floating help button was added near the score display.
Clicking on this help button opened the same manual used in the context-insensitive tutorial condition described previously.
The manual included only the concepts which the player could have encountered up to that point.
If later levels introduced new concepts, the help manual did not include those concepts until the user reached that level.
In order to make the help provided as context-sensitive as possible, the manual automatically opened to the page that most closely related to the level the user is currently playing.
If desired, the player could view all of the pages of the help screen with the "next" and "back" buttons.
The player could close the help screen and return to the current level by clicking on a "close" button.
When activated, the help screen covered the main interaction area for each game and restricted gameplay until the player closed the tutorial.
To evaluate whether tutorials improved player engagement, we compared the version of the game with no tutorials to the versions with context-sensitive tutorials and contextinsensitive tutorials.
The "presence" section of Table 3 shows the results for these comparisons.
We expected to find that including tutorials, either in-context or out-of-context, would lead to higher engagement than providing no instruction at all.
In Foldit, this was the case.
Foldit players with context-sensitive tutorials played 75% more levels and 29% longer than those with no tutorials.
Players with context-insensitive tutorials played 25% more levels and 12% longer than with no tutorials.
We found no significant effects for return rate.
However, tutorials were not as effective in the other two games.
We found no significant effects for either comparison in Refraction.
In contrast to our expectations, our results show that tutorials are only useful for improving player engagement in some games.
It may be the case that tutorial value depends on game complexity.
Refraction and Hello Worlds are typical of their genres and have intuitive interfaces.
Foldit, on the other hand, is unconventional, complex, and requires deep strategy and spatial insight.
Another possible explanation is that Foldit players are more patient.
Since the barrier to play a downloadable game like Foldit is higher than for online casual games like Refraction and Hello Worlds, players who are willing to overcome this barrier may be willing to devote more time reading the tutorials.
Further work is necessary to know the exact reasons for this effect.
Regardless, our results show that tutorials may only be worthwhile for complex games, such as Foldit, and may not be worth the investment of time and resources in games with mechanics that are more easily discovered through experimentation, such as Refraction and Hello Worlds.
We next evaluated the importance of presenting tutorial information in context.
We expected that presenting information as closely as possible to when the player needed it would be better than presenting information out of context.
The results for the comparison of context-sensitive and contextinsensitive tutorials are shown in the "context-sensitivity" section of Table 3.
Context-sensitivity improved player engagement in Foldit.
Foldit players played 40% more levels and 16% longer with context-sensitive tutorials than context-insensitive tutorials.
However, we did not find positive effects for contextsensitivity in the other two games.
We found no significant effects for Refraction.
In Hello Worlds, we found that the return rate was about 2% less with context-sensitive tutorials than with context-insensitive tutorials.
Therefore, the importance of context-sensitivity in a particular game depends on whether tutorials positively impact player engagement in that game.
For complex games where tutorials are beneficial, such as Foldit, presenting the information in context seems beneficial.
To evaluate whether restricting player freedom would improve tutorial effectiveness, we compared the versions with context-sensitive blocking tutorials to those with contextsensitive nonblocking tutorials.
The results of this comparison are shown in the "freedom" section of Table 3.
We expected that blocking tutorials would focus player attention and improve learning.
In Foldit, we found a significant effect for levels completed, but the median number of levels completed remained constant at 7 levels.
We found no significant effects for Refraction and Hello Worlds.
Therefore, we found no evidence supporting the practice of restricting player freedom in order to focus player attention on target interface objects.
This result may further reinforce our conclusion that players learn how to use the interface primarily through experimentation, and that forcing the player to perform a series of actions may not be effective.
It may also be the case that players do not like having their freedom restricted and that this cancels out any positive effects on learning.
Further examination is necessary to understand whether restricting player freedom improves player engagement and learning in some cases.
One possible explanation is that the knowledge that there is help available discourages players from putting as much effort into the game.
It is also possible that players will only click "help" if they are already frustrated, and will quit even sooner if they are unable to find the help they need.
We can only speculate at this point, however, since multivariate testing does not tell us what players are thinking.
Future studies are needed to reproduce and understand this effect.
Nevertheless, it is clear that players can respond unpredictably to tutorial implementations, and that tutorials can harm player retention unexpectedly.
This points to the importance of testing tutorial implementations to avoid unexpected negative effects.
Our examination of tutorials in three games of varying complexity showed that tutorial effectiveness depends on the complexity of the game.
Tutorials had the greatest value in the most unconventional and complex game, Foldit, increasing play time by as much as 29%.
However, tutorials had surprisingly little impact on player behavior in Refraction and Hello Worlds, which are less complex, more similar to other games, and easier to learn through experimentation.
Our results suggest that tutorials may not be effective for such games, and that designers should consider the complexity and discoverability of game mechanics when deciding whether to invest resources in tutorials.
It is unlikely that a single approach will work for tutorial design in all games.
Since players seem to learn more from exploring than from reading text, we believe that it is important to design early levels in a way that maximizes a player's ability to experiment and discover game mechanics.
A key question that arises is how to facilitate this experimentation while ensuring that the player learns how to play and does not become frustrated.
We found little evidence to suggest that restricting player freedom to focus attention on a particular interface object or game mechanic is beneficial.
Although it may be tempting to provide help on-demand, we found that adding a help button was only effective in Foldit, and actually reduced player progress by 12% and play time by 15% in Refraction.
Future work is needed to understand how to break down a complex game into smaller "chunks" that can be learned through exploration, how to detect when a player is confused or frustrated, and how to intervene, if necessary, in a way that causes learning without negatively impacting engagement.
One of the drawbacks of our methodology is that we do not know demographic information about our players.
It is likely that each game attracted different kinds of players and that self-selection contributed to the differences in player behavior that we observed.
However, we believe that it is most useful to tailor tutorials for the players who do self-select to play each game because they are the players who are likely to play the most.
Since we only tested tutorials in Refraction, Hello Worlds, and Foldit, we cannot know for sure how these results generalize to other games and genres.
We next evaluated whether player engagement would be improved by providing additional help that players could access when needed.
We expected that providing additional help in this way would be beneficial.
The results for the following comparisons are shown in the "availability of help" section of Table 3.
To look for large-scale effects of providing on-demand help in general, we first aggregated the four conditions with a help button and the four conditions without a help button and compared them against each other.
We found only one significant effect across all three games, which was a 1.2% increase in return rate for Hello Worlds.
We then assumed that the effect of providing help on-demand would be strongest when no other instructions were given.
Therefore, we compared the version with a help button and no other tutorials with the version with no help button and no tutorials.
In Foldit, providing a help button in this case increased engagement.
Players played about 12% longer with a help button than without.
We found a significant effect on the number of levels completed but this effect did not change the median.
However, we found negative effects in the other two games.
In Hello Worlds, players returned about 3% less frequently with on-demand help than without.
In Refraction, we found that players with on-demand help completed 12% fewer levels than those without access to help, and played for 15% less time.
The negative impact of the help button, particularly in Refraction, is difficult to explain.
Further research with a wider variety of games is required to determine whether our results will apply to commercial games and games of different genres.
Furthermore, future work is necessary to understand how tutorial presentation affects player behavior.
There are many ways to design tutorials, and we only experimented with basic designs.
Although video game tutorials frequently include audio, animations, and videos, we only examined tutorials containing pictures and text.
Another question is whether designers should integrate tutorials into the main game progression or provide them in a separate "tutorial mode" that can be avoided entirely, as suggested by  and utilized in highly successful games such as Deus Ex .
Future experiments with a greater variety of tutorial styles will improve our understanding of how to design effective tutorials.
Our results point to the importance of analytics and largescale analysis of player behavior because these effects would be difficult to discover without large amounts of data.
We believe that this methodology will continue to provide valuable insights that improve our understanding of good game design.
Such experiments are important because player behavior is often counterintuitive; each of our four hypotheses turned out to be either incorrect or incomplete.
Furthermore, we believe that the ability of games to attract large numbers of participants, allowing researchers to perform tests with many experimental variables, will make them an important mechanism for future HCI research.
The role of balloon help.
ACM SIGDOC Asterisk Journal of Computer Documentation, 17, 1993.
Learning by design: Games as learning machines.
F. Grabler, M. Agrawala, W. Li, M. Dontcheva, and T. Igarashi.
Generating photo manipulation tutorials by demonstration.
T. Grossman and G. Fitzmaurice.
Toolclips: An investigation of contextual video assistance for functionality understanding.
In CHI '10 Proceedings of the 28th international conference on Human factors in computing systems, New York, NY, USA, 2010.
T. Grossman, G. Fitzmaurice, and R. Attar.
A survey of software learnability: Metrics, methodologies and guidelines.
In CHI '09: Proceedings of the 27th international conference on Human factors in computing systems, New York, NY, USA, 2009.
A comparison of still, animated, or nonillustrated on-line help with written or spoken instructions in a graphical user interface.
In CHI '95 Proceedings of the SIGCHI conference on Human factors in computing systems, New York, NY, USA, 1995.
J. Huang and M. B. Twidale.
Graphstract: Minimal graphical help for computers.
In UIST '07 Proceedings of the 20th annual ACM symposium on User interface software and technology, New York, NY, USA, 2007.
C. Kelleher and R. Pausch.
Stencils-based tutorials: Design and evaluation.
In CHI '05 Proceedings of the SIGCHI conference on Human factors in computing systems, New York, NY, USA, 2005.
Apple guide: A case study in user-aided design of online help.
In CHI '95 Conference companion on Human factors in computing systems, New York, NY, USA, 1995.
R. Kohavi, R. M. Henne, and D. Sommerfield.
Practical guide to controlled experiments on the web: listen to your customers not to the hippo.
In KDD '07: Proceedings of the 13th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 959-967, New York, NY, USA, 2007.
T. Lau, L. Bergman, V. Castelli, and D. Oblinger.
Sheepdog: Learning procedures for technical support.
In IUI '04 Proceedings of the 9th international conference on Intelligent user interfaces, New York, NY, USA, 2004.
J. Lave and E. Wenger.
Cambridge University Press, Cambridge, England, 1991.
S. Palmiter and J. Elkerton.
An evaluations of demonstrations for learning computer-based tasks.
In CHI '91 Proceedings of the SIGCHI conference on Human factors in computing systems: Reaching through technology, New York, NY, USA, 1991.
Designing the User Interface: Strategies for Effective Human-Computer Interaction.
J. Xiao, R. Catrambone, and J. Stasko.
Technical report, Georgia Institute of Technology, Atlanta, GA, USA, 2003.
We would like to acknowledge the members of the Refraction, Hello Worlds, and Foldit teams for developing the games and making this work possible.
We also thank Anthony Pecorella and August Brown of Kongregate for promoting our games and helping us gather data.
This work was supported by the University of Washington Center for Game Science, DARPA grant FA8750-11-2-0102, the Bill and Melinda Gates Foundation, NSF grant IIS0811902, two NSF Graduate Fellowships, Adobe, and Intel.
The designer's notebook: Eight ways to make a bad tutorial.
E. Andersen, Y.-E. Liu, R. Snider, R. Szeto, S. Cooper, and Z. Popovi c. On the harmfulness of secondary game objectives.
In FDG '11: Proceedings of the Sixth International Conference on the Foundations of Digital Games, New York, NY, USA, 2011.
E. Andersen, Y.-E. Liu, R. Snider, R. Szeto, and Z. Popovi c. Placing a value on aesthetics in online casual games.
In CHI '11: Proceedings of the SIGCHI conference on Human factors in computing systems, New York, NY, USA, 2011.
L. Bergman, V. Castelli, T. Lau, and D. Oblinger.
Docwizards: A system for authoring follow-me documentation wizards.
In UIST '05 Proceedings of the 18th annual ACM symposium on User interface software and technology, New York, NY, USA, 2005.
