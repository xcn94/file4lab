Coarse-grained approaches to customization allow the user to enable or disable groups of features at once, rather than individual features.
While this may reduce the complexity of customization and encourage more users to customize, the research challenges of designing such approaches have not been fully explored.
To address this limitation, we conducted an interview study with 14 professional software developers who use an integrated development environment that provides a role-based, coarse-grained approach to customization.
We identify challenges of designing coarsegrained customization models, including issues of functionality partitioning, presentation, and individual differences.
These findings highlight potentially critical design choices, and provide direction for future work.
Complex software applications often provide more features than are used even by expert individual users .
To manage this complexity, customization methods to reduce functionality have been proposed by several researchers, either for regular usage or for a limited training period.
Evaluations have been limited in number and scope, but have shown that reduced-functionality applications can make novice users faster, more accurate and more satisfied , and that they can be preferred by a large proportion of intermediate and advanced users .
Despite these advances, evaluations have focused on the benefits of such designs, while drawbacks have largely been ignored.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
In particular, research on coarse-grained approaches to reducing functionality, such as layered interfaces , has been limited to relatively simple applications or customization models .
A coarse-grained approach allows large groups of features to be enabled or disabled at once; in contrast, a fine-grained approach enables or disables individual features, as is done with Microsoft Office 2003's adaptive menus, or with multiple interfaces .
Since lack of time and difficulty are among the factors that inhibit customization , coarse-grained approaches have the potential to provide the benefits of customization while reducing the burden on the user.
However, due to the lack of evaluation of such approaches, we do not fully understand their effectiveness.
The role-based customization model found in IBM Rational Application Developer 6.0  is an example of a coarse-grained approach for a complex, feature-rich application.
This approach, shown in Figure 1, allows the user to select from a set of user roles, such as Java Developer and Web Developer, and only functionality associated with those roles is enabled in the user interface.
Although CSCW applications have on occasion provided user roles to support collaboration, the research literature does not contain examples of using roles to filter functionality in complex user interfaces.
An additional difference is that RAD's customization model offers flexibility through multiple levels of granularity, unlike the restrictive definitions of roles that have been found to be problematic in CSCW .
To address the limitations discussed above, we conducted an interview study with 14 users of RAD.
The findings highlight challenges of coarse-grained approaches,
RAD extends and inherits all user interface components from Eclipse, a popular IDE .
Shown in Figure 2, the key components of RAD are as follows: Workspaces hold one or more development projects.
Users can create more than one workspace, but can only work in a single workspace at a time.
Customization changes are only persistent within a workspace.
Perspectives group functionality by task .
The user controls which menu and toolbar items as well as views on the code appear in a perspective, and can also control switching between perspectives.
There is often functionality overlap between perspectives.
Capabilities are groups of features that correspond to user tasks on a higher level than perspectives.
The features associated with a capability can range from entire perspectives to individual menu and toolbar items within a perspective.
When a capability is disabled, the features associated with it are no longer visible.
For example, enabling the Java Development capability enables features for creating and testing Java projects, such as a Javaspecific text editor, and a menu item to create a new class.
Roles are groups of capabilities that are potentially overlapping.
RAD provides 11 roles on a Welcome screen when the user creates a new workspace.
By default, 2 roles are enabled , but the user can disable these and/or enable additional roles.
When the user enables a role, this enables the set of capabilities associated with that role; in turn, the specific interface elements associated with those capabilities are made available in the interface.
For example, enabling the Tester role will enable 3 capabilities: Core Testing Support, Probekit, and Profiling and Logging.
Roles determine a base set of functionality to include in the interface, and, as the user works, additional functionality can be exposed or hidden by manipulating capabilities.
This can be done both manually, through a user preference dialog that lists all available capabilities, or automatically, through trigger points in the interface.
Each interview was 1 hour long, with 32 semi-structured questions to understand use of roles and capabilities, and overall customization practice.
At the end of the interview there was a debriefing and unstructured discussion period on managing user interface complexity.
All interviews were conducted by the same researcher and were recorded, transcribed and coded for analysis.
Since the interviews were exploratory, we did not set hypotheses beforehand.
Instead, we used an open coding technique to develop categories of data .
This iterative process allowed us to identify emergent themes, and confirmed some of the focus areas of our investigation.
We separated pure usability issues from what we consider to be the more generalizable benefits and challenges of reducing functionality.
Almost all questions were open ended and participants were encouraged to speak freely, so the number of people who mentioned a point should be considered a minimum.
Through developer mailing lists and word of mouth, we recruited and interviewed 14 professional software developers .
They had between 2 and 30 years of software development experience  and reported spending over 30 hours per week using an Eclipse-based development platform .
Experience with RAD varied, ranging from less than a month for 3 participants to 12 months for another participant .
This was representative of the user base, since RAD had only been released 6 months before we conducted the study; the participant with 12 months of experience had initially used a pre-release version.
Participants reported using RAD to develop a variety of applications, including: Web , J2EE , Java or plug-ins for Eclipse , and database .
Three participants used Eclipse as their primary IDE, rather than RAD, and some questions were not asked of these users .
RAD provides 11 perspectives by default, though users can increase this by saving custom perspectives and installing additional plug-ins.
On average, participants made use of 4 to 5 perspectives.
Most participants  had multiple workspaces, with the median being 2 to 3 workspaces.
A reset feature is provided for perspectives, and 6 participants reported occasional use of this feature when they had changed their perspective significantly.
Users can also create new perspectives by first customizing a perspective, then saving it under a new name.
Only 1 participant used this feature.
As expected based on our participants' varied exposure to RAD, we found that people had different degrees of understanding about how roles and capabilities technically worked.
While almost all participants  were aware of capabilities, only 8 of the 11 participants who did not use Eclipse as their main development platform were aware of roles, and only 6 of those knew how to change them.
Interpretation of results should be made in this context.
The majority of participants  explicitly stated they liked roles or capabilities in principle, that is, their potential to reduce features in the interface.
When asked if they would remove roles and/or capabilities from the interface, only 1 participant suggested removing both.
While this positive response should motivate further work on roles and capabilities, several issues affected the user experience and these can be broadly grouped with respect to partitioning of functionality, presentation, and individual differences.
This was not necessarily because the role matched his work practice better than it did for other participants: he stated he had chosen this specific role  because it appeared to be the most comprehensive.
Thus, it made it easy to enable a large set of features with a single click.
Partitioning based on task was more effective than on expertise.
Our analysis also suggests that the criteria by which roles are defined impacts the effectiveness of the customization model.
All 11 of the roles in RAD group functionality in a task-oriented manner; for example, the Java Developer role is associated with functionality that is likely to be needed by that type of developer.
However, 4 of the roles were also distinguished by expertise level: Web Developer Typical versus Web Developer Advanced and Enterprise Java versus J2EE Developer.
The former role in each of these pairings represents only a subset of the functionality of the latter.
Eight participants expressed concern over the difficulty of distinguishing between the expertise-oriented roles.
For example, when asked to identify which roles he fits under, P7 said: "The main ones would be Enterprise Java and Modeling, and I guess the Advanced J2EE.
Although I have no idea why there's Enterprise Java and Advanced J2EE.
I almost think it would be better to just have one."
Groups of features in a customization model should be relatively independent, cohesive, and meaningful to users.
We identified several challenges related to this.
Fine-grained capabilities, were more popular than coarsegrained roles because they better matched perceived needs.
While roles and capabilities both offer high-level feature grouping for customization, they do so at different levels of granularity.
Participants generally chose to enable and disable the finer-grained capabilities rather than enabling roles.
Part of the reason was that they felt the variation in tasks performed by users nominally in the same work role made it difficult to define roles.
We asked all but the 3 participants who used Eclipse as their main IDE which roles they would categorize themselves under, and we compared this to the roles which were actually enabled in the workspace they had accessible during or after the interview.
All but 2 people identified with several more roles than were enabled in their workspaces.
Trigger points and capabilities were useful because they allowed the user to enable features as needed rather than predicting needs in advance.
Five of the 6 participants who knew how to change roles generally left the default roles when they created a new workspace even though 3 of them had changed their roles at some point in an earlier workspace.
They found it easier to enable functionality automatically through trigger points or by manually enabling capabilities, and 3 of those participants considered roles to be irrelevant because instead, they could simply change their capabilities.
Effective communication of a complex customization model to the user is non-trivial.
Capabilities more closely matched concrete tasks, so were easier to interpret.
Many participants  found it difficult to map from a name or short description of a role or capability to actual features in the interface, thus making it difficult to know how to effectively customize their interface.
For example, P1 expressed this frustration: "If I need something but if I don't know which capability I need to , how can I use that?"
It will be interesting to explore whether communicating the underlying mapping of roles to features more effectively increases their adoption relative to capabilities.
Designers need to promote the ability to discover unknown or unused features while still filtering what is presented to the user.
Because of this concern, 4 participants mentioned that they generally enabled all functionality to ensure that they would be able to find what they needed.
Although this may be due to individual differences , it defeats the purpose of having roles and capabilities in the first place.
The concern over hiding features stemmed from both:  the need to locate functions of which the user is already aware, and  the ease with which users can learn about and use new features in the user interface.
Our participants identified three situations in which they would be concerned about only having a filtered set of the features in the interface: when their role evolved, such as from a developer to a manager; when they temporarily needed a set of features associated with another role; and when they wanted to engage in exploratory behaviour of the interface for a short period of time.
An interview study has allowed us to identify several open issues in designing coarse-grained customization mechanisms.
Our findings suggest that finer-grained, taskoriented groupings of features  may be more effective than role-based groupings.
The design implications are especially applicable for role-based and layered interfaces.
The challenges we have identified with respect to partitioning of functionality, presentation, and individual differences highlight potentially critical design choices, and should guide further research in the area.
IBM and Rational are registered trademarks of International Business Machines Corporation in the United States, other countries, or both.
Java is a trademark of Sun Microsystems, Inc. in the United States, other countries, or both.
Other company, product or service names may be trademarks or service marks of others.
Finally, we found that different participants had different reactions to reducing functionality in the user interface.
Some felt overwhelmed by having many features while others were not bothered by extra functionality and preferred not to filter any features.
As such, we need to cater to both feature-keen and feature-shy users , and to increase system trust, especially for those users who may be reluctant to customize even when a reduced-functionality interface could be more efficient.
Four participants immediately enabled all functionality when creating a new workspace.
To illustrate this, when asked which of the roles she would want enabled, P5's response was: "Every single one of them!"
This behaviour supports the inclusion of a toggle mechanism, such as that provided in the multiple interfaces approach , to provide quick access to the full functionality set for this type of user.
Participants preferred to use finer-grained capabilities to roles, for several reasons that can inform future designs:  capabilities more closely matched the tasks a user performed, while roles were broader, not necessarily matching an individual user's tasks;  capabilities were more concrete, so it was easier to interpret the mapping from capabilities to individual features; and  capabilities could be easily enabled on an as-needed basis.
Grouping of features based on advanced expertise levels was also less effective than grouping by task.
As well, although most users wanted to filter features in their interface, it is important to consider how easily unknown or unused features can be discovered.
Finally, for those users who do not want to filter any features, an easy toggle mechanism enabling the full functionality set should be provided.
