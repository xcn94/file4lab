We present a model for predicting expert text entry rates for several input methods on a 12-key mobile phone keypad.
The model includes a movement component based on Fitts' law and a linguistic component based on digraph, or letter-pair, probabilities.
Predictions are provided for one-handed thumb and two-handed index finger input.
For the traditional multi-press method or the lesser-used twokey method, predicted expert rates vary from about 21 to 27 words per minute .
The relatively new T9 method works with a disambiguating algorithm and inputs each character with a single key press.
Predicted expert rates vary from 41 wpm for one-handed thumb input to 46 wpm for two-handed index finger input.
These figures are degraded somewhat depending on the user's strategy in coping with less-than-perfect disambiguation.
Analyses of these strategies are presented.
This research is concerned with the problem of text entry on mobile phones.
Although we usually think of phones as devices for speech input and output, the transmission and reception of text messages on mobile phones is increasing rapidly.
Text entry on contemporary mobile phones is mainly based on the 12-key keypad .
This paper describes a method for predicting potential expert user text entry speed for input methods that utilize the 12-key keypad.
The model provides individual predictions for one-handed thumb and two-handed index finger use.
Designing new text entry methods for computing systems is labour intensive.
It is also expensive, since a working prototype must be built, and then tested with real users.
Because most text entry methods take time to learn, the testing should preferably take place in longitudinal settings.
However, longitudinal user studies are tedious .
A pragmatic approach is to develop a predictive model to "test" new text entry methods a priori -- without building prototypes or training users.
Models, at their best, can be valuable and informative tools for designers of new text entry methods .
The 12-key keypad consists of number keys 0-9 and two additional keys .
Characters A-Z are spread over keys 2-9 in alphabetic order.
The placement of characters is similar in most mobile phones, as it is based on an international standard .
The placement of the SPACE character varies among phones.
In this paper, we assume the 0-key serves as the SPACE character.
For example, to enter "the", the user enters the key sequence 84-3-0.
The 0-key, for SPACE, delimits words and terminates disambiguation of the preceding keys.
T9 compares the word possibilities to its linguistic database to "guess" the intended word.
Naturally, linguistic disambiguation is not perfect, since multiple words may have the same key sequence.
In these cases, T9 gives the most common word as a default.
To select an alternate word, the user presses a special NEXT function key.
For example, the key sequence 6-6 gives "on" by default.
If another word was intended, the user presses * to view the next possible word.
In this case, "no" appears.
If there are more alternatives, NEXT  is pressed repeatedly until the intended word appears.
Pressing 0 accepts the word and inserts a SPACE character.
Based on our informal analyses, disambiguating works quite well.
In a sample of the 9025 most common words in English  produced from the British National Corpus, the user must press NEXT only after about 3% of the words.
Naturally, the whole vocabulary is larger than 9025 words, so this estimate may be optimistic.
However, 5% is a reasonable approximation, and will be used throughout this paper.
Most major mobile phone manufacturers have licensed the T9 input method, and, as of 1999, it has surfaced in commercial products .
There is also a touch-screen version of T9 that is available for PDAs .
The multi-press method is currently the main text input method for mobile phones.
In this approach, the user presses each key one or more times to specify the input character.
For example, the number key 2 is pressed once for the character 'A', twice for 'B', and three times for 'C'.
The multi-press approach brings out the problem of segmentation.
When a character is placed in the same key as the previously entered character , the system must determine whether the new key press still "belongs to" the previous character or represents a new character.
Therefore, a mechanism is required to specify the start of a new character.
There are two main solutions to this.
One is to use a timeout period within which key presses belong to same character.
Most phones have a timeout, typically between 1 and 2 seconds.
The other solution is to have a special key to skip the timeout  thus allowing the next character -- on the same key -- to be entered directly.
Some phone models use a combination of the two solutions.
For example, Nokia phones include both a 1.5second timeout and the provision for a timeout kill using the arrow keys.
The user may decide which strategy to use.
We provide predictions for both.
In the two-key method, the user presses two keys successively to specify a character.
The first key press, as in the multi-press method, selects the "group" of characters .
The second press is for disambiguation: one of the number keys, 1, 2, 3, or 4, is pressed to specify the position of the character within the group.
For example to enter the character `K', the user presses 5-2 .
The two-key method is very simple.
There are no timeouts or such.
Each character A-Z is entered with exactly two key presses.
SPACE is entered with a single press of the 0key.
The two-key method is not in common use for entering Roman characters, however.
In Japan, a similar method  is very common for entering Katakana characters.
The core of this paper is the application of Fitts' law to the mobile phone keypad.
Fitts' law  is a quantitative model for rapid, aimed movements.
It can be used to calculate the potential text entry speed of an expert user, assuming that the text entry performance of an expert is highly overlearned, and thus is limited only by motor performance.
We will elaborate more on this assumption later.
Fitts' law has been applied with success to pointing devices  and on-screen keyboards .
There are only a few studies, however, that apply Fitts' law to physical keyboards.
Drury and Hoffman  used Fitts' law to evaluate the performance tradeoffs of various inter-key gaps for data entry keyboards.
Fitts' law is inherently one-dimensional, as evidenced by a single "width" term.
Physical keys on a mobile phone keypad, however, are laid out in a two-dimensional array, and each key has both width and height.
Therefore, we need to extend the model to two dimensions.
For this purpose we substitute for W in Equation 1 the smaller of the width and height, as suggested by MacKenzie and Buxton .
In most cases, height is less than the width for keys of a mobile phone.
Therefore, we used the height of the keys as W. The log term in Equation 1 is called the index of difficulty : MT = a + b x ID 
MT0 is the initial movement time, i.e., the time to move one's finger or thumb from the first key of the digraph to the second key.
N is the number of key repetitions, which is an integer from 0 to 3 depending on character .
MTrepeat is the key-repetition time, which equals the intercept a in the Fitts' law equation .
For Ttimeout, we used 1.5 seconds.
This is the time used in Nokia phones, although it may vary among manufacturers.
Ttimeout is required only if the second character, j, is on the same key as the first character, i. Alternatively, the user may explicitly override the timeout by pressing a timeout kill key .
In the latter case, the character entry time is CT = MT0 + N x MTrepeat + MTkill where MTkill is the time to move to the arrow key.
The two constants, a and b, are determined empirically by regressing observed movement times on the index of difficulty.
For this purpose, we collected empirical data from both one-handed thumb use  and two-handed index finger use .
In mobile phone text entry, each character is entered with one or more key presses, i.e., movements.
The first of these, the initial movement, M0, consists of moving the finger over the desired key  and pressing the key.
Depending on the input method, there may be none, one or several additional movements .
The total time to enter a character, CT, is calculated as the sum of all the required movements: CTij =  MTk 
Our linguistic model uses a 27 x 27 matrix of letter-pair  frequencies in common English .
The 27 characters include the letters A-Z and the SPACE character.
Each letter-pair, i-j, is given a probability Pij based on an analysis of representative sample of common English.
The sum of all probabilities is one:  Pij = 1 
In the multi-press method, the user presses each key one or several times.
There are two strategies, varying in their treatment of the timeout.
If the user allows the built-in timeout to segment consecutive characters on the same key, the character entry time is calculated as follows: CT = MT0 + N x MTrepeat + Ttimeout 
Our model is still incomplete, since the coefficients a and b in the Fitts' law equations are unknown for finger input on a 12-key phone keypad.
Two experiments were carried out to determine these coefficients.
Experiments 1 and 2 described below sought to determine these for one-handed thumb input and two-handed index finger input, respectively.
The participant's task was to press specified keys on the phone keypad for a period of 10 seconds at a time.
Participants were instructed to press the keys as fast as they could but to avoid errors.
There were two types of tasks:  Single keys: In these tasks the participants pressed only a single key.
There were four key repeat tasks altogether .
A subset of all possible pairs of keys was chosen to cover a range of movements, for example, from very short  to very long .
The inter-key distances ranged from 9 to 38 mm, with an average of 20.6 mm.
The key pairs were selected to create similar movements for leftand right-handed participants.
There were 26 key-pair tasks per participant.
This made up a total of 30 tasks per participant, 360 tasks altogether.
Twelve volunteers  participated in the study.
Most participants were employees of the Nokia Research Center in Helsinki.
Their age ranged from 24 to 47 years, with an average of 32.6 years.
Five of the participants were left-handed; however, two choose to hold the phone with their right hand.
The righthanded participants held the phone in their right hand.
All participants had prior experience in using a 12-key phone keypad.
Ten participants were regular mobile phone users.
The average mobile phone experience of all participants was 3.9 years.
The number keypad of a Nokia 5110 mobile phone was used as the model 12-key keypad .
Only the number keys  and * and # keys were used in the experiment.
Number keys are slightly larger than * and # keys.
The dimensions are shown in Figure 2.
As mentioned previously, the height of keys was used in calculating ID.
Key dimensions and distances between keys were measured using a slide gauge.
A 10-second countdown timer controlled the task time .
The test moderator signaled the start of each task by saying "1-2-3-go" and pressing the start key on the countdown timer.
After 10 seconds, the countdown timer gave a clearly audible sound.
The participants were instructed to stop pressing the keys when they heard this sound.
Key presses entered after the stop signal were ignored.
The test moderator checked the number of key presses from the phone's display and recorded it in a spreadsheet file.
The average movement time  between successive key presses was then calculated using formula: MT = 10000 /  
Results from the linear regression The correlations in the linear regression are high, indicating that Fitts' law predicts the movement time with high accuracy both with the index finger and thumb.
Overall, the index finger was faster than the thumb.
The average movement time between successive key presses in all conditions was 273 ms for the index finger, and 309 ms for the thumb.
The two points with ID = 0 are substantially to the left of the other points, and this is a concern.
Although it has been suggested that Fitts' law does not apply when ID is small , a more legitimate explanation lies in the treatment of spatial variability in building the model.
Fitts' law is predicated on the assumptions that  the spatial distribution of end-points is normal and  4% of the distribution falls outside the target region.
Where possible, it is desirable to use IDe computed from We and Ae -- the actual, or "effective", amplitude and width of the distributions.
We could not do so in this simple experiment because there was no means to capture endpoints.
However, if We and Ae could have been used, then clearly the task with ID = 0 would have We > 0 and Ae > 0, and, hence, IDe > 0.
This would tend to shift the points at ID = 0 to the right .
Twelve volunteers  participated in the study.
Seven had also participated in Experiment 1.
Ages ranged from 23 to 41 years, with an average of 29.8 years.
Five of the participants were left-handed.
One, however, choose to press keys with the right hand.
The right-handed participants used their right hand.
All participants had some experience using a standard phone keypad.
Eleven were regular mobile phone users.
The average mobile phone experience of all participants was 4.0 years.
The investigation described herein is in anticipation of an everincreasing demand for this mode of text entry.
While formal user studies are preferred, we commonly perform quick and simple checks of novel text entry techniques using the well-known phrase, "the quick brown fox jumps over the lazy dog".
This 43-character phrase includes every letter of the alphabet, and therefore ensures that each key, or key combination, is visited during entry.
Within our lab, one user performs a substantial amount of mobile phone text entry via the multi-press method, and, in our view, approaches the status of expert.
For example, this person routinely uses the timeout kill feature where applicable.
We asked this person to perform timed input of the quick-brown-fox phrase.
In three repetitions using thumb input, the times were 27 s, 23 s, and 24 s, with 0 errors in each case.
The mean entry time was 24.6 s. For a 43-character phrase, this translates into a text entry rate of 21.0 wpm.
This is surprisingly close to our predicted expert entry rate of 24.5 wpm.
We asked the same user to perform the same test with a T9enabled cell phone.
We asked the user to ignore the possible need for the NEXT function, and to enter the phrase directly.
The entry times were 15 s, 15 s, and 16 s. The only error was for the key sequence 5-2-9-9-0, which T9 incorrectly disambiguated to "jazz" instead of "lazy".
The mean entry time of 15.7 s translates into an entry rate of 32.9 wpm.
Keeping in mind that this user does not use T9 on a daily basis, the observed rate is reasonably close to our predicted expert entry rate of 40.6 wpm.
Results of model predictions  Two predictions are given for the multi-press method corresponding to the two possible interaction strategies.
If consecutive characters are on the same key, the user may either wait for the timeout to pass, or end it manually.
In our model, the timeout was 1.5 seconds.
Our model predicts that with this timeout, "timeout kill" is clearly the faster strategy .
It is assumed that expert users adopt the faster strategy.
This is supported by our observations of users at the Nokia Research Center: a majority of experienced multi-press users employ the timeout kill strategy.
Predictions are clearly higher for the T9 method than for the multi-press and two-key methods.
These differences, and other interaction issues for T9, are discussed in detail later.
In comparing the multi-press and two-key methods, the multi-press method is slower if the user employs the timeout strategy -- waiting for the timeout between consecutive characters on the same key.
However, as expertise develops, users will invoke the timeout kill function.
With an optimal use of timeout kill, the multipress method is faster than the two-key method.
Input via the index finger is also consistently faster than with the thumb.
The difference is largest with T9 and the two-key input methods where the index finger is 13% faster than with the thumb.
The difference is smaller with the multi-press method.
This is due to the steeper slope of the Fitts' law model for the thumb in Figure 4.
With small IDs the difference between the index finger and thumb is quite small; the multi-press method involves many keyrepetitions , which diminishes the difference between the index finger and thumb.
Within the multi-press method, the difference for the index finger is larger with the "timeout kill" strategy  than with "wait for timeout" .
This is due to the constant length of the timeout, which diminishes the differences between input fingers in our "wait for timeout" results.
The very generous predictions for T9 in Figure 6 should be viewed in the narrow context of our model.
For example, our model is for experts and ignores the novice or learning behaviour that most users of this emerging input technique will experience.
As well, our model attends only to the motor component of the interaction.
The need to visually scan the keyboard to find each character is not accounted for.
We feel this is a relatively minor issue, since most users are already familiar with phone keypads.
Expert status, in the sense of knowing the position of characters on a phone keypad, should be easily acquired in our view.
Of greater concern is the role of the NEXT function with T9.
First, how often is the NEXT function required?
And second, what behaviour will users exhibit in using the NEXT function?
The answer to the first question is determined by the dictionary, or linguistic model, embedded in T9.
It is relatively straightforward to determine the outcome of disambiguation for any dictionary.
For example, Figure 7 provides an analysis using the word sample discussed earlier.
The results are quite impressive.
Figure 9 presents a parametric analysis of the use of the NEXT function for two components of the behaviour for thumb input.
For the 0% condition, the user never visually verifies input.
For the 100% condition, the user visually verifies input after each word entered.
Second, the perceptual-plus-cognitive time associated with visual inspection is shown along the horizontal axis as a continuum from 0 to 1000 ms.
Note that the movement time for multiple invocations of the NEXT function is quite small because it requires multiple presses of the same key .
Parametric analysis for T9 user behaviour  Expert usage appears along the top line in Figure 9.
That is, the user always knows when the next function is required and never visually verifies input.
Although this behaviour will never fully occur, it may occur by degree.
For example, a user may quickly learn that the word "on" requires the key sequence 6-6-0, whereas the word "no" requires the NEXT function: 6-6-*-0.
If the user visually verifies input 50% of the time , and each inspection takes 500 ms, then the T9 prediction falls to 35 wpm .
Bear in mind that this prediction is still predicated upon expert behaviour with respect to the keypad layout .
So, the prediction is still overly generous, perhaps.
Exploring hypothetical scenarios such as this, although important in characterizing user behaviour, is very weak in its ability to generate accurate predictions.
Examples of ambiguous words for T9 The initial word for any key sequence is the one with the highest probability in the linguistic model, while subsequent words are produced in decreasing order of their probability.
Note that our word sample, as well as that in the T9 dictionary, includes proper nouns .
Although the T9 dictionary and the disambiguation process are considered proprietary by Tegic, we tested a T9enabled mobile phone with the key sequences in Figure 8.
All the words in Figure 8 were produced, although there were a few minor differences in the sequences.
Answering the second question above is much more difficult since it involves user strategies.
Although as many as 95% of words entered will correctly appear by default, users will not necessarily anticipate this.
Thus, there is a need for the user to visually verify input.
This behaviour is outside the scope of our model, as noted earlier.
Once we step off this ideal and attempt to accommodate more natural components of the interaction, there is an explosion in the sources and extent of variations.
And so, the preceding exploration of T9 interaction will not be developed further.
Suffice it to say that we expect T9 text entry rates to be slower than those cited above, consistent with a user's position on the learning curve and on the interaction strategy employed.
There are many other interactions issues, as well, such as the need to input numeric and punctuation symbols, or words not in the dictionary.
Implementations of T9 we have tested include modes to insert words using the multipress technique or to insert symbols from a displayed list.
These important properties of the interaction are not accounted for in our current model.
We have provided predictions for expert text entry rates for several input schemes on mobile phones.
The traditional multi-press method can support rates up to about 25 wpm or 27 wpm for one-handed thumb input or two-handed index finger input, respectively, provided the user effectively employs the timeout kill feature for consecutive characters on the same key.
If the timeout is used to distinguish consecutive characters on the same key, then the entry rates will decrease by about 4 wpm in each case.
The two-key input technique is slightly slower than the multi-press method : 22 wpm and 25 wpm for one-handed thumb input and two-handed index finger input, respectively.
The relatively new T9 technique requires only one key press per character, and relies on a built-in linguistic model to disambiguate input on a word-by-word basis.
Text entry rates of 41 wpm and 46 wpm are predicted for one-handed thumb input and two-handed index finger input, respectively.
These figures are for expert behaviour and a "perfect" disambiguation algorithm.
Our analyses suggest that word-level disambiguation for English text with the traditional character layout on phone keypad is achievable with about 95% accuracy.
The overhead of interacting with less-than-perfect disambiguation degrades performance, but the cost is difficult to quantify because of the complex and varied strategies that users may employ.
