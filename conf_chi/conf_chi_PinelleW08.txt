Most video games require constant interaction, so game designers must pay careful attention to usability issues.
However, there are few formal methods for evaluating the usability of game interfaces.
In this paper, we introduce a new set of heuristics that can be used to carry out usability inspections of video games.
The heuristics were developed to help identify usability problems in both early and functional game prototypes.
We developed the heuristics by analyzing PC game reviews from a popular gaming website, and the review set covered 108 different games and included 18 from each of 6 major game genres.
We analyzed the reviews and identified twelve common classes of usability problems seen in games.
We developed ten usability heuristics based on the problem categories, and they describe how common game usability problems can be avoided.
A preliminary evaluation of the heuristics suggests that they help identify game-specific usability problems that can easily be overlooked otherwise.
In this paper, we define game usability as the degree to which a player is able to learn, control, and understand a game.
Our definition is based on an early informal survey of usability problems cited in critical game reviews and on playability heuristics described by Federoff  and Desurvire et al.
Some usability issues seen in games are similar to those seen in other application areas, such as the need to design for visual consistency and readability.
However, games also have usability considerations that are not seen in other areas.
For example, user errors are usually undesirable in other domains, but are expected in many games since they are designed to challenge users and to force them to develop new skills so that they can achieve in-game objectives.
Game designers need methods for identifying usability problems both in early designs and in more mature prototypes .
Playtesting is one of the most common ways to uncover design problems , yet this method needs a playable prototype that only exists in the later stages of the development process.
Formal methods do not exist to allow designers to carry out less expensive usability inspections of games, and to evaluate early, non-functional prototypes.
Further, many common usability inspection techniques are not appropriate for games since they either rely on formal specifications of task sequences  or are oriented around user interface concepts used in desktop applications .
One technique that has the potential to be useful in allowing evaluations of game prototypes is heuristic evaluation.
Heuristic evaluation is an inspection technique where evaluators explore an interface using a set of usability principles, called heuristics .
Heuristic evaluation does not make assumptions about task structure, and it is flexible enough to be adapted to specialized domains .
We believe that a custom set of design principles are needed so that heuristic evaluation can be used to find usability problems in video games.
One of the main goals in video game design is to entertain and engage the user.
This can involve several aspects of design, including game story, pacing, challenge level, and game mechanics .
However, since most games require constant interaction, game designers must also pay careful attention to usability issues.
Failure to design usable game interfaces can interfere with the larger goal of creating a compelling experience for users, and can have a negative effect on the overall quality and success of a game.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
However, their heuristics are strongly oriented around engagement and fun, and do not consider usability in detail.
Also, the heuristics are primarily based on literature reviews or author introspection, rather than on detailed information about design problems that commonly occur in games.
In this paper, we introduce a new set of heuristics for evaluating the usability of video games.
They are the first design principles that focus exclusively on game usability and that are based on a structured analysis of usability problems in a large number of games, covering several major genres.
In the rest of this paper, we describe the process that we used to develop the heuristics, which included three main steps.
First, we identified video game usability problems in 108 PC game reviews from a popular gaming website.
Second, we categorized the problems descriptions.
Third, we developed ten usability heuristics based on the problem descriptions and problem categories.
We also present a preliminary evaluation of the heuristics, where five evaluators used them to evaluate a PC game demo.
The unstructured nature of heuristic evaluation has also led to several criticisms of the technique.
For example, Cockton and Woolrych  point out that heuristic evaluation does not encourage people to take a comprehensive view of how software will be used, and that analysts must pick sample tasks and system features at random.
They also indicate that using heuristic evaluation, and discount methods in general, can cause evaluators to miss problems and to identify false problems.
They conclude that discount methods are best suited to use in early design iterations rather than as a summative evaluation technique.
Nielsen developed his heuristics primarily for desktop applications .
They refer to common user-interface concepts, such as dialogs, undo and redo, and error prevention.
However, many of these ideas have limited meaning in the game context.
While they may be useful in uncovering some usability problems in games, they do not address several important usability issues, such as using proper camera angles when displaying the game world or providing intuitive control mappings.
We believe that heuristic evaluation can be adapted so that it can be used to find important usability problems in games.
Our goal in this research was to develop a new set of heuristics that can be used by game designers to evaluate both early mockups and functional prototypes.
In the next section, we discuss related literature on game design principles.
Usability inspection techniques have the potential to improve the game design process.
Unlike playtesting , they do not need user participation, so they can be carried out with early mockups .
Usability inspections rely on skilled evaluators who inspect the user interface and identify usability problems.
They are inexpensive and can be carried out in a short amount of time, so inspections can be used iteratively during the design process .
Most current usability inspection techniques are not appropriate for games since the design considerations are significantly different from those seen in other applications.
Techniques such as cognitive walkthrough , pluralistic walkthrough , and task analysis  are partially based on the assumption that people will use an application to carry out predetermined tasks.
However, the notion of task sequences is not necessarily useful in games since people play them differently depending on their strategy or motivation; further, some games are designed to promote unstructured exploration, which means that significant variability can be seen in how people choose to interact with game interfaces.
Heuristic evaluation has the potential to be a valuable evaluation tool for games since it does not make assumptions about tasks and about the purpose of an application.
Heuristic evaluation is an inspection technique that gives evaluators significant freedom in how they conduct the evaluation .
Evaluators explore the interface while looking for instances where it does not adhere to a set of usability principles called heuristics.
Design considerations for video games are different from those of other types of software .
This means that new principles are needed for game design and evaluation.
Past work on game design has mainly focused on engagement and entertainment issues, and most researchers have not considered usability in detail.
Malone  developed a set of guidelines for designing enjoyable interfaces, and they were partially based on studies of educational games.
His research focused on software design in general, rather than on identifying principles that can be applied to other games.
Clanton  developed a set of game design principles that have a similar focus to Malone's work.
His principles were based on introspection and on an informal inspection of several games.
Federoff created the heuristics by reviewing literature on game design, and further refined the set after spending a week with designers at a game company.
Most of her heuristics focus on gameplay, engagement, and storyline issues.
She also developed heuristics addressing usability issues, but they are not comprehensive and are not described in detail.
For example, heuristics include: "for PC games, consider hiding the main computer interface", "minimize control options", and "the interface should be as non-intrusive as possible."
HEP was developed from literature on game design, and the organization is roughly based on the categories described by Clanton .
The HEP heuristics place a strong emphasis on engagement, with limited coverage of usability issues.
Current game heuristics can be useful in evaluating some aspects of game design.
However, they do not consider usability in detail, so they are not well suited for carrying out usability evaluations of video games.
We believe that a set of heuristics that focuses on game usability can help improve the video game design process.
In the next section, we describe how we developed a set of heuristics from usability problems found in a database of game reviews.
The process that we used to develop the heuristics had three main steps: 1.
Identify real world usability problems that provide breadth and depth coverage of the game design space 2.
Develop a set of categories that group similar usability problems 3.
Create heuristics that are the inverse of the problem categories and that describe how common usability problems can be avoided In the next sections, we describe each of the steps in this process.
First, we describe the problem identification step, where we analyzed 108 PC game reviews from the GameSpot website.
Second, we describe how we developed twelve problem categories based on the problems.
Third, we describe how we developed ten usability heuristics from the problem descriptions and problem categories.
We created a set of game heuristics to fill two main roles in the game design process.
First, the heuristics can serve as a set of design principles that can be used during the formative stages of game design and development.
Second, they can be used to carry out usability inspections where evaluators use them to critique the design.
We identified and classified usability problems that were described in game reviews posted on the GameSpot website .
GameSpot is one of the most popular gaming sites, and it maintains an extensive archive of video game reviews stretching back to 1996.
The review archive provided us with an opportunity to study usability problems across several different game genres and in a large number of games.
GameSpot reviews are written by professional editors, and most reviews are relatively comprehensive, addressing a range of game design issues.
The reviews usually consider how engaging and entertaining a game is, as well as the overall graphic and audio quality.
Usability issues, such as control mapping and the understandability of visual representations, are also covered in most reviews, and analyzing games from the archive allowed us to identify common usability problems and to understand the common ways that the problems occur in game interfaces.
GameSpot editors assign each game a composite score based on its overall quality, and scores range from 0-10, with 10 representing a perfect game without any problems .
We carried out an early pilot study and did not find usability problems in highly rated games, so we limited the formal study to games with scores of 8.0 or lower.
We used 108 reviews from the GameSpot website, and we restricted our selection process to reviews that were posted since 2001.
Our goal was to identify usability problems that were relevant to current games, and that reflected recent trends in game design.
Within the 108 reviews, we included 18 reviews from each of 6 major game genres: role playing,
Our method for defining game usability heuristics was initially motivated by an approach used by Nielsen when he defined a new set of general-purpose heuristics .
He evaluated several existing sets of heuristics to determine which ones provided the "broadest explanatory coverage" of a set of 249 usability problems.
Our considerations were somewhat different, however, since literature on usability heuristics for games is limited, and since studies of usability problems in games have not been previously reported in detail.
Our approach is more closely aligned with that described by Dykstra , who suggests that heuristics can be developed for specific software categories by evaluating existing products, and by developing principles that describe the usability problems that are found.
However, given the wide variability that we expected to see in game usability problems, carrying out the evaluations ourselves was not practical.
We expected to see significant variation in usability problems found both between games, and between game genres.
The genres were based on the main game categories listed on the GameSpot website, and are consistent with most of the major genres listed by the Entertainment Software Association .
The selected reviews included work from 24 different reviewers.
We assigned the reviews to three researchers, each of whom had significant experience with playing games and with conducting usability evaluations.
Each person worked separately on the review sets to reduce bias, so that they could independently draw conclusions about the problem classes that are found in games.
They identified single-user usability problems that were found in each review, and excluded technical problems and issues related to fun and engagement.
They separately devised problem categories based on the problems found, and individually coded problems from the reviews using the categories.
After all reviews were coded, the researchers met to discuss the problem classifications and to develop a common classification scheme.
There were 50 problem categories in total.
Six problem categories were discarded because they focused on technical issues such as bugs, audio, or video issues; two were discarded because they focused on engagement issues; and two were discarded because they were only found by one person and the other two people did not believe that they were real usability problems.
They aggregated the remaining categories based on similarities between problem descriptions, and a total of twelve new problem categories were identified.
Nine of the categories combined similar problems that were described by all three people, and the remaining three combined problems described by two people.
The researchers recoded the reviews using the new problem categories and tracked the number of times each problem was found in the review set .
They identified a total of 285 usability problems, an average of 2.64 problems per game, and at least one usability problem was found in each game review.
The total number of problems found for each category is shown in Table 1.
There were significantly fewer problems found in some categories than in others.
For example, problem categories 2 and 5 only have 11 and 6 problems, respectively.
They were included in the list because problems from each category were found in multiple genres , and because the problems had a significant impact on the usability of the game.
For example, category 2 is "does not allow enough customization."
In some games, users cannot customize the game speed, and the default settings make the game too difficult for many users.
Category 5 is "does not let user skip non-playable content."
Games with problems in this category force the user to watch video and audio sequences and do not provide a method for skipping the content.
This is a significant problem since some clips are repeated several times during a game, for example, when a user moves her avatar into a room, or when she initiates a conversation with a computer-controlled character.
We used the problem categories and descriptions to develop ten usability heuristics.
The heuristics describe design principles that are intended to help designers avoid common usability problems seen in video games.
One of our main objectives was to create heuristics that could easily be operationalized by designers that have experience with games, so each includes a detailed paragraph that describes how problems associated with the heuristic can be avoided.
Each heuristic is based on problem categories in Table 1.
The heuristics were created by translating the problems into principles that provide guidance on how they can be avoided.
For example, the problem category "unpredictable / inconsistent response to user's actions" became the heuristic "provide consistent responses to user's actions."
In most cases, there is a one-to-one correspondence between the problems and the heuristics, except for problems 10 and 12, which we combined with others during the translation process .
The heuristics are listed in Table 2.
Each heuristic also contains a paragraph that provides more detail on how related usability problems can be avoided .
Each paragraph is grounded in our observations and the individual game reviews: they are based on the key issues associated with the problems that were used to create the heuristic, and on additional details that were found in the review set.
The paragraphs describe how each problem stated in the key issues section of Table 1 can be avoided.
The paragraphs were developed to help designers operationalize each heuristic by making it easier for them to map the heuristics to specific game features.
Table 1 shows the problem categories that were developed from the reviews.
The categories provide high level descriptions of problems that are seen in games, but they do not give concrete details on how the problems are instantiated.
For each category in Table 1, several associated key issues are listed.
These issues describe the main ways that problems in the category occurred.
For example, category 7 is "difficult to control actions in the game", and the key issues  are "oversensitive controls, unnatural controls, unresponsive controls."
Table 1 shows example problem descriptions for each problem category , and the example listed for category 7 illustrates the key issue of "oversensitive controls."
Example "You'll often find yourself swinging away and watching your blade go right through your foes with no effect whatsoever."
You're stuck constantly veering between way-too-fast combat and way-too-slow travel to engage enemies and explore maps."
And you can't use the keyboard to navigate."
For instance, it's almost impossible to keep an Osprey's rotors pointed toward the sky."
And the satellite-styled overhead map is tough to read, because it consists of mashes of green terrain and colored blobs representing enemy soldiers and objectives."
Provide consistent responses to the user's actions.
Games should respond to users' actions in a predictable manner.
Basic mechanics, such as hit detection, game physics, character movement, and enemy behavior, should all be appropriate for the situation that the user is facing.
Games should also provide consistent input mappings so that users' actions always lead to the expected outcome.
Allow users to customize video and audio settings, difficulty and game speed.
The video and audio settings, and the difficulty and game speed levels seen in games are not appropriate for all users.
The system should allow people to customize a range of settings so that the game accommodates their individual needs.
Provide predictable and reasonable behavior for computer controlled units.
In many games, the computer helps the user control the movement of their character, of a small group of teammates, or of a large number of units.
Computer controlled units should behave in a predictable fashion, and users should not be forced to issue extra commands to correct faulty artificial intelligence.
The game should control units so that pathfinding and other behaviors are reasonable for in-game situations.
The game should provide views that allow the user to have a clear, unobstructed view of the area, and of all visual information that is tied to the location.
Views should also be designed so that they are appropriate for the activity that the user is carrying out in the game.
For example, in a 3D game different camera angles may be needed for jumping sequences, for fighting sequences, and for small and large rooms.
Allow users to skip non-playable and frequently repeated content.
Many games include lengthy audio and video sequences, or other types of non-interactive content.
Games should allow users to skip non-playable content so that it does not interfere with gameplay.
Provide intuitive and customizable input mappings.
Most games require rapid responses from the user, so input mapping must be designed so that users can issue commands quickly and accurately.
Mappings should be easy to learn and should be intuitive to use, leveraging spatial relationships 
Provide controls that are easy to manage, and that have an appropriate level of sensitivity and responsiveness.
Many games allow users to control avatars such as characters or vehicles.
Controls for avatars should be designed so that they are easy for the user to manage, i.e.
When controls are based on real world interactions, such as steering a car or using a control stick in an airplane, the game should respond to input in a way that mirrors the real world.
Further, games should respond to controls in a timeframe that is suitable for gameplay requirements.
Provide users with information on game status.
Users make decisions based on their knowledge of the current status of the game.
Examples of common types of information that users need to track include the current status of their character , objectives, teammates, and enemies.
Users should be provided with enough information to allow them to make proper decisions while playing the game.
Provide instructions, training, and help.
Many games are complex and have steep learning curves, making it challenging for users to gain mastery of game fundamentals.
Users should have access to complete documentation on the game, including how to interpret visual representations and how to interact with game elements.
When appropriate, users should be provided with interactive training to coach them through the basics.
Further, default or recommended choices should be provided when users have to make decisions in complex games, and additional help should be accessible within the application.
Provide visual representations that are easy to interpret and that minimize the need for micromanagement.
Visual representations, such as radar views, maps, icons, and avatars, are frequently used to convey information about the current status of the game.
Visual representations should be designed so that they are easy to interpret, so that they minimize clutter and occlusion, and so that users can differentiate important elements from irrelevant elements.
Further, representations should be designed to minimize the need for micromanagement, where users are forced to interactively search through the representation to find needed elements.
There are several similarities between our heuristics and Nielsen's heuristics .
For example, Nielsen's "consistency and standards", "visibility of system status", and "help and documentation" are similar to heuristics 1, 8, and 9 in our set.
The main difference is that our heuristics use language that makes the links to the game domain more explicit.
For example, Nielsen's "consistency and standards" heuristic states that, "users should not have to wonder whether different words, situations, or actions mean the same thing.
Our heuristic that addresses consistency, "provide consistent responses to the user's actions", states that, "...basic mechanics, such as hit detection, game physics, character movement, and enemy behavior, should all be appropriate for the situation that the user is facing.
Games should also provide consistent input mappings so that users' actions always lead to the expected outcome."
Many of our heuristics are new and are not similar to mainstream usability principles that are used for desktop application, such as heuristics 2, 3, 4, and 7.
For example, heuristic 4 deals with the need to match the user's view of the game world with their current actions.
This is often seen in 3D games, where different views are needed when users move their characters through doorways, open spaces, and confined spaces.
Other heuristics address the need for customizable speed and difficulty settings; reasonable artificial intelligence when the computer helps to control units; and the need for controls that have the appropriate level of sensitivity.
Our heuristics have some similarities with heuristics developed by other game researchers .
For example, Desurvire et al.
They also address control design, artificial intelligence, and information on game status.
However, the content and focus of the heuristics are significantly different.
Their heuristics focus on engagement issues, but ours are strongly oriented around usability and are augmented by detailed information on common usability problems.
The game was not part of the review set used to create the heuristics.
Each evaluator worked individually, and they were asked to spend some time familiarizing themselves with the game.
They were then asked to inspect the game, and to identify instances where it did not adhere to the principles outlined in the heuristics.
If they felt that the mismatch was a usability problem, they were instructed to write the problem on a form and to record the heuristic that they used to find the problem.
They were also asked to give each problem a severity rating using Nielsen's severity scale : 1Cosmetic problem, 2-Minor problem, 3-Major problem, and 4-Usability catastrophe.
Each evaluator completed an open-ended questionnaire at the end of the study.
We asked participants to describe the strengths and limitations of using the heuristics to evaluate games.
We also asked them whether they found any heuristics to be particularly useful, and whether any were difficult to operationalize.
Finally, we asked whether they found problems using the heuristics that they would have overlooked otherwise.
The entire session lasted approximately 90 minutes, and evaluators were paid for their participation.
We analyzed the problem descriptions.
We confirmed that the evaluators listed heuristics that were related to the specified problems.
We counted the number of problems that were found using each heuristic, and we tracked the severity ratings that were assigned to each problem .
We conducted a preliminary evaluation of the heuristics where five people used them to evaluate a demo version of a PC game.
Our main goal was to evaluate their overall usefulness at identifying usability problems in games.
We also wanted to determine whether knowledgeable evaluators would be able to understand and operationalize the heuristics, and whether the level of detail provided in each was appropriate.
Each person found between 7 and 10 problems .
Table 3 shows the number of problems found with each heuristic.
The total number of problems in the table is higher than 45 since two evaluators listed several heuristics on some problem reports.
Problems were found with all heuristic with the exception of heuristic 5.
The third column on Table 3 shows the mean severity rating for problems identified with each heuristic.
There was significant overlap in the problems found by the evaluators, but some problems were found by only a single person.
Four people described the absence of an in-game help system .
One person wrote: "No help system or tutorial.
Still don't understand what I'm supposed to be doing."
Three others indicated that the heuristics were particularly well suited to uncovering usability problems in games.
For example: "Most are easy to remember, and nearly everything that is frustrating about the usability of the game tested was easily identified with a heuristic," and, "very focused on gameplay and appropriate for typical problems associated with usability."
Our main goal was to develop heuristics that could be used to specialize the usability inspection process for video games.
We also had three related objectives.
First, we wanted to provide thorough coverage of usability problems that can occur in a wide variety of games.
Second, we wanted the heuristics to be easy to operationalize for people with knowledge of usability principles and with some experience working with games.
Third, we wanted people to be able to use the heuristics to identify real problems that will affect the usability of games.
Our evaluation provides initial insights into how successful the heuristics were at meeting these objectives.
People were able to find a wide range of problems, and they found multiple problems with nine of the heuristics.
The evaluation does not provide a comprehensive look at the heuristics since we do not expect any game to necessarily have problems in all areas of coverage.
However, it does show that the evaluators were able to understand the heuristics, and inspection of the problem descriptions shows that they did match the area of coverage described by the specified heuristic.
This also shows that people were able to use the heuristics to find real problems, and they had little difficulty with operationalizing them.
A thorough evaluation of the heuristics will require additional testing, where more evaluators are involved, and where the heuristics are used to evaluate games from different genres.
However, we believe the results provide us with enough evidence to conclude that the heuristics are well suited to uncovering important usability problems in the game context.
Four participants indicated that the heuristics allowed them to identify problems that they would have failed to noticed otherwise.
When asked whether they found any heuristics to be particularly useful, heuristics 1,4,6,8, and 9 were listed.
Heuristic 9  and 6  were cited by two people, and the others were cited once.
When evaluators were asked whether there were any heuristics that they had problems understanding or operationalizing, four indicated that they did not have any problems.
One participant stated that he had problems operationalizing heuristic 6 because he struggled to determine whether the controls were intuitive.
Evaluators described two limitations that they encountered when using the heuristics.
Two people indicated that the heuristics could cause evaluators to focus on a limited set of issues.
One person wrote that, "Some problems could be missed if they don't fall in the categories.
It may also put the subject in a certain mindset, causing them to overlook certain issues."
However, we believe that this is a criticism of conducting evaluations with guidelines and heuristics in general but is not a specific critique of the game heuristics.
The second limitation was described by a single evaluator, who wrote that there can be "lots of overlap between different heuristics for some problems."
Again, we do not feel that this is a significant problem since one of our main objectives was to provide broad coverage of the design space, and overlap, when it does occur, is far preferable to not providing enough coverage to detect significant usability problems.
The evaluators listed several main benefits of using the heuristics.
All evaluators indicated that the heuristics were a good match for game interfaces.
Since the heuristics were formulated from usability problems that were found in games from several major genres, we believe that they can be used to evaluate most games.
However, it is not clear how they relate to games that are significantly different from the ones we included in the heuristic development process.
In this section we discuss several issues related to the scope and generalizability of the heuristics, including their relationship to: console games, multiplayer games, and serious games.
We expect that the heuristics will still generalize to most console games since many of the design issues are the same.
However, further work is needed to verify this, and to guarantee that there are no additional design considerations for consoles.
For example, it is possible that new heuristics may be needed to address recent changes in input technologies used in consoles, such as the motion and position tracking technologies used in the Wii remote.
We focused on single user issues when developing the heuristics.
We made this choice because of the level of complexity seen in multiplayer games in recent years, such as the development of massively multiplayer online games.
We believe that multiplayer issues require extensive study to develop a further understanding of the usability issues involved, such as team awareness, session management, and communication considerations.
We found that focusing on single user issues heuristics suited the way that games are typically implemented, since many games support single user play only, or have separate single player and multiplayer modes.
We focused specifically on commercial games that have a primary goal of entertaining users.
There is another class of games, called serious games, which are designed for nonentertainment purposes, such as training, education, or simulation.
It is unclear how our heuristics relate to serious games, but it is likely that the differences in design goals mean that a new set of usability principles are needed.
There are possible limitations to the approach we used when we developed the heuristics.
The editors who wrote the reviews are not usability professionals, and did not focus on usability exclusively in their critique of the games.
The reviews were written primarily for the benefit of game players, and they consider design and technical issues that interfere with the overall playability of the game.
We believe the reviews provide thorough coverage of major usability problems, but it is possible that more subtle design problems were missed.
We expect that the heuristics will continue to grow and evolve in the future as we gain new insights by carrying our additional usability evaluations of video games.
The heuristics do not address design issues related to how fun and engaging games are for users.
We intentionally focused on usability issues to keep the scope of our heuristics manageable.
However, engagement issues are vital to the overall success of commercial games, and deserve careful consideration.
Heuristics developed by Federoff , Clanton, and Desurvire et al.
Knowledgeable designers that have significant experience with games can identify many usability problems without the need for a set of heuristics.
However, there are still many games that are released with serious usability problems, so we believe that more organized evaluation approaches, such as usability inspections using heuristics, still have value.
This is one of the reasons for the success of Nielsen's heuristics--the design principles described in the heuristics are widely accepted in the HCI community, and are well known by most designers.
However, good designers still violate the principles.
Heuristic evaluation can play an important role because it forces a more formal inspection, where each issue is considered in turn, and it helps uncover issues that are not necessarily obvious otherwise.
The heuristics that we present in this paper provide a new way to adapt usability inspections for games, and allow designers to evaluate both mockups and functional prototypes.
Unlike other game heuristics, ours focus specifically on game usability, and they are based on a structured analysis of usability problems from a large number of games.
The heuristics allow people to evaluate game usability by applying design principles that are based on design trends seen in recent games, and that are generalized across major genres found in commercial games.
In our research, we used critical reviews of software to identify usability problems and to develop a set of design principles for video games.
We believe that this general methodology is a new approach that can be used by researchers to understand design issues seen in other types of specialty software.
We also believe that this method can be used in further studies of video games and that new heuristics can be developed on engagement and for multiplayer video games.
In the future, we will carry out an expanded evaluation of the heuristics.
We will include more evaluators and games from several different genres.
