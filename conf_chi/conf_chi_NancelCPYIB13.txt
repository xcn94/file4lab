Rich interaction with high-resolution wall displays is not limited to remotely pointing at targets.
Other relevant types of interaction include virtual navigation, text entry, and direct manipulation of control widgets.
However, most techniques for remotely acquiring targets with high precision have studied remote pointing in isolation, focusing on pointing efficiency and ignoring the need to support these other types of interaction.
We investigate high-precision pointing techniques capable of acquiring targets as small as 4 millimeters on a 5.5 meters wide display while leaving up to 93% of a typical tablet device's screen space available for task-specific widgets.
We compare these techniques to state-of-the-art distant pointing techniques and show that two of our techniques, a purely relative one and one that uses head orientation, perform as well or better than the best pointing-only input techniques while using a fraction of the interaction resources.
Portable surfaces have been used in prior work as pads for interacting with virtual environments, e.g., to take notes , or as devices to facilitate remote pointing .
We argue that portable devices can actually accommodate both types of tasks simultaneously, enabling users to perform truly highprecision remote pointing and to manipulate the objects selected thereby.
The device can also act as a secondary display.
The type of portable device, e.g., a tablet or a smartphone, and the kind of interface controls and interaction techniques that it should provide are largely application-dependent.
As a first step, we focus in this paper on the design and evaluation of high-precision remote pointing techniques  that use only a fraction of the surface of a portable device for pointing .
We introduce a design space for techniques that use a handheld device with an area dedicated to pointing that varies in size, and relative pointing acceleration functions specifically tuned to the particular context of ultra-high-resolution wallsized displays.
Several of these techniques can be coupled with information about the user's natural head movements, which we have observed to be a good predictor of the next target location.
We systematically evaluate these techniques, showing that purely relative techniques can be surprisingly efficient when tuned carefully, even with small pointing areas.
We also show that even smaller pointing areas can be used with similar performance levels by combining head orientation for coarse pointing with touch-based relative pointing.
Our techniques generated very positive user feedback, considering the difficulty of the tasks, and fared as well as stateof-the-art remote pointing techniques while enabling additional interactions through the handheld device.
Ultra-high-resolution wall-sized displays enable the interactive visualization of massive datasets .
Application domains range from scientific visualization to computer-aided design and command & control centers.
Usually made of a mosaic of LCD panels, such displays typically feature a resolution of 100 pixels per inch.
Beyond their significantly increased display capacity, they afford a more physical form of navigation than lower-resolution large displays : users can get an overview of the data from a distance, the wall fully fitting in their field of view; and they can see more details about a particular region of interest by stepping closer to the wall.
To fully take advantage of the capabilities of this new generation of wall-sized displays, users must be able to move freely in front of them.
They must also be able to interact with them from any location, without being tethered by clumsy equipment.
Nancel M., Chapuis O., Pietriga E., Yang X.-D., Irani P. and BeaudouinLafon M. High-Precision Pointing on Large Wall Displays using Small Handheld Devices.
This is the author's version of the work.
It is posted here by permission of ACM for your personal use.
Laser pointers or ray-casting  are the most common absolute positioning method for pointing from a distance.
However, raycasting does not adapt well to ultra-high-resolution displays as hand tremor and involuntary motion due to fatigue are amplified when the user moves further away from the display .
In a controlled study, Kopper et al.
Their model presents two fundamental differences between a distal pointing task and the one modeled by Fitts' law.
In distal pointing, the size of the target has a much larger effect on movement time than the amplitude.
Unlike a Fitts' pointing task, difficulty of distal pointing grows quadratically, rather than linearly.
The pointing model based on angular target size supports recent empirical findings showing that ray-casting is fast with large distant objects but error-prone with smaller items .
By contrast, techniques that use relative control  enable more precise cursor positioning and easier acquisition of small targets.
The use of mobile devices to control distant objects has received much attention in recent years.
One approach is to control a remote cursor via the mobile device's touch-screen.
For example, ARC-Pad enables both absolute and relative pointing on a large display via the touch-screen of a mobile device .
Alternatives include using embedded sensors, such as tilt  or the phone's camera .
With Touch Projector , users aim the mobile device's camera at the display and manipulate its content by touching and dragging content on the small screen.
The techniques we have designed use some of these approaches for remote control of the cursor.
Object selection is often preceded by a visual search for the target.
Head orientation provides a good approximation of where a user is looking , and can be exploited in conjunction with any pointing device used in the environment .
Head movements have been shown to support a variety of interaction techniques .
Our approach integrates head orientation with cursor selection.
It was inspired by Ashdown et al.
Pointing time can be improved either by reducing distance to target, increasing target width, or a combination of both.
Drag-and-pop  and the Vacuum  are two examples designed specifically for use on large displays.
Such techniques generally rely on prior knowledge of potential targets, while our work focuses on generic, target-agnostic pointing techniques.
Combining our approach with pointing facilitation techniques is certainly possible since the latter make few assumptions about the physical input device used, but is left for future work.
We consider contexts of use where the primary purpose of the handheld device is to accommodate widgets for the advanced control of objects selected via pointing.
The area dedicated to pointing on the device, or pointing zone, should therefore not be too large.
However, if too small, pointing will likely be inefficient.
Our goal is to identify the best trade-off between screen real-estate allocation and good pointing performance.
Relative Pointing - As mentioned earlier, a simple absolute mapping from the handheld device to a ultra-high-resolution wall display does not work, because one pixel on the handheld maps to several dozen pixels on the wall, even if we were to make the pointing zone full-screen.
Relative mapping, i.e., using the pointing zone as a touchpad, enables users to point precisely but requires careful tuning of the pointer acceleration function, which can be a complex and tedious process.
The acceleration functions implemented in major operating systems have been parameterized for desktop environments .
They work for single- and multi-monitor display configurations, but are not adapted to ultra-high-resolution walls, which typically feature a 200-to-400 inches diagonal and a very high resolution, e.g., 20 480 x 6 400 for the 228-inch  display wall in Figure 1.
Previous work  showed that basic relative pointing, if tuned properly, could actually be a viable candidate for high-precision pointing on wall displays.
One of our contributions is a method to obtain such optimized transfer functions.
Dual-Precision Pointing - Pointer acceleration functions dynamically adjust the control-display  gain based on the dynamics of users' movements.
An alternative approach is to let users explicitly switch between different CD gains, typically between a Coarse mode that allows fast repositioning of the cursor across large distances, and a slower but more Precise mode that users can engage when they want to adjust the cursor position to acquire a very small target .
Hybrid pointing consists of combining absolute pointing for rapid cursor movements with relative pointing for accuracy.
For example, ray-casting, which uses absolute positioning, can be improved by combining it with relative cursor movements .
Adaptive Pointing  allows switching between two modes based on the speed of the user's hand movements.
A study showed that such a hybrid control mechanism reduces error rates by 63% over ray-casting.
Mode-switching is implicit, requiring users to adjust their visual search and pointing actions when the switch occurs .
By contrast, explicit mode switching lets users control when to switch between relative and absolute positioning .
However, the overhead introduced by the mode switch cancels out what is gained by using ray-casting for rapid movements .
Alternatives to explicit mode switching include tracking eye gaze or body motion to anticipate or perform part of the targeting action.
To finish the pointing task, users then move the cursor to the target with a standard trackpad.
To avoid the cost of explicit mode switching, our approach uses head motion to move the cursor as close as possible to the intended target area.
Other techniques can then be used to precisely position the cursor on the target.
Head-based coarse pointing - The second viable approach that we identified for Coarse control uses the natural movements of the head that occur when remotely pointing at targets on a wall.
Confirming prior work , we observed that users consistently stabilize their gaze and lock it on the target before acquiring it.
While tracking the users' gaze is not a practical option in our context, we found head orientation to be a good coarse indirect indicator of where users are looking1 , and thus a good predictor of the rough location of the next intended target on the wall display.
Our technique controls the cursor's location in Coarse mode through a linear interpolation from a comfortable angular operating range to the dimensions of the display.
We favored an indirect mapping over direct ray-casting  for two reasons.
First, being perspective-based, ray-casting would have caused targets of the same absolute size to have noticeably different motor sizes depending on their location with respect to the user's physical position, as illustrated in Figure 2-a .
Our mapping allows any area of the display to be reached with equal motor precision.
We also wanted to optimize the input operating range, within the limits of comfortable neck positions.
As illustrated in Figure 2-b, we addressed these issues by mapping a location-independent, fixed-size angular operating range centered on the orthogonal projection of the user's location on the flat display surface.
This ensures that when users move in front of the display, looking straight ahead always sets the cursor exactly in front of them.
As they look further away, the cursor is progressively offset from the head's direction , accounting for extra eye rotation.
This offset makes it possible to point at targets on the sides of the wall comfortably while maximizing accuracy in the central area.
Cost of Switching - We observed during the early phases of development and pilot testing that users would sometimes hesitate to switch to Precise mode.
This could happen because they thought that they could complete the task in Coarse mode, eventually failing or succeeding but at the cost of longer task completion times.
This could also happen because they wanted to get as close as possible to the target before switching to Precise mode, sometimes loosing a significant amount of time in doing so for no actual benefit since the time lost in Coarse mode was not compensated by larger time savings in Precise mode.
This raised a question that we had not anticipated: beyond minimizing the motor cost of switching between modes, is it possible to minimize the cognitive cost associated with making the decision to switch between the two modes?
We explored an approach where the cognitive load is transferred to the perceptual system, hypothesizing that this would significantly reduce the mode switching cost.
The main challenge when designing dual-precision techniques is to seamlessly integrate the two modes so as to minimize the cognitive and motor costs of switching.
All the techniques presented in this paper assign the Precise mode to single-finger drag gestures performed with the dominant hand in the pointing zone.
Given our requirements that users should be free to move in front of the display, and since the non-dominant hand will typically hold the device, this leaves two main options for Coarse mode control: use the dominant hand in a different configuration, or use a different body part.
We experimented with several options to eventually identify two viable candidates through iterative design, prototyping, piloting and tuning: head orientation, and double-finger drag gestures with the dominant hand in the pointing zone.
Both approaches are detailed below.
Two-finger pad-based coarse pointing - This technique is inspired by ARC-Pad  , a dual-precision pointing technique that provides users with an absolute and a relative pointing mode.
A typical ARCPad pointing task is composed of a tap on a touch-sensitive handheld device, followed by a drag gesture.
The tap gesture coarsely positions the cursor on the large display according to an absolute mapping of the handheld device's surface to the large display.
The following drag gesture is interpreted as relative movements of the cursor to adjust its position.
The original technique was designed for, and evaluated on, much lower-resolution large displays than those considered here.
It proved very difficult to use with very small targets on ultrahigh-resolution wall displays, mainly because the absolute mapping is far too imprecise in that context and often requires several relative-mode drag gestures to adjust the cursor's position, causing much clutching in the second phase.
ARC-Pad2F  distinguishes between absolute and relative pointing by the number of fingers involved in performing the pointing gestures rather than the type of gesture performed.
A single-finger drag gesture controls the cursor in relative mode ; a drag gesture performed with two conjoined fingers is interpreted as absolute positioning of the cursor.
In contrast to the original method that used taps for absolute positioning, users can now adjust the cursor position in absolute mode by dragging with two fingers, and then switch to relative mode for more precise, relative adjustments of the cursor position.
The switch from absolute to relative mode is triggered whenever at least one of the fingers is lifted from the pad's surface.
This means that users can either lift a single finger at the current location and continue dragging, or they can lift both fingers, adjust their hand position relative to the pad, and touch anywhere on the surface with a single finger.
We discretized the wall display into cells according to its 8x4 matrix of 30" LCD panels.
Using portions of the LCD panels, e.g.
We also wanted to avoid having cells inconsistently crossing screen bezels.
In Coarse mode, users can only jump from screen to screen.
Jumping to a screen puts the cursor at the center of that screen, and users have to switch to Precise mode to reposition the cursor within it.
We call this process discretization to emphasize that the pointing resolution in Coarse mode is artificially degraded while keeping the same physical input resolution.
The resulting technique, when coupled with Head control, is somewhat reminiscent of the Rake cursor  and similar multi-cursor desktop pointing techniques  that use eye gaze to select the active cursor in a matrix of cursors all controlled with the same input device, such as a mouse.
Four dual-precision pointing techniques - We eventually narrowed our design space down to four pointing techniques by combining the two coarse input control techniques  with the two coarse mode input precisions described above  - see Figure 3.
As mentioned earlier, all four techniques, summarized below, use the handheld device's pointing zone to control the cursor in Precise mode, with optimized CD gain transfer functions.
Touching the pointing zone on the handheld automatically switches to Precise mode .
Head orientation can only make the cursor jump to the center of any given LCD panel, as with DiscPad.
Head-based techniques feature a 500ms delay after finger release from the handheld's surface before switching back to coarse mode, giving users enough time to clutch or tap.
As mentioned earlier, optimizing the transfer functions that control pointer acceleration in relative mode for ultra-highresolution wall displays is challenging.
In this section, we explain our method for calibrating those functions.
Pointer acceleration consists of applying a transfer function to the Control-Display  gain based on the pointer's dynamics.
The literature on CD gain transfer functions for such high-resolution and large display surfaces is sparse.
Apart from recent work by Casiez et al.
But these calibration methods were designed to support absoluteto-relative transfer functions for pointing techniques that feature an implicit switch between absolute and relative modes.
While we later compare our techniques with the latest developments in this area, those calibration methods are of little use in our context.
All of our techniques use pointer acceleration in precise mode, and some of them in coarse mode as well.
The CD gain must be large at high input speeds so the user can traverse the entire screen  quickly with no or little clutching.
Conversely, the CD gain must be small at low input speeds for high-precision cursor control.
Some operating systems use sigmoid transfer functions  that are characterized by a slope that smoothly gets steeper before decreasing again, as illustrated in Figure 4.
The lower slopes at each end of the curve enable higher precision at low input velocities and bound cursor speed.
To model such curves, we use a generalized logistic function:
Finally,    defines the curve's slope at its inflection point .
We tune these parameter values as follows: 1.
Vmin and Vmax are respectively the 90th quantile and the median of two corpora of velocities corresponding to voluntarily slow and fast finger movements on a tablet;
CDmin = 100 xresdevice maps the lower bound for the amplitude of input movements that are considered usable for selecting a target  to the minimum target size Wmin or to the cursor width L  for relative Coarse modes; Amax L 3.
The initial value for CDmax is min or widthinput , mapping either the smallest dimension of the input zone to the expected Precise mode amplitude L , or the input zone width to the maximum pointing amplitude Amax for mode-less techniques and Coarse modes .
We conducted two experiments to evaluate the performance of the four dual-precision pointing techniques introduced above, ContHead, ContPad, DiscHead and DiscPad, and to assess the cost of mode switching.
The two experiments followed the same design but used different devices: a tablet with a large pointing zone in the first experiment, and a smartphone with a small pointing zone in the second one.
Our hypotheses are as follows:  Discrete techniques lower the cognitive  cost of mode switching by leaving no choice to users about when to switch between modes, leading to a shorter coarse pointing phase than Continuous techniques.
Pad-based techniques use the fingers in both modes and for mode switching.
With Headbased techniques, a mode switch is triggered when the finger comes into contact with the pointing zone.
Related to , we expect an effect of forcing the mode switch with Discrete techniques on the time spent in the precise phase, since this often entails engaging Precise pointing mode significantly farther away from the target than with Continuous techniques.
We also expect to observe relative differences between the two experiments due to the smaller pointing zone used in the second one: we expect Head-based techniques to be at an advantage in the second experiment, since the smaller size of the pointing zone will hinder performance of Pad-based techniques in Coarse mode.
4. ratioinf ,  and CDmax are adjusted so the transition between the highest and lowest CD gains is as smooth as possible.
The main criterion for deciding that a given function is properly tuned is that users can perform the most difficult task  and no further parameter adjustment improves pointing performance or the users' subjective perception of smoothness and precision.
Three volunteers were asked to test the techniques in an informal iterative design process of 800 pointing trials per user on average, before reaching a consensus.
Table 1 gives the parameter values that we obtained for the two pointing zones that served in the experiments reported below: a large zone that fits within a tablet device in portrait mode, and a small zone that fits within a smartphone in landscape mode.
Generally-speaking, Vmin and Vmax have lower values for the small zone because the physical  space dedicated to pointing is smaller.
Similarly, the small zone features a higher CDmax , allowing for faster cursor movements so as to compensate for the smaller operating range.
Discrete techniques feature a higher CDmax than Continuous ones to compensate for the larger distance between the target and the point where the mode switch has to be performed.
This wall display is driven by a cluster of 16 computers, each equipped with two high-end graphic cards , and a master workstation.
The experiments' software was implemented with jBricks .
Participants stood up, 2 meters away from the display.
Given this position and the size of the wall, the operating range of the head was /2 x /5 rad.
The task consisted in acquiring circular targets of width W. Participants first had to dwell for half a second in a dedicated zone in coarse mode, and could then acquire the target, positioned at a distance A from the cursor's position.
We measure movement time MT and error rate.
MT begins when participants start moving after having dwelled 0.5 s inside a circle centered on the start target, and stops at the first press event on target.
We split MT into movement time of the coarse phase, CMT, and movement time of the precise phase, PMT, according to the time of the last switch to precise mode.
We also wanted to measure the cost of mode switching.
However finding a coherent measure of the duration of mode switching for all techniques is difficult: there is no explicit marker for the beginning of the switch with headbased techniques, since in coarse mode the finger is hovering over the device; switching to precise mode with Pad-based techniques can be performed in two ways, one of which is immediate .
To evaluate the cost of mode switching, we measure VPT, the time between the last move event in coarse mode and the velocity peak in the subsequent precise phase.
VPT is a "technique-agnostic" measure that provides a satisfying approximation of the time between coarse cursor stabilization and use of precise mode.
Regarding the difficulty of these pointing tasks: according to Casiez et al.
In this same article they report a univariate  Fitts' experiment with IDs as high as 9  on a 25ppi projected display.
The highest ID tested in our studies is 9.54 using bivariate pointing tasks  tasks.
To our knowledge, such a level of difficulty was never evaluated before in this context.
For each movement amplitude A, targets were pseudo randomly positioned inside one of six LCD panels so that the average distance from the center of that panel to the target was about 600 pixels .
We chose this value so as to neither advantage nor disadvantage Discrete techniques , given that those techniques position the cursor at the center of the most recently visited panel.
We blocked by technique and used a Latin square to balance the presentation order of techniques among participants.
At the beginning of each block of a Head technique, participants were asked to stand still and stare at the center of the display for 5 seconds to calibrate the center of their head's operating range, in order to balance the angular offsets described earlier.
Each block started with a training session composed of two parts.
In the first part, W and A were set to their largest values.
The operator explained the technique and asked participants to practice until their performance stabilized, i.e.
Participants were allowed to practice longer if they wanted to.
The remaining TECH blocks were measured and decomposed into six sub-blocks composed of six replications of each of the W x A conditions described earlier.
For both experiments, sessions lasted 40 minutes on average.
At the end of a session, participants answered a questionnaire about their preferences and were encouraged to make comments.
In this first experiment, we used a tablet  with a resolution of 768 x 1024 pixels.
Participants had to hold the tablet vertically.
Its aspect ratio matched that of the wall display.
Table 1 summarizes the CD gain parameters.
We removed a few outliers: 0.69% of the trials had an unreasonable residual / predicted ratio.
These outliers were mainly due to Wi-Fi transmission problems.
As expected, MT distributions per condition are skewed.
We thus perform our analyses using median values, per participant, on the model TECH x W x A x Rand.
The only other significant difference is between ContPadL and DiscPadL , the former being 6% faster.
We do not observe any interaction effect TECH x W or TECH x A.
The overall error rate is 5.9%.
As illustrated in Figure 5, the time spent in the coarse phase is slightly shorter with Discrete techniques than with Continuous techniques.
However, this difference is not statistically significant -  is not supported - and is not large enough to make Discrete techniques more efficient than Continuous ones.
Indeed, the time spent in precise mode is far longer with the Discrete techniques.
ContHeadL and ContPadL feature very similar coarse pointing times  and distance-to-target at mode-switch time.
ContHeadL 's shorter task time is mainly due to performance improvements during the precise pointing phase .
We observed that velocity peaks occur earlier with ContHeadL than with ContPadL .
Distances from the mode-switch location to the target are similar for Head- and Pad-based techniques, and their acceleration curves have the same input characteristics .
We thus expected the velocity peaks of ContHeadL and ContPadL to occur at similar times.
This suggests that the cost of mode switching is indeed lower for Head-based techniques than for Padbased ones - supporting  - possibly because of the cognitive cost entailed by switching between two very different CD gains whereas the input device / method remains the same.
Overall, participants preferred to use Head-based techniques  and Continuous techniques .
7 participants ranked ContHeadL first, 4 ranked DiscHeadL first and 2 ranked ContPadL first.
However, there were no strong complaints about any particular technique, except for one participant who clearly stated that he disliked Discrete techniques.
The second experiment used a smartphone  with a resolution of 480 x 320 pixels.
Participants had to hold the device horizontally.
The pointing zone used the top 480 x 166 pixels , resulting in an input resolution of 6.4 dot/mm.
CD gain parameters are given in Table 1.
We took participants' comments about the lack of tactile feedback into account, and used easily removable tape to delimit the pointing zone .
Preliminary tests had shown that the tape did make it much easier to find the input zone without looking at the surface and to anticipate fingers crossing the pointing zone's boundaries.
Results are very similar to those of the tablet experiment reported above.
We observe an effect of TECH on MT , and an effect of A and W, as expected.
Movement time, split between the coarse and precise phases, is shown in Figure 6 using the same scale as in Figure 5.
DiscHeadS is significantly faster than all other techniques, and DiscPadS and ContHeadS are significantly faster than ContPadS .
With the smaller pointing zone used in this experiment, we do observe the hypothesized advantage for discrete techniques .
However, the time gained during the coarse phase is again not large enough to make Discrete techniques faster than Continuous ones.
Since we did not counterbalance the order of pointing zone sizes , and since we added tactile feedback using tape to delimit the zone in the second experiment, we cannot formally compare overall performance across both experiments.
However, we can make three informal observations.
First, the movement time difference between ContHeadS and ContPadS is larger for the smartphone  than for the tablet ; Second, ContPadS is not significantly faster than DiscPadS , as opposed to ContPadL vs. DiscPadL ; Third, Figures 5 and 6 suggest that DiscHead performed better with the smartphone than with the tablet, relative to ContPad and DiscPad.
These observations suggest that as we had anticipated, Head-based techniques are at an advantage with smaller pointing zones.
Several participants complained about the lack of tactile feedback, which made it difficult to know when the fingers were leaving the pointing zone.
They expressed the need for some sort of physical boundary to delimit the pointing zone, as featured by laptop touchpads.
Only one participant answered that holding the tablet for 40 minutes was indeed a cause of fatigue when we inquired about this potential issue.
The above experiments identified ContHead as the fastest and preferred technique.
As a follow-up, we wanted to evaluate the cost of using a handheld device for pointing.
To this end, we ran a third experiment to compare ContHead to state-ofthe-art remote pointing techniques.
Such techniques do not meet requirement #2, i.e., accommodating widgets used for other purposes than pointing, but this comparison enables us to put our results in a more general context.
The comparison involves the version of ContHead that uses a small pointing zone, ContHeadS , on a tablet.
ContHeadS and ContHeadL feature very similar performance .
This makes ContHeadS a more interesting technique overall, since using a smaller pointing zone means that the device can accommodate more control widgets.
We briefly describe the techniques selected for comparison below.
We noticed during early pilot studies that purely relative pointing techniques can actually be viable candidates for high-precision pointing, provided that their acceleration function is properly tuned.
We thus decided to include purely relative, trackpad-like pointing in this experiment.
We tested two different pointing zone sizes, equal to those of the pointing zones used in the previous experiments.
For the purpose of experimental comparison, those were considered as distinct techniques, called RelaSmall and RelaLarge, each tuned with its own optimized transfer function.
As discussed before, the literature on calibrating transfer functions for relative pointing techniques is scarce.
The functions used by major operating systems do not meet the requirements of ultra-highresolution wall-sized displays in terms of speed and precision.
We therefore used the transfer function calibration method initially developed for our dual-precision techniques.
Parameter values are given in Table 1.
Compared to the functions used in the first two experiments, these two functions feature a much higher CDmax that allows traveling much larger distances without too much clutching.
To avoid introducing a confound due to the device itself, we decided to use a tablet for all techniques that required a handheld device: ContHeadS , RelaSmall and RelaLarge.
We compared those three techniques with two techniques from the literature: LaserGyro and SmoothPoint.
LaserGyro is a mid-air dual-precision technique that provides coarse control of the cursor's position with ray-casting and enables precise adjustments with relative angular motion.
Mode switches are triggered with a button.
SmoothPoint  also combines ray-casting with relative pointing.
However, the transition between the two modes is progressive, based on a transfer function that depends on input motion velocity.
The authors of  propose a method to tune this function, but pilot tests in our environment revealed that this method does not scale to large surfaces with high pixel densities such as those typically encountered on ultra-high-resolution wall displays: the difference between the minimum and maximum CD gain values is too high, causing the precise mode to be very jerky when selecting small targets such as those considered here.
We transposed the calibration method described in  to our context3 to the best of our abilities, iterating until the technique eventually enabled us to achieve pointing tasks with the target sizes and movement amplitudes considered in our experiments.
In this third experiment, we tested a total of five techniques : ContHeadS , RelaSmall, RelaLarge, SmoothPoint and LaserGyro.
The apparatus, design, and procedure were exactly the same as in the previous experiments.
We added a physical border around the large and small pointing zones on the tablet to limit the need to look at the input device by providing tactile feedback when the fingers were about to leave the zone.
We used a 5x5 latin square to balance technique ordering.
15 participants served in the experiment .
As in the previous experiment we removed a few outliers .
Figure 7 shows movement time MT by W and A.
For ContHeadS the results are very close to those of the previous experiments.
We observe that SmoothPoint performs poorly compared to all other techniques .
For the sake of conciseness, we do not report figures for SmoothPoint in post-hoc tests, even though it was, of course, included in the corresponding statistical computations.
Results show that using a handheld device for high precision pointing enables users to point at least as efficiently as stateof-the-art mid-air pointing techniques in terms of both speed and accuracy, while leaving a large portion of the handheld's surface available for additional, application-specific widgets.
The three techniques that perform best in terms of movement time and preference are RelaLarge, ContHead and LaserGyro.
While there is no significant speed difference between them, each technique has its own strengths and limitations, making it suitable to specific contexts of use.
While relative pointing is not novel, making it work efficiently in such challenging contexts is an interesting result.
Indeed, existing functions, even elaborate ones such as that of SmoothPoint, were designed for lower-resolution environments, and fare poorly with the high Fitts' IDs considered here.
RelaLarge, based on the CD transfer function tuning method introduced in this paper, provides pointing performance that matches that of more elaborate techniques.
It is straightforward to implement and does not require specific equipment to track spatial position and orientation.
RelaSmall is also quite an achievement, considering that it provides enough precision to perform bivariate pointing tasks of high difficulty  with a pointing zone of 20 cm2 only .
Given that the pointing zone dimensions of RelaLarge preclude its use on smartphones, RelaSmall can be seen as an interesting option.
Indeed, the technique will only incur a 5-to-10-percent performance decrease compared to more efficient techniques, which can be considered an acceptable tradeoff when only small handheld devices are available, or when a large portion of the handheld's screen real-estate should be allocated to additional interface widgets.
This performance decrease can be avoided by using ContHead, which achieves the same level of performance as RelaLarge but on a much smaller input area, equivalent to that of RelaSmall.
ContHead should be considered when the tasks and context of use require many additional interface widgets or when only smartphones are available, provided that tracking the location and orientation of the head is possible.
Finally, LaserGyro causes many more errors than other techniques for small values of W, as the tremor caused by pressing a physical button, even if comparatively small, is large enough to severely hinder acquiring very small targets.
This problem does not happen with tablet-based techniques since their tapping mechanism is algorithmically decoupled from their pointing mechanism.
Another drawback of this technique is that it cannot accommodate additional interface widgets on the input device.
However, LaserGyro leaves the nondominant hand free to perform other interactions, making it a relevant option when the task requires operating additional input devices, provided that pointing task IDs are lower than 9.
One cause for these interactions is SmoothPoint, which is slower for small targets than for larger ones, and faster for the largest amplitude.
We can also observe  that the two relative techniques, RelaSmall and RelaLarge, are faster for the small width and the small amplitude.
Indeed, post-hoc tests show that  for small targets, the only significant result is that RelaLarge is faster than RelaSmall, and for large targets, ContHeadS and LaserGyro are also significantly faster than RelaSmall;  for the small amplitude the only significant results are that RelaLarge is faster than RelaSmall and ContHeadS , while for the large amplitude the only significant results are that both RelaLarge and ContHeadS are significantly faster than RelaSmall.
The overall error rate is 9.6%.
LaserGyro and SmoothPoint also feature low error rates for large targets , but the error rate rises dramatically for small targets: 25.6% and 43.0%.
We had not anticipated such an increase in error rate from our pilot studies.
The problem turned out to come from the fact that clicking with the handheld wireless mouse caused small hand movements which, in turn, caused small cursor displacements that were sometimes large enough to make the cursor leave the target.
We furthered our analysis by measuring the time to first click .
This did not change the results for LaserGyro.
However, results were slightly different for SmoothPoint, which remained slower than RelaSmall in all conditions but not significantly so for the small target + large amplitude condition.
At the end of the experiment, we asked participants to rank the techniques on a fivepoint Likert scale in terms of preference, fatigue and perceived performance.
Figure 8 summarizes the results in a boxplot.
Posthoc tests using Mann-Whitney tests with Bonferroni correction show that  ContHeadS and LaserGyro were preferred to both RelaSmall and SmoothPoint;  RelaLarge was preferred to SmoothPoint;  ContHeadS , LaserGyro and RelaLarge were perceived as faster than SmoothPoint; and  LaserGyro and ContHeadS were perceived as  faster than RelaLarge.
We designed and evaluated techniques that use various input channels to improve pointing at very small targets across large amplitudes.
Our most successful design, ContHead, lets users perform pointing actions at two levels of granularity: coarse pointing uses the natural movements of the head when moving the cursor across large distances; precise pointing uses a small pointing zone on the handheld device to perform relative pointing movements via finger gestures.
When compared with stateof-the-art techniques that are not constrained by our requirements, the technique performs well even with high indices of difficulty, beyond those tested in previous work.
ContHead was also rated as one of the best techniques overall in terms of subjective preference and perceived performance.
Purely relative techniques using only the touch surface of the handheld device performed better than we had originally anticipated.
This led us to carefully investigate Control-Display transfer functions that enable both very fast pointing across large amplitudes while minimizing clutching, and precise cursor adjustments to acquire targets only a few millimeters in diameter.
We showed that with a large-enough pointing zone and proper tuning, such a relative technique competes with the most efficient dual-mode techniques.
In future work we plan to investigate how to automatically couple and decouple cursor position from head orientation since it is not always desirable, in real contexts of use, to have them tied together.
One possible solution would be to detect situations where the user is likely to initiate pointing actions, e.g., using information about the handheld device and the position of the hand .
