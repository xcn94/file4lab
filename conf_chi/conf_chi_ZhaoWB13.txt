A user is doing trip planning with TrailMap by searching different businesses with  the search box.
While the user is exploring this area in  the main map view, automatically generated bookmarks are displayed in  the bookmark panel.
With  the advanced bookmark revisiting panel, he is showing the search results of three different bookmarks and is trying to find an optimum solution.
He can also view more information with  the business detail panel and  the map overview.
Web applications designed for map exploration in local neighborhoods have become increasingly popular and important in everyday life.
During the information-seeking process, users often revisit previously viewed locations, repeat earlier searches, or need to memorize or manually mark areas of interest.
To facilitate rapid returns to earlier views during map exploration, we propose a novel algorithm to automatically generate map bookmarks based on a user's interaction.
TrailMap, a web application based on this algorithm, is developed, providing a fluid and effective neighborhood exploration experience.
A one-week study is conducted to evaluate TrailMap in users' everyday web browsing activities.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
H.5.2 : User Interfaces - Interaction styles.
Online map services, such as Google Maps and Bing Maps, offer an efficient and convenient way for users to interact with geographical information.
Websites designed for exploring local areas, which include mapping capabilities, have become increasingly popular, such as Yelp  for local business reviews and recommendations, RE/MAX  for real estate listings, and Priceline  for hotel bookings and travel planning.
Using TrailMap, bookmarks are automatically generated based on a user's interactions, such as mouse clicks and wheel movements, eliminating the need for manual bookmarking and repeat searches.
Finally, we contribute the results of a one-week evaluation of TrailMap with users in their real map browsing environments and discuss improvements of the algorithm and the interface.
As users perform information seeking tasks in maps , it is common for them to backtrack by revisiting locations and repeating earlier searches.
Despite the convenience of online map exploration, revisitation can be time consuming and frustrating.
We conducted a preliminary survey with 30 participants from local universities regarding their map browsing habits .
Nearly half of the participants reported spending between 10% and 30% of their map browsing time finding earlier sites to revisit .
An additional 27% of the participants reported spending more than 30% of their browsing time on these activities.
Similar phenomena of revisitations are observed in other tasks.
For example, Tauscher et al.
To reduce the effort inherent in revisitations, map users may create explicit bookmarks  to assist their search and bring them quickly back to areas of interest.
Typically, users will open new browser tabs for selected businesses or add them to a customized map, such as My Places in Google Maps.
However, explicit bookmarking imposes an additional cognitive burden on users, interrupts the interaction flow, and requires the user to anticipate the revisitation .
The notion of implicit bookmarking, which automatically generates potential bookmarks for revisitation while the user is viewing the information, has been shown to be effective in application domains such as document reading  and web browsing .
Nevertheless, little work has been done to explore automatic bookmarking in information seeking during geospatial exploration.
To address these challenges, we propose a novel algorithm for implicit bookmarking within information-seeking tasks during multi-scale exploration on digital maps.
Usage patterns of current computer-based interfaces are highly repetitive, such as command use , menu and list selection , document reading , web browsing , and visual analytics .
To make interactions more effective, researchers have proposed various techniques to support revisitations, ranging from user-performed manual operations, to automated interface updates, based on a recorded interaction history.
Explicit bookmarking technologies require a series of intended user actions to mark interesting information.
For example, in Adobe Reader, adding a bookmark to the bookmarks panel; whereas in Google Maps, clicking the "save to map" link when the user wants to add a pushpin to My Places.
In document reading, Bookmark Scrollbar  places user-created bookmarks on a standard scrollbar.
These issues have led to the development of implicit bookmarking techniques, such as the "Forward/Back" buttons on web browsers and Microsoft's Visual Studio.
Nevertheless, although these upgrades have improved the efficiency of revisitations, they still fall short of a truly intuitive interaction.
The visiting history list is not visible on these interfaces, and users often misunderstand the purpose of the "Back" operation and become frustrated when a desired item cannot be found .
Visiting histories are typically hidden behind other controls, such as requiring the user to navigate to the "Recent Documents" menu in Word and the "History" tab of a web browser.
Footprints  and PageLinker  offer more intuitive ways of displaying the visiting history, through the use of maps, paths, and annotations.
However, this technique is specific to exploration tasks in a discrete information space.
Some implicit bookmarking systems have been proposed for a continuous information space, such as document reading.
The Read Wear system shows reading histories of an entire document through the use of histograms to display the number of edits and the frequency of readings on a scrollbar .
As well, Chun et al.
However, all of these systems are constrained to bookmarking in a linear presentation space or with simple forms of interactions, such as 1D scrolling.
Moreover, the information content of tasks like document reading is generally static, whereas in some tasks--such as visual analytics with information visualization systems--a user's exploratory visit dynamically modifies the visual representation.
A revisitation tool which retrieves previous visualization states can facilitate data analysis and user communication .
The introduction of tools such as GraphTrail  and KronoMiner , have enhanced implicit bookmarking by presenting and organizing a graphical history of visualization in a hierarchical structure.
However, here too, the information space  is limited to discrete exploration.
Geospatial exploration combines the most difficult elements of these challenges: the information space is continuous, multi-scale, the content is dynamic, and the navigation methods are heterogeneous.
To our knowledge, the prior art has failed to solve the problem of implicit bookmarking for information seeking on digital maps.
The use of navigation techniques with multi-scale interfaces has been extensively studied.
Zooming is a commonly used technique which usually employs the use of a specific widget or the mouse wheel.
Some systems initiate zooming based on the selection of an object  or a region  on the screen.
Semantic zooming, which dynamically modifies the selection and structure of data to be displayed, is widely used in current online maps .
To increase zooming efficiency with a very large information space, some techniques have been proposed to automatically scale the content based on a user's interactions, such as the speed of panning , the distance to the scrollbar  or the degrees of interest of the information content .
A major limitation of zooming interfaces is known as the "desert fog" problem because of the absence of orientation features at high-level scales .
Studies indicate that adding a view of the entire world  can benefit a user's navigation and overcome the "desert fog" problem .
A third multi-scale exploration method introduces the focus+context technique, using distortion to seamlessly combine the region of focus, shown in great detail, with the surrounding context.
The Mac OS dock panel, the wellknown fisheye views  and rubber sheet  fall in this category.
However, it can be difficult to acquire targets with a distorted focus at a very high scale.
However, none of these multi-scale exploration techniques have yet incorporated the aspect of interaction history, which we believe is very important, in information seeking with maps.
Although PolyZoom can, to some extent, track the exploratory path of browsing a multi-scale 2D map, it requires a de facto explicit bookmarking technique which demands a user's attention and effort .
An exception is the Glimpse technique, which considers all navigation actions temporary until confirmed by an explicit action.
Once confirmed, however, the technique does not include a method to revisit previous views .
The strength of a novel algorithm for implicit bookmarking lies in its ability to recognize useful sites that a user would like to revisit.
Here, we introduce a conceptual model for information-seeking interactions with maps, and propose an algorithm for implicit bookmarking based on that model.
As Figure 3 indicates, the space-scale diagram  conceptualizes "pan" and "zoom" interactions, which are the main navigation operations in multi-scale exploration.
It is unclear whether these dwell times have similar characteristics because of the difference between zoom and pan.
The "transition points"  could also be potential interesting positions .
Thus, we introduce 4 thresholds: TPP, TZZ, TPZ, and TZP, which use dwell times to identify ideal opportunities to bookmark.
Since the information content is dynamic, , we can intuitively divide the task into several individual interaction blocks with relatively stable information content.
Each search block commences with a search, followed by a series of pan, zoom and pause actions of varying time lengths .
The characteristics of these interaction blocks, such as the durations, distances and types of the navigation operations and pauses, are used to find intuitive bookmarks in the interaction stream.
On startup, set the current keyword as null .
When a search operation is detected, generate a bookmark and set the query as the current keyword.
When a zoom operation is detected, generate a bookmark with the current keyword if: a.
The zoom distance is larger than DZ.
Or, the dwell time before it was longer than TZZ or TPZ, based on the previous operation .
When a pan operation is detected, generate a bookmark with the current keyword if: a.
The pan distance is larger than DP.
Or, the dwell time before it was longer than TZP or TPP, based on the previous operation .
When a new bookmark is generated, delete existing bookmarks in a close geographic space-scale proximity that contain the same keyword, , as illustrated by the yellow area in Figure 3.
This operation is designed to avoid clutter and prevent the creation of too many bookmarks in a small geographical area.
When a bookmark is selected, navigate the map view to the recorded viewport and redo the query with the recorded keyword and set it as the current keyword.
Our goal is to determine the most logical and useful sites to generate implicit bookmarks that the user is likely to revisit.
A bookmark in this continuous and dynamic data space should include the keyword search, the viewport location and zoom level .
Therefore a revisit is defined as a visit to a previous viewport with an identical search .
Based on the above user interaction model , we define three heuristic opportunities for implicit bookmark generation.
The first is to create a bookmark when a user initiates a new search .
Second, bookmarks should occur when a user visits different places, providing the waypoints during the multiscale exploration.
Long distance zooming and panning, which can be measured using the geometrical concepts in Figure 3, are possible delimiters of consecutive visits to bookmark.
It is worth noting that pan and zoom are interactions with distinct natures that are often imposed by different input devices; panning one pixel on the screen does not appear to present the same level of task difficulty for the user as zooming one level of the scale.
In this project, we treat pan and zoom separately, i.e., setting two different thresholds, DP and DZ, respectively for identifying long pans and zooms.
Third, bookmarks should be generated during specific pauses--a longer dwell time may indicate that the user has a higher interest in browsing a particular location.
For example, Footprints Scrollbar  uses a two-second dwell time threshold for document reading tasks with 1D scrolling.
Threshold values depend on the input device, as well as users' input habits.
In our TrailMap implementation, the parameters were selected empirically based on an in-lab pilot study with 4 volunteers .
During the pilot study , participants tried TrailMap with different parameter settings on their own computers.
Participants provided feedback about the performance, allowing the experimenter to adjust and finalize the parameter values.
Using the algorithm described above, we developed TrailMap, a research prototype that uses the Bing Map services  under the Silverlight platform.
TrailMap consists of 7 interactive interface components :  a search box,  a main map view,  a bookmark panel,  a configuration panel,  a business detail panel,  a map overview, and  a logical bookmark revisiting panel.
Next, we describe the visualizations and interactions encountered in the TrailMap interface.
Visualizing bookmarks is an interesting challenge.
Footprints Scrollbar utilized the 1-dimensional space of the scrollbar .
Given the 4-dimensional space of our bookmarks, however, the implicitly-generated bookmarks of a particular map viewport with a specific search keyword are presented in several ways on different UI components.
Bookmark visualizations:  grouped view,  timeline view, and  bookmark indicators .
The arrow is shown as a red plus for zooming-in or green minus for zooming-out .
These features allow the user to interactively explore the history without committing to a change of viewport.
The map overview , allows a user to explore all the bookmarked map viewports, represented as color-coded rectangular pins.
Hovering over a pin initiates the same effects on main view as described above.
The semitransparent blue rectangle indicates the current viewport shown in the main view .
The map overview is synchronized with the movements of the main map view when a user is interacting with the main view; but when a user pans or zooms the overview to see other map regions, the main view is not affected.
An initial TrailMap bookmark is created when a user initiates a keyword search in the search box.
TrailMap sends queries via Bing Map APIs and displays the resulting local businesses within the current map viewport as circular pins on the map .
When a user hovers over a circular pin, a tooltip and a name label for more details appear.
If a user clicks a circular pin, complete information about the business is shown on the side panel .
As a user explores the local area using pan and zoom, bookmarks with corresponding sites  are automatically generated and displayed in the bottom bookmark panel .
If a user clicks a bookmark, TrailMap navigates the viewport back to the associated location and sends queries with the recorded keyword again.
For each keyword, the system retains up to a predefined number of bookmarks in a queue .
In the bookmark panel , a bookmark contains a thumbnail image of the recorded map viewport.
The image size is related to the scale factor, where a smaller image size correlates to a higher zoom level.
Bookmarks associated with the current map viewport are outlined in red.
Bookmarks generated from previous map viewports are outlined in two ways: if the viewport location is still visible from the current viewport, the outline color is black; if the viewport location is not visible from the current viewport, there is no outline at all.
Grouped view and global timeline.
By default, bookmarks are color-coded and grouped by associated keywords in the bottom bookmark panel, where the first always contains bookmarks with no associated search terms, i.e., null keyword.
Within a group, bookmarks are sorted by the time they were created, beginning with the least recent from left to right .
Alternatively, a user can choose to display TrailMap bookmarks along a global timeline.
This feature allows bookmarks with different search terms to be co-mingled, allowing users to track the search exploration history across time .
As Figure 5c-left indicates, when a user hovers over a bookmark item, a shaded rectangle representing the bookmarked viewport is displayed in the main map view .
Simultaneously, a larger snapshot of the bookmarked map image is overlaid in the bottom-right corner of the main view.
Second, when a user hovers over a circular pin, a name label pops up.
Once the cursor leaves the pin, the business name label fades, but remains visible over the course of a 2-second fade-out animation to prompt revisits.
For example, in Figure 6b, the user moves the cursor along the black trail.
These visualizations help the user recall the previous search results and the items that he has recently visited.
A user can fix a bookmark by ticking a checkbox  to override the delete command.
In addition, a user can manually delete a bookmark, or a batch of associated bookmarks that use the same keyword.
Base on the pilot study, we chose the following parameter values for the TrailMap bookmarking algorithm.
Thresholds for long-distance pan and zoom are: DZ=2 scalelevels and DP=0.75xmapview's diagonal length ; the parameters for dwell times are: TZZ=1 second, TPZ= TZP=1.6 seconds, and TPP=3 seconds; and the parameters for determining nearby bookmarks are: z=1.5 scale-levels and x=0.6x DP pixels.
An important issue for consideration throughout this work was the computation of pan and zoom distances.
The start and end points of a pan can be easily tracked via mousedown and mouse-up events, respectively.
However, start and end points for a zoom are more difficult to pinpoint, as mouse-wheel events are uniform .
In TrailMap, we set a threshold for delimiting continuous mouse-wheel events, such that a new zoom operation is detected when the time between two successive mouse-wheel events exceeds 60 milliseconds.
Based on work by Alexander et al., which shows that a recency list of 8 items covers approximately 80% of revisitations in document reading , TrailMap permits a maximum number of 8 bookmarks per keyword group.
Further analysis on the ideal number of bookmarks for map navigation scenarios is left for future work.
The goal of our study is to evaluate the usefulness of TrailMap for supporting map information seeking and exploration tasks with implicit bookmarks during users' every day map browsing interactions.
We recruited 11 participants , aged 20-31, from our local university community through mail lists.
The participants came from different academic programs including arts, engineering, economics, and science.
Based on their self-reports from pre-study questionnaires, the participants normally accessed existing online map applications 6-10 times per week for an average for 5-10 minutes each time.
Participants accessed TrailMap through an IIS server from their own desktops/laptops.
Participants used IE, Firefox, Chrome, or Safari running on Windows/Mac machines.
Screen display sizes ranged from 13 to 24 inches diagonal.
TrailMap allow users to easily perform advanced searches by quickly merging the information from multiple bookmarks, by using union and intersection functions.
To activate these features, a user clicks one of the "U"  or "I"  buttons located in the bottomleft corner of the main map view .
A user selects the desired bookmarks, one by one, to generate the advanced view on the map.
Each bookmark brings its own associated query results, i.e., a keyword search within a particular map viewport, to take part in the union or intersection operation with current map view.
In union mode, search results associated with each selected bookmark will be added to the map.
To illustrate, in Figure 1 the user has chosen three bookmarks: the 3rd one in "hotel", the 1st one in "restaurant", and the 1st one in "coffee".
TrailMap produces a combined map which displays all the businesses matched with the three queries together in the viewport encompassing the search areas.
This feature may be useful for users to execute trip planning where multiple categories of businesses are important.
In intersection mode, two or more bookmarks are combined to produce a map that displays only the common elements of the queried results of the bookmarks.
The intersection feature is ideal for using multiple bookmarks to narrow down a search for particular businesses with multiple desired attributes.
For example, the intersection of a bookmark for "pizza" and a bookmark for "bar" will produce a map displaying results for businesses that belong to both bookmarks: in other words, a bar that serves pizza.
In addition to bookmark generation, TrailMap offers 2 other mechanisms designed to assist the map exploration.
First, each time a new search is initiated, TrailMap displays local businesses seen in previous search results with semitransparent circular pins .
Participants used TrailMap for 1 week on their own computers.
Throughout the study period, interaction data and events,  were captured and sent to the server.
Participants were instructed to use TrailMap for their normal everyday activities, as much as possible, instead of using similar existing applications.
Prior to the beginning of the study, participants received a 30-minutes individual tutorial session in our lab on how to use TrailMap and how to access it from different platforms.
A detailed user instruction manual and its associated web link were also provided.
At the end of the study, participants completed a written questionnaire and participated in a face-to-face interview to provide feedback about their experiences using TrailMap.
Each participant received $30 for participation.
Overall I was satisfied with the design of this application.
The interface of visiting and manipulating bookmarks was easy to use and intuitive.
The automatically generated bookmarks were helpful in map exploration and search tasks.
The functions of logically revisiting multiple bookmarks were helpful.
I'd like to have a plugin of auto-bookmarking functions with the existing online map applications.
The interaction logs of a sample session are shown in Figure 7d, which further ensures our proposed interaction model and indicates a user's frequent bookmark revisiting activities.
In the post-study interview, participants completed a questionnaire of 6 questions, using a 1-10 Likert scale .
As Table 1 indicates, TrailMap received an overall rating of 7.9 for participants' satisfaction with the application's design ; the 2 main TrailMap's new features  as well as TrailMap's interface design  all received relatively high mean scores-- above 8 out of 10 .
Participants ranked their desire to have TrailMap's features available to use with existing online map applications as an 8.9 out of 10, which is very encouraging In this section, we report the qualitative feedback gathered from post-study interviews and examine these comments in light of data provided from the TrailMap interaction logs.
TrailMap users executed a bookmark revisitation every 70 seconds on average during the trial period .
We collected a total of 95 visits of TrailMap, with an associated 1,556.4 minutes of usage and a mean session length of 16.4 minutes.
Figure 7a shows an overview of the total usages of every participant .
We observed a total of 837 keyword search operations, 33,324 mouse events for map manipulations on the main view, and 1,322 interactions with the bookmark panel.
Figure 7b provides a further decomposition of user operations, indicating participants performed a fairly amount of interaction with bookmarks compared to clicks and searches.
Of all the bookmark operations, 1,025 were simple bookmark revisits, 229 were advanced bookmark queries , and 81 were bookmark grouped/timeline view changes.
Within all captured mouse events, there were 22,218 mouse down/up events, 11,106 mouse-wheel events, and 718 mouse clicks on the circular pins displayed on the map.
Based on total mouse events, we identified 11,033 pans, of which 1,592 were long pans, and 9,661 zooms, of which 1,638 were long zooms, according to our algorithm implementation.
After looking at them  for a while, I was getting lost and I couldn't find where my home or my school is.
Using the bookmarks, I could easily see where I was from and even go back and forth.
So I don't need to zoom out all the way and then zoom in again to see my positions."
Participants commented that the keyword searches, captured in the automatic bookmarks, were helpful in neighborhood exploration, "Last Saturday, my wife and I wanted to go out for dinner.
We searched Indian  then Thai then Indian again and then to something else.
So I really liked that you could have all the stuff together and just clicks let you go back .
Once I made a decision I just pinned the bookmark and kept searching."
It saved me a lot of time on clicking into each restaurant."
Roughly one-third  of the bookmarks were utilized by participants to perform either simple revisits or advanced operations.
In general, participants were satisfied with the implicitly generated bookmarks and thought that the creation caused by pan, zoom and dwell interactions were suitable for their different navigation habits.
P4 said "they capture the purposes of your exploration" and participants found that the pace and amplitude of their navigation operations could affect the bookmark generation, which was "intelligent and reasonable".
P3 mentioned that TrailMap successfully detected the neighborhoods she was interested in during the exploration of a new city.
It is known that every automatic algorithm cannot always be perfect.
False positives, bookmarks that are created at a location that a user does not want to revisit, and true negatives, bookmarks that are not created at a spot where a user actually wants one, did occur.
However, only P6 mentioned that "sometimes too many bookmarks were generated".
P9 and P2 felt that the implicit bookmarks were not always precise and suggested that integrating TrailMap with the traditional explicit bookmarking capabilities would be better for more general situations.
Interaction logs indicated that 17% of all bookmark operations were the advanced bookmark functions .
On average, advanced functions were used every 6.6 minutes.
Participants stated that TrailMap's ability to combine multiple sets of search results was practical for travel and errand planning.
P3 used TrailMap to assist her travel next week by searching hotels, restaurants, car rentals and so on.
Second, the union is very helpful because you can see the distributions .
So I can choose the best combination."
It is much much easier than the Google Maps where I have to click `search nearby' every time for every keyword."
For example, participants reported using the intersection feature to locate: bars that have steak , a carwash with vacuums , and sushi places that also have ramen .
Participants were satisfied with the visual design of TrailMap, stating that the interface was intuitive, aesthetically pleasing and easy to interact.
Within the two bookmark items visualizations, the grouped view is primarily applied .
P4 stated the grouped view is preferred, because it is "more organized and easier to match the bookmarks with the items on the map by colors".
However, P3 and P4 indicated that the timeline view is also a useful view for tracking the viewport movements over time.
Most participants appreciated the semi-transparency effects applied to previous search results and the fade-out animations of name labels, as they found that it assisted their exploration of search results on the map.
P4 said " was lovely  You can have a sense of what you were interested in."
P11 especially liked the fact that TrailMap encoded a bookmark item size with the zoom levels: "it helps you find which bookmark you want to click, especially when you are exploring a larger area".
For future improvements, P8 suggested that placing geolocation tags  onto bookmark items in Figure 1c would be more helpful for navigation.
All participants agreed that TrailMap was useful in many aspects of their everyday map exploration and search activities.
Several participants mentioned that the automatic bookmarking functions and the ability to logically combine search results on the map were "hardly seen elsewhere", and sometimes they were "surprised by the new mapbrowsing experience" offered by these functions.
Participants reported that, as they gained familiarity and confidence using TrailMap, they began to rely upon it and some enthusiastic users such as P4 and P7 "searched almost everything with it".
One item of note is that P8 did not often use TrailMap for map-based searches; rather, P8 used it as a navigation tool for exploring geographical information of the map dataset.
He mentioned " not only showed me the navigation trails and where I lingered for a long time but also helped me easily switch among different places of interests.
But that is very hard with Google Maps, with the My Place feature, as I usually do."
Apart from the implicit nature of TrailMap bookmarks, participants also appreciated the fact that these bookmarks recorded the viewport area and the search, when asked for comparing with other map applications they used.
P10 said "The `localized search' is very convenient for exploring neighborhoods especially when you are new to the city, because you may be interested in different things at different geo-locations or scale levels".
Some participants commented that the abilities of the bookmarks "restoring both the view and the search results" provided a more fluid and natural user experience.
Participants also identified several functions provided by the existing applications that were not offered in TrailMap, which resulted in an overall rating score that was lower than individual aspects of the system .
Participants commented that after finding a desired location using TrailMap, they would like to see the distance between 2 places and directions on how to get there.
Also, participants felt the dataset of user ratings and reviews of businesses was somewhat incomplete .
Though an external link of Yelp search was included in TrailMap, participants desired a more integrated interface.
This research aimed to develop a novel algorithm and an interactive web application to fill an existing gap in online map exploration.
Often, users find switching to a novel mechanism interrupts their established habits and patterns of interaction.
Interaction logs revealed that the average usage of TrailMap was 141.5 minutes per participant in 1 week, exceeding the participants' typical usage of online maps prior to the study.
Qualitative user feedback for TrailMap was positive.
Participants actively used the implicit bookmarks to revisit previous locations and to perform advanced union and intersection functions to customize searches.
TrailMap's implicit bookmarks, together with different visualizations and the advanced bookmark revisitation functions provide an effective and fluid user experience of map explorations.
P6 said, "I never thought I would need the bookmarks because I'm too familiar with this city.
But I realize I really do when I did a lot of searches and it simply works!"
We note that TrailMap UI is more complicated than traditional online mapping tools, but we deal with complex map information-seeking tasks, where the data space is continuous, dynamic and multi-scale.
Thus it is difficult to remove interface complexity while maintaining useful and advanced functionalities.
Moreover, the study results showed that participants were able to use it with minimal instructions, indicating that the interface was intuitive enough and easy to operate by novice users.
Another potential issue of the TrailMap interface is the visual clutter, for example, P11 and P6 felt that frequent search and navigation interactions generated a lot of bookmarks and that a cluster of these rectangular outlines were difficult to work with on the main map view.
They proposed to add a feature that allows users to hide the rectangles for particular bookmarks or bookmark groups.
P11 added that it would be useful to have the option of auto-hiding the bookmark panel when the screen is small.
Also, an integration of some target selection techniques such as Escape  can further improve the experience.
Both the frequency of revisiting bookmarks  and the overall use of implicit bookmarks  suggest that frequent revisitations during map exploration are needed as well as the TrailMap's algorithm is useful and satisfies participants' different needs and browsing habits.
Based on the study results, we further propose the following directions to improve the current algorithm which could potentially enhance the experience for a more generalized user.
First, TrailMap could be adapted to allow users to customize the granularity of bookmark generation.
For example, a user could configure TrailMap to generate fewer bookmarks by adjusting the thresholds.
Furthermore, it is straightforward to integrate the traditional explicit bookmarking along with TrailMap, in which the manual bookmarks could be generated just as a user fixing the bookmarks in the current implementation.
Second, different users have different interaction behaviors, and different devices have different specifications on input events.
Third, our current algorithm associates bookmarks with keywords without any semantic considerations.
Keywords direct the bookmark grouped view, user inputs and the deletion of nearby bookmarks.
A potential improvement is to integrate natural language-processing algorithms into keyword classifications, such that hotel, lodging, and motel could all be classified as the same bookmark group.
We have presented an implicit bookmarking algorithm for information-seeking tasks with digital maps where the data space is continuous, dynamic and multi-scale.
We developed TrailMap, a novel web application prototype by implementing the proposed algorithm with Bing Maps APIs.
We conducted a one-week study in users' everyday map browsing activities to evaluate the effectiveness of TrailMap in users' everyday map exploration.
We found that participants actively used TrailMap for their web-based map searches, and they appreciated the usefulness of the implicit bookmarking mechanism and the intuitive interaction and visualization of the tool which provided a fluid and effective map exploration practice.
There are several promising directions for future work with TrailMap, in addition to the interface and algorithm improvements discussed earlier.
First, TrailMap could be adapted to add functions such as: exporting, saving, reloading, and even sharing, the bookmarks.
Currently, TrailMap supports the user's short-term memory with implicitly-generated bookmarks and the visualizations of business-name labels.
These additional functions would enhance a user's longer-term memory.
Second, TrailMap could be expanded to offer a mobile version and to integrate multiple online data sources to improve the user experience.
Third, TrailMap could benefit from long-term user studies to further evaluate the usability of this unique application and its mobile versions in the wild.
