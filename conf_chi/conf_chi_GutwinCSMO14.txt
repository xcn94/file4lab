Touch-based tablet UIs provide few shortcut mechanisms for rapid command selection; as a result, command selection on tablets often requires slow traversal of menus.
We developed a new selection technique for multi-touch tablets, called FastTap, that uses thumb-and-finger touches to show and choose from a spatially-stable grid-based overlay interface.
FastTap allows novices to view and inspect the full interface, but once item locations are known, FastTap allows people to select commands with a single quick thumb-and-finger tap.
The interface helps users develop expertise, since the motor actions carried out as a novice rehearse the expert behavior.
A controlled study showed that FastTap was significantly faster  than marking menus, both for novices and experts, and without reduction in accuracy or subjective preference.
Our work introduces a new and efficient selection mechanism that supports rapid command execution on touch tablets, for both novices and experts.
Desktop interfaces often offer multiple ways to select the same command, and the different mechanisms can have very different performance characteristics.
For example, selecting commands from menu hierarchies is slow when compared to keyboard shortcuts and toolbars, which provide access to commands with fewer actions.
Having these types of shortcuts in an interface can substantially increase a user's efficiency over time, by allowing the user to learn quicker methods of invoking the commands they use most often.
On portable touch-based devices such as tablet computers, however, interface shortcuts are seldom available.
The lack of a physical keyboard means that there are no keyboard shortcuts for quick selection, and limitations on screen real estate leave little or no room for always-visible components such as toolbars.
Touch-based command interfaces, therefore, often take the form of tedious menu hierarchies, with no way of making a transition to an expert method of interaction.
This greatly decreases the utility of touch devices for productivity tasks.
One widely-studied interface that supports expertise on touchscreens is the marking menu, a type of radial menu that allows visual inspection of menu items for novices, and rapid gestural interaction for expert users .
Copyrights for components of this work owned by others than ACM must be honored.
Abstracting with credit is permitted.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Copyright is held by the owner/author.
Publication rights licensed to ACM.
With multi-touch capabilities widely available in modern tablet computers, there are opportunities for interfaces that support rapid command execution for experts, as well as smooth transitions from novice to expert use .
In this paper, we present FastTap, a new rapid-access interaction technique that allows fast command selection on multi-touch devices for both novice and expert users.
As shown in Figure 1, FastTap uses the entire screen to present a spatially-stable grid of commands .
The command overlay is hidden by default, and is shown when the user holds their thumb on the grid activation button.
The interface can then be inspected, and commands can be selected with a finger; when the user lifts their thumb, the grid disappears.
Novices use the interface by showing the grid and visually searching for the commands they need.
As users become familiar with commands, however, they remember item locations in the grid, leading to expert behavior - experts can select a command with a single `chorded' tap using the thumb and forefinger, without waiting for the grid to appear.
Similar to marking menus, this design follows Kurtenbach's principle that `guidance should be a physical rehearsal of the way an expert would issue a command'  - in other words, since the novice and expert interaction methods require similar motor actions, users can develop spatial and muscle memory of the action required for each command through natural use.
To assess the performance of FastTap, we carried out a controlled study comparing selection time and errors with FastTap and marking menus.
Our study showed that selection time was significantly and substantially faster with FastTap  than with marking menus .
In addition, FastTap was significantly faster at all levels of expertise with the interface, and provided an additional speed benefit when multiple commands were carried out in sequence.
We found no differences in terms of errors, effort, or preference.
Our work makes three main contributions.
First, we introduce a new interaction technique for tablets that was significantly faster than marking menus in an initial study.
Second, we further demonstrate the power of spatial memory as an organizing principle for visual interfaces, and demonstrate how spatial memory can be exploited together with multi-touch input to produce rapid command selection interfaces.
Third, we provide empirical results about user performance with FastTap and marking menus.
Modern touch-screen applications typically use hierarchical menus and dialogs, with a few commands accessible on the main display, and others requiring several pointing actions that slow their selection.
Gesture-based systems, such as marking menus , are one alternative to hierarchical linear menus, with some implementations appearing in commercial products .
Marking menus allow practiced users to traverse a radial menu hierarchy in a single gesture, speeding up interaction.
However, navigating the hierarchy can still be slow, and marking menus are inherently limited in terms of the number of items that can appear at each hierarchical level .
Multi-touch technology has created new opportunities for designing efficient command selection interfaces that exploit the higher bandwidth available with multiple concurrent contacts.
For example, Wu and Balakrishnan  describe multi-finger and whole-hand interaction techniques for tables, including a selection mechanism that posts a toolglass with the thumb, allowing selection with another finger.
Similar techniques are used and studied in Wagner et al.
Multitouch marking menus  and finger-count menus  both allow users to specify a menu category by changing the number of fingers used to touch the screen .
Other techniques parallelize the hierarchy traversal: for example, Banovic et al.
However, these higher-bandwidth techniques do not always improve performance, since a more-complex control action may take more time to retrieve and execute .
Techniques utilizing device features other than the touchscreen have also been implemented.
Jerktilts  allow quick selection of one of eight commands by quickly tilting the mobile device.
Bezel Tap  uses the accelerometer to detect taps on the edge of the device, allowing shortcuts to commands while the device is asleep.
One key characteristic that determines whether a command selection interface is efficient is the number of separate actions needed to navigate to an item.
Reducing this number is a main design goal of Scarr et al.
These commands can be selected with a single action, which is faster than the multiple navigational steps needed for hierarchical menus and ribbons.
One of the primary advantages of marking menus is the way in which they support a smooth and rapid transition to expert use .
After activating a marking menu, a novice user can wait for a short time to see a labeled radial menu appear, from which they make their selection with a touch gesture; an expert user can make the same gesture without waiting for the menu to appear.
Since the motor actions for the novice and expert uses of the menu are identical, users learn the expert gestures through normal interaction.
This principle of rehearsal is extremely important to the development of user expertise.
FastTap is therefore designed to support rehearsal during novice use.
In a similar manner to marking menus, the command grid only appears on-screen after a delay; users with spatial or muscle memory of the interface can interact instantly without waiting for the visual display, using the exact physical action they used as novices; intermediate users suspecting the desired command location but unwilling to execute it without confirmation can also benefit from FastTap, by anticipating the location of the target, positioning their finger over it while waiting for the grid to appear, and selecting the command after visual confirmation.
While marking menus are generally limited to eight or twelve commands per level , various extensions significantly increase this limit.
Polygon menus  and flower menus  both allow more commands by increasing the types of gestures available.
More recently, Roy et al.
OctoPocus  recognizes gestures by shape, and provides visual suggestions for the remaining gesture based on the initial movements.
While these systems increase the number of commands that marking menus can support, they still rely on gesture-based interaction.
Rapid execution is our priority for FastTap, but we also intend that it will support a wide command vocabulary.
In FastTap, the number of items at each level is limited only by the size of the screen; our prototype uses a 5x4 grid, with one cell being used as the FastTap activation button.
However, this number can be increased through the use of different activation buttons, or command tabs, which can be arranged along the bottom of the screen.
We consider these design possibilities further in the Discussion.
As described above, FastTap provides modal access to a grid of command buttons.
Selections are made by pressing a command button, either after invoking the grid display, or simultaneously with the invocation button .
There is no difference in the selection mechanism for novice or expert use - experts who know the item locations simply tap the command before the interface is shown.
After a chorded selection, feedback on the selected command is given by displaying the command icon for 500ms .
The interface used in the experiment contained sixteen command buttons in a 4x4 grid , of which eight were used as study targets.
The sixteen commands were organized into four rows that grouped similar commands together .
We implemented a 16-item marking menu with a two-level hierarchy, adapted from Kurtenbach's previous work .
Once again, only eight of the 16 items were used as study targets.
Upon invocation of the menu , users move a finger towards one of four categories shown on screen , and then to one of the items in that category .
The items in each category were the same as the row groups used in FastTap .
We used a hierarchy because previous research indicates that selection errors increase significantly for menu levels containing more than eight items .
We chose commands for the study that fit well with the four categories, to reduce the chance that participants would select the wrong category.
Marking menus also need an invocation mechanism, and we used the same activation button as in the FastTap condition .
Users invoked the menu by touching the activation button with their thumb, then touching their finger on the screen to instantly post the menu.
Moving the finger in one of the four directions then opens the corresponding submenu, and moving again selects one of four items.
Some implementations of marking menus use a `press timeout' invocation, but to avoid disadvantaging the menu condition, we chose a method that was equally fast to the invocation of FastTap.
The study used a 2x3x10 within-participants RM-ANOVA with factors Interface , NumberOfCommands , and Block .
Dependent measures were command selection time, and errors per command selection.
Interface was counterbalanced between participants.
Mean selection times for FastTap will be faster than for MarkingMenu.
FastTap will be faster than MarkingMenu both for novices and for experts.
FastTap will show an added speed benefit for twoand three-command targets.
There will be no evidence of a difference in error rates between the two interfaces.
There will be no evidence of a difference in perception of effort for the two interfaces.
Users will prefer FastTap over MarkingMenu.
Participants completed a demographics questionnaire, and then performed a sequence of selections in a custom study system with both marking menus and FastTap.
For each trial, a command stimulus  was displayed at the top of the screen; the participant then selected the command using the interface provided.
Trials involved selecting a combination of one, two, or three individual tools and properties that could be used within the drawing application .
Trials were timed from the appearance of the stimulus until all targets were successfully selected.
In the case of multiple-command targets, command names in the stimulus were crossed out as they were selected, and participants could select commands in any order.
Participants were instructed to complete tasks as quickly as possible, and were told that errors could be corrected simply by selecting the correct item.
Completion times included the time for correcting errors.
Of the sixteen commands in each interface, only eight were used as stimuli, in order to allow faster development of spatial memory and expertise for both interfaces.
Two commands were used from each interface category .
Multiple-command targets were also composed from these eight commands.
For each interface, selection trials were organized into blocks of sixteen selections .
Participants first performed one practice block of sixteen trials  to ensure that they could use the interfaces successfully.
They then carried out 10 blocks of sixteen selections.
Targets were presented in random order  for each block.
Short rest breaks were given between blocks.
After each interface, participants filled out a NASA-TLX questionnaire ; at the end of the study, they also answered summary questions about their preferences.
We calculated the selection time for each command by dividing the total trial time by the number of commands in that trial.
We therefore accept H1 - FastTap selections were 33% faster overall than the marking menu.
Figure 3 also shows selection time by the number of commands per trial.
As suggested by Figure 3, both effects can be attributed to FastTap permitting faster selections when commands are joined into groups of two or three.
Post-hoc t-tests  show a significant difference between the two interfaces for each number of commands .
We also asked participants which interface they preferred in terms of several qualities .
As with the effort scores, counts were very close with no quality showing a significant difference.
When asked about overall preference, seven participants preferred FastTap, eight preferred marking menus, and one had no preference.
We therefore cannot accept H6.
Like the preference results, participant comments were about evenly divided between the two selection techniques, and participants often mentioned the characteristic features of the designs when explaining their preferences.
For example, participants made several comments about how spatial stability and quick activation helped the speed of FastTap: one person commented on "the simple and stable location of each icon"; another said "the grid is faster because it only requires a two finger tap, with one finger always in the same place.
The menu, however, demands specific movements  which expend a few milliseconds more time."
It was also clear that some participants liked the semantic categories of the Marking Menu, and others liked FastTap's access to all commands at once.
In favour of marking menus, participant comments included "the menu compartmentalized the options much better"; "the menu required less memory"; and "visually a grid with all available options is not as easily navigable as a menu with divisible submenus."
In favour of FastTap, comments included: "the options are all available at one time which makes it easier to pick, and memorization also helps a lot in the grid"; "it is easier to see the items that you want to select"; and "there is only one level to be memorized, where  has two levels."
Some of the participants were initially concerned with the number of commands in FastTap, but ultimately preferred it: "after a while, the grid became easier to remember"; "I was able to catch on much quicker  and be able to visualize where everything was."
As with selection time, we analysed errors per command, dividing the number of errors in a trial by the number of commands in that trial.
Errors were counted as any incorrect selection .
ANOVA showed no effect of Interface on errors, with FastTap at 0.10 errors/command, s.d.
We therefore accept H4 .
To gather additional information about whether FastTap would work outside of a study setting, we developed a simple multi-touch painting application with a FastTap interface and showed the system to five people in an informal test.
The five participants used the interface in a variety of settings , and we asked them to play with the interface and to recreate a printed picture three times .
They observed several common postures involving the nondominant palm or forearm.
We also saw several different handholds in our informal sessions, some of which were seen by Wagner - for example, the tablet held in the left palm, with the FastTap activation button pressed by the non-dominant thumb.
However, several other people held the device by gripping it between their left thumb and fingers - which was not possible in Wagner's study due to the size of the iPad, but which was possible with our seveninch Nexus tablet.
This grip-based hold allowed operation of FastTap with the thumb and fingers of the dominant hand, which matched our intention in designing the method.
Novice and more expert behaviour.
In our informal sessions, people found it easy to use FastTap - their hands fit the interface reasonably well, and people did not have any difficulty finding the commands that they wanted.
On a few occasions, however, people inadvertently drew rather than selecting.
In the short time of these sessions, we saw only a few uses of expert chording behaviour; however, it was clear that all users were gaining spatial memory of frequently-used commands.
For example, people moved their selection finger towards or over the target even before displaying the grid, showing that they had an idea about where the desired command was located.
These preliminary observations are limited, but provide initial evidence that FastTap can work in natural use.
The following sections provide explanations for these findings, address design issues for real-world use of FastTap, and discuss its generalizability.
Our experiment showed that FastTap improved  on a well-known technique  for selecting commands on tablets; in addition, FastTap was faster at all stages of learning.
The performance advantage of FastTap can be explained through an analysis of the steps required for command selection, in both novice and expert cases.
For novices, there are three steps required: activating the command mode, searching for the desired command, and executing a selection action.
Activating the command mode was the same in both interfaces, but the interfaces differed in the second and third steps.
Searching for a command in FastTap involves only visual search over all of the concurrently displayed items, whereas search in marking menus involves first choosing and selecting a semantic category 
Although some participants found the semantic categories helpful, previous research has shown that the decision and selection time costs of traversing the hierarchy can exceed that of a broader visual search .
The visual search needed for FastTap could take longer initially, since there are more items to inspect, but the rapid development of spatial memory means that novice users will quickly make a transition from full visual search to remembering where items are located.
The third step - execution of the selection action - is faster in FastTap, since a tapping action can be carried out more quickly than the sliding motion of a marking menu.
For experts, selection requires only two steps: retrieval of the command action  from memory, and execution of that action.
Multiple commands selected with FastTap were each about 200ms faster than single commands.
We believe that this speed-up is due to people's ability to visualize multiple command locations within FastTap's grid interface, and optimize their movements for multiple selections.
For example, we observed participants re-ordering the selections to reduce finger movement .
With the marking menu, there is less opportunity for optimization .
In this case, FastTap selection time will be similar to that observed in our study - since only a single invocation and selection action is needed, regardless of the size of the command set.
Marking menus, however, must create hierarchies because they use less space, and so experts must continue to execute multiple navigational steps .
Recent work on multi-touch marking menus  suggests ways that these navigation interactions can be speeded up - e.g., by encoding top-level menu categories with different finger postures , or by parallelizing the execution of navigational marks .
Although we believe that FastTap will continue to compare well against other selection techniques as command sets increase in size, further work is needed to explore the potential differences between the spatial-memory approach of FastTap and the gesture-memory approach of marking menus.
Error rates were high overall in both techniques .
This high error rate is probably an artifact of our experimental protocol, which explicitly instructed participants to select items as quickly as possible, while noting that errors could be corrected afterwards.
Although FastTap had a slightly higher mean error rate  than marking menus , the difference was not statistically significant .
However, if we assume that effect of higher errors with FastTap is actually a reliable one, we see three candidate explanations.
First, the quick execution of a selection action in FastTap may have encouraged participants to view errors as amenable to rapid correction, thereby encouraging users towards a `guess and correct' mode of operation.
Second, participants may have found the post-selection visual feedback in FastTap more clearly communicative of the selected item than the marking menu, again encouraging faster but more error prone selections.
Third, it is possible that people's memory of an item's spatial location was imperfect, and so participants may have experienced `near misses' more often than with marking menus.
Further work is needed to determine whether the difference in error rates is reliable, and to properly explain its cause if it is.
Our study tested FastTap and marking menus with a small command set , and it is worth considering how the two approaches would compare in the case of a larger interface.
The main performance differences between FastTap and marking menus are in initial visual search  and the number of actions needed for a learned item .
These differences arise due to the properties of FastTap's single-level presentation, compared with marking menu's hierarchical organization.
With a larger command set, it seems likely that FastTap will require more visual search than marking menus - provided the hierarchical organization of the marking menu items is clear .
Our drawing interface contained 19 commands in a 5x4 grid, but this is not the limit for the FastTap approach.
In general, the number of commands in the interface is limited by the size of the device, the minimum desired size of the targets, and the size of the user's hand .
Using the average width of an adult index finger  as a guideline, it would be possible to have a grid of up to 40 buttons in an 8x5 layout on a 7-inch tablet.
If we consider Parhi et al.
However, this size guideline is debatable - larger button sizes have been shown to provide higher success and satisfaction rates , yet much smaller targets can also be used, as demonstrated by smartphone virtual keypads .
There are interesting research questions around users' ability to form spatial and motor memories for varying numbers of targets at different target densities.
Importantly, however, the possibilities for adapting FastTap to high functionality applications, or to small displays, is not necessarily limited to the `all commands at once' designs examined in this paper.
The capacity of the interface to display candidate targets can be multiplied through the use of multiple trigger buttons, or `tabs', which organize the commands into multiple categories - each trigger button would then show a separate set of commands .
As discussed under Design Goal #3, this technique requires the allocation of additional trigger-button regions in the bottom row of the grid.
Further research is required to determine how well people can remember these two-finger combinations.
Some of our participants cited difficulties with the hand positions required to select commands with FastTap.
Specifically, participants noted that targets were more difficult to acquire when they were close to or far away from the trigger button, or when they were at the lowerright side of the grid.
People with long fingernails had particular difficulty maintaining registered contact with the display when selecting targets near to the trigger button, .
Our experiments were conducted on a device equipped with a 7-inch touchscreen.
We used this relatively small size factor because tablets with screens smaller than 8 inches are the main proportion of the current tablet market, and this proportion is forecast to increase by 2017 .
We conducted pilot studies on several smaller touch-screen devices , mostly testing the drawing system.
The systems worked well, although the command buttons were smaller overall, which may have accuracy implications for expert users.
Porting FastTap to tablets with larger screens also raises interesting questions, especially whether the designer should use the full screen to fit more commands.
If not, the FastTap interface can be limited to a comfortable size for the user's hand.
Using the full screen, however, would permit more commands to be displayed, but it would also create problems for single-handed operation due to handspan limitations.
A different triggering mechanism might be used for commands that are further away than a hand span - such as the bimanual thumb technique used in Wagner's BiTouch system .
In all cases, however, problems with hand positions were addressed in two ways.
First, users could re-orient the device with the holding hand in order to present a better presentation of the trigger and target buttons.
For example, to more easily tap a target in the lower right part of the grid, the user could turn the device slightly anticlockwise with their holding hand, so that the target button  was above and to the right of the trigger button .
Second, users did not have to use the thumb and forefinger to make selections, and could use a combination that simplified the particular selection.
For example, many users used their first and second fingers for the bottom row of commands instead of their thumb and first finger.
It would also be possible to change from a grid-based command organization to one that better matches the ergonomics of the hand.
However, it is not clear whether a non-rectilinear grid would make it more difficult to acquire targets in expert mode .
Modern UIs generally include widgets more advanced than push-buttons.
For example, sliders or color spectrum pickers can be used to provide a finer degree of control over application parameters.
These widgets can easily be converted to work with FastTap, as shown in Figure 5.
FastTap provides quick access to these widgets and allows users to perform rapid and coarse slider positioning that can instantly be adjusted without having to switch modes.
Mobile devices such as tablet computers can be used in different orientations, which changes the aspect ratio of the screen.
There are three possibilities to accommodate orientation changes.
First, the grid could maintain its overall aspect ratio and scale to fit the smaller dimension of the new orientation, requiring that users adapt to a differentscale interface.
Second, the grid could change its aspect ratio to fill the new orientation, requiring that users adapt to a stretched version of the grid.
As shown by Scarr et al.
Finally, the grid could maintain its size regardless of the orientation, fitting the most constraining orientation.
All in-place interfaces  occlude parts of the document, but the overlay presentation of FastTap's interface is different in that it completely fills the screen.
In most cases, this is unlikely to cause a problem for the user, for three reasons: first, the grid is partially transparent and so the main visual elements of the document can be seen through the FastTap overlay; second, the overlay does not appear at all in expert mode, so there is no occlusion problem for experienced users; third, it is easy for the user to control the presence of the overlay , allowing rapid switching back and forth from the document to the UI.
Although it is possible to simply select different colours using the standard FastTap process , other designs could reduce the problem - such as placing a floating copy of the selected object above the grid, or fading out the overlay whenever the user's finger stops moving across the grid.
Last, the visual presence of the activation button is another potential cause of occlusion.
This button is also partially transparent, and could easily increase in transparency level as the user becomes more experienced .
Normal expert selection in FastTap involves two digits .
This combination selects one command; however, there is no reason why additional commands cannot be selected simultaneously in the same chorded tap.
For example, the user could select "black paintbrush" with the three-finger chord shown in Figure 6.
These kinds of selections already work in our prototype application.
Added-finger selections work well only for certain combinations ; therefore, if these are to be used in interface design, further work must determine which fingers combinations are possible, and which command combinations are desirable.
Above we discussed error rates with FastTap and marking menus.
However, a more general question concerns the errors that will always occur with a memory-based means for interaction.
Errors are inherent in any memory-based technique, particularly in the transition from novice to expert use, since users must at some point depend on their memory rather than on visual feedback.
This issue affects marking menus, keyboard shortcuts, and FastTap.
In general, there are several issues that must be considered when designing for the possibility of errors: the destructiveness of a command, the ease with which the error can be identified, the time that the command takes to execute, and the time required to correct the error.
If feedback on the selection is given , users are likely to realize their error and simply correct it.
For commands that take a long time to construct or execute , commands should be easily interruptible to avoid problems of erroneous selection.
For destructive commands , systems may need a confirmation step or a well-designed `undo' facility.
Although we developed FastTap on a tablet that would be difficult or impossible to use with one hand, several people have noted that phone-sized mobile devices are often used in a one-handed fashion.
The ideas underlying FastTap can be used in a one-handed context, providing some or all of the benefits of the interface.
The spatial-memory advantages of FastTap could be achieved even without multi-touch chorded taps; a two-tap version of the interface would bring up the interface with one tap, and then allow selection with a second tap.
For most single-handed operation, the user touches the screen with their right thumb, which means that the activation button would have to be moved to the right side of the screen.
It would also be possible to place an activation button somewhere else on the device to accommodate chording with one-handed use .
Similarly, the activation functionality that currently uses a multi-touch selection could be changed to another modality - for example, double-tapping on a grid location could be a method for specifying both activation  and selection  with a single finger.
Although multi-touch tablets are now common, and are starting to be used for productivity work, there are few techniques for these devices to support rapid command selection.
In this paper, we presented a new selection technique for multi-touch tablets called FastTap that uses thumb-and-finger touches to show and choose from a gridbased overlay interface.
The interface helps users move toward expert use, since the motor actions carried out in novice mode rehearse the expert behavior.
A controlled study with 16 participants showed that FastTap was significantly faster  than marking menus, both for novices and experts, and without reduction in accuracy or subjective preference.
Our research thus far with FastTap gives us strong initial results, and future work will continue in three directions.
First, we will continue development of the drawing application and release a fully-functional version of the app, in order to gather real-world usage and performance data from a wide audience.
Second, we will develop new prototypes that explore some of the design issues described above, including tabbed command sets, complex interface widgets, and interface scaling for larger devices.
Third, we will develop FastTap prototypes for other applications that could benefit from fast access to commands and shortcuts .
Our experience with FastTap suggests that the underlying ideas of spatial-memory-based expertise and quick tap-based access can be successfully and broadly applied across several application domains.
Baglioni, M., Lecolinet, E. and Guiard, Y. JerkTilts: using accelerometers for eight-choice selection on mobile devices.
Bailly, G., Lecolinet, E. and Nigay, L. Flower menus: a new type of marking menu with large menu breadth, within groups and efficient expert mode memorization.
Bailly, G., Muller, J. and Lecolinet, E. Design and Evaluation of Finger-Count Interaction: Combining Multitouch gestures and Menus.
Banovic, N., Li, F., Dearman, D., Yatani, K. and Truong, K. Design of unimanual multi-finger pie menu interaction.
Bau, O., and Mackay, W., OctoPocus: a dynamic guide for learning gesture-based command sets.
Cohen, J. Eta-squared and partial eta-squared in communication science.
Dandekar, K., Raju, B. and Srinivasan, M. 3-D finiteelement models of human and monkey fingertips to investigate the mechanics of tactile sense.
