One of the most troublesome problems occurring in browsing a large hierarchical structure is that the screen quickly becomes overcrowded when users open nodes with a large number of child nodes.
For example, a phylogenetic tree  has many internal nodes with several dozens of child nodes.
Also the open directory has a category structure which consists of many nodes with more than 50 child nodes.
This problem gets worse when it is required to show additional attributes of the node.
We can think of several remedies for this overcrowding problem.
Focus+context techniques can show many more nodes in a screen by enlarging focused nodes and shrinking other nodes.
Their distortion of information space may cause challenges in target acquisition , known as an overshooting problem.
This could hinder users' browsing tasks .
Another solution is to use a list with a vertical scrollbar to show child nodes.
Users may need to scroll up and down to select and open up a child node.
The other alternative is to show child nodes using a multi-column layout, which requires more horizontal space than the list interface but could show more child nodes in a single view.
Each solution has its pros and cons, but there has been no attempt to compare such alternatives in terms of accuracy and speed in performing tasks such as browsing and understanding large trees of large fan-outs.
In this paper, we present a comparative evaluation on three interfaces for showing child nodes of trees with medium and large fan-outs; traditional , list, and multicolumn interfaces.
We compared the three interfaces in supporting three different tasks  using hierarchical datasets with medium  and large  numbers of child nodes at each level.
This paper is organized as follows.
We first provide related work, and then we describe in detail three interfaces for viewing child nodes.
Then we explain the design and procedure of our study, followed by the summary of our comparative evaluation results.
We close our paper with indepth discussion on the study results and future work.
Hierarchical structures with large fan-outs are hard to browse and understand.
In the conventional node-link tree visualization, the screen quickly becomes overcrowded as users open nodes that have too many child nodes to fit in one screen.
To address this problem, we propose two extensions to the conventional node-link tree visualization: a list view with a scrollbar and a multi-column interface.
We compared them against the conventional tree visualization interface in a user study.
Results show that users are able to browse and understand the tree structure faster with the multi-column interface than the other two interfaces.
Overall, they also liked the multi-column better than others.
Organizing large hierarchical information using a tree data structure is quite common.
Another example could be ontologies used in many research fields such as biomedical informatics, artificial intelligence, and library science.
Ontologies are graphs, but they are often presented as trees.
As the hierarchical structure grows bigger, it becomes more and more difficult to understand the overall structure  and to browse it efficiently.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Over the last few decades, tree visualizations have been extensively studied.
There are two main categories of techniques for displaying and interacting with trees: nodelink techniques  and space filling techniques .
Cone Trees makes the context easily visible by using a focus+context technique .
To address scalability issue of Cone Trees, Carrierre and Kazman suggested clustering nodes .
Hyperbolic Browser solves the occlusion problem of Cone Trees by using hyperbolic space instead of 3D perspective .
Degree of Interest Tree displays an overview of the tree by only showing detail for nodes with high degree of interest  values .
SpaceTree combines the node-link tree diagram with a zooming environment that dynamically lays out branches of the tree to best fit the available screen space .
While node link diagrams show topological structures well, they make inefficient use of screen space.
On the contrary, the space filling techniques remedy the situation by making full use of screen space and efficiently visualizing trees that have attribute values at leaves.
However, they do not convey topological structures well, since they are focused on containment rather than connection.
Cushion Treemaps  tried to tackle this problem by adding shading as an extra cue.
Elastic Hierarchies, a hybrid approach, combines the space efficiency of Treemap with the structural clarity of node-link diagrams .
Cheops compresses the tree by overlapping child nodes represented with triangles .
However, in spite of a very compact overview of huge trees, it is difficult to interpret the tree structures even with the various visual cues.
Given many tree visualization techniques, researchers have been trying to evaluate and compare their efficacy.
Cockburn and McKenzie reported an empirical evaluation on the usability of the cone tree interface .
They found that many participants preferred the cone tree interface to a normal tree interface, although they were significantly slower at locating named files with the cone tree interface.
Barlow and Neville compared four different visualizations with respect to their ability to communicate the topology of Authors Cockburn and McKenzie  Barlow and Neville  Plaisant et al.
They found that Treemap-style was the slowest for most tasks.
They showed that SpaceTree works better than the others for estimating overall tree topology and revisiting previously visited nodes.
SpaceTree was also found more attractive than Explorer.
Kobsa conducted a controlled experiment to compare six tree visualization techniques .
Three visualization tools were compared with respect to their suitability for different datasets and their support for tasks.
While the study demonstrated the strengths and weaknesses of those three interfaces, there were no significant differences in overall user satisfaction across them.
These efforts are summarized in Table 1 for easy comparison.
Despite the extensive previous research on tree visualizations, there has not been much effort to handle the trees with large fan-outs, especially when reading node labels is important.
An interaction technique combined with dynamic node link layout was proposed to help users navigate and select a node in a large tree .
A multicolumn layout approach was presented in TreePlus  while visualizing graphs as trees.
However, the multicolumn layout in TreePlus is not persistent in that once users open a node displayed in the multi-column TreePlus replaces the multi-column with the conventional layout.
More importantly, the efficacy of these techniques has not yet been evaluated.
In this paper, we compare three interfaces .
The traditional interface consists of nodes and edges .
Each node may have multiple rows of texts: its name and attributes of interest.
When the node name is too long to display, it is abbreviated.
Users can select a node with a mouse click.
When selected, all child nodes of the selected node are displayed on the right side .
The selected node is highlighted with red background.
Each child node is connected to the  parent node with an edge and child nodes are arranged vertically in alphabetical order.
A gray arrow is shown at the right end of a node when it has child nodes to give users a visual cue.
The traditional interface is not efficient in showing child nodes when the fan-out is large for the parent node due to its space inefficiency of wasting the parent side and cluttering the child side.
We came up with two new alternative interfaces: list interface , and multicolumn interface .
Three Tree Visualization Interfaces: Traditional , List , and Multi-Column .
TRD interface unfolds all child nodes in the traditional way.
LST interface shows child nodes in a list with a cue node with the word, "more," indicating that there are more invisible ones.
MLC interface shows all children in a tabular display with multiple columns.
Three Tree Visualization Interfaces with a child node selected to open.
TRD interface unfolds all child nodes in the traditional way.
LST interface moves the selected node to the top of the list and shows its children in a list.
MLC interface moves the selected node to the top of the multi-column view and shows the full name.
In LST and MLC, a dummy node in gray background keeps the original position of the selected node that is moved outside.
Thus, users do not have to drag up and down the whole tree to explore the child nodes as with the traditional interface.
In addition, since it renders only one edge from parent to the list containing child nodes, the view is less cluttered.
The height of the list is smaller than the vertical span of the screen by about twice the node height to give a space where neighboring branches can also be shown in the screen.
When initially opened, the list shows the word, "more" at the bottom to indicate that there are more child nodes below.
When users start to explore the child nodes by moving the cursor over the list, the "more" node disappears and a standard scrollbar appears on the right side, with which users can scroll up and down to check previously invisible nodes .
Since it behaves like the standard list, users can also scroll the list using the mouse wheel.
Upon the mouse cursor exiting it, the list view hides the scrollbar and shows the "more" node appropriately at the top or bottom .
When users select a child node in the list by clicking on it, the list dynamically changes its appearance again to move the selected child node to the outside, right to the top of it while preserving the alphabetical order among the movedout nodes .
This transformation is rendered with a smooth animation.
To avoid confusion caused by the change of the list content, a dummy node is created in the same position with the background in distinctive dark gray.
The multi-column interface also changes its appearance dynamically according to the number of child nodes to show.
If there are a small number of child nodes, MLC renders the child nodes in the same way as the traditional interface.
If there are too many child nodes to fit in the screen, all of the child nodes are displayed using a multicolumn layout .
Thus, users do not have to scroll up and down to explore the child nodes as with the list interface.
Users, however, need to drag left and right to see all the child nodes if there are too many child nodes to fit in the screen even with the multi-column view.
When the child nodes are shown using the multi-column interface, all columns are balanced so that each of them holds the same number of nodes except that the last column could have a few less nodes.
Balanced columns make sure that the screen space is efficiently used with no or minimum empty space in the multi-column view.
As in the LST, MLC also renders the background in blue when the child nodes are shown in a multi-column view.
Columns are separated by a dark blue vertical line.
Once users find a node of interest among the child nodes shown in the multi-column view, users can click on the node to expand it.
In the same way as in the list interface, a dummy node is created at the same position in the multi-column view with background in dark gray.
This transformation is also rendered with a smooth animation.
In this interface, when a node is selected and moved to the top of the multi-column view in the tabular layout, it is given a wide enough space to show its full name unlike traditional interface and the list interface.
However, the corresponding dummy node in the multi-column view still remains in an abbreviated form .
Opening and closing of a child node are supported by smooth animations in the same way as in the list interface.
Thus, in each tree with large fan-outs, there were at least three nodes with about 50 child nodes on the path to the correct answer.
In the trees with medium fan-outs, there were at least three nodes with about 25 child nodes on the path to the correct answer.
Each subject was asked to perform 3 types of tasks to measure the influence of adopting our interfaces.
We chose the following three types of tasks because they are generally used for evaluation of hierarchical data visualization as summarized in table .
Participants were asked to follow the path by selecting a node at each level that has the largest attribute value.
To minimize the effect of cognitive burden for comparing too many numbers, we highlighted three nodes with largest attribute values at each level by showing the attribute value in bold.
When participants selected a wrong node at a level, we showed a popup error message.
This task tested how well people can navigate through trees.
We recruited 18 participants .
5 of them are majoring in Computer Science and Engineering, and others are roughly equally from 8 different majors.
They are undergraduate students except for three office workers.
We screened participants so that all participants know what the tree structure is but they had never used any tree visualization tools similar to the three interfaces.
They received about $10 for their participation.
To increase motivation, a USB flash memory was given to the participant with the shortest completion time and the highest success rate.
We asked participants to revisit the previously visited nodes after performing the browsing task twice.
If participants can remember the approximate positions of the previously visited nodes, they can finish this task more quickly.
If not, they have to repeat the browsing task again at each level.
This task tested how well the three interfaces can help people remember the positions of the nodes on a previously visited path.
Datasets used for our user study were generated from the Open Directory categories dataset available at http://www.dmoz.org/.
To assure that no same tree dataset was used for different interfaces, we generated three trees with large fan-outs and three trees with medium fan-outs in addition to an example tree for training which was different from trees for real tasks.
We partitioned the top level categories into roughly equal-sized three groups to generate three trees with medium fan-outs.
We also generated three different trees with large fan-outs by partitioning the top level categories into another roughly equal-sized three groups.
To maintain the same or similar level of task difficulties across the three interfaces, we trimmed some branches when necessary.
The number of child nodes for trees with medium and large fan-outs was determined by the resolution of screen and the size of nodes.
In our experimental setup where we assumed that each node has two rows of texts , TRD can show 24 child nodes in one screen.
We ran the study as a within-subject design that each participant performed all three types of tasks, using all three kinds of interfaces, with tree datasets of two different fanouts.
Each type of task is performed twice using the same tree but with different attribute values.
We used a 3   2   3  design for our user study.
To avoid the learning effect, we counterbalanced the order of interfaces using Latin Square Design.
Participants always performed the three tasks in the order of browsing, revisit, and topology.
For each task, they performed it with a tree of medium fan-outs first and then with a tree of large fan-outs.
Before beginning real tasks with an interface, we gave participants detailed instructions and showed them how to perform the three tasks with an example tree using the interface.
In total, we provided 6 training tasks  for each interface.
After each session with an interface, we asked participants to fill out questionnaires for subjective evaluation.
The same procedure was repeated with two other interfaces.
Preferences and comments were collected during debriefing.
The experiment took about 30 minutes.
In addition, since people are used to lists with scrollbars, they would be able to quickly scroll though child nodes in the list.
Thus, we thought that it might as well be faster and more accurate than the TRD interface to follow a path.
The MLC interface unfolds all child nodes in a compact tabular layout, so users do not even have to scroll to check child nodes.
There is much less clutter in the MLC interface since it draws only one edge to the tabular view of all children just like the LST does.
We expected that the MLC interface could outperform the other two interfaces in terms of task completion time and error rate for all the three types of tasks.
One thing that we were unsure about was the effect of some extra horizontal panning for the larger width of the tabular layout than the LST interface.
Each participant worked on a quad-core PC with a 19" LCD display running at a 12801024 pixel resolution.
All results were logged by session management software  running on the computer.
For each trial, task descriptions were displayed at the bottom of the screen.
After reading those descriptions, participants were asked to click on the "Start" button to indicate that they understood the task and they were ready to start the task.
When finished, they were asked to click on the "Finish" button to submit an answer.
The session management software collected the task time, correctness of the answer, and the total length of panning.
Only for the first task type , the software also logged the number of wrong selections and the total number of nodes at each level.
We analyzed five parameters from the experiment; total elapsed time to complete the task, number of mistakes in selecting a node while finding the answers, total length of panning per task, correctness of each task, and time to select one of the children for expansion.
We also performed statistical analysis of questionnaire responses.
We analyzed the task completion time with a 3   2   3  repeated-measures analysis of variance  and Tukey's HSD post-hoc test.
We excluded the data for the incorrect answers.
We found a significant main effect of Interface , with post-hoc tests showing that the effect was driven by the multi-column interface taking significantly less task time than either of the traditional and list interfaces .
It is not surprising that using a tree with large fanouts would take more time to complete the task.
It is also expected that the "topology" task would take more time as more panning operations were needed.
We expected the traditional interface to perform poorly when browsing trees with large fan-out values.
Since child nodes spread widely in the TRD interface, it might be inevitable for users to do a lot of panning to check the child nodes.
We also speculated that it would be hard to follow the path from the root to a specific node because of the clutter made by all edges and the frequent panning activity.
However, since the TRD interface is the most common way of showing trees, most people are used to it.
Thus, we were not sure how this would affect the experimental results especially in terms of correctness and task time.
We also expected that the LST interface would be faster and more accurate to browse with less panning compared to the TRD interface because it shows all child nodes within a small list.
Regarding all the task types, the multi-column interface took less task completion time than either of the traditional and list interfaces .
In the "browsing" task, the list interface took more time than other interfaces.
Among all the possible explanations, it might be attributed to the fact that participants had to examine all the nodes to perform the "browsing" task.
Thus the list interface that hides some of the nodes at first can make the first-time node finding task difficult.
However, the list interface outperformed the traditional interface in the "revisit" task.
More interestingly, for the more complicated task, or the "topology" task, the task time of the traditional interface drastically increased; however, the list exhibited a relatively moderate increase in the task time.
Interestingly, the multi-column interface took significantly less task completion time than the list interface, but the two interfaces did not show a significant difference in the panning length.
The reason might be that the list interfaces does not need much more panning than the multi-column interface, but instead it requires the scrolling unlike the multi-column interface.
This result was obvious as the tree with large fan-out values required participants to explore larger area.
We also found a significant main effect of Task Type , with post-hoc tests showing that the effect was driven by the "topology" task requiring significantly frequent panning than either of the "browsing" and "revisit" tasks  .
This can be attributed to the fact that there was no automatic centering of the focus node in the topology task, and participants had to manually pan the tree all the way up to the root node and down to the selected target node again to finish the task.
Regarding the panning length, both of the list and multicolumn interfaces were less affected by the fan-out values than the traditional interface.
The way of displaying all the child nodes in the traditional interface might lead to drastic increase in the panning length when moving from trees with medium fan-outs to trees with large fan-outs.
On the contrary, the scrolling in the list interface and the compact tabular display in the multi-column interface saved the participants from rigorously panning the trees.
Participants might have to drag the mouse more with the multi-column interface because the tabular view takes a wider area than the list interface, but the difference might not be too big.
We recorded the number of mistakes in the first task type  and analyzed them with 3   2  RM-ANOVA with Tukey's HSD post-hoc test.
A likely reason for this might be that participants only have to check three highlighted nodes at each level for the browsing task.
Thus, the interface might influence the task completion time, but it was less likely that they could make mistakes choosing one out of three regardless of the interface type.
Length of panning in pixels was also recorded.
The panning length was measured for each task type.
We performed a 3   2   3  RM-ANOVA for the panning length.
This interface is easy to learn.
This interface is easy to use.
It is easy to understand the tree structure with this interface.
It is easy to follow the path with this interface.
Overall, I like this interface.
I would like to use this interface again.
Another interaction was found between Task Type and Fanout , indicating that the "topology" task was more sensitive to the fan-out value than either of the other two tasks .
As explained before for the main effect of Task Type, participants had to do more manual panning for the topology task than the other two types of tasks, and trees with larger fan-outs might require much more manual panning.
It is not surprising considering that it takes more time to select one if there are many more choices.
We measured correlations between the number of child nodes and the selection time for each interface.
The coefficients were transformed with Fisher's z-transformation, and the results were compared with paired t-test.
The transformed coefficient was significantly different only between the traditional and multi-column interfaces =3.01, p=.003.
This indicates that using the multi-column interface mitigated the effect of increasing number of children on the node selection time.
Participants accomplished each task by selecting the nodes which corresponded to the task description.
For each node selection, we recorded the number of child nodes and the time to select one of them.
We performed a 2-way ANOVA with Interface and the number of child nodes as fixed factors.
We found a significant main effect of Interface , with post-hoc tests indicating that MLC was significantly different from TRD and LST.
The node selection time tended to decrease in the order of the list, traditional, and multi-column interfaces .
Participants indicated that they enjoyed using the two new interfaces  more than the traditional interface.
Between the two, they preferred the multi-column interface to the list interface.
This preference toward the multicolumn interface was also confirmed by the fact that it was chosen to be the best interface by most people when asked to pick the best one .
There was a significant difference among the three interfaces in terms of the number of people who voted for each interface .
Participants also indicated that it was easiest to follow the path with the multi-column interface than either of the other two interfaces and the list interface was better than the traditional interface.
When asked if they wanted to use again next time, participants were more likely to use the multi-column interface again than the other two.
We attribute this to the fact that people can see all child nodes at once without scrolling in the multi-column interface.
It was also interesting to learn that the list interface did not outperform the multi-column interface in any tasks.
The most likely reason for this is that the list has to hide many child nodes while the multi-column interface can show all child nodes at once.
Some participants said that it was harder to understand the tree structure with the list interface than with the traditional interface.
There are two likely reasons for this.
First, the traditional interface is more familiar form of tree visualization, which showed up in the freeform comments.
Second, the visual cue  to indicate that there are more to show above and below in the list interface was not efficient compared to the visual cue  in the traditional interface.
Thus, users sometimes do not notice that there are more hidden nodes in the list until they move the mouse over the list .
Multi-column interface tries to resolve the issue of excessive occupation of vertical space for trees with a large fan-out by resorting to occupation of more horizontal space using multiple columns.
In this experiment, we controlled the number of child nodes around 50 for the large fan-out case.
Thus, participants could see all columns at once in the multi-column interface.
When many more child nodes have to be shown, users may have to pan horizontally to see all the columns.
Then the advantage of the multi-column interface that it can show all child nodes at once disappears.
In that case, a focus+context technique that does not cause an overshooting problem might offer help.
Or a horizontal scroll bar attached to the bottom of the multi-column interface can be an alternative.
Furthermore, the necessity of horizontal scrolling increases with the trees of high depth.
Additional user studies with a factor based comparison would be needed to generalize our results for other cases.
For example, further evaluations using trees with larger fanouts and with high depth would shed more light on the benefits of these alternative Multi-column interfaces.
Our controlled user study results showed promising possibilities to support our hypothesis that the multi-column interface outperforms the other two interfaces in terms of task completion time and subjective satisfaction.
We attribute this outcome to the fact that it can show all child nodes in a compact view so that users do not have to pan or scroll.
In our experimental setup, it turned out that overall, the wide width of the multi-column view did not influence participants' performance.
However, it was interesting that one of the participants who majors in visual arts picked the multi-column interface as the worst interface, complaining that the visual design of the multi-column view was too wide to see them all.
While we expected that the familiarity with the list and scrolling interface might help participants performing some tasks, it was not the case.
It was surprising to see that the list interface tended to be worse than the traditional interface for the browsing task in terms of task completion time.
We found that users browse and understand the tree faster with the multi-column interface, providing a compact view of child nodes that does not require scrolling.
Overall, users also preferred the multicolumn interface to the other two interfaces.
We thank Prof. Johan Lim  for his help with statistical analyses.
We also appreciate our study participants for their time and comments.
The ICT at Seoul National University provided research facilities for this study.
