ABSTRACT Programmable design environments  are computational environments that integrate the conceptual frameworks and components of  design environments and  programmable applications.
The integration of these two approaches provides elements  that assist users in learning both the application and its domain; in addition, an interactive "application-enriched" end-user programming environment stresses the values of expressiveness and modifiability.
By way of illustration, we present a newly-developed programmable design environment, SchemeChart, for the domain of charting and information displays.
Over the last few years, we and other researchers have investigated conceptual frameworks to address this problem.
This paper describes, and illustrates by example, one such framework: a strategy for the creation of programmable design environments .
Briefly, programmable design environments are computational systems that integrate elements of two software design paradigms that we have each propounded separately-- namely, domain-oriented design environments  and programmable applications .
The former paradigm stresses the utility of "scaffolding" within applications-- techniques  that assist new users in gaining expertise with an application and its domain.
The latter paradigm advocates the inclusion of end-user programming environments within applications .
The following section of this paper presents  the motivation behind the development of PDEs, and argues the potentially ominous nature of current observable trends in the realm of commercial software design.
The third section describes the architecture of PDEs, and discusses in greater detail their evolution from the two component frameworks mentioned above, The fourth section presents, by way of illustration, a system named Scheme Chart: this is a PDE for the creation of charts and information displays.
We conclude in the fifth section with a discussion of ongoing and related work.
THE MOTIVATION BEHIND PDES A perusal of the local newsstand--and the inevitable monthly crop of magazines devoted in large part to software advertisements and reviews--provides a compelling picture of burgeoning complexity in the evolution of software applications.
INTRODUCTION In recent years, familiarity with software applications has become a sine qua non for professionals in a variety of complex domains: architects, electrical engineers, biochemists, statisticians, and film directors  all now depend for their livelihood on the mastery of various collections of applications.
These applications, in order to be at all useful, must provide domain workers with complex, powerful functionality; but, in doing so, these systems likewise increase the cognitive cost of mastering the new capabilities and resources that they offer.
Moreover, the users of most of these applications soon discover that "software is not soft": i.e., that the behavior of a given application cannot be changed or meaningfully extended without substantial reprogramming.
Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice ie givan that copying is by permission of the Association for Computing Mechinery.
To copy otherwise, or to republish, requires a fee and/or specific permission.
Other recent reviews include similar phrases: "dozens of new commands and... features"; "packed with page-layout features"; "moresophisticated scheduling features"; and so forth.l It isin fact rare to find a description of a newly-updated program that does not report an increase in the number of features, or that reports such an increase as anything other than a distinctly positive development.
Depending on one's view, however, it is possible to read both good and bad news into these reports.
On the one hand, the reviews and advertisements give evidence of an astonishing pace of development in application software, and an outpouring of creativity in design.
But there is a disturbing note as well: will the sixth iteration of our paint program eventually include 500 new features; and if so, how will users ever accommodate them into their own work?
Moreover, will those 500 new features really improve our understanding of 
The culture of software development reflected in these reports thus places a heavy emphasis on the elaboration of large, varied, and extensive feature sets.
Clearly, some of these newly-added features will prove useful; but collectively, they signal a troubling trend in the development of applications.
On the one hand, they promote a style of use in which the endless exploration of new features takes on more importance than the patient creative mastery of an expressive medium lending itself to abstraction and composition; at the same time, they distract designers' attention from the more fundamental task of constructing tools that offer the possibility of long-term growth and creativity.
The impression ostensibly conveyed by the popular computer press is one of a plethora of ever-expanding choice; yet the feeling that often results is one not of freedom but of overload.2 Moreover, the problems posed by this style of software design are felt both by beginning users  and by longterm users .
For the benefit of long-term, advanced users, we argue that PDEs should include application-specific interactive programming environments, as eloquently advocated by Nardi : "We have only scratched the surface of what would be possible if end users could freely program their own applications... As has been shown time and again, no matter how much designers and programmers try to anticipate and provide for what users will need, the effort always falls short because it is impossible to know in advance what may be needed .... End users should have the ability to create customizations, extensions, and applications..." {p. 3} Pursuing Nardi's argument, the provision of end-user programming environments may thus be seen as one means of combatting the explosion of features described in the previous section: if advanced users are given a medium in which to build their own extensions as each task requires, there is no need for the  attempt to anticipate every possible task by means of an associated special-purpose interface feature.
Basing an application-design strategy solely on the inclusion of end-user programming environments, however, is insufficient; arguably, programming environments might be seen not as an antidote to complexity, but rather as an additional source of complexity in applications.
For beginning users, then, it is important for PDEs to include "scaffolding" elements that assist the user both in learning the application itself and in learning the  domain around which the application is built.
In summary, then, PDEs are designed to cope with complexity from a variety of different angles by integrating a number of distinct elements:  an "application-enriched" programming environment,  a "critiquing component" that monitors the user's work and occasionally offers suggestions for changes or tutorial assistance,  a "catalog" of illustrative or exemplary work that the user can employ as a starting point for his or her own work, and  embedded tutorial components that the user can access for learning about the application or domain.
These two "ancestor paradigms" merit some discussion here, since the development of our current interest in PDEs was motivated in large part by considering the respective strengths and weaknesses of these two individual approaches.
Programmable applications are systems that combine direct manipulation interfaces with interactive programming environments.
SchemePaint  is a working prototype and illustration of a programmable application: it is a graphics application that combines a "Macintosh-style" direct manipulation interface with a graphics-enriched Scheme programming environment.
The direct manipulation portion  of the application is designed to help users explore the basic functionality of the system and employ their "extra-linguistic" skills of hand-eye coordination.
The programming environment is designed to provide users with extensibility and expressive range.
This portion of the application is constructed around a collection of embedded graphics "sub-languages"  that allow users to express graphical ideas by writing short, simple programs.
The use of SchemePaint by artists has shown that they can create works that would be nearimpossible to achieve either by "pure" direct manipulation or by "pure" programming alone.
While programmable applications do, then, overcome some of the limitations of stand-alone direct manipulation systems and end-user programming environments , they have their own characteristic shortcomings.
First, programmable applications provide insufficient support and feedback to help the user achieve quality artifacts .
Second, these applications provide little support in learning the programming language , or in assimilating useful programming patterns  related to the particulm domain-specific sub-languages provided with the system.
Finally, programmable applications such as SchemePaint do not support case-based "memories" of good designs .
Domain-oriented design environments are systems that integrate construction and argumentation .
This integration is made possible by the presence of software critics  that analyze an artifact under construction, signal breakdown situations, and provide entry points to the space of relevant argumentation directly relevant to construction situations.
The interweaving of construction and argumentation is critical: stand-alone argumentation systems   are unable to contextualized discussion to the design task at hand,
While design environments have proven to be a powerful concept in a large number of domains , they themselves are not free of characteristic problems.
Their main shortcomings reside in the problems alluded to in the quote from Nardi  earlier: namely, they provide inadequate support for design tasks not foreseen by the creator of the design environment, and thus fall short in transcending the limits of envisioned activities.
These two approaches, then, appear to lend themselves well to an additional step of conceptual integration, PDEs, by combining elements of both design strategies, are intended to overcome their respective limitations.
Unlike programmable applications, PDEs include critiquing, catalog, and tutorial elements; unlike design environments, PDEs include an end-user programming language.
The following section describes a working prototype of this concept.
A PROGRAMMABLE DESIGN ENVIRONMENT FOR CHART CREATION Scheme Chart is an application for the creation of charts, graphs, and information displays.3 The program includes a direct manipulation interface for selecting the type of chart that the user wishes to create, for editing newlycreated charts by hand, and for performing a variety of standard graphics functions ; an interpreter for an extended Scheme language suited for the construction of a wide variety of chart types; and a number of critiquing, sample-selection, and tutorial elements .
Figure 1 depicts a screen view of SchemeChart in the course of a typical chart-design task.
These windows are always displayed and thus comprise the "standard set" for the application; the figure also shows a window labelled Trapezoidal Bar Chart Examples which appears in the course of the specific scenario to be discussed below.
In the Figure 1 scenario, the user has decided that she wishes to construct a bar chart; she selects the bar chart icon from the window labeled Charts in the figure.
The user selects a particular bar chart icon from the set presented--this one depicting "trapezoidal" bar charts with non-horizontal uppermost lines.
Once the selection of trapezoidal bar charts has been performed, the user can access, via menu selection, a scrollable text window containing an explanation of the icon's meaning .
The user can similarly request a text window in which sample SchemeChart procedures and expressions are shown for the creation of bar charts of this type.
This technique of programming via example modification is similar to that advocated by Lewis and Olson , and illustrated by MacLean et al.
The use of a browsable application-specific iconic "catalog" to locate examples is designed to address the problems of examplelocation raised by Nardi .
Figure 2 shows a continuation of this scenario.
The user has first edited the original trapezoidal bar chart example to include new data values; she then reevaluates the newly-edited expression.
When this action is performed, the user receives an "alert signal": the exclamation point in the Charts window flashes several times to indicate that a system critic has detected a potential problem in the graph under construction.
Each element of value-set-list consists of the set of numbers determining the the top edge of the trapezoid.
A screen view of the SchemeChart application.
Charts are created in the SchemeChart window at bottom right; the Paint Tools window provides standard paint functionality; the Charts window provides an overview of standard chart types from which to choose; and, for a given graph choice, a catalog of specific examples is provided in the Samples window.
Finally, the transcript window at top provides an "applicationenriched" Scheme interpreter.
In this figure, the user has selected a particular  type of bar chart from the Samples window, and has used a menu option to access relevant programming examples for this type of chart; the examples are shown in the window labelled Trapezoidal Bar Chart Examples.
The user has evaluated the sample expression to produce the trapezoidal bar chart shown.
The user now has the option of ignoring the critic's intrusion or requesting  to view the text associated with the newly-invoked critic.
In Figure 2, the user has in fact elected to request the critic's response; the Large Bar Chart Value Differences window thus invoked presents the system's critique of the newly-evaluated expression.
In this case, the discrepancy between the two bars to be plotted  is too large to warrant presentation in a bar chart, which typically is used to display more moderate distinctions between values.
In Figure 2, the user has responded by redoing the original language expression so that it plots the natural logs of the given numeric values; when this rewritten expression is now evaluated, the flashing critic alert does not appear, thus indicating that the system has found no reason to suggest changes in the user's construction.
In Figure 3, the user has continued her work by using the system's "query mode" .
Here, the trapezoidal bar chart has been plotted; by selecting the query mode option, the user can now select  portions of the newlydrawn chart.
In Figure 3, the user has dragged the mouse over the y-axis of the graph; the system highlights the axis to show that it is a "query-able" object.
When the mouse button is released at this point the user is presented with a text window listing a variety of SchemeChart procedures that can be used to change axes , Similar procedure-description windows may be viewed for  axis labels and tickmarks; thus, by invoking the query mode the user is able to work "backward" from a newly-created artifact to the relevant portions of the application's language vocabulary.
This technique is similar to that developed by Redmiles  in the context of examining programming examples for software reuse.
The user edits the sample expression in the window at left to create a new trapezoidal bar chart; when this new expression is evaluated, the "critic alefl signal"  flashes several times to indicate that a potential problem has been-spotted with this newly-created chart.
The user requests the critic message , which indicates that the differences between plotted bar chart values is extremely large in this case; the critic suggests a logarithmic value scale.
The user rewrites the expression  and plots the new chart at right.
Rw'e3.Here,the userselects ''auerv mode'' .
By dragging the mouse over a p&ticularelement of the newly-creat~d graph , the user canaccess alist of language procedures relevant to the manipulation of this element.
Again, many of the specific decisions in SchemeChart diverge from those, e.g., of the "programming-by-example" community  ; but the ideals of providing users with techniques for modifying and extending applications are shared in both approaches, Mackay  and Gantt and Nardi  respectively provide cautionary and encouraging empirical case studies of how user-modifiable systems are employed and appropriated within organizations.
Finally, in their focus on integrating critiquing, argumentation, and design activities, PDEs reflect most strongly the theoretical framework of Schoen , who portrays design activity as productive interplay between both a tacit and formalized  understanding of designs under construction.
PDEs, as complex applications in their own right, raise many issues involving usability and learning  which we have begun to investigate; as in our earlier efforts, we expect user studies to prove invaluable both in rethinking our ideas and exposing our mistakes.
Our hope is that PDEs can eventually suggest means for mitigating  the apparent tension between expressiveness and learnability in application design.
In summary, then, the programming environment within SchemeChart-containing as it does an enriched Scheme dialect for the representation and display of chart objects-- provides a medium in which advanced users can create a wide variety of designs4; while the system's critics, iconic catalogs, menu-accessible tutorial material, and "queryable objects" provide means for learning both about the language and about appropriate techniques  for designing charts and graphs.
ONGOING AND RELATED WORK As a software-design strategy, the notion of PDEs reflects  a variety of influences from related work, In providing user-accessible programming languages, PDEs reflect an outlook similar to those of the Logo  and Boxer  language-design efforts .
ACKNOWLEDGMENTS The authors would like to thank the members of the Human-Computer Communication group at the University of Colorado who contributed to the conceptual frameworks and systems discussed in this article.
The research was supported by the National Science Foundation under grants IRI-9015441 and MDR-9253425.
The first author is supported in addition by a National Science Foundation Young Investigator grant .
4. diSessa, A. and Abelson, H. Boxer: A Reconstructible Computational Medium.
Communications of the ACM, Vol.
Eisenberg, M. Programmable Applications: Interpreter Meets Interface.
Artificial Intelligence Laboratory Technical Report 1325, MIT, 1991.
Fischer, G., Grudin, J,, Lemke, A. C., McCall, R., Ostwald, J. , Reeves, B. and Shipman, F. Supporting Indirect, Collaborative Design with Integrated KnowledgeBased Design Environments Human Computer Interaction, Vol.
The Role of Critiquing in Cooperative Problem Solving.
ACM Transactions on Information Systems, Vol.
Fischer, G., Lemke, A.C. Construction Kits and Design Environments: Steps Toward Human ProblemDomain Communication.
A. Gardeners and Gurus: Patterns of Cooperation Among CAD Users.
CHI '92 Conference Proceedings, pp.
Girgensohn, Knowledge-Based End-User Modifiability in A.
Redmiles, D. F. Reducing the Variability of Programmers' Performance Through Explained Examples, INTERCHI '93 Conference Proceedings, pp.
How to Draw Charts and Diagrams.
The Reji'ective Practitioner: How Professionals Think in Action.
E. The Visual Display of Quantitative Graphics Press, Cheshire CT 1983.
