The integration of these services occurs automatically based on user interaction with one of them.
The user highlights some text in the window of one service, and CyberDesk determines the type of the text to suggest how the user can invoke behavior in the other services using that text.
The suggestions made by CyberDesk appear as a dynamic button bar in a separate "ActOn" window.
Future computing environments should provide ubiquitous services that find the user by being available on any device and that are automatically integmted with a changing set of surrounding services.
In this note, we describe the CyberDesk project that addresses automatic service integration.
One approach to integration is a tightly-integrated suite of tools that take advantage of known services.
This approach, available in many commercial personal productivity products, is unsatisfacto~ for two reasons.
First, it requires the designer to predict how the user will want to integrate a set number of services.
SeconL it forces the user either to be satisfied with what the designer has provided or to program additional and sometimes complex relationships between existing services.
The CyberDesk prototype shows that it is possible, however, to provide a service integration tlamework that removes most of the proburden , provides _ing greater flexibility to the user and automatically suggests how two services can be integrated based on natural user input.
For example, while the user is reading some mail, simply highlighting someone's name in the message can tigger the system to inform the user of all of the services available that are relevant to that name.
The e-mail tool in Netscape offers similar but limited fimctionality in automatically recognizing URLs and e-mail addresses.
Figure 1 A sample interactionwith the CyberDesk.
Highlighting a name in the e-mail browser suggests several other actions that can be performed using that name.
For example, at the top left in Figure 1, is an e-mail message informing Anind about the great work gorng on in the Future Computing Environments group at Georgia Tech.
Anind is intrigued and decides to investigate finther.
Highlighting "Gregory Abowd" causes the ActOn button bar to suggest some actions .
One suggestion is to look up the name in an available contact manager.
Figure 2 continues the scenario.
After speaking with Gregory, Anind wants to visit Georgia Tech, but fmt he will do some research.
He selects the fmt part of the URL given in the message, and the ActOn buttons change .
Anind decides to view the URL  and use AltaVista to retrieve a list of Web pages that referencethe URL .
Clicking on the button invokes the Switchboard service, completing the integration without requiring any change to the fimctionality of either service and without any programming effort from the user.
Currently, this is simple wrapper code that informs the type converter and ActOn applets of the types the service displays and accepts.
Ultimately, this service information will be automatically detectable at runtime by adherence to component sofhvare initiatives, such as Java Beans .
From the user's perspective, CyberDesk oflkrstight integration between different services, but with the fleedom to introduce new services, and upgrade old services without a loss of integrating power.
Integrating behavior is actively suggested by the system, removing the need for the user to remember how services work together.
It is fairly clear from our use of CyberDesk that it suffers from the potential problem of having too many ActOn buttons generated; the user could be swamped by too many choices in an overexpanding button bar.
We can certainly investigate different interface representations of the button bar to help manage this.
It will be more interesting to apply some intelligence to the ActOn applet to use contextual information and user histo~ in determining the relevance of potential fiture actions and reduce the number of suggestions.
Another potential user problem is the reaction to a constantly changing interface.
There is a clear link between our work and the adaptive user interface community.
However, most of that literature concentrates on adapting a computer interface to the changing capabilities of the user, not changing capabilities of the software environment .
CyberDesk services are Java applets collected on a single Web page.
The applets are either local services, such as the e-mail browser and contact manager shown in the scenario, or simple wrappers around network services, such as Switchboard or AltaVista.
A service can generate  andor consume  data of different types, as shown in Figure 3.
Also included on this page are a set of type conversion components that specialize in translating generated data horn one type to another.
A final applet on the page provides CyberDesk's integrating behavioun the dynamic Actfh button bar.
In the case of plain text this could be done by comparing the string to common formats for representing the various types; for names you might use title jirstname lastname, and similar patterns can be used for dates, URLs, e-mail and mailing addresses.
The type converters do not have to be overly clever, as the user provides a very focused subset of the data to look at by explicitly selecting it.
Finally, the user's selection, plus any extra type information generated by the conversion process, is observed by the ActOn integrating applet and a set of potential actions for that data is suggested.
Inste~ our approach is to present the user with an environment in which the required functionality comes to find the user.
This environment requires no extra programming burden for the designer or user of a service.
It is a more flexible and useful paradigm for interaction in future computing environments.
Schneider-Hufschmidt, M., Kuhme, T., Malinowski, U.
Adaptive User Interfaces: Principles and Practice.
