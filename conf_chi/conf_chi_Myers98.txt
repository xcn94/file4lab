Writing scripts  can be helpful for automating repetitive tasks.
Scripting facilities for text editors like Emacsand Microsoft Word have been widely used and available.
However, for graphical applications, scripting hasbeentried many times but hasnever beensuccessful.
This is mainly due to the data description problem of determining how to generalizethe particular objectsselected at demonstrationtime.
Previoussystems havemostly tried to solve this using inferencing, but this has a number of problems, including guessingwrong and providing appropriate feedback and control to users.
Therefore, the Topaz framework does not use inferencing and instead allows the user to specify how the appropriateobjectsshould be found, This is achievedby recording changesto which objectsare selectedand searches for objects,so that scripts can be written with respect to the selectedobject, in the same way as Emacs keyboard macros.
Furthermore, all values can be explicitly generalizedin a number of ways, and scripts can be invoked as a result of other commands.
By leveraging off of Amulet's command object architecture, programmersget these capabilities for free in their applications.
The result is that much more sophisticated scripting capabilities available in applicationswith no extra work for programmers.
To createa script, the usertypically goesinto record mode, then performssomecommands,which operatenormally in addition to being recorded.
The recordedscript can then be re-executedlater in different contexts.
For example, the keyboard macro facility of the Emacs text editor  is easyto use and extremely useful for manipulating the text.
Many Emacsusersclaim that such facilities are essentialto usethe editor efficiently, especiallywhen making repetitive changes.Scripting facility also exist in Microsoft Word using Visual Basic, and spreadsheets have a long history of creatingscriptsby example.
However, for graphical applications, such scripting facilities have mostly been unsuccessful.Graphical applications hererefers to programssuch as drawing editors, CAD programs, graphical programming languages, and iconic manipulation programs such as "visual shells" which are graphical interfacesto the file system.
We have analyzed the fundamentalfeaturesthat allow text editors to be successfully scripted by demonstrationand then incorporatedthese featuresinto a graphical editor framework called `Topaz."
Topaz stands for panscripts of programs activated with zeal.
The result is that powerful and sophisticatedscripts can be createdby examplein any graphical program.
This is in contrast to special-purposescripting languageslike Chimera that only work for a drawing editor.
With Topaz,the useris able to:
Creating scripts  for textual applications like text editors and spreadsheets has a long and very successfulhistory.
Thesescripts are important for automating repetitive tasks that are so common in direct manipulation interfaces.
They can also be useful for creating new commands and for customizing generic applicationsto be more effective for specializedtasks.
Permission to make digit&hard copies of all or part of this mr&rial for personal or classroom use is granted without f= provided that the copks .arenot made or diibuted for profit or commercial advanuge.
Insert a new node in a row of nodesand move all of the nodesthat are on the right of the insert point further to the right to makeroom.
Createa bar chart by making a row of rectangleswhose heights dependon a given a list of numbers.
Whenever a string is created, create a rectangle that is 10 pixels bigger than the string and center the rectangle behind the string.
Perform the sameedits to a set of graphics files, for example to replace all uses of an old logo picture with a new picture, and move all of the other objectsa few pixels to the right and down to makeroom.
Of course,a particular application might have someof these commandsbuilt-in, but the goal here is to allow end users, who will not necessarilyknow how to program, to construct these kinds of scripts by demonstrationwhen the application doesnot have the built-in commandthat they need.
We have implemented the Topaz framework using the Amulet toolkit , leveraging off of Amulet's command object architecture .
The result is that graphical applications get these sophisticated scripting facilities without any extra code in their applications.
At this point, thesefacilities have been tested with a drawing program and a circuit editor, and we are working on a visual shell.
A sample circuit design program created using Topaz showing a circuit.
The inset picture is the result of a script that convertsan And gate and a Not gate into two Not gatesand an Or gateand reconnectsthe wires.
The result is that users can createscripts by demonstration that perform such actions asreplacing objectswith patterns, performing repetitive edits, and creating graphical abbreviations.
Specific examplesof scripts createdwith Topaz are to: e Build interesting patternslie the "Sierpinski Gasket" of Figure 1.
In a text editor like Emacsand Microsoft Word, most operations are performedwith respectto the cursor, and there are a wide variety of ways to move the cursor using the keyboard and the mouse.
These include moving the cursor forward and backwardby characters,by words, by lines, or by sentences.
The movement operations work in text documentsbecausethe content is an ordered sequenceof characters, so forward and backwards are meaningful.
Furthermore,for text with any kind of structure 
Scripts for repetitive actions take advantageof this ordering.
A very common idiom used in Emacs keyboard macros is to move or search to the next occurrence of a pattern, and then perform operationson it.
This script can then be repeateduntil all occurrencesare processed.
It is interestingto note that many powerful scripts can be written in this way without using conditionals or iterations, other than repeatingthe entire script until a searchor move fails.
There are no equivalent operations in graphical programs.
Replacean And gate and a Not gate with the equivalent circuit according to DeMorgan's law, connectingall the wires appropriately, asshown in Fi,aure2.
The user has full control over the whether the width of the side pieces and the height of the top is proportional to the size of the rectangleor constant.
PAPERS the wrong object is at that location.
IndeedMicrosoft Word turns off the use of the mouseto move the cursor while recording a script.
Many attemptsto provide scripting in graphicalprogramsthereforetry to infer the meaning of the mouselocations .
Other programstry to match the objects that were used in different executionsof the script to try to creategeneralizations.
Theseprograms must use heuristics which meansthat the systemcan guess incorrectly, and often will not infer the correctprogram.
Our first idea was to go top-to-bottom,left-to-right, but this is not well-defined for some layouts of objects, and the backwardsorder is often not the reverseof the forwards order .
Therefore, we decided to make the primary order for traversing objectsbe the display "Z" order from back to front.
This hasa numberof advantages: it is well defined, reversible, and usually correspondsto the chronological order in which objects were created.
A sophisticateduser can also take advantage of this order in scripts.
For example,to makesure that a script that createsarch inside of rectangles does not create arches inside the arches themselves,the script might start at the end of the list and move backwards.
Since new rectanglesare always created after the current end of the list, the selection will never get to the rectangles of the arch.
The current user interface for moving the selection is that the HOME key on the keyboard selectsthe first object, the END key selectsthe last object, and the left and right arrow keys selectthe next and previous objects in the Z order.
If the shift key is held down, then the new object is addedto the selection,in the sameway as the shift key works with the arrow keys for text selectionin Microsoft Word.
All of the selectionmoving operationsbeep when a movementis not possiblebecause there are no more objectson which to operate,andthis stopsthe execution of the script.
There are somecaseswhere it is important to find the next object in a graphical direction, so there are commandsto selectthe next object to the left, right, up, down, inside or outside of the current object.
These operations find the nearestobject in that direction to the selectedobject that overlaps in the other dimension, so the reverse direction does not necessarilychoosethe sameobjects, as shown in Figure 3.
Theseoperationsare available as buttons at the bottom of the searchwindow .
Moving the selection to the right will selectrectangle2, but then should oval 3 or 8 be selected?
Currently, when moving to the right, Topaz selects objectsin the order 1,2,3,4,5.
But then moving the selectionleft from 5 selects5,4,6,7.
The approachtaken in Topaz is to allow the userto specify how to find the correct objectsusing capabilities similar to those found in text editors, rather than trying to infer the generalizations.
In graphics programs,the selection  correspondsto the cursor in text editors, and most commands operate on the selectedset of objects.
The innovation in Topaz is that userscan changewhich objectsare selectedin graphical applications in a variety of ways, and have these recordedin a script.
Text has a natural order, so commandslike "forward" and "backward" are meaningful.
However, in a graphicalapplication, it is not so obvious what the order for all objects would be.
The requirementsfor the ordering is that it have a well-defined first and last object, moving forward from the first object should go through every object exactly once, and moving backwardsfrom the last object should selectall the objectsin the reverseorder as forwards.
It would also be good if the order made senseto users.
However, in many cases, the particular order doesnot matter-it is often only important that eachobjectbe visited exactly once.
Often it is important for scripts to only executeon specific objects.
Previous demonstrationalgraphical systemshave often tried to infer the properties from one or more examples, which is error-prone.
Instead, Topaz allows the user to search for the appropriateobject.
This graphical search was introducedin 1988  but still is not available even in sophisticated graphics editors like Adobe Illustrator, although it is provided by someCAD programs.
Topaz extendsthis searchingto makeit work in any graphical application, not just a drawing program.
All objectsin Amulet have a well-defined protocol for querying their properties.
Topaz uses this to find what types of objects can be createdand what parametersare available for each type.
This does not require any new code in the application.
Of course,this dialog box could be madeto look much nicer if it was designedby hand, but we wanted to minimize the amount of custom code neededin each application, so we used a straightforward automatic mechanismto generatethe search dialog.
The search  dialog box automatically created by Topaz for the graphical editor of F&we 1.
The valuesfrom an arc  have beenloaded.
To perform a search, the user can type in a value, or load the values from an existing object There are eight ways to searchfor the next object,using the buttons at the bottom of the window.
Find Next and Previous search in the 3" order, and the othersfind in graphical layout order.
All searches start Corn the current selection, or if nothing is selected, then from the first item in that order.
For example, when searchingto the Right, the first item is the left-most.
This is useful for finding enclosedobjects,like the label inside a box.
If nothing is selected, Find Inside starts from the back-most object, and Find Outside starts from the front-most When searching,Topaz only matcheson the properties that have their checkboxesselected,so if nothing is checked,the search is through all objects.
Selecting various properties supports more complex searches,such as "find the wire which is down from the selectedobject" which was needed for the script for Figure 2.
Unlike most other demonstrationalscripting facilities where the user has to think aheadthat the next operations should be in a script, Topaz allows scripts to be createdby selecting the desired commands from the list of commands displayed in the undo dialog box .
This list shows all the previous commandsthat have been executed.
PAPERS The new feature added by Topaz is the ability to select a sequence of commands to be included in a script.
Topaz allows noncontiguous sequencesof commandsto be selected , so that unlike other systems,the sequenceof commands for the script do not haveto be executedflawlessly without errors.
Once selected, the commandsare expanded to show all their parameters, and are displayedin the scripting window .
Now, the user can edit the script in various ways  How the script will be invoked can be specified .
When the script is ready, it can be executed,saved,or removed.
After generalizing, the value displayed in the script is replacedwith a descriptive placeholder.
Bringing up the dialog box for a placeholderwill allow it to be edited, or changedback into a constant.
This is related to the "data description" property sheetsin the SmallStar visual shell , but here they are domain independent.
If an application has a special type of value, the programmercan add a new dialog box to handle it, but the built-in dialog boxes seem sufficient for many applications.
Also, the dialog boxeshave a "custom" option that will in the future link to a programmingsubsystem where any expressionfor computing the values can be entered in a language like JavaScriptor Visual Basic.
However, we have found the built-in optionsto be sufficient for most scripts.
Many previous programming-by-demonstrationsystems seemto have assumedthat all scripts would work the first time and never needto be changed,since there was no way to edit the recordedscript .
In fact, somesystems do not even have a reasonablerepresentationof the recorded script that can be viewed.
Topaz provides full editing of the script, including selecting the commands and deleting, cutting, copying, and pasting them.
Also, commands in the undo dialog box  can be selected and inserted before or after any statementin the script to add new commands.
In order to debug the script, the user can select specific commands and executejust thosecommands, or single step through the script one commandat a time.
The results of the commandswill be visible in the main application window, so the user can check if they are operatingcorrectly.
Becauseall commands can be undone,including the execution of the script itself, it is easy to back out of any operationsthat are incorrect.
An important capability not available in other systemsthat is this editing makespossible, is the ability to demmstrute new commandsto be addedto the middle of a script.
The user can single step the script to the appropriatepoint, then execute the desired new commands,which will appearin the undo dialog box.
Thesecommands can be selectedand inserted into the script at the current point.
Then the user can continue single steppingthe script to makesurethat the subsequent script commands still work correctly.
The dialog box for generalizing objects,with the scrint window in the background.
There are three built-in dialog boxes: one for generalizing objects,one for positions, and one for all other values.
The dialog box for generalizing objects  lets the userpick how to get the objectwhen the script runs:
Use a constant object .
Use whatever objects are selected at that point in the script.
Often the user will arrange for the appropriate objectto be selectedbeforeexecutingan operation.
Pause the script and askthe userto selectsomeobjects.
Use the object or objects that are returned or operated on by a previous operationin the script.
For example,a resize operation might be generalizedto operateon the objectreturnedby a previous createcommand.
The user specifies which previous commandto use by selecting the commandin Figure 6 and clicking the "Load" button in Figure 7.
There are two options for this, because many commandsreturn a variable number of objects  and there must be a way to specify that subsequent commands operateon all of the objects,no matter how many, or on a particular object from the set.
An important feature of Topaz is the ability to generalize the parametersof operations.
The top of the generalizing dialog box allows all of these usesto be replacedat the sametime, or just the specific one that the user clicked on.
Topaz performs one generalization automatically.
When a set of commandsis brought into the script window, Topaz first checksto seeif any of the commandsare the kind that createa new set of objects.
This includes createcommands  as well as selection commandsthat define a set of objects.
Topaz searches for any subsequent uses of theseobjects,and if found, replacesthe occurrences with placeholdersthat refer to the results of the create commands.This replacementis made automatically becausein almost every script, if an object is createdand then manipulated, when the script is run, the manipulation should operateon the newly createdobject and not on the original constantobject.
For example,all of the object gen,eralizationsfor the script of Figure 6 were automatically performed by this mechanism.
If the user really wants to use tie original, constant object, the automatically generated placeholder can be edited using the standard dialog box  back to the constantvalue, but this hasnever beennecessaryso far.
When an option is chosenthat depends on anotherobject, the user can select which object to use.
The normal choice is whatever is selectedwhen this commandruns.
All other types of values use a dialog box which allows the value to be constant, the current value from the palette if there is a palette registered for this type of value , a value chosen from a list, a value that the usertypes, or the value computedby a previous command.
One use for the list of values is to create a script that will processa number of files.
The file Open and Save-As commands have the filename as their parameter,so the user can record a script with open and save in them, and then generalizethe filename parameterto either be a list of filenamesor to ask the userfor the filenames.
Generalizing the values integrates well with the Search dialog box, since the searchcommanduses as its parameters the values that were searched for.
The user can therefore generalize parametersfor a search in the same way as any other command,for example to searchfor the next object whose color is the sameas the selectedobject, rather than someconstantcolor.
Topaz supportsa variety of ways to invoke a script.
First, the Execute button on the script window  can be used.
Second,Topaz supports the conventional ways to invoke scripts, using a keyboard acceleratoror by putting the script into a menu of the application.
In the future, scripts will be able to be executedat a certain time .
Figure S. The dialog box for generalizing locations, along with the pop-up menus for setting the left, top, width and height.
The picture in the lower left of the dialog box showsthe result of the Left andTop selections.
Figure 8 shows the dialog box for generalizing locations.
The user can click on the check boxes at the left of the dialog box to choose which parametersof the location to generalize.
The options for the left coordinate are to be constant, a difference from the old value, a value specified by the user at run time either by clicking in the picture or typing, or a value computedwith respectto a diierent object either by being to the right outside,right inside, center, Iefi inside or left outside.
If the centeris selected,then the text input field is for the percent of the way across.
For all other relationships,the text box is the offset from the other object The top propertiesare similar.
Topaz also supports a novel way to invoke scripts: before or after any other command is executed.
This idea was proposed earlier , but it has never previously been implementedin any system.
The idea is that the user not only can demonstratethe script to be executed, but also which commands the script should run after or before.
PAPERS a rectangle,the user brings up the invocation dialog box of Figure 9.
Next, the user selectsthe "After" option, then demonstrates a Text-Create operation and selectsit in the main undo dialog box  .
Finally, the user hits the "Load" button in Figure 9 which loads the commanddescriptioninto the field.
By default, all the parameters to the commandare generalizedso the script will be invoked whenever any Text-Create commandis executed.
This will put a rectanglebehind any strings created.
Alternatively, the user can select any parameterand use the original value of the exampleor any of the other generalizationsdiscussed in the previoussections.
This provides the ability to createmany intriguing scripts.
For example, graphical abbreviationscan be defined such as "whenever the text `logo' is created,delete it and put in the logo picture read from a file."
Since scrolling operations can be recorded,a script to scroll down after a search could be created.
To further the analogy with Emacs,scripts can be executed a specified number of times .
The user can type a value or, like in Emacs,"U will multiply the current count value by 4.
For manyscripts, the userwill pick somereahy large numberof times to execute,because,also lie Emacs,all scripts are stoppedif anything causesa beep.
Error dialogs always beep, and searchesand movementsof the selection causesa beep if they fail, and nothing beepswhen everything is OK, so this is a good heuristic for stopping script execution.
Scripts are representedas a commandlike any other command, and are listed in the undo dialog box, so the execution of a script can be undone,repeated,or even included in other scripts.
The count of the numberof timesto executeis the parameterfor a script , so a recursivescript could evenbe written that would stop when the count got to zero or when therewas a beep.
The selectiverepeathasa companionmethodthat testswhether the command can be executed in the current context, and this is usedby the script before eachcommandis executedto verify that it can be executed,and if not, an appropriateerror message is provided.
This makesit safefor Topaz to allow the userto insert or deletearbitrary commands in the script, since at run-time there will be a check to make sure that eachcommandcan execute.
Commandobjectsalso adhere to a standardprotocol for describing their parametersand generatedvalues,so Topaz can inspect, display and generalize the valuesof any command.
Using the selective repeat mechanism,instead of just invoking the original Do method again, has a number of advantages.The Do methoddoes not take any parameters, since the values to be used come from the selectedobject, the palette,and pop-up dialog boxesthat ask the user.
This is a very annoying feature of the scripts in Microsoft Word-they keep popping up the dialog boxes when the script is run.
Pursuit  used"me&dialog boxes" to allow the user to specify whetherthe dialog box should appearat run time, and if so, what parts should be filled in by the user, but this required that Pursuit parseand understandthe dialog boxes.
By using the selectiverepeatmethod,the parameters can be passed to the operation directly since usually Topaz computesthe values.
Of course, it would also be useful to let the user pop up the original dialog boxes when desirable,by using the original Do method of the command rather than the selective-repeat.
The commandobject architecturealso helps Topaz record the scripts at the appropriatelevel.
Scripts recordedat the mouse-movement-level fail becauseobjects are not at the sameplace the next time.
Applications written in Amulet must already encodethe semanticsof their operationsinto commandobjects,so recording at this level allows Topaz to createrobust, repeatableand generalizablescripts without requiring Topaz to try to infer the "meaning" of the operations or of mouseevents.
Also, userscan invoke commands in any way that is convenient  and theseare recordedthe sameway in scripts,sincethey all usethe samecommandobject.
Amulet's built-in save and load mechanismallows applications to save and load their files with a minimum of code.
All that is necessaryis to register each of the main types that the user can create, and the important parametersof those types.
Topaz takes advantageof this information to automaticallyconstructthe Searchwindow, so again no extra work is requiredof the programmer.
Most graphical applicationsuseAmulet's selection handles widget, and so the selectionmoving operationsand searching come for free when this widget is used.
Note that a Replaceoperationas in  could not be addedwithout new code in the application, becauseTopaz would not know how to createnew objects.
Due to the way that thesecommandobjects are designed,they already provide Topaz with most of the information it needs.
Command objects have a "Do" method that performs the operation, and an "Undo" method for undoing.
They also contain methods to support selective-repeat and selective-undo which are when the user selectsthe commandin the list of Figure 5 and asksfor it to be repeatedor undonein the current context.
ACKNOWLEDGMENTS For help with this paper,I would like to thank Bemita Myers, Rob Miller, Rich McDaniel, and Bruce Kyle.
This researchwas partially sponsoredby NCCOSC under Contract No.
The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressedor implied, of the U.S. Government.
The programmer should register the palettes in the application, so that the value generalizationcan tell if the selectedvalue can be computedfrom a palette.
Also, the main menubarsshould be registeredwith Topaz so it will know how to add scripts to the menusif requestedby the user .
Topaz is mostly working, and has been integrated with a drawing program and a small circuit designprogram.
The main hole is the lack of a general-purposepro@unming language for the "custom" generalization options.
We would also lie to investigate writing scripts that work across multiple applications.
As we.get more experience with users and test Topaz with a wider variety of applications, we will continuously refine the interface.
The idea of dialog boxes to generalii parametersin scripts was used in the SmallStar visual shell, and Topaz provides this capability for any graphical application.
Graphical search was introduced in 141for a graphics editor, and Topaz allows it to be used in scripts and for multiple types of applications.
Topaz is also the first to allow the generalizationof the parameters of the search.
Chimera  supported graphical histories of operations in a graphics editor, and allowed commandsto be selectedfor scripts, but supportedonly rudimentary generalizations.
Topaz allows the user to construct sophisticatedscripts by demonstrating the desired commandsand then explicitly generalizing the parameters,usually without the need for conditionals and embeddediterations.
This is achievedby generalizing the cursor movementcapabilities from Emacs to a graphical domain.
Topaz also allows scripts to be executed before or after other commands.
These capabilities are provided to userswith almost no effort on the part of the application developer.
We hope that thesecapabilities will be generally useful, and that they will appearin many more kinds of applications.
