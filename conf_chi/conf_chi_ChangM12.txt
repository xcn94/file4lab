Examples have been widely used in the area of web design to help web authors create web pages.
However, without actually understanding how an example is constructed, people often have trouble extracting the elements they want and incorporating them into their own design.
This paper introduces WebCrystal, a web development tool that helps users understand how a web page is built.
WebCrystal contributes novel interaction techniques that let the user quickly access HTML and CSS information by selecting questions regarding how a selected element is designed.
It provides answers using a textual description and a customized code snippet that can be copied-and-pasted to recreate the desired properties.
WebCrystal also supports combining the styles and structures from multiple elements into the generated code snippet, and provides visualizations on the web page itself to explain layout relationships.
Our user study shows that WebCrystal helped both novice and experienced developers complete more tasks successfully using significantly less time.
However, these techniques cannot fully satisfy every user's needs since people have different requirements and aesthetic preferences for their web pages .
Previous research has shown that one popular way for users to build a customized web page is through the use of examples, and that this results in pages with higher ratings .
It has also been reported that web designers in the real world often look at other people's websites, pick the pieces they like, and combine these pieces in their own designs .
In general, a popular way for developers to learn how to create code for any task is to look at examples .
One of the participants in our user study mentioned his own web design experience: "The best thing about web design is that all the code is open source... you can always go to the websites you like and see how they work."
Potentially, every web page can serve as a design example for people who like some aspect of its design or want to learn how it achieved some effect.
Assisting reuse of desired design elements from a web page could thus be very beneficial to many web designers.
Increasingly, Internet users with minimal technical training are creating their own web pages.
This involves not only authoring the content, but also designing the appearance and behaviors of the web pages.
Good design is important to improve the readability and usability of the pages, and also to reflect the unique personality of their creator.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Even after deciding on a design for a web page element, a person must know how to achieve that design.
Thus, people must serve as both the designers for the style of a web page, as well as the developers, who write the code to implement the design.
Reproducing a complex design from an example requires a person to have a decent knowledge about web development languages, even when using modern tools like Adobe Dreamweaver or Microsoft Expression Web.
Furthermore, people often just want part of the design  and thus must identify which part of the code actually is responsible for the design aspect that is wanted.
Consequently, to create a high-quality result, the ability to develop a web page to achieve the desired design can be as important as the ability to come up with a good design in the first place.
Design examples are not useful if people cannot realize them in their own final work.
To help address this problem, we built WebCrystal , a tool that assists in the low-level programming tasks required to learn from and reuse examples as part of the web authoring process.
Currently, WebCrystal does not handle JavaScript, Flash, AJAX or other scripting languages.
WebCrystal allows users to select any web element of a page that was created with HTML and CSS, and then choose from a set of "how" questions about how to recreate the different aspects of the selected element.
The tool then answers the questions by  providing an automatically generated human-readable textual explanation using the element's HTML and CSS information, and  generating a customized code snippet for the users to recreate the design using the selected attributes.
WebCrystal makes the following contributions: * A novel example-based web design tool for extracting and combining styling information from existing websites, and for helping designers understand how existing sites use HTML and CSS to create desired appearances.
This includes how to achieve the positioning of elements.
The explanations included generated code in a variety of userselected formats  that will reproduce the element.
This evaluation showed that WebCrystal users had significantly higher task completion rate and faster task completion time in reproducing web elements from a given web page, compared with people using Firebug , a state-of-the-art web development tool.
WebCrystal is inspired by previous systems Crystal   and FireCrystal  .
In WebCrystal, the goal is to make the construction of the HTML and CSS parts of web design "crystal clear" to the user, so that the user would be able to easily reuse them in their own pages.
The tool was originally intended for novice and intermediate HTML and CSS developers, which we believe are the majority of the web authors today .
In fact, in our user study, we found that even advanced developers also benefited from and liked using WebCrystal.
WebCrystal was inspired by several previous systems that allow users to ask questions about a program's execution, as a way to provide more focused answers.
Crystal  explains a word processor's behaviors by letting users ask about why elements look the way they do.
Crystal not only provides a textual explanation, but also highlights the user operations that affect the element, so the user can more easily fix problems and control the operations.
The Java Whyline  is a debugging tool that allows developers to ask "why" and "why not" questions about a Java program's output and leads developers backward to its causes.
In WebCrystal, we adapted this idea of letting users ask questions in the different domain of web authoring.
WebCrystal allows its users to select the element they want from a rendered web page, and presents a code snippet that can recreate that element.
Some prior systems have used a related approach in helping people make use of an example more efficiently by interacting with the output and displaying the corresponding source code.
FireCrystal , for example, lets users record the interactive behavior of a web page and shows the JavaScript code that might be responsible for that behavior.
Rehearse  is an extension for the Processing IDE that highlights each line of code in an example as it is executed to help programmers quickly identify which line of the code is relevant.
Many systems help with finding and presenting examples.
Some systems allow users to specify layout information through sketches to retrieve desired designs , while others  support retrieving and browsing related designs from example galleries.
WebCrystal helps after the examples have already been found, and assists users to incorporate desired examples into their own work.
Some prior systems have focused on reusing examples without requiring users to look at or understand any code.
CopyStyler  copies the style of text elements from one page to another.
Adaptive Ideas  pre-annotates examples with metadata about properties and ranges of values, and then it can combine the user-selected attributes into a new page.
Bricolage  maps some aspects of the style of one web page onto the content of another using an AI algorithm to rapidly generate a new web page.
In contrast to these systems,
Figure 2:  is the web page under investigation, showing the purple highlight and the dotted box around the selected element.
Here, it explains the text properties.
The main goal of WebCrystal is to enable the users to quickly reuse one or more aspects of an example in their own work.
Ideally, WebCrystal would be integrated with a code editor, so the code extracted from the example could be directly inserted into the user's code.
For now, in order to explore the appropriate user interface for discovering the appropriate code, WebCrystal instead runs as a plugin for the Firefox browser, and the user can copy-and-paste the code into a separate editor window.
WebCrystal is a Firefox extension written in XUL  and JavaScript, using the jQuery  library.
WebCrystal accesses the document object model  of the web page, and treats every DOM node in the web page as a web element.
WebCrystal is activated by clicking on the magnifying glass icon button in the browser's status bar .
When activated, it tracks the current element under the mouse cursor as users move their mouse around the web page.
The current element is highlighted using a semi-transparent box, with a small label showing the element's tag name .
At the same time, a set of questions about how to recreate the various aspects of the underlying element are dynamically generated and displayed in the left of the WebCrystal window .
The user can "freeze" a selection by left clicking on the desired element and then can start to inspect that element by browsing questions from the tool interface.
A selection is "unfrozen" by left clicking anywhere on the web page.
HTML is a hierarchical language.
An element's position on the web page is related to its parents  and siblings.
Therefore, WebCrystal allows users to directly select any element using the mouse, but also allows users to move the selection around the hierarchical structure.
Users can explore the hierarchy using the arrow keys to go up to the parents  , down to the children , and left and right to the previous and next siblings .
In our user study, we found this feature also was useful for participants to select overlaid elements that have a similar size, by navigating up to parents and sideways to other siblings.
When WebCrystal is enabled, it disables the default function of mouse left button  and arrow keys  so these events can be used to select and browse elements in WebCrystal.
When the regular web page behavior is desired, WebCrystal can simply be disabled by clicking on its magnifying glass icon again to turn the tool off.
WebCrystal explains web construction by allowing users to select different "how" questions.
All questions are in a similar form, such as "how do I get my ... to be like this?"
Previous studies in web design showed that when looking at an example, people only wanted part of the design and wanted to incorporate this specific part of the design in their own web page .
The key to successfully reusing an example is therefore to identify which lines of code are relevant to the user's needs, which is often difficult .
The first question in the list is always "how do I get my element to be exactly the same as this one?
Next is a set of sub-questions that allow users to ask about recreating more specific aspects of the element.
WebCrystal reads the HTML and CSS attribute values of the selected element and uses them to generate sub-questions in 11 categories .
For questions about text, background, and border, WebCrystal also dynamically renders the style of the element's text, background and border, and shows it in the question description .
Besides showing the properties immediately, we found this particularly important when the selected element's style is caused by other elements.
For example, when DOM elements overlay on each other, the look of an element can be caused by the element behind it.
Another example is that a vertical line can be made by using a background image inside a table cell or by turning on the left border of the next cell.
By showing the feedback in the questions themselves, the user can select the correct element to ask the questions about.
See Figure 5 for more examples.
After selecting a question, the middle pane will update and show the answer .
The first part of the answer is a computer-generated human-readable textual explanation of what tag and attributes the element uses to generate the aspect selected in the left pane.
WebCrystal compares each attribute with its default value, and only shows the attributes that have a value different from their defaults, and thus would need to be specified by the user.
Under the textual explanation is a set of checkboxes with which users can select specific aspects of the property they are interested in .
WebCrystal automatically generates an item for each CSS attribute that is relevant.
When the user selects one or more of these, the system generates an example code snippet that will cause an element to have the same values for those attributes as the example.
These choices are phrased as requests of the form: "Give me an example of making my element attribute = value."
As a shortcut, the first checkbox says "Give me an example of making my element have all the same attributes" to get a result the same as the example.
Attributes are also rendered in their style when possible to help users quickly identify what they want and understand the effect of the attributes.
The generated code snippet is shown in the code window on the right of the WebCrystal's interface .
WebCrystal can provide code snippets in either inline-CSS or separate-CSS formats, chosen by the drop down menu, to let users generate the most appropriate kind of code for their situation .
For cases where inline CSS is not allowed , then the inline CSS option is removed.
The user can copy and paste the generated code into their editor to reproduce the effect.
In addition, showing this code may help users learn the appropriate coding techniques.
In a study of online code example usage , researchers found that using example code not only helped programmers finish their tasks more quickly, but also helped them learn new knowledge and clarify existing knowledge.
Users can inspect a blank area by hovering the mouse on it, and WebCrystal will display a label with the CSS attribute that caused this blank space, along with its value .
Alternatively, if the user hovers the mouse over the CSS attribute in the textual explanation on WebCrystal's interface, then the corresponding blank space will be highlighted .
A key feature of web pages is that they are interactive, not just static drawings.
CSS adds the ability to support hover behaviors that show different styles depending on the mouse location.
Therefore, WebCrystal adds additional questions so the user can ask for an explanation and code for these behaviors.
For hover behaviors that change the style of an element, the user can demonstrate to WebCrystal the styles by first selecting the element and then moving the cursor on and off of the element, to cause the style change.
During the interaction, WebCrystal detects that the element changes styles.
In this case, WebCrystal will show a message in the textual area that tells the user that this is a dynamic element, and which style of the element is being used right now.
The message also includes a toggle button with which the user can see the other style for this element; that is, alternating between showing a description of the hovered and nothovered styles for a link.
The questions also toggle so the user can find out the details of how each of the styles is achieved.
Many web design examples consist more than one DOM element.
For example, the 3-grid menu structure in Figure 6, or the text and image layout in Figure 4, both use multiple elements to achieve those designs.
Figure 6: The interface for combining multiple elements.
WebCrystal enables users to investigate this kind of layout design of multiple elements, and even to select which specific aspects are desired from each element.
Another reason to investigate multiple web elements is to combine separate examples together.
Inspired by Bricolage's approach of generating a new design by combining two web pages , WebCrystal supports creating a "style mashup" for users.
For example, if the user likes the text style of one element, the background of another element and the size of a third element, WebCrystal can generate a code snippet for the user that creates a single element containing all of these desired design aspects.
The user interface for this feature is shown in Figures 2 and 6.
First, the user selects the desired aspects of the first element in the usual way, which will cause the appropriate code for the first aspect to be displayed in the code pane.
Then, the user selects the "save this code for later use" button .
The user then selects and shows the code for the other elements, and saves the code for each.
The storing idea is inspired by the fact that designers in the real world often store the examples they like and retrieve them later in their design process .
Each saved code snippet is represented by a button with a system or user-defined name at the bottom of the WebCrystal window .
The user can select multiple snippets using the check boxes.
Selecting multiple snippets takes users out from the question-asking interface to the "combining" interface, in which users give "I want to..." commands to the system to say how they want to combine the selected code .
Clicking on "I want to merge multiple elements together" executes the "style mashup" feature, and WebCrystal generates code that has a single element with all the attributes in the selected code .
If the saved snippets are elements of different types , then a menu is generated to allow the user to select which type is desired in the code.
If the same attribute has different values in different selected snippets , WebCrystal will generate a menu for users to select which value they want .
The other top-level command in Figure 6 at 3 is "I want to put multiple elements into a structure."
This is used when multiple items at different levels are desired to be combined into a multi-level structure in the result.
WebCrystal uses the hierarchical relation of the elements, and generates new code that has the appropriate code in the same hierarchy.
Currently, WebCrystal knows how to combine elements that are siblings or that are parent and children into the same structure.
We evaluated the usefulness of WebCrystal in a small lab study.
We polled a few web designers and web developers, and they reported that the most common ways that are used today to investigate code are the "View Source" menu item, along with tools such as Firebug  and the Chrome Developer Tool , which allow users to browse all of the HTML and CSS source code.
Since WebCrystal is implemented as a Firefox plugin, we decided to compare it to Firebug in our user study.
The study used a between-subject design.
Participants were randomly assigned into two groups, the experimental group was given WebCrystal, and the control group was given Firebug .
In addition, both groups could use any of the standard FireFox features, such as View Source.
Participants were also allowed to use any desired online resources to help with their tasks.
In both conditions, the participants used the same special-purpose testing environment we created.
This environment contains a text pane for entering the code, a "your output" pane that shows a preview of what a rendering of the code in the text pane will produce, and a "desired output" pane showing a preview of the correct answer .
The participants' goal was to make the "your output" pane look and behave the same way as the "desired output" pane.
Inside the text pane for each task, there was a small piece of code automatically inserted by the testing environment, for the participants to start from.
Participants were told that they had to use this code as part of their answers.
We did this to shrink the solution space and focus the task on just the reuse of the example code.
We measured both the success rate and completion time on each task.
Both groups had 6 participants, all graduate students in our university.
All participants had previous experience in writing HTML and CSS code.
Participants rated their proficiency with both HTML and CSS language on a 4-point scale from "novice" to "superior".
The average rating for HTML proficiency of all participants was 2.3 and for CSS was 2 out of 4.
We also asked the participants to rate their level of experience with using Firebug or other web inspection tools on a 4-point scale of "none" to "expert".
The average rating was 2.3.
There were no significant differences in these measures between groups.
The last 3 questions were the hardest, and were about reproducing the style of multiple elements.
For example, recreating a same 3-grid structure like the one in Figure 8 at 3, but changing the color of the text to the blue color pointed by the arrow.
The time limit for answering easy and medium tasks was 6 minutes and for hard tasks was 8 minutes.
If users had not finished the task by the end of the time limit, they were marked as "uncompleted."
All participants received the same 10 tasks in the same order.
We designed the tasks to have 3 different levels of difficulty.
The first 5 questions were the easiest, and were about reproducing the style of a single element.
For example, one was to recreate a vertical separation line pointed to by the arrow in Figure 8 at 1.
Next were 2 mediumdifficulty questions, which were about reproducing the interactive behavior of an element.
For example, one was to recreate a button that will change its style from green to red when hovered over by the mouse cursor like the one in Fig-
After giving consent to the study, the participants in both groups received a 15-minute tutorial on their tool  followed by a 5-minutes tutorial on the testing environment .
The WebCrystal group was shown all the features described in the previous sections, and the Firebug group was shown all of its features that are relevant to HTML and CSS investigations, including view source, enabling and disabling CSS properties, and inspecting the CSS layout.
After the tutorials, participants started to do the first task.
For each task, the experimenter would read the task description and then after reading the whole description would start timing.
Participants were told to inform the experimenter when they thought they had the correct answer.
The experimenter then stopped the clock, checked their work, and told them if they gave a correct answer.
If the answer was wrong, participants could choose to work on it some more or give up.
However, in our study, none of the participants chose to give up on any of the tasks.
All participants worked until the time ran out or they succeeded.
After attempting all the tasks, the participants answered a short interview to provide feedback.
Participants were paid $15 after the study.
We analyzed the data using a random-effect logit model to predict task completion rate, and a random-effect linear model to predict task completion time, with all the observation of one person as a group.
The results are presented in Figures 9 and 10.
Participants in the WebCrystal group completed an average of 9.67  of the tasks, whereas participants in the Firebug group completed an average of 7.83 .
We also analyzed the average time per task for all those participants who completed successfully.
As shown in Figure 10, the difference increases a bit as the tasks get more difficult.
Taking the "hard" tasks alone, successful participants were 43% faster with WebCrystal .
In the interviews, participants in the WebCrystal group expressed a great interest in using WebCrystal in real life: "This is cool... are you gonna release it?"
I'll pay a little money for it."
Among the 6 WebCrystal users, 5 of them asked about the tool's availability, and 3 of them volunteered to help on testing and reporting bugs after its release.
This is particularly encouraging since most of our participants have previous experience in using other web development tools.
The key to successfully finishing the tasks in our user study is to quickly identify all of the required attributes and combine them to form usable code, while avoiding including inappropriate attributes.
This is especially critical with the difficult tasks because they involve more attributes.
We feel this study has external validity since reproducing a design aspect in real life almost always requires copying multiple related attributes.
For example, to recreate text that has the same style as in Figure 2 at 1 requires users to specify 6 different text attributes.
WebCrystal users took advantage of the way that attributes are already classified into different categories.
They accessed the appropriate attributes by selecting different questions to ask the system to show them what they wanted.
In contrast, the Firebug users were presented with all of the attributes by the system and needed to determine on their own which ones were related to the task.
When identifying an individual attribute, WebCrystal users viewed the rendered style of the attribute in each checkbox description to understand the effect of that attribute.
This led the users to ask the right questions.
On the other hand, Firebug users used the live editing feature in Firebug to turn the attributes on and off to view the changes in the web page.
Although this feature also successfully explained the effect of an attribute to the user, it required the users to be the initiator of the inquiry process, and since it modifies the example page, it can interfere with appropriate rendering.
In other words, with Firefox, all the attributes were passively waiting to be explored, and users had to first guess or know which attribute could be relevant and then decide if they wanted to use the live editing feature to check if it was truly the one they needed.
We observed much trial-and-error clicking since users' first guesses were often not correct.
We also found that for some of the tasks which Firebug participants failed to complete, there were attributes which participants never explored because they incorrectly assumed these attributes were irrelevant.
We observed that all WebCrystal users benefitted from the customized, ready-to-use code snippet generated by the system when doing both easy and hard tasks.
Participants in the WebCrystal group liked using the checkboxes to select attributes to include in the code snippet, and thought it was very easy and efficient to use.
Copying and pasting the generated code snippet prevented users from having any potential syntax errors and typos.
In the Firebug group, some users chose to retype the attributes they thought were relevant rather than copying and pasting.
This is because attributes are separated into different lines in Firebug, which would therefore require users to perform multiple selecting, copying and pasting operations.
The result of this retyping was that more typos occurred, which users often did not notice at first.
The typos often caused incorrect output, which made the users think that they had identified the wrong attribute.
Then, instead of checking their code, users went searching in the example code again and got more and more confused, until they finally discovered that it was the typo that caused the wrong output.
Conventional web editors such as Dreamweaver have the ability to check syntax errors for users, but still may not identify if there is a typo in an attribute name or value.
These observations suggest that having a customized, ready-to-use code snippet extracted from the example file not only saves the users' time but also might result in higher-quality code.
When performing the tasks, we often observed very exploratory usage of sample code by the WebCrystal users.
In WebCrystal, because selecting all attributes under a category was so easy , when participants where not sure about the effect of individual attributes, some would just check everything that related to the task description, and see how the resulting code snippet worked using the preview pane in the answering environment.
We observed fewer attempts like this in the Firebug group, because both identifying the relevant attributes and copying them were time-consuming.
Both WebCrystal and Firebug users considered the tool they used to be very helpful for their tasks.
Some participants with advanced knowledge of HTML and CSS expressed that the textual explanations WebCrystal provided were less useful for them because they already knew most of the attribute names and effects.
The main performance difference in completion time between expert users in the two groups seemed to be caused by the fast copy-and-paste ability in WebCrystal, which saved them from typing  and kept track of the attributes one by one.
For novice and intermediate HTML and CSS users, WebCrystal's textual descriptions seemed to be more useful.
Both expert and novice participants reported that they liked the question-asking style of the interface.
They thought it was very intuitive to use and easy to learn.
While novice and intermediate participants in the Firebug group struggled to identify the right attributes to use and even to form syntactically correct code, novice and intermediate participants in the WebCrystal group found the correct attributes by asking a higher-level question and directly copying the ready-to-use code as their answer.
WebCrystal focuses on explaining HTML and CSS, and does not handle JavaScript, Flash, or other scripting languages for interactive behaviors.
WebCrystal currently flattens any CSS inheritance in the example, and generates code that contains all the required attribute values together.
Our motivation for this was to help users quickly reproduce a desired element by directly copying the example code into their own web page.
The downside of this piece-by-piece styling approach is that it does not take advantage of the cascading nature of CSS, and might result in a difficult-tomaintain file as the number of copied elements become larger.
Also, the style of an element is affected by its parents because some of the attributes can be inherited.
Therefore, we cannot be sure whether the example code pasted from WebCrystal will work exactly the same in the target web page as in the example without knowing the hierarchical structure of where it is pasted.
As a simple example, WebCrystal leaves out attributes which have their default value in the source file, and these attributes may have different default values in the target file.
This could be addressed by integrating WebCrystal with a web editor to support the user's choice of whether to override or inherit any attributes that differ in the example and target files.
WebCrystal is a tool that helps users to understand how an example is constructed and to reproduce the example in their own web page.
Its interaction techniques based on asking and answering questions proved effective, easy-tolearn and well-liked by both novice and experienced web developers.
WebCrystal successfully allowed fast copyingand-pasting of desired attributes, and the storing and combining of attributes from multiple examples.
The ability to specify the desired attributes and have the tool generate appropriate combined code for them proved to be an im-
Future work could be in many directions.
One is to integrate WebCrystal with web editing tools such as Dreamweaver or Eclipse to facilitate intelligent pasting of the example code in a way that would consider the hierarchy relations among elements, as described in the previous sections.
Another direction is to extend the system's ability to be able to explain the construction of interactive behaviors of a webpage.
A previous system, FireCrystal , lets its users playback the interactions with web pages using a timeline and displays relevant code.
From our user study, we observed that participants benefitted from selecting and augmenting desired code snippets through a hierarchical question-asking interface.
Combining the interaction techniques in WebCrystal and FireCrystal, one could imagine a system that records interactions in a web page, divides complex interactions into smaller and easily understandable parts, and lets users access relevant code of each part by asking hierarchical questions.
Finally, we are also interested in observing web developers using WebCrystal for real-world tasks.
What elements are most web developers interested in?
What are the most common questions that web developers ask when recreating an element?
How does WebCrystal affect on the design process?
Understanding these questions would give us more insights on designing future tools that support reusing examples in web authoring.
We would like to thank Ruogu Kang, Yanjin Long, Haiyi Zhu and Colleen Stuart for their help with the statistics for the paper, and Andrew Faulring for his help with the user study.
This research was funded in part by the NSF under grant IIS-1116724.
Any opinions, findings and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect those of the NSF.
