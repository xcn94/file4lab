We investigate the use of on-line contextual video assistance to improve the learnability of software functionality.
After discussing motivations and design goals for such forms of assistance, we present our new technique, ToolClips.
ToolClips augment traditional tooltips to provide users with quick and contextual access to both textual and video assistance.
In an initial study we found that users successfully integrated ToolClip usage into the flow of their primary tasks to overcome learnability difficulties.
In a second study, we found that with ToolClips, users successfully completed 7 times as many unfamiliar tasks, in comparison to using a commercial professionally developed on-line help system.
Users also retained the information obtained from ToolClips, performing tasks significantly faster one week later.
A traditional approach to address this issue is to provide documentation.
Unfortunately, text-based on-line help can be difficult to follow , causing users to be reluctant to use it .
In recent years, video tutorials have become a prevalent source of information for users .
However, in general, these are accessed outside of the UI context, through external websites .
While contextual forms of assistance, such as tooltips , do exist, they rarely possess the level of detail which would be required to understand how to use a complex tool, and do not leverage the potential benefits of animated assistance .
It would be desirable if the benefits of media-enriched resources were provided within the application context.
Driven by our goal of addressing the understanding learnability issue, we investigate the possibility of contextual video assistance.
Through careful design considerations, we have developed ToolClips, which augment traditional tooltips with extended video and documentation content.
In a first study we demonstrate a full implementation of ToolClips within an existing user interface, and show that they can be successfully used within the flow of high-level tasks.
In a second study, we demonstrate that ToolClips can significantly improve a user's understanding of how to use UI elements in comparison to a traditional commercially developed on-line help system.
Contrary to previous results, we also observe a positive impact on retention of learning.
Following our discussion of these studies, we discuss the issues surrounding the implementation of contextual video assistance, such as content creation and localization.
Despite all the advances the HCI field has made, today's user interfaces can still be hard to use  and frustrating for users .
The usability of a system depends on many factors, but it is agreed upon that learnability is one important component , if not the most fundamental attribute .
In a recent paper, Grossman et al.
Here, we specifically target the Understanding learnability issue - the problem users encounter when they have located a tool or function, but are unable to understand how to use it .
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Important early results in software assistance, such as those proposing minimalist and task-centered documentation  and user-centered on-line help systems , have shaped the on-line help systems which are common today.
Since the conception of on-line help, there have been explorations into contextual  and video-based  delivery, with less research exploring both .
Video and Animated Documentation Shneiderman  argues that graphical demonstrations can be the most direct way for novices to learn procedural knowledge.
The evolution of CPU power, memory capacities, and video hosting services, has now made video documentation a real possibility , which we further explore in this paper.
With this emerging potential, numerous researchers have investigated various forms of animated assistance.
This ranges from animating icons , to providing full animated demonstrations , which may involve superimposing moving animated characters of input devices  or providing audio narrations .
Our own design goals are influenced by these guidelines.
One of the most successful forms of contextual assistance is tooltips , which provide short textual descriptions of UI elements when the cursor hovers over the item.
Tooltips have been shown to improve a user's ability to locate functionality .
However, because they are so brief, tooltips are less useful for learning how to use tools .
Microsoft's "Enhanced Tooltips"1 and Autodesk's "Progressive Tooltips"2 provide longer descriptions and static images, but still do not provide full usage descriptions.
Adobe's "Knowhow"3 delivers detailed contextual help, but in a persistent window.
Side Views  display dynamic previews in the pop-up window of a command, but do not teach users how to use the command.
Recent developments in tutorial content have included contextual associations, such as Stencils-based tutorials , Graphstracts  and "Photo Manipulation Tutorials" .
However, these tutorials are not accessed contextually, and are each geared towards a single, specific task.
We seek a technique which allows users to quickly access relevant contextual assistance during application usage, and which is independent to the user's task.
Contextual Video Assistance The two concepts of video and contextual assistance have rarely been combined.
Previous research in animated assistance has not explicitly addressed content access .
Existing video tutorials are generally accessed outside of software applications, through external websites, not taking advantage of convenient contextual associations.
One good example is Google Sketchup4, which has an "instructor" providing contextual animated assistance.
However, the animated content is used to demonstrate what the tool can do and not necessarily help the user learn how to use it.
We seek a technique that can better address the Understanding learnability issue.
The GestureBar  is an interesting recent design which displays short animations when their associated icons are selected, to show users how to perform gestures.
With ToolClips, we extend this idea to the general problem of learning software functionality.
Despite claims that animated assistance should be considered , and certain studies showing some benefits , there is no decisive result in the literature which tells us when video assistance is most beneficial, or even if it is beneficial at all.
In fact, a number of recent papers have argued against the use of animations .
For example, Grabler et al.
The negative remarks towards video assistance are consistently based on the prominent studies done by Palmiter  and Harrison  in the early 90's.
Our review indicates that the results produced by these early studies are not entirely negative.
To the contrary, Palmiter found that animated demonstrations allowed users to complete tasks significantly faster than text-only instructions .
It was only after a week that the users did not perform as well.
However, the authors state that this was likely because the initial demonstrations matched the users' tasks exactly, allowing them to perform "superficial processing" by "mimicking the animated demonstrations".
Harrison's work  showed a lack of significant results when comparing animated assistance to still graphics, but never claimed that animations were worse.
In fact, the authors reported a slight advantage towards the animations.
Furthermore, the tasks involved navigations through a menu system and "did not involve the aspect of motion beyond the movement of the cursor".
In tasks of a more graphical nature, the benefits of animation may be more prominent.
Contextual Assistance Traditionally, there has been an explicit distinction made between the documentation of the software and its user interface .
Despite psychology research which exposes the benefits of contextual assistance , help systems are generally offered through completely separate components.
This can result in delayed, disruptive, inconsistent, and obtrusive help systems .
Traditional tooltips fade out as soon as the cursor leaves the associated tool icon.
Because ToolClips contain interactive content, this behavior must be modified.
Instead, ToolClips slowly fade out as the cursor moves away from it.
The alpha level of the ToolClip  is calculated as:
If we hope for the assistance to be used, there should be a low transaction cost associated with its access .
Users should not need to worry about codec's, browser plug-ins, and download speeds .
The user should also be able to return to their own work quickly and without any awkward interactions or jarring transitions.
The ToolClip is dismissed if the alpha level reaches 0.
Thus, if the distance to the ToolClip ever increases by 100 pixels, the ToolClip will fade out, further supporting their low transaction cost.
This type of distance-mapped alpha level is similar to the behavior of the Office 2007 "Mini Toolbar"6.
ToolClips extend traditional tooltips by integrating narrated video clips and in-depth textual documentation.
A new progressive interaction model is used to ensure that they will still be unobtrusive.
This provides a simple, yet unexplored solution, which could easily be incorporated into most GUI programs, which already possess tooltips.
The unique dismissal mechanism of ToolClips allows them to contain interactive content.
The extended content of ToolClips is accessed by clicking on either the text or the media icon.
The text icon will bring up the documentation content of the ToolClip, and the media icon will access the video content.
Because a dwell is needed to activate a new ToolClip, the cursor can pass over intermediate icons while travelling to access a displayed ToolClip.
When extended content is accessed, ToolClips enlarge to a movable and sizable window.
The persistency of the window allows them to be placed outside of the application's boundaries, so that they can remain unobtrusive, allowing users to switch between viewing the ToolClip's content and working with their document.
Once the ToolClip becomes persistent, it is closed through the close icon in its top right corner.
This is similar to the interaction model of Side Views .
Just like traditional tooltips, ToolClips fade in when the cursor dwells over an associated visual user interface component for 400ms, providing a low transaction cost.
ToolClips are positioned directly to the right of vertical palettes , and directly below horizontal palettes, so that other icons are not occluded.
In their initial form, ToolClips are compact, similar to traditional tooltips, with the addition of a text and media icon that the cursor can click .
This ensures that they will be unobtrusive.
ToolClip is in its larger persistent form, it will persist until the user accesses a new tool's extended ToolClip content, at which point the existing ToolClip will be dismissed.
If the user has modified either the position or size of the ToolClip being replaced, then the new ToolClip will take on these previous values.
This allows users to set up preferred viewing locations and sizes.
While our focus was on exploring contextual video content, we wanted ToolClips to be as detailed as possible.
For this reason, we also provided a text icon on the ToolClips, which once clicked, would provide further documentation about the tool.
The content is provided in a scrollable window .
This behavior is similar to some tooltips which allow users to press F1 to go directly to the on-line help system article relevant to the associated tool .
By providing the content within the ToolClip, we eliminate the need for any external browsing systems or software, which may have unpredictable behaviors.
Thus, ToolClips maintain their low transaction cost.
We conducted two studies comparing ToolClips to traditional help facilities.
In this initial study, we obtain feedback and usage data on our design, and gain insights into potential design iterations.
This study looks at highlevel Paint.NET tasks that require multiple tool usages.
The second study isolates and focuses on individual tool usage understanding, to determine how well ToolClips address the Understanding learnability problem.
Each ToolClip includes one initial video and up to three additional clips.
To support our segmented design goal, the actual videos are made to be as short as possible, and are segmented based on topic or primary lesson.
The first video, which begins playing as soon as the video content is accessed, gives the user a bare minimum demonstration of how to use the tool.
Subsequent clips branch off into various other lessons relevant to the tool.
Preliminary evaluations led us to generating clips 10-25 seconds in duration.
The media player had all of the typical navigation functionality, including a "next button", so that users could quickly jump to the next video in the series .
The study was run on a Dual 2.4Ghz Windows XP PC with a standard keyboard and mouse, on a 30" display at 2560x1600 resolution.
The application was run at 1024x768 centered in the display, allowing users to view help content off the main window if desired.
Headphones were provided in the ToolClips condition.
We designed a series of eight tasks that progressed in complexity, and taken together exhausted the 22 tools in the main Paint.NET tool palette.
Each participant completed the eight tasks in the same order.
The tasks generally involved the use of 2-5 tools.
For each task, users were given a different template file to begin with, and a printout of the goal image which they needed to create.
An experimenter was present throughout the entire study to make observations and provide assistance.
Assistance was only provided if the user had been stuck for 2 minutes,
Assistance was made as brief as possible to maintain consistency across tasks and participants.
The experimenter would first suggest that the users try to obtain help, and if that failed, would provide the necessary help.
This allowed us to gather more usage data on ToolClips, which was the main goal for this study.
Once opened, users only switched between the text and video 6 times.
However, users switched between the video segments within a ToolClip a total of 54 times.
This demonstrates that the segmented videos were a popular feature.
However, in some cases users were unsure which segment to view.
Because each clip was so brief , users rarely navigated the timeline .
In the baseline condition, tooltips were available for each of the icons in the tool palette, providing the name and a short description of the tool.
When a tooltip was displayed, users could hit F1 to go straight to the existing Paint.NET help article for that tool.
Users could also hit F1 when a tooltip was not visible to go to the main Paint.NET help page7.
Users in the Help condition strongly preferred the help content linked from tooltips .
Such content was accessed an average of 1.03 times per task, whereas the global help system was used only 0.21 times per task.
On a couple of occasions, users closed the global help system so that they could use the linked help instead, since it made it easy to locate the desired article.
This demonstrates the importance of providing contextual assistance for static help as well.
A between-participant design was used.
The independent variable was the condition .We divided the 16 participants into 8 pairs, so that members within each pair had similar experience with graphics editing programs.
For each pair, we randomly assigned the members to one of the two conditions.
Participants performed the eight tasks in a single session lasting 45-75 minutes, depending on the user's pace.
Each task lasted roughly 5 to 10 minutes.
We did not use any warm-up tasks, but we did provide users with an overview of the program and description of the resource  which was available.
We recorded a tooltip use if it was visible for at least 0.5 seconds.
Tooltips were extremely valuable to users.
Across all tasks, tooltips were used an average 8.87 times per task.
Consistent with previous work , our observations indicated that tooltips were predominately used for locating desired functionality, but rarely helped a user understand how to use the tool.
The extended ToolClip content was accessed an average of 2.08 times per task, or a total of 118 times, 46 times through the text icon and 72 times through the media icon.
The scroll wheel was used to access the video content 24 times.
An interesting effect was that most users preferred either the documentation content or the video content, and few relied on both .
These users indicated after the study that they chose the medium they were personally more comfortable learning from.
This validates our decision to include both text and video content within the ToolClips.
The between-participant design allowed us to obtain an initial comparison with traditional help.
Because the experimenter assisted users when they were stuck, we could not use completion time as an accurate measure for comparison.
Instead, we recorded the number of times a user got stuck , and the number of times a participant successfully used a resource  to independently solve a problem.
Repeated measures analysis of variance showed that the condition did have a significant effect  on the number of times users got stuck per task, with values of 1.19 for Help and 0.53 for ToolClip.
Similarly, the condition had a significant effect  on the number of times a help resource was successfully used to overcome a problem, with 0.45 successful uses for Help, and 1.00 for ToolClip .
Within the ToolClip condition, 30% of the successful uses were from viewing the integrated documentation, while 70% of the successes came from viewing the video content.
The condition did not have a significant effect on the responses.
We feel the most important result to be taken from this is the low score when asked if the technique "got in the way".
This was a potential concern with ToolClips, but the low score, in addition to our own observations, indicated that this was not problematic.
The results from the initial study were quite positive.
The potential problem, that ToolClips would be intrusive, was not observed.
Users managed the location and size of ToolClips to their liking.
The ability to view documentation in addition to video content proved useful for the users that preferred getting help in a text format.
The only usability issue we noticed was that users sometimes found it difficult to identify a relevant clip from the thumbnail image.
As such, the only design iteration we performed was to include a title and caption with the thumbnail images, to help users identify a clip of interest .
This increases the width of the ToolClip, but, only after the user clicks on the media icon.
We choose six basic level tools in AutoCAD to study .
One task was designed for each of these tools.
Each task required 1-3 uses of the tool, which exposed some of the options available for that tool.
The tasks would take an expert 1 to 2 minutes to complete.
Users were given a template file to begin each task with, and a printout of the goal image which they needed to create.
Users were also told which tool they would use to complete the task, and where it was located.
Figure 7 shows two of the tasks.
An experimenter was present throughout the entire study to make observations, but no assistance was provided.
Instead, a task ended if it had not been completed after 8 minutes.
Before the study began, participants were instructed to use the provided help resources if unsure how to complete a task, to deter random trial and error.
To determine if ToolClips are effective at reducing Understanding learnability problems, we preformed a study where participants were required to complete lower level tool-based tasks.
To ensure that the users would need to learn how to use the tools, and not just guess, we conducted this study with AutoCAD, a design and architecture application that is notoriously difficult to learn.
To implement ToolClips within AutoCAD, we modified our Paint.NET application to run in the background, and display ToolClips when the cursor dwelled over AutoCAD icons.
The ToolClip video content was generated to provide similar information as the on-line help.
To ensure that the information provided in both mediums was equal, we performed an equivalencing procedure .
Two raters viewed the help and video content for each of the six tools, and were asked to note any information inconsistencies, and give an overall rating of equivalence, from 1  to 5 .
The average consistency rating, across both raters, was 1.25, with only minor differences being highlighted.
We edited the help articles to compensate for these differences and did not carry out a second equivalencing, since the initial pass produced a suitably high rating .
To control for participant effects, we used a withinparticipant design.
The main independent variable was the condition .
The experiment was initially planned for a single session.
However, because of the results, which will be discussed below, we performed a second follow-up session one week later.
In each session, the participants performed all 6 tasks in the same order.
The 6 tasks were divided into two blocks of 3 tasks, with the condition changing between blocks.
Half the participants were assigned to Help in the first block, while the other half were initially assigned to ToolClips.
The complexities of the tools encountered in each block had a similar range.
In the first session, the users were first given a 10 minute guided introduction to AutoCAD, so they could learn the basics of the user interface.
Before each block began, the condition was described to the user.
This session lasted about 60 minutes.
In the second session, the introduction to AutoCAD was omitted, but users were still given 2 minutes to refamiliarize themselves.
This session lasted 30-45 minutes.
To analyze completion time, we removed trials that were not completed within the allotted 8 minutes.
A statistical comparison of completion times between conditions was not possible, since only 3 of the 30 tasks were completed in the Help condition.
The average completion time for the ToolClips condition was just over 5 minutes .
For both conditions, we tracked the number of times the help resource was activated.
In every trial of the study, the Help or ToolClip was used at least once.
Help was accessed an average of 1.6 times per trial.
In general, users brought the article up once, and then placed it to the side of their working window, and switched between windows when necessary.
The access rate for ToolClips was higher but not significantly at 2.03 per trial .
The general usage was similar to the help - users would bring up the ToolClip, watch a segment once or twice, and then place the ToolClip off to the side for future reference.
This validates our design decision to make the ToolClip a persistent window, once the extended video content was accessed.
In the first session, participants had much more difficulty in the Help condition than we had anticipated.
Across all 10 participants, only 3 of the 30 tasks were completed successfully.
This was not the case with the ToolClip condition, and there was a strong effect of the condition on completion rate , with completion rates of 10% for Help and 70% for ToolClip .
The results were uniform across each of the 6 tasks .
Unsurprisingly, the subjective questionnaire we administered after the session indicated a strong preference towards ToolClips.
Participants were also asked to rank their condition preference, with 1 representing a preference towards Help and 5 representing a preference towards ToolClips.
No participants indicated a preference towards the Help condition.
While we had expectations that ToolClips would improve completion rates, we were surprised to see such poor results for Help, given that each task only required the use of a single basic tool, which users were directed towards.
This demonstrates how significant the Understanding learnability problem can be, especially for a complex software application.
The increase in completion rates for ToolClips demonstrates that contextual video content can assist with the Understanding problem.
Clearly, these results are promising for ToolClips, as they drastically improved completion rates in comparison to an existing, professionally developed, on-line help system.
While this comparison to an existing help system is a previously used methodology , we are still left wondering if the on-line help system could be improved without the addition of videos.
In particular, the help pages in AutoCAD tend to be more function-oriented in nature , describing what the tool does, how to access its features, and what these features do.
In contrast, ToolClips are inherently more operative in nature , providing the information on the tool through procedural demonstrations.
We decided to conduct a follow-up session to see if the format of the help content would have an impact on our results.
We invited the same users back, so that we could also test retention from the ToolClip condition.
We created 6 new help articles for each of the tools, made to be static representations of the ToolClip content.
Each new help page was divided into sections, matching the video segments from the ToolClip.
Above each section, we displayed the same representative thumbnail used for the associated ToolClip segment.
Within each section, the narrations from the associated video segment were transcribed and separated into numbered steps.
Beside each step, a representative image from that section of the video was provided, except for simple steps such as "Hit Enter".
We asked participants to rate the helpfulness of the new operative help articles.
Participant responses increased from 2.9/5 from the first session to 4.1/5 for this session.
This value was no longer significantly different from the helpfulness rating  given for ToolClips .
However, when asked to rate their preference between the ToolClips and the new static help, users still preferred ToolClips.
The rating only reduced slightly from 4.5/5 to 4/5, with 7 of the 10 participants still indicating a preference towards the ToolClips .
In this session, the completion rates were closer.
It is interesting to note that the completion rate for the new static help was also lower than the rate in the first session for ToolClips  .
This is somewhat surprising since users already had an entire session of experience before using the new static help.
Although this difference was not significant , it does indicate that ToolClips may be beneficial, even in comparison to operative static help.
The completion time was significantly affected by the condition , with average completion times of 242s for Help and 166s for ToolClip.
Another important effect is that completion time was significantly reduced for the ToolClip condition between the first  and second  sessions  .
This contrasts previous results , demonstrating that video assistance does not necessarily have a negative impact on retention, if the resource can be readily accessed.
Our first study demonstrated a system wide implementation of ToolClips within Paint.NET.
The UI design was well received, and users were able to utilize ToolClips successfully within the flow of their tasks.
While some participants preferred the integrated documentation, most preferred to use the video content.
In our second study, we tested the effect of ToolClips on the Understanding learnability issue by designing tasks within AutoCAD that isolated a single tool at a time.
ToolClips provided a significant advantage in comparison to AutoCAD's existing on-line help system, increasing task completion rate from 10% to 70%.
In a second session, ToolClips also showed benefits in comparison to operative static help articles that were designed to mimic the ToolClip content, with 7 out of 10 participants still preferring the video assistance.
Furthermore, the video content did not appear to be detrimental to retention.
We made a number of observations in the experiment that might explain the benefit of the animated nature of ToolClips, in comparison to the static help.
Most importantly, users could continuously monitor the procedure for completing a task.
As a result, users were more likely to identify their errors or recognize when they were on the right track.
For example, when changing the text in a linear dimension, the dimension line temporarily disappears.
The static images in the initial and revised help article did not capture this subtle change, and this unexpected behavior often caused users to assume they had done something wrong.
With the ToolClips, users expected and recognized this behavior, since they had observed it in the video.
While some of these subtle visual changes could be described or illustrated in static help articles, it would be virtually impossible to convey the entire and continuous visual experience to the user without an actual video.
In addition, with the videos, users could quickly understand what object an instruction referred to.
In the static help, users sometimes misinterpreted the reference object of an instruction, even when images were provided.
Lastly, users also seemed to have more "trust" in the videos than the static help.
We often observed that when following a specific section of the static help, if the user made a slight error, they would give up on that section of the help.
With the videos, users seemed to be equally likely to make initial minor errors, but seemed more likely to try to identify their mistake, rather than seeking out a different video segment.
One drawback of the ToolClips we observed was that users sometimes wanted to work as the video was playing, but could not match its pace.
As a result, they had to go back and forth to pause and play the video, so that they could carry out the same steps as the video, one at a time.
This type of strategy was easier to carry out with the static help, since the steps generally appeared in a single view.
In addition, our studies targeted novice users.
Our experiences and observations lead us to believe that ToolClips would also be useful for intermediate or even expert-level users that are exposed to a new tool for the first time.
However, this does require further investigation.
The most positive result of our studies came from the significant improvement in comparison to AutoCAD's existing on-line help system.
It is important to highlight that this result does not imply that there is such a dominant advantage of video help over all forms of static help.
A benefit of ToolClips is they have the capability to deliver static help as well, through the extended text icon.
Our initial study showed that users are able to choose the modality they are most comfortable with, and the second session of our second study showed that the static help, which is provided, should be operative in nature.
Our work has identified and validated some of the beneficial properties of contextual video assistance, and opens up some new areas, which we now outline.
A potential challenge for any form of video assistance is the time and effort required to develop video content.
One solution would be to allow end users to develop and share their own tutorials.
The abundance of existing independent video tutorials indicates that users would be willing to do so.
For example, there are over 10 000 hits returned for the query "Photoshop Tutorial" on Google Video.
As an early exploration into this potential, we integrated a "developer" mode into our system, which allows simple creation of new clips within the actual application.
In the developer mode, a record icon is displayed in the ToolClip .
Clicking on this icon begins a video screen capture.
In our prototype, a captured video is added to a local directory for the specified tool.
In a commercial implementation, the new content could be uploaded to a central server, similar to Microsoft's "Community Clips"9.
A unique aspect of this design is that the recording is initiated through a ToolClip, so the video can be associated with the tool, and subsequently accessed contextually by other users through that tool's ToolClip.
The positive results for video assistance contrast previous studies  and claims  regarding video assistance.
We do not contest these previous findings, since our results only pertain to certain settings.
Here, we outline the scenarios that our results can be generalized across.
First, the target applications that we studied are highly graphical in nature, involving continuous cursor and object movements.
This is quite different from the original studies of animated assistance , which were based on navigating traditional GUI menu and icon systems.
Second, in our study, the videos did not demonstrate the actual tasks that users were trying to perform.
As a result, users could not just mimic observed behavior, as they could in many of the previous studies on tutorial help .
We believe that this is the reason the videos did not have a negative impact on retention.
Third, in our second study, the tasks were low-level and only required the use of a single tool, since we were focusing on the Understanding problem.
In this problem domain, the short and segmented videos that ToolClips provide may be particularly appropriate.
To conclude, we have proposed, implemented, and evaluated contextual video assistance for helping with the Understanding learnability problem.
Through careful adherence of a set of design goals, we implemented a new technique, ToolClips, which, in a series of studies, were shown to have some important beneficial qualities.
Based on our results and observations, we believe that ToolClips would be a useful addition to graphical applications, and have great potential for improving software learnability.
