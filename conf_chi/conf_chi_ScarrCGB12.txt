Designers of GUI applications typically arrange commands in hierarchical structures, such as menus, due to screen space limitations.
However, hierarchical organisations are known to slow down expert users.
This paper proposes the use of spatial memory in combination with hierarchy flattening as a means of improving GUI performance.
We demonstrate these concepts through the design of a command selection interface, called CommandMaps, and analyse its theoretical performance characteristics.
We then describe two studies evaluating CommandMaps against menus and Microsoft's Ribbon interface for both novice and experienced users.
Results show that for novice users, there is no significant performance difference between CommandMaps and traditional interfaces - but for experienced users, CommandMaps are significantly faster than both menus and the Ribbon.
Most GUI applications provide access to commands using visual components such as menus, toolbars, or the Ribbon interface seen in Microsoft Office.
When an application has a large number of commands, designers often use a hierarchical navigation structure to partition the components  - partly to save screen space, but also to provide semantic groupings of commands  that simplifies search for novice users.
However, hierarchical structures have been shown to be less efficient for expert users  - experts already know which commands they want and where those commands are, but a hierarchical selection widget requires additional navigation actions that take more time and increase the chance of navigation errors.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
For example, command languages, marking menus, and shortcut keys have all been shown to perform better than standard controls .
These alternative approaches gain their performance advantage through the use of flat  organizations of commands, and rapid memorybased selection mechanisms.
For example, when people become experienced with marking menus or shortcut keys, they begin to retrieve the correct command using muscle memory rather than visual search; similarly, experts with command languages use retrieval of the correct command from memory.
Although these techniques have been shown to be effective, they have characteristics that may not fit well with existing GUI styles.
Most WIMP  based systems use a strongly visual presentation style because of its advantages for novices, and are heavily invested in existing widget types ; this means that it may be difficult to ask users to switch to a radically different interaction paradigm such as a command language; in addition, these systems are most often used with a mouse, which can make gesturing  more difficult.
What other kind of fast retrieval could be used to improve expert performance in traditional GUI applications?
In this paper, we explore the use of spatial memory as a fast retrieval mechanism that could replace hierarchical selection techniques, and that can fit the general appearance and presentation style of GUI systems.
One inspiration that spatial memory can be used in this way comes from anecdotes about expert use of complex applications such as AutoDesk's Maya.
Experienced users of these systems often arrange several visual toolbars in a stable spatial arrangement, and then hide and show the tools when needed.
Following from these examples, and as a way to evaluate the effectiveness of spatial memory as a commandselection mechanism, we developed a technique called CommandMaps .
CMs have two main properties: they show all  of an application's commands at once, and they do so in a spatially-stable fashion, allowing users to build up spatial memory of frequently-used commands .
We carried out studies to compare the performance of CMs to standard GUI command-selection techniques  both for experts and novices.
We found that for novices, there were no overall differences between CMs and the standard GUI techniques, showing that a spatial memory approach does not impose an extra burden when users are just starting out with an interface.
When users had more experience with the interface, there were much larger differences in favour of CMs.
Selections with CMs needed significantly less time than both menus  and Ribbons ; furthermore, the error rate with CMs was one-tenth of the other interfaces.
CMs were also strongly preferred by participants.
These results show that spatial memory can be successfully used as a command-selection mechanism in GUI interfaces, and that the CommandMaps instantiation of this idea should be considered by UI designers as a way to dramatically improve performance ceilings for expert users.
Marking menus extend pie menus by allowing experts to leverage their spatial knowledge using gestural selections that pre-empt menu display .
While keyboard methods, such as shortcut keys, can also reduce pointing time , few users make the transition from mouse to keyboard .
Work on adaptive interfaces has examined using past user behaviour to either spatially promote likely commands  or to visually highlight them .
Theoretically, spatial relocation has potential benefits in reducing pointing time and visual search time .
However, empirical evaluations demonstrate that spatial relocation can harm performance , and performance models attribute this to the increased reliance on visual search rather than rapid decision .
Adaptive visual highlighting aims to leverage visual pop-out effects to decrease visual search time by focussing the search space.
For example, Findlater et al.
However, the benefits of the technique are likely to diminish as users gain expertise in target location.
Much psychology work has been done on memory for navigation: for example, Thorndyke  divides spatial knowledge into three types: landmark knowledge, procedural or route knowledge, and survey knowledge .
Survey knowledge is related to object location memory , and studies have shown that expert human retrieval of object locations is governed by the Hick-Hyman Law  , and that spatial learning is governed by a power law of practice  .
Several researchers in HCI have explored the use of spatial memory in computer interfaces, and studies have shown that although abilities can vary widely , people are capable of using spatial memory to remember large numbers of items, and retrieve them quickly.
For example, retrieval of 100 web pages using the memory-based Data Mountain technique  was significantly faster than with a standard bookmarking system, and the spatial memory also persisted over several months .
Other research, however, suggests that the form of presentation is critical, and that when location is used as the only retrieval cue, spatial memory fares less well .
There are relatively few studies that investigate spatial memory as a command-selection mechanism for interfaces.
One of these is the ListMaps interface , which showed that a 15x15 grid of buttons was faster for experts than a linear list of 225 alphabetical items, but considerably slower for novices.
User performance in WIMP interfaces is dominated by two operations.
The first is the need to locate a desired command among those available, and the second is the time to select it using the mouse .
Pointing time is commonly modelled using Fitts' Law , a logarithmic function of target width and distance from the cursor.
The time to locate a target, on the other hand, has been shown to depend on the users' expertise or familiarity with the interface .
Novice users must rely on visual search , while experts can decide about their location .
Improvements to traditional WIMP interfaces have sought to make accessing commands more efficient by reducing either pointing time or search time.
One such line of work involves alternative command organizations.
Another study tested a spatially-stable arrangement of page thumbnails as a document-navigation interface, and showed that spatial memory outperformed scrolling  .
The participant then clicked on a blank space where they thought the Ribbon item would be .
The study system recorded these locations to determine the error in people's spatial memory of the command's location.
Task 3: select commands using the Ribbon.
After specifying a location in Task 2, the participant was asked to find that command with the Ribbon interface.
Participants clicked on a Ribbon tab to show that tab, and then on the command to complete the task.
The system recorded the number of tab switches and clicks used to correctly complete the task.
Participants completed Task 1, then interleaved Tasks 2 and 3 for each of their selected commands.
Commands were presented in a random order, and each command was shown twice overall.
Three decades of research since Miller's  analysis of performance with different menu structures has produced extensive and apparently conflicting empirical evidence of the relative merits of `broad and shallow' versus `narrow and deep' hierarchical structures.
Recent work, however, demonstrates that the apparent conflict between study results can be explained by differences in the experimental conditions  - specifically, performance improves with breadth  when item selection performance is a logarithmic function of number of candidate items; but performance follows a `U' shape with breadth when selection performance is a linear function of the number of items.
Logarithmic performance is possible when users can both anticipate a target's location  and rapidly control the interface mechanics to acquire the item .
Linear performance results when the user either has to visually search for the item  or when the interface mechanics constrain selection performance .
Combining prior findings on spatial memory and hierarchical navigation therefore suggests that expert performance can be enhanced by supporting spatially stable items in the shallowest possible hierarchy.
Overall, participants chose a mean of 59.6 commands as "familiar" .
Many participants appeared to select all of the commands that they had previously used in the interface, rather than just those they used frequently, so we expected a range of actual familiarity with the commands.
Error distance with blank Ribbon.
Participants' clicks on the blank Ribbon were on average 147 pixels from the centre of the correct command.
There were several outliers, however , suggesting that some commands were not as well-known as the participant believed.
The median error value  was 92 pixels, which represents approximately 2.5cm on the study monitor.
Figure 3 shows the distribution of error distances.
When selecting commands with the  Ribbon, participants most often found the command with a single tab selection .
However, more than one tab selection was needed in 28% of trials; the overall average was 1.95 selections to find the correct command.
These results provide us with two main findings.
First, for many commands, people do have a good spatial memory of the commands' locations in the GUI: 50% of commands  were known to within 100 pixels.
Second, people know the tab location of most of their familiar commands, but for a sizeable subset , they needed more than one selection to find the command.
Our overall hypothesis is that spatial memory can be the basis for command-selection interfaces.
To test the basic premise of this hypothesis, we carried out a study to see whether experienced users of a real-world application  have built up spatial knowledge of familiar commands in the Ribbon interface.
Twelve participants were recruited from a local university; all considered themselves to be experienced Word 2010 users .
A study system  running on a Windows 7 PC with a 1600x1200 monitor prompted participants through three tasks.
Task 1: determine familiar commands.
Participants were asked to inspect the study system's mock-up of the Word 2010 interface and to indicate which Ribbon-based commands they were familiar with .
These commands were then used in the remaining tasks.
Task 2: specify locations with Ribbon hidden.
CommandMap interfaces  are intended to replace traditional command interfaces such as menus, Ribbons and toolbars.
Command selections are then made by clicking on the appropriate icon in the CommandMap.
When activated, CommandMaps rapidly fade in to a configurable opacity level .
They remain displayed until their activation key is released, allowing multiple commands to be issued in sequence without reposting.
When using a desktop application, the user's attention is likely to be on the workspace, such as their document or spreadsheet.
Commands must be available on demand, but for much of the time they produce visual clutter and consume space that might be better reserved for the workspace.
CommandMaps maximise the workspace by using a modal separation of workspace and commands.
To formalise our analysis of the relative merits of CommandMaps, Ribbons, and menus we used the Search, Decision, and Pointing  model  to make theoretical performance predictions.
SDP was specifically designed to model performance with menu systems across hierarchical structures and levels of expertise.
Our use of SDP also accounts for the proportion of selections requiring the previously selected parent item to be changed.
The SDP model  calculates the time to select an item as the sum of time taken at each hierarchical level.
The key component of the model is the time taken at each level, which is calculated as the "search/decision time" plus the pointing time .
Search/decision time depends on whether the user can decide about an item's location or must visually search for it, with experts being able to make spatial decisions, while novices must rely on visual search.
Decision time uses the Hick-Hyman Law of choice reaction time , which is a logarithmic function of the number of equally probable choices.
Visual search time is a linear function of the number of candidates.
The transition from novice visual search to expert decision is modelled using a power law of practice .
The reader should refer to Ahlstrom et al.
Traditional WIMP interfaces have dominated desktop interaction for thirty years.
Although faster command invocation mechanisms  are available for experts, it is known that these facilities are lightly used  and that most users are content to `make do' with mouse driven selections.
CommandMaps therefore maintain the familiar `point and click' style of interaction.
The primary objective for CommandMaps is to improve performance for knowledgeable users.
Many office workers use the same computing tools for years or decades, and they are therefore likely to be knowledgeable much longer than they are novice.
CommandMaps use two methods to improve knowledgeable user performance: spatial stability and hierarchy flattening.
As discussed in Related Work there is extensive empirical evidence showing that consistent spatial placement facilitates location learning and improves selection performance by supporting rapid spatial decisions.
Traditional interfaces display only a small subset of commands at a time, so command hierarchies are used to partition command subgroups.
The result is that even when users know the ultimate location of their targets , they need to mechanically navigate the command hierarchy to satisfy interface requirements.
Furthermore, each hierarchical level constitutes an interaction mode, introducing the risk of mode errors - e.g., "Zoom" is not displayed at its known location if the "Home" tab is selected.
Using the model to compare CommandMaps, menus, and Ribbons exposes several important theoretical issues about their use.
In particular the modelling process demonstrates that knowledgeable use of CommandMaps involves a single decision and pointing activity, while menu use involves two .
Ribbon use is more involved, depending on whether the Ribbon is minimized or not and on whether the target item is within the current tab .
To simplify modelling we make a series of assumptions.
We model 210 commands that are evenly divided across seven groupings , with all commands being equally probable.
We also assume error-free performance.
Predictions are calculated in a simple spreadsheet using previously published calibration parameters .
The spreadsheet is accessible at removed for anonymity.
We model novice selections as requiring a two level search process: first searching for the appropriate tab marker in the CommandMap, then searching for the desired command within that group.
While two levels of searching are required, only a single pointing activity is necessary in the flat display.
Experts are modelled using a single-level decision between all commands, followed by a single pointing activity.
The mean pointing amplitude with CommandMaps is assumed to be 250 pixels.
Figure 4 shows expert performance predictions with the three interfaces as the proportion of selections involving a switch between parent items increases.
CommandMaps are predicted to have constant fast performance of approximately 1.5s.
Their speed is due to the single decision/pointing activity regardless of the need to switch from the previously selected parent.
All selections, regardless of expertise, involve a two level acquisition process.
Users first search for  or decide about  the menu and point to it.
They then search/decide and point to the item in the menu.
We assume mean amplitude of 500 pixels from the screen centre to the top level menu, and amplitude of 300 pixels for second level selections .
Figure 4 shows a constant expert menu prediction of approximately 3s.
This slow performance is due to the two decisions and pointing actions for every selection.
The Ribbon can be minimised, causing it to disappear after each selection, which requires a tab to be clicked before it reappears.
In this case Ribbon interaction  is nearly identical to menus, involving a twolevel search/decision and pointing process.
Modelling performance with the non-minimised Ribbon is theoretically interesting because it is sometimes necessary to switch the parent tab and sometimes unnecessary.
For novices we use a two level searching process ; however, time for first level pointing is only included when a tab-switch is necessary.
For experts, it is unclear whether acquisitions involve a single decision for a `global' target  or two decisions .
If two decisions are involved, then selections within the currently selected tab involve a superfluous decision, wasting a small amount of time.
Figure 4 shows expert predictions for both one- and twolevel Ribbon models .
Ribbons are predicted to match CommandMaps only when no selections involve switching parents, and to gradually deteriorate as the proportion of parent switching increases.
Note that the one-level model predicts that Ribbons will be worse than menus when most selections involve a tab switch.
Studies 2 and 3 compare user performance with CommandMaps, Ribbons, and menus when knowledgeable and when novice.
Study 4 then compares performance with two variant CommandMap designs for allowing window geometry manipulation.
All participants completed Studies 24 in a single one hour session.
The primary aim of CommandMaps is to improve performance by knowledgeable users who have developed spatial awareness of command locations.
Study 2 therefore tests the following hypotheses: H1: Knowledgeable users can select commands faster using CommandMaps than when using Ribbons and menus.
H2: There is no performance difference between CommandMaps and Ribbons when selecting commands contained in the most recently used tab, but CommandMaps are faster than the Ribbon for tasks requiring switching between different parent tabs.
H3: Subjectively, users will prefer CommandMaps.
Hypotheses 1 and 3 are important but straightforward performance and preference comparisons.
Hypothesis 2 is more nuanced, examining the theoretical performance model's assumptions.
As the one-level model of Figure 4 shows, we predict no difference between CommandMaps and Ribbons for non-switching tasks.
However, the model also predicts that CommandMaps will perform much better than Ribbons and menus when switching is required.
To achieve the interface familiarity necessary to examine knowledgeable user performance, we based the experiment on a widely used desktop application: Microsoft Word 2007.
All participants completed tasks using three interfaces: a Ribbon replicating the actual Word Ribbon, a menu, and a CommandMap.
The menu design used seven top-level menus matching the Ribbon's tabs, with underlying menus containing all of the items in each tab, and similar group separation.
The CommandMap, shown in Figure 1, presented all of the Ribbon tabs laid out from top to bottom within the window.
None of the interfaces implemented third level popup/drop-down items - for example, clicking on the colour swatch drop-down arrow did not post the associated dialog.
As participants may not have encountered the Word commands used in the experiment, and because no participant could have had prior experience with our tailormade menu or CommandMap interfaces, they were required to complete two blocks of tasks with each interface: familiarisation and performance.
The familiarisation block was used to assure familiarity with the location of commands in each interface condition, while the performance block was used for experimental analysis.
Tasks were initiated by clicking a `Next' button in the centre of the window, which displayed a sidebar prompt containing the name and icon for a target.
Task timing began when the prompt was displayed and ran until the correct item was selected.
Incorrect selections produced an audible beep.
Participants were instructed to complete tasks "as quickly and accurately as possible".
Three sets of command targets were generated, with each set consisting of a total of six commands located in three different tabs: three in the Home tab, two in the Insert tab, and one in the View tab.
Each participant used the same command set for familiarisation and performance with one interface, and then different command sets for subsequent interfaces.
The order of command set and interface was counterbalanced using a Latin square.
The familiarisation block comprised 30 trials, with 5 selections for each of the six targets.
The performance block contained 90 trials, with 15 selections for each of the same six targets.
The order of target selection within each condition was established with a one-off random process, where the selection sequence was repeatedly regenerated until it met our constraint that 50% of selections would involve a tab switch when using the Ribbon.
Participants completed NASA-TLX  worksheets after each interface, and at the end of the experiment they ranked the three interfaces for preference.
The experiment is designed as a 3x2 analysis of variance for within-subjects factors interface {ribbon, menu, commandmap} and parent {same, different}.
The factor parent allows analysis of the impact of moving between different interface structures - tasks are same when the current selection occurs in the same menu or Ribbon tab as the last one; otherwise they are different.
The dependent measures are task time and error rate.
We analysed task time data with and without trials containing incorrect selections, with both analyses producing the same statistical outcomes.
Bonferroni corrected pairwise comparisons  confirm that commandmaps were faster than ribbon  and menu .
We therefore find support for H1.
This is shown in Figure 5a: commandmaps and ribbon performed similarly for same tasks, but commandmap was relatively faster in different tasks .
We therefore find support for H2.
The model predictions shown in Figure 4 are confirmed by Figure 5a, including the crossover effect of ribbon performance becoming worse than menus in different tasks.
A significant interface x parent interaction , evident in Figure 5b, is caused by commandmap error rates being relatively unaffected by parent, while ribbon and menu have much higher errors in different parent tasks .
The combination of time and error data is important, as it shows that commandmaps do not increase errors to achieve their improved temporal performance - they are both faster and more accurate than menus and Ribbons.
User response to CommandMaps was positive, with 14 participants ranking it as their first preferred interface, two rating ribbons first, and two menus: 2=16.0, p < .001.
CommandMaps were also rated as having the lowest workload on all significant NASA-TLX measures .
We therefore find support for H3.
In pairwise posthoc comparisons , menus were slower than both ribbon and commandmap, but there was no difference between commandmap and ribbon .
There was a significant interfacexparent interaction , with ribbon slightly faster than commandmap for same tasks, but commandmap slightly faster than ribbon for different tasks.
Pairwise comparisons between commandmap and ribbon in each of these conditions  show no significant difference .
There was no interfacexparent interaction .
CommandMaps are primarily intended to enhance knowledgeable users' performance, but novice performance is also important.
Study 3 therefore compares novice performance with CommandMaps, Ribbons, and menus.
Since CommandMaps display all commands at once, there is a risk that visual search performance will be impaired by the need to visually scan many concurrent candidates.
The experiment involved acquiring randomly located targets in logical groupings using CommandMap, menu, and Ribbon interfaces.
Five groups of 24 items each were created to populate the interfaces .
Only items from animals, food, and sports were used as targets.
The groups were intentionally unconnected with computing to avoid transfer effects from traditional interface experience.
Tasks were presented to participants using an identical prompting interface to Study 2.
Participants completed twenty-four tasks with each interface before proceeding to the next interface .
The tasks with each interface comprised selecting eight unique targets in each of three different groups .
The order of task presentation was manipulated such that half of the tasks involved switching parent group and half did not .
To reduce learning effects across tasks  no target item was reused throughout the experiment, and the location of all items  was randomised for every trial.
Participants provided comments and rated the ease of finding targets at the conclusion of each interface condition, and at the end of the experiment they ranked the three interfaces for perceived performance and preference.
Participants, apparatus, and design are identical to Study 2.
Eleven participants ranked commandmap as their preferred interface for the task, four preferred the ribbon, and two preferred menus: 2=7.9, p < .05.
Comments on the commandmap presentation were mixed, with one participant stating "Too much to see at once", and another saying "I like how you can see all the buttons at once."
The key finding is that novice performance is similar when using CommandMap and Ribbon designs; both are substantially better than menus.
Studies 2 and 3 used large, static windows, but any practical deployment will need to accommodate variable window sizes and positions.
This raises questions of how CommandMaps should respond to window geometry manipulation, and how this affects their performance.
The following sections describe and test two CommandMap designs for responding to window geometry manipulation - one based on scaling within the window boundary, and another using a pop-up window.
Scaling CommandMaps are dynamically resized in response to window size manipulations so that items maintain relative spatial location.
To avoid distortion when windows are resized on only one dimension, they maintain a 1:1 aspect ratio using the smaller window dimension.
They are anchored to the top-left corner of the window.
To assure that targets remain discernable at small scales a pointing lens is used to magnify the area under the cursor.
This suggests that the abrupt transitions between sizes were a significant detriment to performance with scaling - one participant commented "I found I lost my sense of where things were as the scale changed."
All participants preferred the popup interface.
Popup's performance stability across window size is important.
In Study 2, the commandmap mean of 1.57 s was 25% faster than ribbon, and popup's mean in Study 4 was nearly identical at 1.54s.
We did not include ribbon in Study 4, but it would clearly have performed worse than it did in Study 2 due to its progressive elision of items into additional hierarchical levels .
The results of Study 4 therefore suggest that the advantage for popup CommandMaps over the Ribbon will exceed 25% with small windows.
Pop-up CommandMaps are displayed in a pop-up window of constant  size.
Like menus, the location of the CommandMap is anchored in the top-left window corner by default, but it is repositioned outside the window boundary when necessary for the entire CommandMap to appear within the display.
Therefore, when the window is small, or when the window intersects a screen edge, the CommandMap extends outside the window boundary.
The 50% size represents a realistic lower bound for window size with a standard desktop application.
The 25% size represents an extreme limit of interaction.
Experimental tasks involved selecting the same six targets used for the commandmap condition in Study 2.
Participants initially performed a block of `refresher' trials, selecting each of the six targets twice .
They then made 36 selections with scaling and 36 with pop-up interface .
The 36 selections comprised 12 at each size , consisting of two repetitions of each of the six targets.
The targets were ordered such that each selection used a different window size to the preceding one  in order to maximise abrupt transitions between window sizes.
Tasks were presented to users using the same prompting interface as Studies 2 and 3.
To summarise the results, Study 1 confirmed that users have a good memory for the spatial location of commands, but that their memory for the parent item containing commands is relatively weak.
Studies 2 to 4 then tested CommandMaps.
Study 2 demonstrated that CommandMaps provide substantial performance benefits for knowledgeable users - they were 34% faster than menus and 25% faster than the Ribbon.
The results confirmed the predictive performance model, including a cross-over effect with Ribbon performance being worse than menus for selections involving a parent switch.
CommandMaps were also much less error prone, with 0.6% errors compared to 5% and 9% with Ribbons and menus respectively.
Study 3 showed that novice visual search for randomly located items in CommandMaps is faster than menus, but not significantly different to Ribbons.
The study also showed that the relative performance of CommandMaps and Ribbons depends on whether selections involve switching from the previous parent item.
Study 4 demonstrated that popup CommandMaps remain efficient regardless of window size.
The empirical results closely matched the theoretical predictions generated by the performance model .
Furthermore, the preferred `one-level model' of Ribbon use anticipated frequent mode errors when parent switches are required, as observed with the Ribbon's 5% error rate .
Therefore, we attribute CommandMaps' success to their two defining properties - stability of item location , and maximally flattened hierarchy .
The experiment focused on command selection performance, with tasks involving repeated selection of a small set of serially presented targets.
While real work sometimes involves executing a series of commands  it normally interleaves activities on the workspace with command selections.
This raises concerns about whether the experimental findings will generalise to real use, discussed below.
Impact of the small target set on spatial memory.
Study 3 involved repeated selections of six target items.
The small set was used to assure participants had a good spatial knowledge of target location , but it is possible that the method induced spatial location memory that is artificially refined.
We are confident that the results will generalise to larger active command sets for two reasons.
First, Study 1 shows that participants have a good spatial knowledge of approximately 30 items .
Our experimental interface used the CTRL key to activate the CommandMap, but this requires bimanual operation with one hand on the key and another on the mouse.
Our experimental participants issued an intense series of command selections, so it was natural for them to keep one hand on or near the control key.
However, during real work the non-dominant hand might be otherwise occupied, demanding a homing action to the activating key.
Two solutions to this concern are first, the CommandMap could be posted by clicking in a designated area ; similar to how the current Ribbon can be posted once `minimized'; second, a dedicated mouse button could be used to activate the CommandMap mode, allowing unimanual selection.
Similarly, on a touchscreen device, the CommandMap could be activated with a specific gesture .
To display the full set of commands simultaneously, the CommandMap covers the user's work or content area with a configurable transparent overlay.
While this overlay allows the underlying area to remain visible, it is possible users may respond less favourably to having their content somewhat obscured when invoking commands that allow previews prior to final selection .
We hope, however, that the substantial performance benefits of the CommandMap design outweigh this potential downside, which would be present for only a subset of commands.
Study 2 shows that novice visual search performance is similar between Ribbons and CommandMaps.
However, there are two concerns on initial user reaction.
First, three participants indicated that the number of controls was `overwhelming' when first viewing the CommandMap, but this impression quickly dissipated on use.
Second, there is an absence of control affordance due to the omission of obvious controls at their familiar location.
Both of these concerns are short-term effects that might be eased with a help display after installation.
Limit of number of commands.
While CommandMaps utilise screen real estate to a much higher degree than conventional techniques, there is still a limit to the number of commands that can be displayed at once.
In situations where the available command set is too large, a hierarchical structure must still be employed.
However, we still anticipate a performance increase over contemporary interfaces if the hierarchy is as shallow as possible.
Furthermore, CommandMaps in their current form are unable to support certain features of the Ribbon, such as contextual tabs, due to a lack of screen space.
Anyone designing a practical implementation of CommandMaps will therefore have to keep screen size limitations in mind when choosing control arrangements.
In modern user interfaces, hierarchical command organisations are common.
However, we showed that users can remember the spatial locations of controls without the need for hierarchy, implying that hierarchy traversal is inefficient for experienced users.
We presented the notion of combining spatial memory and flat hierarchies to support efficient command access and instantiated these ideas within CommandMaps.
We generated performance models supporting our design and empirically validated them through two studies: one demonstrating a speed increase for expert users of 34% over menus and 25% over Microsoft's Ribbon, and the other showing no significant performance difference for novices.
Subjective responses indicated that CommandMaps was preferred across both experiments.
Finally, we evaluated two alternative designs allowing CommandMaps to remain effective at smaller window geometries, with a "pop-up" design performing significantly better than one that scaled widgets according to the window dimensions.
There are a number of directions for future work.
Our experiments used menus and Ribbons as baseline comparators due to their dominance in contemporary interfaces.
However, comparisons with other command invocation techniques are needed, particularly with those that have been shown to support expert use, such as marking menus .
A second area of future work involves exploring ways to combine CommandMaps with other performance optimizations, particularly for systems that have a predictive capacity.
For example, ephemeral adaptation  or a related scheme could be used to emphasize likely commands.
Alternatively, a subset of frequently used commands could remain visible in workspace mode .
Finally, studies with more complex tasks would provide insight into the strengths and limitations of the CommandMap design when command invocation is intermixed with content manipulation.
