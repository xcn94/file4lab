Aim-assistance techniques have been shown to work for player balancing in 2D environments, but little information exists about how well these techniques will work in a 3D FPS game.
We carried out three studies of the performance of five different aim assists in an Unreal-based game world.
The assists worked well in a target-range scenario , but their performance was reduced when game elements were introduced in a walkthrough map .
We systematically examined the relationships between realistic game elements and assist performance .
These studies show that two techniques - bullet magnetism and area cursor - worked well in a wide variety of situations.
Other techniques that worked well were too perceptible, and some previously-successful techniques did not work well in any game-like scenario.
Our studies are the first to provide empirical evidence of the performance of aim assist techniques in 3D environments, and the first to identify the complexities in using these techniques in real FPS games.
However, expertise differences also reduce the possibility of playing with others who have a different skill level; if skills differ greatly, the game is not fun for anyone .
Aiming is a critical component of FPS games, and aiming speed and accuracy is often a main differentiator between experts and novices.
To improve novice targeting ability, aim assistance could be used.
Aim assistance improves the accuracy and speed of target acquisition by manipulating factors such as the size of the target in motor space.
Aim assistance techniques have been shown to improve targeting in 2D shooting games .
Aim assistance in these 2D situations led to closer matches between pairs and increased enjoyment, and the effects were not highly perceivable.
Therefore, 3D versions of these aim-assistance techniques hold promise for assisting novices in FPS games.
Little information is available, however, about the use of these techniques in 3D FPS environments.
Commercial games such as Halo appear to implement various forms of aim assist and previous work has shown that Fitts's law holds in 3D aiming tasks , so it is likely that applying aim assist techniques should help to improve performance in a 3D FPS.
However, previous research has also shown that adding even simple game elements to a 2D aiming task can significantly change target acquisition time .
The complexity of a 3D FPS game environment 
To investigate whether aim assist techniques are effective in 3D FPS games, we implemented five techniques  in a custom game environment and carried out three performance studies.
In the first study , we set up a simple 3D shooting range that was similar to the 2D games used in past evaluations of aim assistance.
In the second study , we created a realistic game level where players moved through a map with a number of computercontrolled players .
To begin teasing out the effects of realistic game elements, we carried out a third study that systematically varied two specific factors from S2: the effect of distractor targets, by removing friendlies from the map , and the effect of having more precise weapons, by switching to a semi-automatic sniper rifle .
3D First Person Shooter  games are one of the most popular genres in computer gaming .
FPS games are complex and fast paced - this is especially true in multiplayer matches, where players need considerable skill to effectively navigate through a 3D environment, target opposing players, and avoid obstacles.
FPS games take time to learn, resulting in a wide range of skill levels; experts are often vastly better at controlling the game than novices.
Copyrights for components of this work owned by others than ACM must be honored.
Abstracting with credit is permitted.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Our results showed that although all techniques worked well in S1, the presence of realistic game elements compromised the efficacy of most techniques - sticky targets and target gravity in particular.
However, bullet magnetism and area cursor worked well in several settings, and were not highly perceptible.
These two techniques are interesting in that they both change the targeting process after the user has completed their aiming motion and pressed the trigger; in contrast, the two worst techniques  both adjust the user's crosshairs during the aiming action.
We speculate that there is value in letting the user plan and execute their own aiming motions, and only adjusting the shot during the flight of the bullet.
Our work is the first to explore the complexities of aim assistance in 3D environments, and the first to provide an analysis of real-game factors that can affect assistance.
We also identify two successful candidate techniques that show potential for use in player balancing for FPS games.
Matchmaking: Many multiplayer online games use elaborate ranking systems that aim to group players with others of a similar skill level to ensure that the level of competition is balanced .
These work in a manner similar to ladders for sports like squash or tennis at sports clubs, and are important parts of Halo  and StarCraft 2.
Asymmetric Roles: In many games, players can take on different roles that suit their abilities or level of skill.
For example, in Team Fortress 2, successful teams are composed of several different roles .
This is analogous to real world sports teams, where players have very different roles .
Aim Assistance: Aim assistance facilitates the basic skills used in games that involve shooting, by making it easier to select on-screen targets.
A recent study showed that aim assistance was an effective mechanism for balancing a simple 2D shooting-gallery game .
Players with less skill were able to improve and better compete with more skilled partners, and players reported having more fun when the competition was tighter.
Further, participants did not notice that aim assistance was being given.
However, there is little information about whether or not aim-assistance techniques would be effective in FPS games, which take place in a 3D environment and involve navigating an avatar through the space.
Below we provide an overview on work in aim assistance and its use in video games.
Flow describes a state where people are engaged and interested in their tasks without being overly anxious .
In order to provide players with a state of flow, game designers try to balance the level of challenge .
Striking the right balance is important, because a player's desire or willingness to play depends on whether the game is enjoyable .
Unbalanced game elements may cause players to become frustrated or unengaged because they find the game too difficult or too easy .
For this reason, the game industry makes use of simulations and extensive play testing to discover unbalanced game elements .
To maintain flow in multi-player games, players' abilities to compete must be balanced.
This means that players of equal skill should have an equal opportunity to win .
However, it can be difficult to balance the performance of different players  because people's abilities are based on many factors including their experience, reaction times, and skill .
Many games rewards skill, and newer or lessskilled players can have difficulty playing with more experienced players.
Despite the difficulties in balancing competition in games, it has an important impact on player experience; a recent study demonstrated that balancing play of differently skilled players increases enjoyment for all .
Through our literature review and examination of games, we have identified four primary balancing approaches: 1.
Difficulty Adjustment: Difficulty adjustment is one of the most common ways to allow users to adjust the level of challenge in a game.
Many games allow players to explicitly select a difficulty setting, whereas others use dynamic difficulty adjustments, which change game elements based on in-game performance ; e.g., Left 4 Dead increases challenges if players do well.
Dynamic adjustments in competition can lead to frustration if experienced players feel cheated , and can result in players feeling their achievements are meaningless .
Many aim assistance techniques have been devised to allow people to select on-screen targets quickly and accurately.
Aim-assistance techniques are based on an understanding of aimed movements as modeled by Fitts's Law .
Fitts's Law states that the time to aim to a target is determined by the distance to reach the target  and the size of the target .
The smaller the amplitude and the larger the width, the easier and faster it is to point to a target.
Aim-assistance techniques work in digital environments to facilitate pointing tasks using a device like a mouse or game pad by artificially manipulating amplitude and width .
Three general approaches for doing this are to reduce the distance to the object , increase the width of the object in visual or motor space , or both .
We refer the reader to a recent review  for an overview, and we present individual techniques in the context of those implemented for the studies.
While work in aim assistance has been focused on its use in traditional 2D GUI pointing, a recent study has shown that Fitts's law also holds in a 3D FPS environment .
This suggests that aiming assistance techniques that have been developed in 2D should also work in 3D environments.
Gamepads, where thumbsticks are used for aim, are not as precise as mice , so several aim-assistance techniques have emerged in FPS games that work similarly to techniques used in 2D GUI pointing.
Our review identified three common approaches for aim assistance in games: bullet magnetism, target lock, and gravity.
We discuss each of these in the next section.
The Target Lock method  moves the crosshairs of the player to the closest target's head; Lock was activated when players pressed a button on the mouse  The player's pitch and yaw were manipulated to make them face the closest opponent when the lock was activated.
To vary the level of assistance, we varied the time to move the crosshairs to a target's head.
At the lowest levels it was possible for an opponent to outrun being locked on to.
At the highest level the crosshairs would be on the target virtually instantly.
It took approximately 0.5s to lock on to a stationary target 90 degrees away at level 1  and 0.15s at level 10 .
In terms of Fitts's law, Lock reduces targeting time by reducing the distance between the pointer and the location of the target.
Target lock is not commonly used in FPS games but is popular in other genres.
Games like Grand Theft Auto, Red Dead Redemption, and the 3D games in the Legend of Zelda series have used locking.
This method is also based on the "object pointing" interaction technique, which tries to reduce empty space between targets by moving between selectable targets .
Lock may seem ideal for reducing targeting time but has drawbacks that may make it not viable in an FPS: distractor targets may compromise the performance of Lock; Lock requires explicit activation by the player; and Lock is obvious so players in competitive situations players may not enjoy it .
The end effect is similar to the area cursor method  because it allows players to hit targets without perfect aiming, essentially increasing the target's width.
We applied magnetism towards the body of the enemy if the crosshair was off the target and to the head of the enemy if the crosshair was already over a target.
Assistance level was varied by the amount of magnetism applied.
Bullet does not move the crosshair or change the CD ratio so may be less intrusive than other methods.
However, Bullet may have issues if distractor target are present as it may be attracted to the wrong opponent.
Area cursor  follows the original implementation , but is adjusted to work in a 3D environment.
Normally when a shot is made in the game a zero extent trace is used to determine if a target has been hit.
When the area cursor method is active, a rectangle  is projected into space and used to test intersection.
On screen, the regular crosshair radius is 10px.
With assistance, the physical size of the crosshair changes as the activation area changes, as seen in Figure 1.
The size is calculated as 10px+, where 1  Level  10.In terms of Fitts's law, area cursors essentially increase the width of the target , as such bigger cursors lower the index of difficulty.
Assistance level is varied by varying activation area sizes.
Area cursor was chosen because it had the best performance results when compared with sticky targets or the gravity method in a 2D environment .
Additionally, Area has improved targeting for older adults  and users with motor impairments .
One advantage of Area is that it should still be effective with moving targets; however, sloppy targeting behavior may appear with players who get accustomed to the extra activation area , and distractor targets will affect Area.
Our implementation handles multiple targets inside the activation area by choosing the target closest to the center of the crosshairs to be hit.
Finally, we chose that our implementation would not directly help players get headshots; to score a headshot the center of the crosshair must be over the target's head.
Bullet Magnetism  "bends" bullets towards the closest target if a target is within the activation range .
The bullets in the game are instant shots, thus each bullet fired is described by a vector.
When an enemy is within range , then Bullet adjusts this vector towards the closest opponent when the player fires and before the bullet collision logic.
The higher the level of assistance, the farther away the effect begins and the more it corrects.
Bullet is not based on existing aim-assistance research but is present in games like Halo and Gears of War 3.
It is exclusive to shooting games because of the presence of bullets.
Bullet Magnetism adjusts the flight path of bullets once they leave the gun, and was implemented to mimic the way that bullet magnetism works in Halo.
The sticky targets method  works by changing the control-to-display  ratio when the crosshairs are over a target.
The lower CD ratio results in a pseudohaptic effect of stickiness when over a target .
In our case, the amount of movement is divided by , where 1  Level  10.
In terms of Fitts's law, this method increases the width of the target in motor space  by affecting the second phase of pointing where corrective actions are taken.
Once the player gets to the target and the stickiness kicks in they can position the cursor on the opponent more precisely due to the bigger size in motor space.
Sticky is used in games like Halo, Modern Warfare 2, and Red Dead Redemption , and is generally applied on console games.
Images from the FPS environment.
Informal studies have also suggested that subjects are more accurate in a 3D FPS environment with CD adaptation than without .
However, distractors could be an issue with Sticky, compensation may lead to overshooting , and studies have suggested that this method might not be useful for moving targets .
Games like Call of Duty tend to move the cursor along with a target to mitigate the moving target problem; however, we did not implement this feature to better mirror the 2D version used in prior research.
Equation 2 gives a position in the 3D environment that is the weighted average of all attractive forces.
Because our 3D crosshairs do not have an actual position in the world , we have to anchor the gravity effect.
We calculate the current direction of the player and the direction of the warped position.
The crosshair is then moved.
A lower level of assistance moves the crosshairs more slowly than a higher level.
Gravity was included because of its strong performance in previous studies of 2D games .
Commercial games that use gravity,  try to only apply gravity effects on the closest target.
In our implementation, we only activate gravity if the mouse is moved toward the warped position.
If the mouse is not moved, or is moved away from the warped position, no effect is applied on the crosshairs.
In addition, we implemented gravity to be attracted to the head of enemy targets to assist players with headshots.
Gravity is subject to distractors, potentially moving the crosshairs when a player is aiming at another target.
The target gravity method  gives each target an attractive force that results in a player's crosshairs being dragged towards targets.
In terms of Fitts's Law, Gravity reduces the distance to the target.
There are several different ways of implementing target gravity; however, we transferred the 2D algorithms  directly into the 3D environment.
The gravity is calculated by first identifying all targets within the player's line of sight.
For these n targets, let p1, p2,..pn be the position of the targets, p0 be the position of the player in the 3D space, and pw be the warped position.
G is the gravitational constant.
For each target, the target weight is calculated with Equation 1.
Visual Studio 2010 with the Nfringe add-on by PixelMine.
The system ran on a Windows 7, Intel Core 2 Quad machine and an Acer 24-inch, 1920x1080 LCD monitor with a 60 Hertz refresh rate.
Each participant set a comfortable sensitivity level for the Logitech G5 gaming mouse during the training round, and could not change it once the training rounds were complete.
Logging of ingame actions was done on a Microsoft Sql Server 2008 R2 database.
A C# console was written to receive logging messages from game clients and write them to the database.
Targets were shot by placing the center of the crosshairs on the target and left-clicking the mouse.
The targets in S1 were stationary.
In S2, the enemies moved in a random pattern when the player was in the enemy's line of sight.
A random spot was chosen  and the enemy began to move to that location while shooting at the player.
Once the spot was reached, a new random location was chosen; this was repeated until the enemy was dispatched.
The movement was limited so the enemies could not wander out of their rooms or move to the location of another enemy.
In both studies the player movement was controlled with a standard WASD scheme.
Aim assistance levels were determined through pilot tests, and were custom-made.
The walkthrough level was split into a hospital-themed area and a warehouse area.
Both areas were linear so that the player could not explore, affecting the time measure.
In the hospital area, enemies were placed in rooms along with friendlies.
The warehouse area was darker and the enemies and friendlies were encountered as the player moved up.
The locations of the enemies can be seen on the map in .
The shooting gallery level was a simple outdoor environment.
The player was confined to a square and the targets appeared in front of the player in several waves.
Participants were told that they would be testing several implementations of aiming assistance and that some rounds would have assistance, whereas some would not.
Participants were unique to each study, which were all approved by the research ethics board.
In each round, there were seven waves of enemies.
Each wave consisted of six targets; players tried to shoot as many as possible in 10 seconds.
Waves 1 and 4 were close to the player; 2 and 5 were at a middle distance; 3 and 6 were farthest.
In wave 7, enemies were placed in varying locations at the three distances, as shown in Figure 1.
In each of the six rounds, one type of aim assist was used: Bullet Magnetism, Area Cursor, Sticky Targets, Gravity, and Lock, all with the high level of assistance, and no assist ; a Latin Square balanced the presentation order.
We recruited 12 players  to participate in S1.
Three participants identified themselves as novices at FPS games, 5 as intermediate players, and 4 as experts.
The experiment took 20 minutes to complete.
After providing informed consent, participants completed the experimental task.
Participants were compensated with $5.
Study 1  extended previous work on modeling Fitts's Law in 3D FPS environments  and quantifying targeting assistance in 2D shooting games  with a shooting gallery-style task and 5 types of aim assist.
User movements and enemy actions were constrained and the task focused on control rather than realism.
The purpose of the study was to determine if the aiming assistance techniques that proved effective in 2D  transfer to 3D.
Study 2  investigated the same 5 aim assist techniques in a realistic walkthrough task, complete with enemy targets who fired at the player and friendly targets that were to be avoided.
Common features in FPS games  were implemented as we focused on game realism over control.
The purpose of the study was to determine if the techniques that worked in the simple 3D environment would hold in a more complex "game-like" environment.
S2 was a full game-like walkthrough level set in an abandoned warehouse .
The level contained 12 enemy bots and 8 friendly turtles that acted as distractor targets.
Participants were equipped with an assault rifle and a pistol.
The assault rifle had a higher rate of fire than the sniper rifle and did less damage with each hit.
The pistol had a slower rate of fire than the assault rifle, but did more damage per bullet .
The level was complete with visual effects  to look and feel like a realistic FPS game.
Participants played the custom level 14 times.
The first two rounds were used as training to familiarize players with the controls and locations of enemies and friendlies.
The remaining 12 rounds consisted of one round with each of the six aim methods at low  and high  assistance and an additional two control rounds.
At the end of each round, players completed a survey.
Participants were instructed to avoid shooting the friendly turtles.
Speed: Time measured the elapsed time to complete the task.
Subjective Speed Rating was provided by players on a 21-pt scale .
Outcome: Deaths is the number of times a player was killed by an enemy.
In S1, there were no enemies, thus Kills  is used to reflect outcome .
Subjective Performance Rating was provided by players on a 21-pt scale .
Perception: The Perceptibility of the assist technique was rated by players on an 11-pt scale .
For each of the four data sets, we conducted RM-ANOVAs with Assist Technique as a within-subjects factor on all dependent measures.
In S1 and S2 there were six levels of Aim Assist Technique ; in S3A and S3B, there were five levels .
Finally, S2 had an additional within-subject factor: level of Technique Strength .
Data violating the sphericity assumption had the degrees of freedom adjusted using the Huynh-Feldt method.
Type 1 error was prevented by using the Bonferroni adjustment on all pairwise comparisons.
Participants played two versions of the same map as S2 that was reduced in distance by half and contained six enemies .
The first version  used an assault rifle and had no friendly distractor targets.
The second version  used a sniper rifle  and four friendly turtles.
S3A and S3B omitted the Lock method and used only high  assistance.
Participants went through the level 12 times.
The first two rounds were training; the first was training for S3A and the second for S3B.
The remaining ten rounds consisted of running through the control, bullet magnetism, area cursor, sticky targets, and gravity rounds in S3A and then repeating the process in S3B.
The order of presentation of assistance types was balanced with a Latin Square.
Half of the participants started with S3A and half started with S3B.
Gravity did not improve over Control on any measure.
Sticky improved on Hit Ratio; Area improved on both Hit Ratio and Kills.
Lock and Bullet improved on Hit Ratio, Headshot Ratio, and Kills.
There were differences between the techniques as well, with Bullet and Lock beating the other techniques for Headshot Ratio and Kills.
The same dependent measures were collected for each of the three studies, except there are no survey data for S1.
Accuracy: Hit Ratio presents the number of hits over the number of shots fired, representing targeting efficiency.
Headshot Ratio presents the number of headshots over the total number of hits, representing targeting quality.
Subjective Accuracy Rating was provided by participants on a 21-pt scale .
Because level produced few systematic differences, we present results for the higher level of aim assist only in S2 to correspond to the high level that was used in S1 and S3 .
In general, players noticed the Lock method, and perceived that it aided their speed, accuracy, and overall performance.
In terms of objective differences only Lock showed systematic improvements over Control in improved Time, Hit Ratio, and Headshot Accuracy, and fewer Deaths.
Bullet magnetism also improved Headshot Ratio and Deaths over control, but there were no other improvements offered by the aim assist techniques over Control and differences between the assist techniques were minimal.
Area increased Hit Ratio over Control and Gravity.
Bullet increased Headshot Ratio over all others.
Area reduced Time over Control, Sticky, and Gravity.
Bullet reduced Time over Control.
Bullet and Area reduced Deaths over Sticky and Gravity.
Area and Sticky were more perceptible.
There were no main effects of Expertise for any of the measures; however, an interaction of Expertise and Aim Assist on Time  shows that experts took significantly less time than novices in the Bullet  and Area  conditions.
Bullet and Area had higher Hit Ratios than Control or Sticky .
Bullet and Gravity improved Headshot Ratio over Control and Area .
Bullet reduced Time over others.
Bullet reduced Deaths over others.
Area and Sticky most perceptible.
There were no main effects of Expertise for any of the measures and no systematic differences between the aim assist techniques depending on expertise.
When the sniper rifle was used the techniques improved aiming differently.
Area improved the Hit Ratio, whereas Bullet improved the headshot ratio.
Both Bullet and Area reduced Deaths and the Time taken over the other approaches.
In terms of noticeability, Area was perceived, whereas Bullet was not.
Gravity had an elevated Headshot Ratio but no other differences, and Sticky resulted in no improvements, but was perceived.
The techniques differentially improved performance over Control under the various experimental conditions.
Gravity underperformed across the board, and was the only approach that did not improve hit ratio in S1.
Sticky helped with Hit Ratio in S2 but did not improve performance on any measure in the walkthrough tasks.
Area cursor improved Hit Ratio in S1, S3A, and S3B, but not S2.
Area also improved kills/deaths in S1 and S3B, but did not work as well when the assault rifle was primarily in play .
Bullet magnetism worked well on all measures in S1, S3A, and S3B, but only worked for Headshot Ratio and Deaths in S2.
Lock was only used in S2, and improved over Control on all objective measures.
The main findings from our studies are: * Realistic game elements such as moving and aggressive targets, distractor friendlies, multiple-shot weapons, and lighting effects dramatically altered which aim assist techniques worked well in the 3D FPS; * In our least-constrained game environment , only target lock consistently outperformed the control condition ; bullet magnetism worked well for deaths and headshots; * In the single-issue manipulations of study 3, bullet magnetism and area cursor performed well; gravity and sticky targets performed poorly;
The bullet magnetism technique attracts a fired bullet, by a certain amount, to a point on the nearest target's head  or body .
Using the head as an attraction point is a clear explanation for this technique's success on the headshot measure; even when targeting the body, bullet magnetism could still bend the bullet's trajectory upwards to the enemy's head.
Bullet magnetism also worked well both with a higher-precision weapon and with fewer distractor targets.
These results are likely due to the technique's limited manipulation of trajectory: if the player can get the targeting reticule close to the intended enemy then the assist will improve targeting performance without causing errors.
Area cursor also performed well for several measures; this technique essentially shoots a larger bullet, increasing the target size.
This effect worked particularly well with the higher-precision rifle - because there is no alteration to the aiming action, higher precision appeared to allow players to make faster use of the larger targets.
It is interesting that both bullet magnetism and area cursor alter the targeting process only after the player has carried out their aiming action.
These techniques do not change the user's control over moving their view, and do not attempt to `decide' which target the user is aiming for.
It is possible that magnetism and area cursor worked well because they caused less conflict with the user's control actions.
However, we feel that these early effects are more important to understand because the goal is for the techniques to be applied in a multiplayer environment to help weaker players compete.
Balancing play actually requires early effects - the techniques have to work well for people who have not used them before.
In addition, the weaker player will in all likelihood have less experience, and thus is it critical that the techniques work in unfamiliar environments with imperfect handling of the controls; realistically, novice players cannot anticipate enemies and may not be familiar with a certain game map.
The long-term effects are also important, which even our 2hour study cannot assess.
However, we have some guidance because half of our participants were FPS experts ; the other half were novices.
There were no systematic differences in the efficacy of the techniques depending on expertise.
This is important because regardless of whether a novice is playing against an expert or an expert is playing against a professional, certain techniques will be more effective.
So although we cannot predict the effects of longterm usage of the techniques themselves, we can assume that long-term usage of the general controls and environment do not affect technique efficacy.
The application of our results is limited to aiming in 3D games - our work is the first to investigate aim assistance in this realistic scenario, and generalizing to all 3D aiming is premature.
However, this is not a niche topic - these games have huge player numbers and represent a massive industry that historically has not been guided by HCI research.
There are also aspects of our work that may apply beyond 3D FPS.
The trend that post-aim techniques work better might be interesting to designers of other realistic and timeconstrained systems , whereas the controlled nature of S1 means that our results are of interest to others who study 3D aiming .
Gravity and Sticky performed badly on almost all measures in all studies.
Observations and player comments suggest that these techniques had problems because they change the movement of the reticule while a player is aiming, and this may cause conflicts with the user's intentions.
The gravity technique could drag the player's crosshairs to the wrong target , and this would result in the user fighting against the assist.
The gravity algorithm is attracted to the nearest target, but this may sometimes be at odds with where a user is trying to aim.
This behavior may be specific to FPS games where a player plans to hit targets in a certain order - in contrast, in the 2D shooting gallery game where gravity worked well, targets were equally desirable and it mattered little if the technique hit the wrong target; the user could simply target the desired target on the next shot.
Sticky targets encountered similar problems - player ability to control an aiming movement was hampered by the assist because it manipulates the `user movement phase' of targeting rather than the `bullet travel' phase.
In previous work in aim assistance for 2D pointing, and in applying aim assistance in a 2D game , hit ratio  was a primary metric for assessing success.
This was the approach we initially used in judging our techniques in S1.
However, with S2, it became clear that Bullet and Lock were the most effective techniques - participants died fewer times while completing the level, even though the hit ratio of Bullet was worse than other techniques that performed poorly in terms of outcome.
Furthermore, Bullet was effective at increasing the number of headshots; because headshots are so important in Unreal, scoring a few headshots has more impact than scoring many body shots.
When considering assistance techniques, designers should not focus only on hit ratio, but also be aware of key game mechanics, such as the importance of where hits register.
While we expected that hit ratio would be the most important metric, it turned out to be only part of the larger picture when evaluating a complex game.
Our future work in this area will follow three directions.
First, we will explore additional game factors- such as player movement, cost functions associated with shooting , or additional precision , and the role of lighting.
Second, we will investigate the use of bullet magnetism and area cursor for balancing multiplayer games, using the modified Unreal system that we built for these studies.
Third, we will further consider the way that the 3D environment itself affects assistance techniques, in terms of the user's movements in the X-Y plane versus the bullet's movement in all three dimensions - a characterization that has not been applied before to aim assistance techniques.
We carried out three studies to examine the performance of five different aim assists.
Although the assists worked well in a target-range scenario, their performance was reduced when real-game elements were introduced.
We examined the relationships between game elements and assist performance by manipulating specific game elements; we found that two techniques - bullet magnetism and area cursor - worked well in a wide variety of situations.
In addition, we found that some techniques that worked well  were too perceptible to be successful for balancing, and that some previouslysuccessful techniques  worked poorly throughout.
Our studies provide initial insight into how game factors affect aim assistance, and identify techniques that show potential for player balancing.
Adams, E. Fundamentals of Game Design.
Adams, E. Difficulty Modes and Dynamic Difficulty Adjustment.
Gamasutra: The Art & Business of Making Games Blog.
Balakrishnan, R. "Beating" Fitts law: virtual enhancements for pointing facilitation.
Bateman, S., Mandryk, R.L., Stach, T. and Gutwin, C. Target assistance for subtly balancing competitive play.
Blanch, R., Guiard Y., and Beaudouin-Lafon, M. Semantic Pointing: Improving Target Acquisition with Control-Display Ratio Adaptation.
Bostan, B., and Out, S. Game challenges and difficulty levels: lessons learned From RPGs.
In International Simulation and Gaming Association Conference, 2009.
Cockburn, A, and Firth, A.
Improving the Acquisition of Small Targets.
In HCI03 Conference on People and Computers XVII, 2003.
Csikszentmihalyi, M. Flow: The Psychology of Optimal Experience.
Elmqvist, N., and Fekete, J. Semantic Pointing for Object Picking in Complex 3D Environments.
2013 Essential Facts About the Computer and Video Game Industry www.theesa.com/facts/pdfs/ESA_EF_2013.pdf 11.
Falstein, N. Understanding fun - the Theory of Natural Funativity.
In Introduction to Game Development, Rabin, S.
