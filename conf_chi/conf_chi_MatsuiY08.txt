They proposed a model-based evaluation of cell phone menu interaction, gathered data and evaluated three models, Fitts' law model, GOMS, and ACT-R.
They concluded that the prediction by GOMS was the best among the three models.
They also tried to improve menu traversal time by using a simple best-first search algorithm, and got over 30% savings in traversal time.
These very simple search methods gave fairly good improvements , therefore, we can expect further performance improvements by optimizing the structure with a better algorithm.
This paper proposes an algorithm based on the Genetic Algorithm   for optimizing the performance of menus.
The algorithm aims to minimize the average selection time of menu items by considering movement and search/decision time.
We will show results on a static hierarchical menu of a cellular phone where a small screen and limited input device are assumed.
Hierarchical menus are now ubiquitous.
The performance of the menu depends on many factors: structure, layout, colors and so on.
There has been extensive research on novel menus, but there has been little work on improving the performance by optimizing the menu's structure.
This paper proposes an algorithm based on the genetic algorithm  for optimizing the performance of menus.
The algorithm aims to minimize the average selection time of menu items by considering movement and decision time.
We show results on a static hierarchical menu of a cellular phone where a small screen and limited input device are assumed.
Our work makes several contributions: a novel mathematical optimization model for hierarchical menus; novel optimization method based on the genetic algorithm .
Hierarchical menus are one of the primary controls for issuing commands in GUIs.
The performance of the menu depends on many factors: structure, layout, colors and so on.
There has been many studies on novel menus , but there has been little work on improving the performance of a menu by changing its structure .
There have been many studies on menu-design and menulayout from the standpoint of the user interface.
They used the Guided Search  model to develop menu designs.
The optimization problem of hierarchical menus can be considered as one dealing with placing menu items on the nodes of a tree.
Let us assume a tree where the maximum depth is D, the maximum number of children that a node has is W , the root is the initial state, and menu items are on nodes.
An example of a hierarchical menu is shown in Fig.
As shown in the figure some menu items have children; i.e., some menu items have submenus.
The time to select the target item is the time to traverse from the root to the target node.
The problem is to minimize the average traversal time with respect to the given search frequencies of different menu items.
We cannot arbitrarily arrange the menu purely for efficiency.
We must respect the semantic relationships between the items.
That is, "Ringer Volume" is under the "Settings" category rather than vice versa for good reason.
To cope with the difficulties of representing and reasoning about menu item semantics we introduce two metrics: functional similarity and menu granularity.
Functional similarity is a metric that represents the similarity of two menu items in terms of their functions.
We assume that the functional similarity takes a value between 0 and 1; 0 means that the two items have no similarity and 1 means that the two items have very high similarity.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
We assume that the search/decision time tsd i at level l node that has nl items can be expressed as reported by Cockburn et al.
New Mail" and "Favorite Web Site" have low similarity and that "Create New Mail" and "Inbox of Mail" have high similarity.
We use this metric to avoid placing items with low similarity on the same submenu of a node.
If items with low similarity are put on the same submenu, it becomes difficult for a user to remember the menu layout.
The formal definition will be given later.
Menu granularity is a metric that reflects the number of submenus a node has as its descendants.
We introduce this metric to avoid placing an item that has many children and an item that has no child as children of the same node.
The formal definition will be given later.
However, this approach is time consuming; therefore, we chose to use another one.
We represent the functional similarity of item Ix and Iy by using a function s which takes a value between 0 and 1.
Let us assume that a generic function of each item Ii can be specified by some words wli = {w1 , w2 , * * * }, and let WL = wli be the whole words.
Moreover, let lings, and vi l M =  be a tree where V = {vi } denotes the nodes, and E = {eij } denotes the edges.
We call the leaf nodes that correspond to generic functions "terminal nodes."
One type is terminal nodes that corresponds to generic functions, and the other is intermediate nodes.
The terminal nodes cannot have children.
Let Ii represent a menu item and the total number of items be N ; i.e., there are Ii  menu items.
Items that correspond to generic functions are less than N , and some items/nodes are intermediate items/nodes that have submenu as a child or children.
We assume that a menu item Ii is assigned to a l l node vi ; therefore, we use Ii and vi interchangeably.
Let us consider a node vi that has m children.
Previous studies showed that breadth was preferable to depth .
Because the previous studies showed that breadth was preferable to depth, we use a kind of breadth-first search algorithm as the core of the proposed GA. An algorithm that places a menu items Ii one by one on a usable node can find a good solution.
For this reason, we use an algorithm that assign Ii to a node as follows: 1.
A chromosome of the GA is a sequence of Ii ; i.e., a chromosome can be represented as a permutation of numbers.
According to the permutation, assign a menu items Ii one by one to a usable node that has the smallest node number.
If a generic function is assigned to a node then a node cannot have children, and the node below the assigned node is marked as unusable.
We measured the pointing time of one-handed thumb users for the above 28 groups by recording the tone produced by each key press .
Unpaid volunteers participated in the experiment.
We prepared 28 tasks corresponding to the 28 groups.
We got tp i = 192 + 63 log2   for predicting the pointing time, and the equation is very similar to the one reported by Silfvergerg et al.
1 Menu selections are done by pressing keys, therefore we assume that moving to the next level starts from the key that reached the current node.
Although the target phone has the ability to select a menu item by pressing a key that is prefixed to item title , we assumed that all selections were done by cursor movements.
We use a crossover operator that does not generate an invalid chromosome.
As described above, a chromosome is a permutation of numbers; therefore, we use crossover operators that are developed for the representation.
We use the swap mutation as the mutation operator.
Randomly chosen gene at position p and q are swapped.
The crossover and mutation operators do not generate invalid chromosomes; i.e., offsprings are always valid permutations.
We use a steady state GA, the population size is 100, the mutation rate is one swap per chromosome.
The tournament selection of size two is used as the selection method.
We conducted the following experiments.
Because GA is a stochastic algorithm, we conducted 50 runs for every test cases, and the results shown in Table 1 and Table 2 are averages over 50 runs.
The two parameters for weights were set to  = 10.0 and  = 1.0 in Table 1. case 1 Typical Usage: This experiment was conducted to assess the typical improvement by the GA.
The maximum width W was 16.
The index of difficulty for 24 x 24 key pairs were calculated as follows.
We measured the relative coordinates of the center  of each key, and measured the width and height of each key.
We calculated the index of difficulty to an accuracy of one digit after the decimal point.
This gave us 28 groups of indexes of difficulty.
We proposed a GA-based algorithm for minimizing the average selection time of menu items that consider the movement time and the decision time.
The preliminary results showed that the algorithm can generate a better menu structure.
The target of the proposed algorithm is not limited to cellular phones, and can be applied to other kinds of menus.
This experiment was conducted to see the effect of limiting the breadth.
In Table 1, "Local Move" shows the results of a local modification that places menu items according to their frequency; i.e., the most frequently used item is placed as the top item, and so on.
As the table shows, the proposed algorithm can generate menu with shorter average selection time.
Moreover, limiting the number of usable keys gave us better menus.
This is partly because the search/decision time is proportional to log2 , where n is the number of items.
As the number of items increases, the search/decision time increase; therefore, the average selection time increase.
Limiting the number of keys to 6 gave a longer selection time, and smaller penalties.
We introduced two weights for penalties of functional similarity and of menu granularity.
Table 2 shows the results of different weight settings for the case W = 9.
As Table 2 shows  and  to non-zero gave similar results.
Setting them to zero gave a shorter selection time, but the penalties were larger.
The experiments show that the proposed algorithm can generate better menu hierarchies for the target phone.
Because our targets are not limited to cellular phones, and the preliminary results are promising, we will apply the algorithm to wider varieties of targets.
In this paper, we focused on a static menu as the target; adaptive/dynamic menu  that changes menu contents depending on usage will be a future target.
The data used in the experiments, especially selection frequency data, were limited.
Therefore we should gather a wider variety of usage data and use that to confirm the effectiveness of the proposed method.
