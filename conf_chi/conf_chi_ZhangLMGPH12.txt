An important class of tasks that are underexplored in current human computation systems are complex tasks with global constraints.
One example of such a task is itinerary planning, where solutions consist of a sequence of activities that meet requirements specified by the requester.
In this paper, we focus on the crowdsourcing of such plans as a case study of constraint-based human computation tasks and introduce a collaborative planning system called Mobi that illustrates a novel crowdware paradigm.
Mobi presents a single interface that enables crowd participants to view the current solution context and make appropriate contributions based on current needs.
We conduct experiments that explain how Mobi enables a crowd to effectively and collaboratively resolve global constraints, and discuss how the design principles behind Mobi can more generally facilitate a crowd to tackle problems involving global constraints.
Within studies of human computation, an important class of underexplored tasks are those in which the solution must satisfy a set of global requirements.
For example, in leveraging the crowd to write an essay, a requester may want to specify requirements on the desired tone, tense, length, structure of arguments, and style of exposition that must hold consistently throughout a piece of writing.
Some requirements, e.g., presenting a balanced perspective on a situation, touch upon different components of the essay and depend on its composition.
Similar considerations arise in creative tasks such as graphic design, and more mundane tasks such as meeting scheduling.
As good solutions rely on the composition as a whole and are marked by interdependence among solution components, such tasks are not amenable to the divide and conquer approach used in most crowdsourcing systems.
As a focal example, consider the problem of crowdsourcing itinerary planning.
Planning events such as vacations, outings, and dates often involve an itinerary , which contains an ordered list of activities that are meant to be executed in sequence over the course of an event.
People going on a trip have preferences and constraints over the types of activities of interest , how long to spend on different activities , the composition of activities , the budget, and the time available, which define a set of global requirements that an itinerary should satisfy.
Decisions on any particular activity in the itinerary may naturally influence other decisions.
Human computation  is an evolving paradigm with numerous studies and applications over the last decade.
Most human computation tasks explored to date are simple and easy to parallelize.
However, several recent studies  have tackled more complex tasks by using workflows that link together independent modules that harness different types of human effort.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
To handle tasks with global requirements, we introduce a novel crowdware paradigm that provides a single workspace in which a crowd of individuals contribute opportunistically based on their knowledge and expertise and the current solution context, and in which the system  coordinates the crowd problem solving effort to resolve global constraints.
Crowdware takes inspiration from groupware , which suggest principles and ideas on communication and collaboration within a shared context, that help a group to accomplish a joint task.
We consider how to apply such principles and ideas to crowd workers, who differ from groups in that individuals are only briefly involved, are less willing to spend time grasping the solution context or take metalevel actions, and may not consider the desires of other crowd workers when making decisions.
We focus on itinerary planning as a case study of coordinating a crowd to tackle tasks with global constraints.
We introduce a collaborative itinerary planning system called Mobi, which takes as input a planning mission containing a set of qualitative and quantitative constraints as articulated by the user and produces as output an itinerary that satisfies the mission.
The crowd participates via a single interface--displaying the current itinerary and a stream of ideas generated thus far-- that allows individuals to contribute opportunistically given the current context and to see their contributions incorporated into the solution in real-time.
Mobi focuses the crowd's attention on aspects of the evolving plan that needs work by prominently displaying a list of automatically generated todo items, which point out violated constraints, provide suggestions on how to address them, and promote activities directed at the refinement of the itinerary.
Mobi allows users to specify their desires and needs in natural language, thereby enabling complex constraints and preferences to be expressed and used in the planning process.
We present two studies, which show that Mobi's design promotes a collaborative planning environment in which the crowd can effectively produce custom-tailored itineraries that satisfy the stated global constraints in user missions.
In the first study, we test the effect of displaying the automatically generated todo items on the rate at which quantitative constraints are resolved by the crowd, and measure the contribution patterns of the crowd workers.
We find that the use of todo items promotes satisfaction of constraints at a significantly faster rate than when the items are not displayed, and that the crowd's editing patterns show evidence of both collaboration and opportunistic planning.
The second study seeks to understand whether the end users believe that crowd-generated itineraries satisfy their stated requirements.
We find that users feel that the itineraries contain many activities of interest, mostly or fully satisfy their mission requirements, and are useful for their actual trips.
After presenting these results, we revisit and summarize the design principles behind Mobi and discuss how they can in general facilitate a crowd to tackle problems involving global constraints.
Planning can be viewed as an iterative task in which workers make successive edits to improve the solution.
There has been some attention on iterative tasks in human computation , and an interesting recent example is work by Kittur  that recruits workers to collaborate in Etherpad to translate a poem.
Workers were able to see their edits reflected in real time , and could communicate to explain their edits via chat.
One difference in Mobi is that the system uses its sense of the progress made so far, e.g., how full the itinerary is, which constraints are violated, etc., to prompt users on what needs work so as to guide the problem-solving process.
Other recent systems recruit a crowd to plan ; our work differs in that we consider planning tasks with global requirements.
Wikipedia can be viewed as an example of a system in which  contributors write and edit articles to resolve a set of global constraints as defined by Wikipedia's standards.
Much like the way todo items are used in Mobi to drive progress, template messages and cleanup tags are used in Wikipedia  to alert editors of changes that need to be made to improve an article.
Such messages are typically managed by human contributors, whereas in Mobi todo items are managed in an automated manner whenever possible.
Several models have been proposed to describe how people generate plans to achieve goals.
The successive refinement model advocates a top-down approach, where a highlevel goal is decomposed into subgoals iteratively, down to a sequence of elementary actions .
In contrast, the planning of many everyday activities  is often opportunistic--i.e., planning decisions happen whenever opportunities arise , so that a decision or observation in one part of the plan may suggest new ideas or illuminate problems in a different part of the plan, causing the planner to refocus his attention.
Opportunistic planning may involve both top-down and bottom-up processing.
For example, in an errand planning experiment , it was found that subjects would start making detailed plans , and then switch to planning on a more abstract level , and back and forth as they refined the plan.
Mobi is designed with the opportunistic planning model in mind, where individuals in the crowd are allowed to contribute freely as they see fit based on their observations of what needs work given the current solution context.
Real-life planning is a difficult problem for computers; despite advances in automated planning , a major challenge is in making sense of people's goals, preferences and other `soft' considerations .
Currently, the automated planner in Mobi supports workers by automatically checking constraints and computing trip times and routes.
In the future, automation may play a more active role in the planning process by learning about different requirements, suggesting activities and their composition in the itinerary, or even detecting and adding important constraints that may have been missed by the requester.
There are several existing commercial systems that either allow groups to plan trips for themselves or to ask friends and other members for suggestions.
Examples include Gogobot, triporama, Kukunu, and FriendTripper.
Mobi differs from these systems in that it seeks to produce not only suggestions for activities but an itinerary satisfying a set of global requirements, and can focus the crowd on making contributions where they are most needed.
Mobi takes as input a planning mission consisting of preferences and constraints, and generates an itinerary by having a crowd plan asynchronously using a shared interface.
Workers invited to contribute can view the current plan and all ideas proposed thus far, and make contributions as they see fit.
Edits can be made at any time and without restrictions, and the itinerary is automatically saved after each change.
We now describe Mobi's interfaces for specifying the planning mission and for assembling the itinerary, and discuss how these two interfaces support the process of generating itineraries and resolving constraints.
Mobi's planning interface is shown in Figure 2.
One can specify constraints on the number of activities in each category , as well as on the amount of time to spend on activities in each category .
Such constraints can also be used to express the preferred combination of activities in the plan .
Both qualitative and quantitative constraints contain natural language, and can express `soft' considerations that the computer cannot tackle alone.
In addition to these constraints, the system maintains a pair of time constraints, which state that the cumulative duration of the activities in the itinerary should not be significantly less than, or greater than, the duration of the trip specified by the user.
Our target users, also referred to as requesters, are people who are interested in planning a trip.
To start planning, the requester enters a planning mission using a simple web interface, which specifies the title and description of the trip, start/end locations and times, and whether they will use public transit or drive between locations in addition to walking.
Requesters can express two kinds of constraints: qualitative and quantitative.
Figure 1 shows an example of a planning mission that includes both types of constraints.
Qualitative constraints are specified in natural language , and describe the nature of the trip, what the user hopes to accomplish, who they are traveling with, etc.
Once a requester specifies a planning mission, workers can use Mobi's planning interface to view the mission by clicking on the reveal mission details button in the information panel .
The planning interface consists of two key components - the brainstream and the itinerary viewer.
The brainstream  is a collection of everyone's ideas.
An idea can be an activity  or a note .
To view ideas in the brainstream, one can either scroll down the list, click on a hashtag to display ideas belonging to a particular category, or use the auto-completing search box.
The brainstream's design draws inspirations from social technologies such as Twitter and Piazza, which aggregate information into a feed or stream that one can then easily process.
If the current itinerary does not satisfy a stated quantitative constraint or is over time or under time, the violated constraints are automatically turned into todo items that are displayed at the top of the brainstream in a different color, alerting workers to what needs work .
The todo items suggest specific actions, e.g., "Add more lunch activities," or, "The itinerary is over time.
You can also edit or remove items."
Todo items also provide natural language explanations of how the current itinerary violates particular constraints, e.g., "You need exactly one lunch activity but there is currently none in the itinerary," or "The itinerary is over time because the trip must end by 9pm."
We note that the system is able to check arbitrary quantitative constraints and generate todo items without understanding the meaning of the natural language categories; this is because workers associate activities with the categories they belong in when they are suggested.
As we will show in the next section, todo items are an important design element that helps to accelerate the speed with which quantitative constraints are resolved.
A blue badge next to an activity indicates that it is already in the current itinerary.
To add a new idea , one can type a title into the search box and click `add'.
If similar ideas already exist, a drop down list will appear, which helps to prevent duplicates and promote editing.
For notes, workers can fill in a description if desired.
For activities, the activity editor  asks workers to provide the name of the location, what to do or see, the activity's duration, and the  categories that the activity belongs in.
In the same editor, workers can view a map, which allows them to mark the location of the point of interest.
Workers can decide to add the activity to both the itinerary and the brainstream, or only to the brainstream for the time being.
The brainstream allows people to brainstorm together and build upon each other's ideas.
It keeps around all alternative activities, and allows workers to quickly access them through the hashtags and the search box.
The itinerary viewer  consists of an itinerary and a map.
The itinerary displays the activities in order, alongside the times during which they are scheduled to take place, with travel times between locations automatically computed and accounted for.
It is accompanied by a map showing the activities' locations and routes between locations.
The map and itinerary allow crowd workers to see at a glance whether the plan is coherent, that is, if any activities are out of place , or if too much or too little time is spent on an activity.
The itinerary doubles as an editor--workers can drag and drop activities to rearrange their order, and click an activity to see its details, edit it, or remove it from the itinerary.
Mobi promotes collaboration by making the plan always visible and editable by everyone.
This follows the WYSIWIS  principle , which ensures that all participants have equal access to shared information.
Mobi also supports opportunistic planning, by providing support for both top-down and bottom-up planning, and a fluid way to move back and forth between the two.
We hypothesize that elements of Mobi's design, namely todo items and having a shared interface in which the crowd can work off the current solution context and existing ideas, promotes the crowd to effectively and collaboratively resolve the users' stated constraints so as to produce itineraries that satisfy planning missions.
Focusing first on quantitative constraints, we conducted an experiment using two versions of Mobi--one that displays todo items and one that does not-- to evaluate the effect of todo items on how quickly the crowd can reach feasible solutions that satisfy the stated constraints.
We created custom day-trip planning missions for each of eight major U.S. cities: New York, Chicago, DC, Las Vegas, Los Angeles, San Francisco, Seattle, and San Diego.
We recruited Mechanical Turk workers in the U.S. who have a 95% or higher approval rating to contribute to the planning missions, by working on human intelligence tasks  in which the Mobi interface was fully embedded.
Turkers were asked to make `micro-contributions' as they plan the trip with other Turkers, and were told that they can submit a HIT as soon as they have made any contribution.
Turkers were paid 15 cents per HIT, and no verification was used other than requiring Turkers to have made some edit  to the brainstream or itinerary before submitting the task.
For half of the cities, the version with todo items was posted prior to that with no todo items, and the order of posting was reversed for the other cities.
Missions were posted for up to four days.
Other than the display of todo items, the interface, job description, and instructions are identical in the two conditions.
Finally, as constraints can be violated and satisfied repeatedly throughout the planning process, we sought to understand how quickly constraints are satisfied on average.
We introduce the notion of the violation duration of a constraint, which is the number of HITs it takes for a constraint to be satisfied by the itinerary since it was last violated .
Figure 7 shows the cumulative distribution of the violation durations of constraints in the todo versus no todo conditions.
We observe that for any violation duration , a larger fraction of the constraints are satisfied within that duration in the todo condition than the no todo condition.
We also see that more than half of all violated constraints become satisfied after three or fewer HITs in the todo condition.
Figure 8 shows, for the todo versus no todo conditions, the rate at which each constraint gets satisfied as workers contribute to the planning effort for the Seattle and Chicago planning missions.
We observe that constraints are satisfied much more quickly in the todo condition.
The Chicago case is particularly interesting; whereas in the todo condition a worker violated a previously satisfied constraint while editing and proceeded to make successive edits that led to satisfying all of the constraints, in the no todo condition a satisfied constraint was violated and then left unaddressed for a significant amount of time.
Number of HITs required to satisfy all quantitative and system generated time constraints for each city in the todo and no todo conditions.
For cities marked by an asterisk, itineraries in the no todo condition still have violated constraints; in such cases we reported the number of HITs thus far.
From the final itineraries, it appears that Turkers not only pay attention to the quantitative constraints, but also the mission description, e.g., by filling the itinerary with government/history related activities in DC, and by offering low-cost options in Vegas.
Table 1 summarizes, for each of the examples shown in Figure 5, statistics about the final itineraries, different types of edits Turkers made, and the amount of money paid to workers.
We see that the final itineraries contain original ideas from multiple workers.
Specifically, Turkers generated just over twice as many ideas for activities as are in the final itineraries, and generally used notes sparingly.
Results show that when prompting users with todo items, quantitative constraints are satisfied significantly more quickly than when todo items are not displayed.
We measure the speed of the process in number of HITs performed.
For this worker, only the itinerary-changing HITs were counted, but for all other workers, all HITs were counted.
The unsatisfied constraints during the planning process for the Seattle and Chicago missions.
The height of each bar indicates the number of constraints unsatisfied after k HITs.
Each colored segment represents a particular quantitative constraint, and its height indicates the extent to which it is violated.
The black segment represents the percent by which the itinerary is over time or under time .
Having shown that todo items play an important role in focusing the crowd's effort towards satisfying the quantitative constraints, we turn to investigate the crowd's work process while using Mobi in the todo condition.
In particular, we look for evidence of collaborative behavior from the crowd, and at the way that they plan using the current context of the plan.
We focus first on the process of generating ideas for activities.
We observe that roughly half the edits to the brainstream contain new suggestions  while the other half  are edits of existing ideas in the itinerary.
Of the edits, 72% are edits on ideas that originated from someone else , which suggests that workers are working off others' contributions as they refine ideas and the itinerary.
When editing an activity, we see that edits are predominantly on an activity's duration , but there are also edits to change title/descriptions  and to correct an item's location coordinates .
Although duration edits are often in the context of resolving some constraints, edits to the title, description, and location are particularly encouraging to see as they suggest that the interface is providing  means for users to discover and improve on existing ideas.
Turning to the patterns of itinerary edits, we observe that most of the contributions come from adding  and reordering activities , but that workers also edit existing ideas  and remove activities .
When tasks are left to run after the quantitative constraints are all satisfied, we observe that itineraries continue to evolve; workers replace activities in the itinerary with other activities, reorder the itinerary, edit existing items, and so on.
While constraints may be violated during such edits, workers were reminded of such violations by the todo items and violated constraints were quickly satisfied again .
This suggests that new ideas can continue to be generated and incorporated into the itinerary; in fact, workers are encouraged to do both because they are paid for such contributions and because we display a todo item that asks workers to continue to improve the itinerary whenever all quantitative constraints are met.
Throughout the experiment, we saw very few Turkers who blatantly tried to game the system.
The kinds of gaming behavior we did observe generally fell into two categories.
In one, a Turker under-specifies an activity, either by creating an activity without filling in its description and location, or by adding a note containing a suggestion for an activity instead of just adding the suggested activity.
In the other, a Turker would fully specify an activity, but use two or even three HITs to do so, by spending a HIT on creating the activity, another to edit its details, and another to add it to the itinerary - when all this can be accomplished with a single `add activity' action.
Having seen that workers can resolve quantitative constraints effectively using Mobi, we conducted a user study through which we seek to evaluate how well the generated itineraries satisfy not only quantitative constraints, but also the stated qualitative constraints, from the perspective of requesters.
We recruited 11 subjects to participate in the study via the use of several university mailing lists.
We specified requirements that participants be actually planning a forthcoming trip to a major U.S. city.
Recruited subjects are a mix of undergrads, graduate students, and research scientists.
We report on the responses of 10 of the users, as one of the users specified a trip destination that is not a major U.S. city.
Subjects were instructed to describe their planning mission, which includes qualitative and quantitative preferences and constraints.
Participants were given unlimited access to Mobi for over a week, during which they were free to modify their planning mission or to participate in the planning process.
Missions were crowdsourced on Mechanical Turk as was done in the todo versus no todo experiment.
At the end of the study, subjects were given a questionnaire, which asked them to evaluate the final itinerary and to describe their experiences using Mobi.
Subjects were each paid $30 for their participation.
The trip destinations specified by the users include Boston, New York City, San Francisco, Las Vegas, Orlando, and Washington DC.
The planning missions vary in length and specificity.
Figure 9 provides two examples of user missions and the generated itineraries.
To see how well the generated itineraries satisfy the end users' requirements, we consider three measures of the quality of an itinerary, namely the extent to which it  contains activities that the requester likes,  satisfies the qualitative and quantitative constraints specified in the planning mission, and  serves its purpose as a plan that is feasible, useful, and executable in real life.
Do itineraries contain activities that the requesters like?
Users were shown each of the itinerary activities  and asked to rate how much they think they would enjoy each activity on a 5-point scale .
Figure 10 shows a histogram of the activity ratings across all 10 participants.
Users also mentioned that the activities are diverse, interesting, and often unknown to them prior to using Mobi.
Do itineraries satisfy the qualitative and quantitative constraints specified in the planning mission?
All of the users answered that their itinerary fulfilled most or all of the requirements they had specified.
These problems can be partially explained by the fact that many constraints  are assumed or missed and therefore not explicitly stated by the users.
One potential solution is to have the requesters evaluate the itineraries as they are being created and add the missing constraints to the planning mission.
After resuming the task, we observe that after just a few HITs workers have already addressed the issue by removing offending activities, reordering activities , and adding additional activities .
Are the itineraries feasible, useful, and executable in reallife settings?
We asked users if they would or did use the itinerary in reallife.
All users expressed that they would use the itinerary as is, some version of the itinerary, or selective ideas in the itinerary.
When asked "If Mobi were made available for general use, how likely would you want to use such a tool again for recruiting the crowd to help you plan a trip?
Three users actually followed the itinerary or used the ideas in the itinerary in their real-life trips.
One subject reported that "having other people involved in the idea-creation process was extremely helpful.
It sparked all sorts of ideas that I kept in the back of my head throughout the weekend."
Another subject remarked that his "trip was mostly in the plan, but all restaurant plans changed due to necessity during the trip."
We found a dichotomy of users: those who are interested in obtaining a fully-specified itinerary and those who are interested in a loose itinerary that contains an unordered set of suggested activities that leave room for exploration.
An interesting solution is to allow requesters to choose between a fully specified or loose itinerary, which in turn translate into constraints that specify the maximum number of activities in the itinerary, the amount of buffer time between activities, and whether activities need to be ordered.
One of the most frequently mentioned benefits of Mobi is that both the idea generation and the planning are fully automated, thereby "integrating all the factors one would consider in planning an itinerary," yet making "the time spent creat-
Most users  said that they are comfortable with an anonymous crowd planning their trip.
Furthermore, results show that requesters mostly left the planning up to the crowd.
In particular, 3 out of 10 users said that they never or rarely checked on the progress of the itinerary, 5 did so occasionally, and only 2 frequently.
Likewise, 7 out of 10 users said that they never went back to modify the mission details or add notes.
As one user puts this succinctly: "the process seemed to work smoothly without my intervention."
Having demonstrated the effectiveness of Mobi for helping the crowd to resolve qualitative and quantitative constraints in the itinerary planning setting, we now revisit the elements of Mobi's design and discuss how these elements may in general inform the design of systems that facilitate a crowd to tackle problems involving global constraints.
Compared to the design of most other crowdsourcing systems for tackling complex tasks, Mobi is distinguished in its use of a single structured interface through which the crowd is exposed to the current solution and the global problem-solving context.
This unified view provides a shared context that allows contributors to coordinate and communicate more effectively with one another than approaches where participants are forced to work on different subtasks in separate contexts.
Mobi allows workers to choose how they want to contribute to the task.
In our studies, we found that workers generate a diverse set of ideas, and make various types of contributions while problem solving.
This freedom is particularly important for resolving global constraints as we do not know a priori the specific contributions that are needed.
Rather, contributions are context dependent.
While interactions are less controlled this way, note that the interaction is still highly structured; the crowd selects from a well-specified set of actions, todo items guide the crowd towards useful actions, and real-time feedback is provided on the effects of actions .
In the background, Mobi's automation computes routes and times, checks for violated constraints, and generates todo items.
Mobi understands, for example, when all of the quantitative constraints are satisfied; this ability enables Mobi to take such actions as prompting the crowd for future revisions and asking the crowd or requester to check for potential problems.
Mobi can do these things without knowing what the constraints mean, because the inputs that it seeks from the crowd include the categories of suggested activities.
This information is sufficient for the system to check for violated constraints, and therefore assist in the planning process.
With complex problems, requirements can change over time as ideas and partial solutions stream in.
In Mobi, a requester can add or revise requirements, write notes, or even directly alter the plan throughout the planning process.
To date, many human computation systems have relied on the assumption that problems can be solved in an algorithmic manner, using explicit procedures that outline the operations that need to be done and how they are ordered.
We argue for an alternative crowdware paradigm, where workers contribute to solving complex tasks in a less controlled environment, allowing them to view and build upon each other's ideas and to contribute as they wish, while being steered towards a solution by system-generated advice and alerts.
Using itinerary planning as a case study, we introduce a prototype named Mobi, which draws on groupware ideas and uses explicit processes  to generate itineraries that satisfy complex, interdependent constraints.
Our results show that constraints are resolved efficiently using this design, and that end users find that the generated itineraries satisfy their stated quantitative and qualitative constraints.
The design principles explored in research on Mobi bring into focus several research opportunities, including the formulation of novel combinations of crowdware and workflow approaches to enhance the ability of participants to effectively contribute to solving complex problems that are hard to decompose.
On potential extensions of Mobi, we are interested in studying ways to handle the implied constraints that are assumed or missed, such as the common sense knowledge that people may desire a bathroom break every few hours.
The challenge is to make implied constraints visible so they can be tackled like other constraints; possible approaches include having the crowd identify them, using automated procedures to detect and learn about such constraints, and asking requesters to provide feedback.
A related direction is to encapsulate qualitative constraints in todo items, which would allow workers to see everything that needs work in one place.
While we are using Mechanical Turk as an experimentation platform, we are interested in exploring Mobi as a social system, with friends and community members coming to help.
This introduces opportunities for identifying individuals who can best contribute to  a mission and routing tasks appropriately.
Finally, we envision rich opportunities to integrate different types of automation into Mobi--to detect failures, handle uncertainties, incorporate richer forms of user preferences, and combine automated and human planners in a synergistic way.
Mobi was initially formulated and prototyped at Microsoft Research during summer internships there by Haoqi Zhang and Edith Law, who thank Anne Loomis Thompson and Paul Koch for technical assistance on an earlier prototype.
Haoqi Zhang and Edith Law are generously funded by a NSF Graduate Research Fellowship and a Microsoft Graduate Research Fellowship respectively.
