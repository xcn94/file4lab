ABSTRACT A prime attraction of object-oriented programming lan~ages M the posslbdit~ of reusing code, We examme the support provided by Smalltalk to pro~ammers attemptin to incorporate an existing class mto a new.
We then describe a View Matcher i"or reuse, a tool that documents reusable classes through a set of coordinated views onto concrete usage examples; in three scenarios, we illustrate how the tool addresses the issues raised in our analysis of reuse in Smalltallc.
KEYWORDS: progr amming object-oriented programming, tools, documentation reuse, In order to reuse existing components, a programmer must ffist discover relevant components and assess their usefulness to the reject at hand.
Once a component has been ident" $ led, the programmer must determine how it fits into the project: how to create it, how to connect it to other components, how to extract behavior from it.
While a number of researchers have be n to address the component search problem , title attention has been paid to the problem of determining whether and how to use a candidate component once located.
Our View Matcher for reuse was designed to support these aspects of component reuse.
REUSE IN SMALLTALK The Smalltak environment is populated with a number of interactive tools that programmers may employ in finding and reusing existing classes .
Premier among these is the which or antzes existing class hierarchy browser, classes vis-a-vis shared behavior.
Co f e reuse typically involves searching this hierarchy and trying to understand the behavior of classes.
Programmers learn effectively from good examples , and Smalhalk programmers often try to understand how to use a software component by examining examples of its use.
It is sometunes easy to do this by creating an instance of a target class, and sending it messages to see what happens.
The system too ?s are interesting, but they are neither simple #nor paradigmatic; extracting reuse lessons from them 1s complex.
Another is reuse via templates ; ieces of existing objects are copied and edited to But the most pervasive is reuse E uild new objects.
Sm A talk n a pure case of this: because everything in Smalltalk is an object, even the simplest code expressions require the reuse of extstmg object types .
However, management and coordination of the information in these tools is left entireJy u to the programmer: the progmmmer must decide f ow and when to "break" the application, must identify the relevant  object, and must extract and or anize the activity of that object from the backgroun i of other message-passing activit y.
The Smalltalk environment encourages a how-itworks orientation for programmers trying to understand a target class.
When a class is selected in the browser, the rogrammer's attention is directed to information a t out its implementation .
This is an appro@ate orientation for proammers attempting to bw.ld or modify a class, But P or programmers wishin simply to reuse a class, information about how tfl e class works may not be Indeed, it may be best not to provide this necessary.
The Smalltalk browser provides a "senders" function a programmer that operates on message names: wantin to reuse a class can ask for a list of all other metho J s  that send a parHowevert the Smalltalk language is ticular message.
These characteristics make it impossible to ascertain which senders of a messag~ are actually us,ing this message to communicate with the target object .
Thus the orientation of the View Matcher for reuse is one of task-oriented documentation: we attem t to provide just the information a programmer nee.!
Figure 1 shows a View Matcher opened by a programmer considering reuse of the Network class.
The vignette pane in the upper right lists several example applications  that use this class.
If the programmer double-clicks on one of these episodes, it expands in turn, listing all messages sent to the Network during that episode.
Thus the vignette pane provides an object-specific analysis of an application's message activity, Ming just the messages relevant to a target object's use in example episodes.
T+he object communication ma in the upper left deplcts the ~onnectlons among t f e objects participating Each node in the graph rem the editor vignette.
The internal state of these objects can be inspected; the state of an inspected object M tied to the currently-selected episode .
An important aspect of reusing a component is understanding how to connect it to other objects in This information can be dfllcult to obtain a design.
A more concrete strategy is to open a debugger on an a plication that uses a class of interest.
By examining t 1!e stacked messages at different points m time, the programmer can determine which objects are sending messages to a target object, However, it is up to the programmer to generalize across such message stacks, to induce a  stable model of communication and control relationships among what is often a large set of cooperating objects.
In the lower right is a class hierarchy browse~ this is a Bittitalk Browser , giving access to only the classes and methods used in the vignette under analysis.
Programmers can explore any of the vi~ette's classes and methods opportunistically.
Selectm one of the messages sent to the Network m an episo i e , updates the browser to display the or@n  of the message .
Finally, the commentary pane in the lower left characterizes the usage of the target at different "levels": when a vignette is frost selected, the commentary summarizes the target ob"ect's contribution to the a plication as a whole.
W 11 en an e isode is selected, t f e object's role in that episode is f escribed, and if a specKlc message within an episode is selected, the consequence  of sending that particular message is described.
To illustrate the components of the View Matcher and how they address reuse concerns, we present three ~rogrammer scenarios.
A programmer has just begun to work on a system for documenting design argumentation: the system is to represent and manage several lands of entities 
These requirements suggest a Network class, and the pro~ammer opens a View Matcher on that class to see ti it might be ap ro riate.
The commentary associated with the vignette describes the networks management of nodes and links.
The prograrmner concludes that the Network class will indeed be useful in the design notes project.
Before moving on, however, the programmer explores the second vignette, "a resource allocation tracker".
Clearly, a design notes network may also contain cyclical connections.
This leads to a new idea: the tool ~an flag ~ycles  for special attention.
This scenario ilh+strat~s how the View Matcher documents the functlonaht y of target classes through examples.
The programmer can understand use in a situation, rather than examinin g the messages defined for a class, and either guessing functionality from message names, or anal zing the method code.
Similarly, the programmer discovers that the AnalysisWindow has an instance varholdin instamce of iable dataPane ContinuHistogramPane, a subclass of Gr$hPane.
Finally, the programmer sees that the slider's mode L variable points to the FootballAnalyst.
Reasoning by analogy, the pro ammer concludes that the ColorMix class currently f eing developed will pla the role of the football analyst; the red, blue and ye 1 ow input sliders will each point to a ColorMix The rogrammer asobject via their mode I variable.
Looking at the other objects in the map, the rogrammer also realizes that the HistogramPane w'll be useful to the color application, and decides that the three color adjustment sliders will be contained by an instance of that class.
Remembering the football demonstration, however, the programmer recognizes that the AnalysisWindow object should be replaced by a ColorMixWindow,.
This scenario illustrates the contributions of the View Matcher to the early stages of a design, when a proammer is wondering about which objects to use and f ow to connect them.
By analyzin the network of objects makin up the football ap f "cation, the programmer is ab f e to ma out the re !?
In this sense, the View Matcher goes beyond documentation of individual reusable classe~, giving programmers a view of paradi~atic orgamzations of cooperating objects .
A programmer has come upon the Slider class in the class hierarchy, and after viewing some vignettes, has concluded that it will provide just the user interface capability needed for a color-mixing tool being designed: sliders convert mouse movement into data of the consevalues, with continuous updatin quences.
How should the three st "ders  be hooked up to the color-mixing application?
The programmer opens a Reuse View Matcher on the Slider class, and double-clicks on the f~st vignette, "a In this demonstration, sliders confootball analyst".
A programmer building a chess game has found a useful class, GameBoardPane: the pane creates and displays an appropriately scaled board display, and it converts subsequent mouse clicks on the board into square selections.
The programmer has already connected a GameBoardPane object to the current chess game, and has successfully displayed an 8x8 board.
The chess ame must now be programmed to extract the user-se i?'
In Figure 3, the programmer has double-clicked on the "selecting a square" episode in the Gomoku vignette.
The episode has expanded into messages that either were sent to the GameBoardPane, or that included the pane as an argument.
The programmer has already defined a new kind of window for the chess application  that displays the game board along with information about each player's remaining pieces.
Like Gomoku's variable BoardGameWtndow, it has a boardpane that refers to the GameBoardPane.
With this in mind, the programmer selects the second message in z= boardpane the square selection episode, square The browser updates to show selectedSquare.
The commentary explains that the GameBoardPane sends the select: mesqa e t?
Our concern has been sup ortin reuse without requiring how-it-works know f% edge, ut we note that the View Matcher can su port how-it-works scenarios.
For example, a user o F Network mi t wonder how nodes are stored.
Inspecting the $ etwork in the communication map before and after adding a node could answer this question.
A View Matcher for the GameBoardPane class: The "selecting a square" episode has been expanded in the vignette pane, revealing messages sent in the episode that involve the instance of Game Board Pane.
We have developed documentation in four application arenas : and are beginning to gather behavioral data concernm its effestiveness in reuse situations.
At this point, ai of the documentation for a target class is developed by hand -- the class documenter creates one or more usage applications, and develops the episode-based analyses underlying the usage documentation.
We have begun to design an editin tool  to assist in the preparation of these documentation components.
We have also begun to consider ways to automate the generation of the View Matcher reuse documentation: It is possible that once an example application is developed, the documenter could "act out" the usa e episodes, and the relevant object maps and episo 8 e analyses could be extracted from these transactions.
However, our behavioral evaluation of the View Matcher for reuse is likely to suggest enhancements or even major modifications to the reuse documentation and representation techniques used by the tool.
We will pursue issues of automating the documentation process on$ after we have established the usefulness and usabdity of the current system.
As we evaluate and use the View Matcher for reuse, our attention will focus on issues articulated through the series of analyses that have ~haped it, -- the psychological consequences of the mforrnatlon filtering tedllniques it employs.
Our experiand coordination ence with this View Matcher will enrich our underand design; this standing of Smalltalk progr amming in turn will support the continued development of the View Matcher genre.
NOTES This work was done while Christine Sweeney was a student intern in the User Interface Institute at the IBM T.J.Watson Research Center.
We thank Sherman Alpert and ,three anonymous reviewers for comments on an earlter version of the paper.
Deliberated evolution: Stalking the View Matcher in design space.
Object oriented programming: Reading, Mass.
