Conversely, when we find out that the 19" screen we had asked for is very ugly, we might not want it anymore.
Needs can end up completely redefined, and not just for irrational reasons: the design of the famous Sydney Opera house was selected in spite of violating all the criteria stated in the design competition.
Another important aspect in buyer decision making is that everyone wants to be convinced of getting a good deal.
The buyer has to be convinced that among all products that can be obtained, what she is buying is an outstanding choice with respect to some criteria.
One obvious criterion is price, but often it is also another feature or combination of features.
Such a conviction cannot be achieved without comparing an item with its alternatives.
As a consequence, we believe that needs identification, product brokering and comparison should in fact be an iterative conversation where criteria and proposals are being exchanged.
The buyer takes part in this dialogue by formulating needs and optimization criteria.
The catalog should propose solutions and compare them to alternatives, and thus elicit refinement of the buyer's specifications.
We have explored such interfaces in the example of airline flight catalogs.
In most current e-commerce sites, the traveler needs to enter dates and times and is then directly led to a small choice of flights.
In our approach, the buyer initially specifies only a set of possible destinations and ranges of dates.
The catalog then proposes a large set of possible products, using three different displays: * an overview display which allows comparing the entire range of possibilities according to selected criteria, specific example products to elicit further constraints on their attributes, and a visualization comparing small sets of alternatives in their attributes.
In electronic commerce, a satisfying buyer experience is a key competitive element.
We show new techniques for better adapting interaction with an electronic catalog system to actual buying behavior.
Our model replaces the sequential separation of needs identification and product brokering with a conversation in which both processes occur simultaneously.
This conversation supports the buyer in formulating his or her needs, and in deciding which criteria to apply in selecting a product to buy.
We have experimented with this approach in the area of travel planning and developed a system called SmartClient Travel which supports this process.
It includes tools for need identification, visualization of alternatives, and choosing the most suitable one.
We describe the system and its implementation, and report on user studies showing its advantages for electronic catalogs.
A common assumption in electronic commerce is that buying starts from clearly identified needs that the buyer is able to articulate.
According to , there are 6 stages of consumer buying behavior: need identification, product brokering, merchant brokering, negotiation and purchase and delivery.
Activities migrate from one stage to another and some stages are iterative processes.
However, most ecommerce user interaction separates the first two stages: first the buyer states her criteria, then an initial set of products is shown, followed by possibilities for comparison shopping, negotiation and placing an order.
We believe that in most cases, needs define themselves as a result of the products being offered.
For example, originally we might have decided that a 300MHz processor was what we needed for our new PC.
Flexible interaction sequences are supported through the use of constraint satisfaction as a basic selection mechanism.
This allows us to model a buyer's criteria accurately and explicitly.
Constraints can be posted and retracted in any order, resulting in a flexible conversation that rapidly leads the buyer to refine his needs.
Additionally, the constraint satisfaction paradigm provides support for visualizing and comparing the entire space of possibilities, thus ending up with a solution that appears to be the best deal and that he is thus ready to buy.
Finally, it is the basis for our SmartClient architecture that implements this rich user experience with lightweight applets.
Electronic catalogs are examples of decision-making problems: the task is to make a decision among a set of alternatives.
Decisions are made as a result of constraints, preferences, or optimization criteria.
In most systems, constraints, preferences and criteria are not modeled explicitly, but remain implicit in selections the user makes.
In most existing systems for e-commerce, buyers have to commit to their needs early on in the buying process, and information about products can only be displayed in response to this.
As a result, when buyers' needs change, it results in frequent information exchanges between buyer and seller, with the associated delays and server load.
This problem is not uncommon in other practices of ecommerce.
The dilemma encountered by system designers is how to best support decision making with sufficient information while guaranteeing a reasonable speed to download it.
So far, few solutions have been proposed to implement a rich user experience in an efficient way.
Most of the existing electronic catalogs fall into four types: using hierarchies, filtering, preferences, or configuration.
In hierarchically organized catalogs , buyers first answer a fixed sequence of questions corresponding to how databases are organized.
This questionnaire form is then sent to the seller's catalog server.
Product information is retrieved and sent to the buyer.
Filtering catalogs  allow users to explicitly formulate constraints on what acceptable products are.
These act as a filter: the catalog only shows products that satisfy these constraints.
Rather than distinguishing acceptable from unacceptable products, constraints could also return a number that reflects the degree to which they are satisfied.
It then models users' criteria for optimization.
Many catalogs allow optimizing such criteria or combinations of them.
Soft constraint techniques, that is expressing users' criteria as a scale of preferences using weights , are more flexible for navigating in large product catalogs .
There is no sequential order to define criteria.
At the same time, soft constraints allow sub-optimal solutions to remain in the navigation space, thus making a large enough portion of the catalog available.
Our work is based on the similar observation that larger product space encourages serendipitous buying opportunity.
The difference is that we use partial constraint satisfaction techniques to handle soft constraints instead of weights.
Jurca surveyed 10 commercial on-line flight reservation systems .
Almost all of them impose a fixed decisionmaking sequence on the user.
As an example, consider Travelocity , a popular site for air travel.
Then it returns a list of possibilities for the first leg of the trip, of which we have to choose one, then possibilities for the second leg, etc..
When all flights have been selected, the systems shows the total price and offers to reserve.
Alternatively, we can have a display of 9 different complete itineraries, or an entirely different model where we start by selecting a fare and then choose dates and flights that fit it.
In all cases, the buyer has to fit a particular sequence of decision-making in which needs specification and browsing the product offering are two distinct stages.
We think that this fixed sequence makes the site cumbersome to use.
If we discover that there are no good connections for the return date we have chosen, we have to restart the entire process from the beginning.
If we find that business class is terribly expensive, we have to plan the trip all over again to see what the price in economy would be.
As a consequence, it is not uncommon to spend more than 1 hour planning a trip using this site!
The process would be much more efficient if it were possible to specify and compare criteria while browsing the available flights.
Furthermore, for longer trips there are many criteria that are important to the traveler but for which the site offers no optimization possibilities: total flying time, departure time, transfer airports, total ground time at transfer airports, etc.
Finally for complex products, the approach is very different.
Instead of representing every data item in the catalog, configuration techniques  are used to propose products to customers according to his current preferences and constraints.
Some of the configurable electronic catalogues are currently employed by e-commerce sites at Dell  and Cisco, and several e-commerce solutions are offered by Calico Commerce and by ILOG .
Most of the configuration catalogs, however, do not provide enough interaction techniques for browsing alternatives, nor supporting tradeoff analysis.
As we can see from the above examples, providing a rich user experience by integrating needs identification, product brokering, and product comparison poses challenges for the system architecture and interaction design.
From this information, the system constructs a CSP model which gets shipped to the customer computer.
In addition, a constraint solver and a graphical user interface are also included.
These generate solutions according to the customer's stated needs and preferences.
An advantage of our technique is that the code is very lightweight and can be efficiently packaged into small Java applets.
Thus, the download of a typical travel example requires about 500 Kbytes, corresponding to the size of 8 average web pages of Travelocity.
Interaction with the visualizations is then instantaneous, providing a rich and satisfying user experience.
We call this architecture SmartClient because it involves clients that are both thin  and intelligent  at the same time.
The possible space of products offered at the client sites can go up to thousands.
We have patented a technique that formulates travel planning as a constraint satisfaction problem .
It allows transferring product information between product server and buyers through a skinny data connection.
At the buyer's side, information is assembled into product configurations according to their constraints and preferences.
Buyers enter the interaction with often very vague ideas of what their actual needs are.
Thus, in air travel, they usually know where and roughly when they want to travel, but they do not think of many other secondary criteria, such as departure times, airports and airlines they like to avoid, etc.
Only the destination airports and ranges of departure and arrival dates are required.
As a user zooms in, detailed information appears, such as each country's contours and the names of available airports.
Clicking any name will enter the corresponding airport into the itinerary definition panel located on the upper-left corner.
An example shown in Figure 1 shows the itinerary data of the following example: A professor living in Geneva, Switzerland, who wants to spend a week in Silicon Valley to meet with his colleagues.
The best airport for his trip is in San Jose.
In SmartClient travel, one can also type the names of the initial airports.
This leads to displays of the regional map that shows the selected city among its neighbors .
When selecting the destination, it thus becomes obvious that flying into San Francisco could also be a good alternative, so this city gets selected as well.
The "show me flights" button generates a solution space  which is then shipped to the customer's side, whose constraints and preferences are used as guidelines to define an initial focus on the solution space.
That is for certain flights, they'd prefer the cheapest, while for others, they'd prefer the non-stop feature.
Some catalog systems attempt to solve this situation by requiring a numerical weighting of the criteria and using the weighted sum of the different criteria to rank the solutions.
When criteria depend on context, it is easy to find situations where no weighting can accurately model the correct preference structure.
For example, for a flight leaving from Geneva, our professor might like a departure as early as 8 o'clock, while with a departure from Zurich this should be 11 o'clock to account for the train ride there - but this interaction cannot be modeled by feature weights alone.
For this reason, it is not very realistic to expect buyers to quantify tradeoffs in this way.
More importantly, it leaves the buyer with the uneasy feeling of choosing a product without knowing why.
We believe that a better approach is to help the buyer find the criterion in which one choice clearly stands out as the best one.
For example, if all flights leave between 8 and 9 am, this is not a useful criterion for comparing them.
On the other hand, if the price varies between 300 and 1500 Francs, this could be a much more important attribute to look at.
A buyer who chooses a flight because it costs only half of similar alternatives feels that he is getting a good deal, whereas if he should take a flight because it leaves at 8:45 instead of 8:30 he might not be very sure of his choice.
This is an important element in convincing the buyer to actually go ahead with the purchase.
Often, the range of choices that a buyer might consider is bewildering.
When there are many competing and possibly conflicting evaluation criteria, there can be a huge number of relevant choices, each optimal for some of the criteria and suboptimal for others.
For example, the cheapest flight may require three plane changes.
A nonstop flight, on the other hand, is expensive.
Such multi-criteria analysis can be performed in the overview display , showing a scatter-plot of a sample set of solutions according to fare  and total travel time .
This technique is similar to the starfield display used in data base query systems described in .
However, only a focused set of solutions are displayed.
As users change their criteria and preferences, this overview shifts its viewing area to other solutions.
Therefore, it implements a type of semantic fish-eye, as opposed to a normal fish-eye view .
This scatterplot is useful to see that: * * There is quite a variation in fares, so fare should be a criterion we check for.
Paying a higher fare does not seem to allow us much shorter flying times.
At any moment during solution space navigation and browsing, users can go to the overview area to further compare trips.
Overviews can be provided for any combination of price, total travel time, number of intermediate stops and solution quality regarding to users' criteria.
A trip ranks low on solution quality if it violates many of the criteria.
Additional information such as the main carrier's flags are denoted by the graphical forms of each node.
It is possible to inspect each of the possibilities in the display below, and use this to make an initial choice which we then further inspect in other displays.
Here, we select the shortest flight but with the lowest possible fare.
This flight is then shown in detail below, and provides a good starting point for further selection.
A typical buyer has many constraints that are not stated up front.
He becomes aware of these only when solutions are proposed that violate them.
In our example, the most costeffective solution in fact has several problems: * * It leaves too early to allow finishing up the last breakfast meeting on Oct. 22nd.
It transits in New York JFK airport, which the customer would like to avoid.
In the textual display, they can be posted by clicking on the respective cell and thus activating a menu, as shown in the figure.
At any time, the user can request the system to compute a new set of solutions that satisfy all constraints posted so far, and will usually obtain immediate response.
In our example, this shifts the most advantageous trip to one where the return is now from San Jose and through Chicago.
When constraints are posted in this way, they are automatically restricted to the context in which they were posted.
For example, if I post a constraint on a departure time, it will by default be applied to flights for that particular leg and leaving from that particular airport only.
Applicability can be further restricted by selecting cells as a context, for example only when leaving from San Francisco airport because of the longer driving time.
Constraints can also be posted using sliders in the graphical tracer display above the textual display, which is discussed in more detail later.
Posting constraints in this manner eliminates one major difficulty with conversational interfaces: it makes it impossible for the user to input constraints that cannot be understood.
Since the display does not show attributes or values that do not exist, it is not possible to post constraints on them.
Our users studies found that once a buyer is familiar with such navigation techniques in product space, he'll want faster interaction.
When he has narrowed down the choices by posting constraints, he is ready to select particular solutions.
We applied the parallel coordinate display method  to the travel domain.
A tracer display  shows each solution as a trace through the set of flight attributes comprising a trip itinerary.
For each attribute, there is one vertical bar with its possible values.
A solution is a trace that links the values of the different attributes.
An individual solution is selected whenever the mouse is moved over it and is then displayed in detail at the bottom of the display.
The tracer display quickly makes apparent the differences among a set of possibilities.
Here, we can see in particular that given our constraints, there is a choice of returning via a variety of airports: Chicago, Los Angeles, New York and Zurich, and a variety of times .
The tracer display also allows posting additional constraints by using sliders on each attribute.
This gives users who prefer to work with more graphical abstractions another way of declaring needs and criteria to the system.
Sliders on attribute bars can further provide rapid specification of ranges of data for dates and time.
Clicking on the other hand allows easy interaction for choices, such as whether someone wants to stop in Zurich or not.
Even though many users are first shocked to see what usually looks like stock market graphs, they appreciate the power of visualizing many options in a compact display area.
Figure 4 displays 17 possibilities as curves mapped onto the multi-value graphs for our example trip.
The canvas area for the detailed flight information is sensitive to the current mouse position on the curves.
Thus, each solution is compared with the rest and viewed in detail at the same time.
In our example, the user may be particularly sensitive to transfer airports, and inspect solutions based on that criterion.
All of them agreed that SmartClient Travel allows them to examine a much larger space of solutions than other tools.
Most of them complained that the speed in getting the initial data from SmartClient Travel is a problem .
When trips are simple and needs are known up front, they noted that SmartClient Travel and others are more or less equally powerful.
We have shown an approach to electronic catalogs where user criteria and preferences are explicitly modeled as constraint satisfaction.
This simple and general formalism is the basis for SmartClients, lightweight applets that allow browsing a space of solutions in an intelligent way.
This offers important practical advantages for electronic catalogs: * Criteria can be given and modified in any order, rather than following a predefined dialogue model.
Product selection can become a flexible conversation where customers discover their criteria through inspection on the available choices..
Using overview displays, users can get a quick idea of the importance of different criteria, and understand tradeoffs between them.
Different solutions can be compared in a single framework using the tracer display.
This lets users make a final their choice that they are confident about and ready to buy.
In the final display, shown in Figure 4, the customer now only sees solutions that satisfy all the posted constraints, and can manually compare them to find the truly best one.
As an alternative way, this interaction design is particularly useful when travel is less constrained, allowing buyers to quickly decide that they can only expect small differences in cost, but potentially large gains in travel time.
This can help buyers define criteria to find the "good deal".
All of the above can be done without further contacts with the server.
Using a common travel site such as Travelocity, the same trip requires more than 10 clientserver contacts, at the end of which the customer is still not sure how good the solution he is getting really is.
We have evaluated SmartClient with 43 users, all of them students of our university.
Being in the 20-23 years old range, this youth group is one of the most targeted groups for airline eCommerce in Europe.
The students range from computer science, electrical engineering, industrial engineering, to civil engineering majors.
They formed into a team of two students and each team was asked to use SmartClient Travel to complete three specified trips and one trip of their own choice.
They were to compare the experience of SmartClient Travel to a commercially available system.
One person was to work on the problem using the computer, while the other recorded the time needed for each trip planning, the usability of the software, and the usability of the constraint editing features.
Based on the findings, we have the following conclusions: * None of them had trouble discovering the criteria editing feature offered by SmartClient Travel.
We thank the undergraduate students in our university for participating in our user studies.
Christopher Ahlberg and Ben Shneiderman, Visual Information Seeking: Tight Coupling of Dynamic Query Filters with Starfield Displays, Human Factors in Computing Systems.
Human Factors in Computing Systems, Formal Video Programme: Visualisation, p. 516, 1993.
Calico Commerce, http://www.calicotech.com Card, S. Eick, S., and Nahum G., Information Visualization Tutorial, in CHI'99 tutorial notes, 1999.
Cisco Connection Online, //www.cisco.com Dell Inc., http://www.dell.com Faltings, B. and Freuder, E., Configuration, in IEEE Intelligent Systems and their applications, as guest editors' introduction, July/August 1998.
ILOG S.A., http://www.ilog.com Inselburg, A. Dimsdale, B., "Parallel Coordinates: A Tool for Visualizing Multi- Dimensional Geometry," in Proceedings of the First IEEE Conference on Visualization, 1990.
Automated Travel Assistant, in Proceedings of the 6th International Conference on User Modeling , CISM, Vol.
Mackworth, A., Constraint Satisfaction, Encyclopedia of Artificial Intelligence, pp.
Pattie Maes and Robert H. Guttman and Alexandros G. Moukas, Agents that buy and sell, Communications of the ACM, 42, pp.
Stolze, M. Soft Navigation in Product Catalogs, in Proceedings of the Second European Conference on Research and Advanced Technology for Digital Libraries.
Stolze, M. Comparative Study of Analytical Product Selection Support Mechanisms, in Proceedings INTERACT 99, August 1999, 19.
Edward Tsang, Satisfaction, In Foundations Academic of Constraint Press, 1993.
Keeney, R.L., Faiffa H., Decision Making with Multiple Objectives: Preferences and Value Tradeoofs.
Cambridge University Press, Cambridge, UK, 1993.
