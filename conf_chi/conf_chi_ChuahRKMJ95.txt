Currently, there are many hypertext-like tools and database retrieval systems that use keyword search as a means of navigation.
While useful for certain tasks, keyword search is insufficient for browsing databases of data-graphics.
SageBook is a system that searches among existing datagraphics, so that they can be reused with new data.
These tools support a vast number of different data-graphics based on the combination and organization of many graphical elements .
Nevertheless, constructing a data-graphic, especially one that contains a lot of information, still requires a user to have substantial design expertise.
Even expert designers may need ideas when working with new data sets, and a good source of ideas exists in other users' successful visualizations of similar data.
One of our approaches to providing expertise has been to give users access to a library of data-graphics, created by users of a constructive system called SageBrush or created automatically by a related knowledge-based system called SAGE .
Since searching a portfolio of hundreds of datagraphics can be laborious, we created SageBook, a contentbased search and browsing tool that enables users to retrieve data-graphics based on their appearance and/or the properties of the data they present.
In , we gave an overview of the three components of our system , but primarily focused on SageBrush.
In this paper, we focus on SageBook's browsing interfaces and mechanisms for content-based search and reuse.
SageBook's goal is to provide content-based retrieval facilities in the context of supporting user-directed, data-graphic design.
To fulfill this goal, we identified five crucial needs: 1.
A direct manipulation graphical query interface - a flexible and intuitive query interface with which users sketch graphics similar in appearance to those they want to browse.
Alternatively, users may select subsets of their data to retrieve graphics that display similar data.
SageBrush serves as SageBook's query interface .
A content description language - an expressive vocabulary for describing the graphical and data relationships contained in data-graphics, so that they can be searched by content.
The problem of vocabulary mismatch is well summarized by Lesk .
Our approach to supporting the creation of data-graphics is to view their design as two complementary processes: design as a constructive process of selecting and arranging graphical elements, and design as a process of browsing and customizing previous cases.
SageBook supports the latter process by enabling users to find, browse, and apply previously created data-graphics to the construction of new ones that reflect current data and design preferences.
Current data-graphic design tools, particularly those provided with spreadsheets, do not support these processes well because they do not enable people to combine diverse information in a single graphic.
They are unable to integrate different kinds of graphical objects, properties, or chart types to show the relationships among many data attributes.
By indexing we mean the categorization of datagraphics using the content description language.
Structural and similarity-based search - a mechanism for matching queries and stored data-graphics, based on the spatial organization and structural relationships among graphical elements, and the characteristics of and dependencies among data attributes.
This mechanism supports retrieval based on partial matches .
Structural search is more powerful than keyword search because the latter is not expressive of the relationships among multiple data and graphical components.
Manual and automatic adaptation - facilities to help users alter the data-graphics retrieved by SageBook's search strategies, so that they can be applied to a user's current task.
We are aware of no other approaches that address these needs for data-graphics.
Some have been addressed in systems for retrieving photographs or images, but none have provided a solution that takes into account all of them.
Garber  developed a retrieval system for advertising photographs based on a study of art directors.
Users can select a level of similarity for defining the degree of relaxation allowed in retrievals.
Photographs are ordered according to how close they match the keywords in the query .
The use of keywords in the query system makes the process susceptible to vocabulary mismatches .
In addition, the photograph library has to be manually indexed; thus populating it is laborious and error-prone.
Queries are graphical sketches, so users need not learn a keyword system .
However, the content description language and query interface are limited to six object types.
As was shown in their evaluation, this is insufficient to describe the space of pictures that might be in the library.
As in Garber's system, pictures in the library are manually indexed.
Using image analysis techniques, TRADEMARK can automatically index or sort its library.
However, this type of search  does not produce a content description beyond the surface features of the image.
Therefore, it is unable to search for concepts like "person" or "beach".
Furthermore, the interface requires users to create a detailed query also at the surface feature level.
ART MUSEUM  is an image-retrieval system for art pieces.
Its search criteria are graphical features and keywords of artistic impressions.
The artistic impressions associated with each picture have to be manually entered.
Furthermore, the search done on artistic impressions is a keyword matching process, making it especially sensitive to vocabulary mismatches.
None of these systems provide adaptation tools because they were created for the task of image-retrieval only.
In datagraphic design, reuse is a primary user task, thus adaptation facilities are of the utmost importance.
Reuse involves extracting the design that was inherent in an existing datagraphic and reapplying it to the design of a new datagraphic.
We have designed a system that directly supports the five needs of a retrieval and reuse facility for data-graphic design.
Our system provides users with a direct manipulation interface  to pose complete or partial data and graphic queries.
A query is translated into a content description language, which has also been used to express automatically-generated descriptions of the datagraphics in SageBook's library.
SageBook compares the query with these descriptions and retrieves a set of datagraphics that fulfills its similarity tests .
Users can then manually or automatically adapt these data-graphics as desired.
We first give an overview of the interactions and information flow among system components, and then we discuss how we deal with the needs of retrieval and reuse.
SageBook is integrated with two other modules: SageBrush and SAGE.
SageBrush is a tool for sketching data-graphics from primitive graphical elements; as such, it can be used both as a design space and query interface.
SAGE is an automatic presentation system.
Details on SAGE and SageBrush can be found in .
A retrieval transaction emphasizing the relations among SageBook and the other modules is shown in Figure 1.
A user creates a data or graphic query using SageBrush.
The query is converted by SageBrush into design directives, which are then passed to SageBook.
Design directives are partial specifications of a data-graphic, expressed in terms of the system's content description language.
SageBook's search module uses the design directives to locate matches between the query and stored datagraphics.
The matching items are retrieved from SageBook's data-graphic library.
The data-graphics found are then sent to the browser in SageBook.
From the browser, the user may pick one or more datagraphics to be  manually modified in SageBrush or  automatically modified in SageBook.
To manually modify a data-graphic, SageBrush first converts it into a sketch and displays it.
This sketch can then be adapted by the user.
Figure 2  shows an example data-graphic that has been retrieved by SageBook.
Figure 2  shows a sketch of the data-graphic when it is brought into SageBrush for manual adaptation.
SAGE automatically generates the new data-graphic.
The user may then save the data-graphic in SageBook's library so that it may be reused later.
The example above only shows one possible sequence of actions.
A user is not restricted to executing exactly these actions, and can combine the different functionalities of the three modules flexibly.
The process of retrieval and reuse described above can be divided into four phases, each emphasizing the different needs of information retrieval and data-graphic design.
The following sections describe each of these phases in detail and explain how we dealt with the retrieval and reuse needs that were previously raised.
Interface details are provided in .
Whether querying based on graphical or data content, users do not need to know a complex vocabulary for describing that content.
They do not have to learn the terms the system uses internally to refer to axes, map spaces, interval bars, gauges, indented text, etc.
Likewise, users do not have to learn the terms for describing the characteristics of data, like scale of measurement  or relationships among data-domains .
Instead, they simply load the datasets that they wish to peruse into SageBrush's data area, and select the data-domains that they wish to visualize.
This is in contrast to previous systems  that require users to specify the characteristics of the query object via keywords.
Systems that do not provide direct-manipulation query interfaces force users to learn an underlying object description language.
SageBrush contains methods to convert a data or graphical query into a language  that is understood by SageBook and SAGE.
When users select a data set of current interest, the system extracts the characteristics of each selected data-domain  and reformulates the query in terms of underlying data properties.
SageBook does require data objects to be characterized when the data is first created.
Currently, this characterization must be provided by database creators.
However, once data is characterized and stored, users need not be aware of the characteristics or the language that is used to describe them.
In addition to serving as a query interface, SageBrush can also be used to construct data-graphics and to manually adapt retrieved data-graphics.
A common data and graphic representation is used by all the modules of our system.
It provides a vocabulary that is capable of expressing the syntax and semantics of datagraphic designs, and of characterizing the data contained within them.
It is able to express the spatial relationships between graphical objects, the relationships between datadomains, and the various graphic and data attributes.
Through this language, the content of data-graphics can be fully described.
A query specified by the user with data and graphical symbols is first translated into this internal representation before it is passed to SageBook for processing.
This common language allows the user and the different modules of the system to communicate without any vocabulary mismatches.
In addition, all data-graphics generated by SAGE are described using this language.
SageBook, in turn, uses the description associated with each data-graphic as an index for its search strategies.
As a result, all data-graphics in the SageBook library are automatically indexed by SAGE when they are first generated.
This is a significant advantage compared to other visual search systems , which require the descriptions of images in the graphic library to be manually entered as keywords.
The data characterization has been described in  and is not repeated here.
However, we will briefly describe the main structures of the graphical representation that relate to SageBook in order to facilitate an understanding of the search procedures.
Within each space there may be several objects called graphemes.
Examples of graphemes are marks, bars, text, lines, and gauges.
Each grapheme uses different properties to define its appearance.
Some of these properties may be used to encode data-domains or distinguish different relations shown in the same space.
For example, Figure 4 shows a data-graphic of steel-factory data.
This graphic was designed using SAGE and it uses the size of the marks in the first space to encode billet-thickness and the color of the bars in the second space to distinguish between materials-cost and labor-cost.
Figure 5 expresses the data-graphic in Figure 4 in terms of its constituents.
The data-graphic contains three horizontally aligned spaces.
Two of the spaces use the chart layout discipline and one the table layout discipline.
Within the first space are two sets of graphemes: marks and interval bars.
The position of the interval bars is used to express the furnace schedule for the different billets, and the size of the marks is used to express billet-thickness.
The second space contains two sets of bar graphemes that use the color property to distinguish the two cost data attributes that the bars encode.
Their lengths encode the data values.
The last space has a set of text graphemes whose lettering encodes data.
The process of matching a user query to the SageBook library is carried out by two components of the search module: the data-matcher and graphic-matcher.
The graphicmatching component has three alternative match strategies and the data-matching component has four.
The different match strategies provide different degrees of relaxation on the search criteria based on the degree of overlap between the library data-graphic and the user query.
Each retrieves a different number of data-graphics depending on its degree of relaxation.
Partial overlap matching or similarity matching was shown to be important and useful in Garber's photograph retrieval system .
A typical reason for relaxation is to find compromises in lieu of finding exactly what one wants.
Additionally, similarity-based relaxation finds items that are equally desirable but that would otherwise not match because of insignificant feature differences.
Most importantly, supporting data-graphic design suggests an additional function of relaxation: giving users ideas for how to integrate additional graphical elements and properties with partial designs they have created.
The latter answers questions such as: How can additional graphemes be added to the space I've created and integrated with the graphemes I've already included?
How have previous data-graphics used additional properties of these graphemes?
How can other spaces or graphemes be substituted for the ones I've selected to express the same data?
Enabling users to answer questions like these motivated the choice of match criteria that evolved in SageBook.
Finally, our choice of criteria reflected the fact that it was easy for users  to remove extra spaces, graphemes, and properties when adapting the design for new data.
The search strategies in SageBook are based on the structural properties of the graphical and data elements in a data-graphic.
Structural search is more robust and powerful than keyword search because: * It recognizes positional relationships among graphical elements and the functional relationships in data.
For example, structural search would be able to distinguish between Figure 6a and Figure 6b because it can tell that in Figure 6a the mark is in the same space as the bar, while in Figure 6b the mark is in the same space as the line.
Similarly, it can also tell that the color property is used to encode data for the bar in Figure 6a, whereas in Figure 6b the color property is used to encode data for the mark.
SageBook provides the following three alternative graphic-matching strategies.
Close Graphic-Matching: This strategy searches for library data-graphics that have the same number of spaces as the query.
These data-graphics only contain one space because the query has only one space.
Using this search strategy, the query in Figure 7 will retrieve only those datagraphics consisting of a single chart that contains at least one mark grapheme.
Note that only the positional properties of the mark were specified in the query; thus retrieved data-graphics may use additional grapheme properties that the query did not specify.
Subset Graphic-Matching: This strategy is more inclusive than close graphic-matching.
In subset matching, a library data-graphic may contain more spaces than the query, as long as every query space matches a space in the datagraphic.
This strategy retrieves all of the stacks of datagraphics in Figure 7.
The stacks are sorted according to their degree of similarity to the query, based on the match criteria.
For example, in Figure 7, all one-space matches are shown first, followed by all two-space matches, etc.
Subset matching supports a process resembling a library search.
First, the user enters a query and retrieves a super-set of data-graphics, each of which will contain every element specified in the query.
If the set is too large, the user can narrow it by adding more constraints or features to the query.
The user may then browse through the data-graphics, and pick one based on other criteria.
Any unwanted spaces can be easily deleted from the data-graphic using SageBrush.
Data-Relation Matching: This strategy searches for library data-graphics that contain every relation that was specified in the query.
This matching strategy is useful when sets of daily or weekly data must be redisplayed in a consistent style.
This also suggests an additional use for data-graphic retrieval - searching for information  stored as graphic media.
Close Data-Matching: This strategy enables users to find graphics showing data that has similar characteristics to their current data.
For a query domain to match a candidate domain in a data-graphic, they must have the same data-type  and frame of reference , and must participate in the same kinds of functional-dependencies and complex types.
Figure 8 shows an example of this datamatching process.
Activity matches houseID , and materials-cost matches number-ofrooms .
Start-date and end-date match with date-on-market and date-sold, since they both have the same frame-of-reference  and belong to the same complex-type .
Unlike the relation matching strategy, which requires the query and library data-graphic to contain the very same relations, the close data-matching strategy only requires that the domains have similar data characteristics and interrelationships.
Thus, this strategy is not a keyword search, but rather is a search based on a similarity of structure between data-sets.
Subset Data-Matching: The idea behind this strategy is analogous to that of subset graphic-matching.
If the SageBook library contains hundreds of data-graphics, some queries may retrieve a large set of items.
In such cases, the cognitive load placed on users to browse through the retrieved data-graphics would be significant.
To support browsing, we developed a scrollable, grid-like interface that enables multiple data-graphics to be viewed at once .
Our recent work has been on exploring ways to enhance browsing efficiency by grouping similar data-graphics into a stack in one cell of the grid.
The number of data-graphics in a stack is indicated by the length of a black bar at the top of each cell.
The expand operation can be used to distribute members of any stack into a new grid.
The formal representation of data-graphics provides a framework for grouping strategies, as it did for graphic and data queries.
Since SageBook's purpose is primarily to help users' get design ideas, we defined four criteria that increased design differences between stacks by grouping similar data-graphics together.
The method names reflect the aspect of the datagraphics within a stack that can be different.
Data-only groups into a stack all those data-graphics that have the same number and types of spaces, ordering of aligned spaces, types and number of graphemes within each space and properties of graphemes.
Effectively, these are cases in which the same design was saved for different data.
The spaces-order method groups together the same data-graphics as the data-only method, but in addition, it includes datagraphics that have identical designs except for the ordering of aligned spaces.
For example, data-graphics like the one in Figure 4 would be stored in the same stack regardless of the left-to-right ordering of the three spaces.
The two techniques mentioned group together data-graphics that show the same design approaches.
Other methods differentiate design alternatives.
The grapheme-property method groups together data-graphics that meet the dataonly criterion, except that graphemes may use different properties.
The grapheme-number method groups data-graphics that have the same types of graphemes, and uses the same properties for each type, in each space.
However, the number of each grapheme type in a space may differ.
For example, this groups bar charts with one, two, or more bars per axis element in the same stack or maps with points containing a single label or multiple labels in the same stack.
We are exploring the different possibilities of providing these methods as individual options or combined sequentially to form a hierarchical classification of graphics within each stack.
Our current implementation groups datagraphics using a four-tier hierarchy, consisting of the dataonly , space-order, grapheme-property, and grapheme-number  categorization methods.
Expanding a stack is equivalent to removing a constraint for that particular stack so that members of the stack can be viewed in greater detail.
A stack can be expanded into a series of stacks which can be further expanded until the bottom of the hierarchy is reached.
The existence of similarity search strategies opens up the possibility that some of the data-graphics retrieved by SageBook may not fully conform to what the user desires.
In such cases our system provides manual adaptation capabilities through SageBrush and automatic adaptation capabilities through SageBook.
The automatic-adaptation module does the mapping between data-domains in the query to data-domains in the retrieved data-graphic based on their characteristics.
When there are data-domains in the retrieved data-graphic that cannot be mapped to domains in the query, the adaptation module will discard graphical objects from the data-graphic as necessary.
When it is forced to do this, the adaptation module tries to preserve spaces first, graphemes second and grapheme properties last.
Figure 9  shows a data-query and an example datagraphic that is retrieved by that query.
This data-graphic shows a supply-network with supply routes/paths  and demand units .
The data-graphic was retrieved because it contains "paths" which are defined by the geographic coordinates of their end-points.
This exactly matches with the data-domains start-locationn/s start-location-e/w, end-location-n/s and end-location-e/w in the query data.
Figure 9  shows the new data-graphic that is generated from the query data after automatic adaptation has been performed on the data-graphic in Figure 9 .
This is because temperature and troopmovement-size are properties of the "paths", whereas the demand units are totally separate objects.
When there are additional data-domains in the query data that cannot be mapped to the retrieved data-graphic, the adaptation module leaves it to SAGE to add them into the new data-graphic.
In the example adaptation shown in Figure 9, SAGE additionally encoded temperature by using color and troop-movement-size by line thickness.
Partial specifications may be constructed either by SageBook's automatic adaptation module or by the user.
We have explained how Figure 9  can be constructed automatically through SageBook;  shows how it can be constructed by the user through SageBrush.
Currently, we are running a series of user tests to see what effect SageBook has on measures like ease of creating designs and the quality and diversity of graphics that are created.
Another area of future work is validating the utility of the match criteria, especially our assumptions of the important criteria for judging similarity.
Finally, we are exploring ways to base search on the information-seeking goals that the graphics are being designed to support rather than just the data that is being visualized .
We have designed and implemented a content-based search system, SageBook, which provides users with design expertise by giving them access to a database of prior datagraphics.
Unlike prior image-retrieval systems, the goal of SageBook is to provide content-based retrieval facilities in the context of supporting data-graphic design.
In order to fulfill this goal: * We have designed and developed a graphical directmanipulation interface  from which users can specify requests to the system with ease.
SageBrush can also be used to manually adapt previous datagraphics and to construct new ones.
User requests are translated into this vocabulary before they are passed on to SageBook or SAGE so that they can be conveyed to the system without ambiguity.
This provides SageBook with a growing library of datagraphics that has been automatically described when they are first produced.
