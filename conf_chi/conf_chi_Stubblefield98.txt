Although design metaphors play an important role in many software projects, their influence on system functionality, project methodolo,y and the interactions among members of the development team is not well understood.This paper seeksinsights into theseissuesby examining the developmentof a computerprogram under the influence of a particularly strong designmetaphor.
Metaphor has long been recognized to play an important role in user interface design, with developers exploiting desktop metaphors, agent metaphors and similar figures to enhancethe usability of computerinterfaces.Recently, there has been an increased recognition of metaphor's larger role in the designprocess,including its influence on programfunctionality, systemarchitectureand knowledge representation .
The Design for Machinability Advisor  was built to assistmechanicalengineersin improving the manufacturability of machinedparts.
From the beginning, the project was conceivedto be a "spelling checker" for machinability problems.This paperexaminesthe influence of the "spelling checker" metaphor on DFM's design,as well as the changes that occurred in our understanding of the metaphoritself asthe designmatured.It also considersthe metaphor's social context, particularly differences in the way team membersinterpreted it, and the effects of these differenceson their interactions.
The metaphorprovides a restricted set of hypotheses about human cognition.
By focusing our attention on the significant properties of relatively well understood concepts , metaphorsimpose an essentialstructure on the enormousproblem spaces found in such target areas as scientific discovery, language development,or, asexaminedin this paper,design.
Hesse  has examined the use of analogiesin science, providing a foundation for understanding design metaphors.She describesthree componentsof analogies: the positive analogy consists of those properties of the sourcethat are known to apply to the target, the negative analogyincludes sourcepropertiesthat are either untrue or irrelevant for the target, and the neutral analogy contains thosethat have not yet beenclassified as positive or negative.
Developing a metaphor or analogy requires evaluating the unclassifiedcomponentsof the neutral analogy.
Interpretation of a metaphoris a processof discovering which properties of the source may be valid and useful to understandingthe target .
Pennissionto make digital/hard copies ofali or part ofthis material for personal or classroom use is granted uithoatfee provided that the copies arenot made or distributed for profit or commercial advantage, tbe copyri~tfitnotice,thetitleofthepublicationandits dateappear, andnoticeis given rhat copyright is by p emission of the ACM, Inc. To copy otherwise, to republish, to post on servers or to rediiiute to lii requires specific p~xmision and/or f&e.
This initial model must be refined if we are to understand the role of metaphor in design.
Aspects of a design metaphor can seldom be classified as simply positive or negative: in transferring properties from the sourceto the target, both designersand usersgenerally will re-interpret them.
For example,direct manipulation interfacesare not so much an instantiation of the ways we manipulate objects in space,as they are a rethinking of thoseoperations.
Instead of grasping an object, we select it.
Placing one object on top of another  is not an act of physical stacking, but of invoking someoperation.
Similarly, properties that might initially seemto be part of the negativemetaphorare often modified during design to maintain the metaphor's consistency.
An example of this is in the use of a "trash can" icon to invoke file deletion.
Unlike real trash cans, trash can icons never becomefull.
This negative aspect of the metaphor can cause problems: users who only empty their physical trash canswhen they overflow may neglect to empty their computer trash, eventually causing disk storageto fill up with deleted files.
Black argues that metaphor is not simply a processof transferringpropertiesfkom the source to the target, but a complex interaction between them in which our knowledge of the target is equally capableof changing our understanding of the source.
Metaphor inducescomplex shifts of meaning acrossboth the target andthe source.To paraphrase Black,l if implementingfile deletion with a trash can icon improves usability, we must not forget that this will also change our understanding of "real" trash cans.
As an informal example,colleagueshave told me that they dependon the ability to retrieve things from their computer trash, treating it as an intermediate stage between long term storageand deletion.
This has made them wish for more control over the schedulefor emptying their office trash.
The interaction theory's view of metaphor as inducing shifts of meaningin both target and sourceis important to understandingdesign metaphors.During DFM's design, we encountered many situationsthat requiredmodification of the "spelling checker" metaphor.
One of the most notableresultedfrom the complexity involved in detecting machinability problems.
Unlike a word processor's spelling checker, which simply looks for words that fail to appearin its dictionary, determining the machinability of a featurein a metal part requiresan understanding of the feature's intendeduse,as well asits interactionswith other features.
Consequently, DFM required much richer evaluation criteria and user interactionsthan conventional spelling checkers.
This, in turn, broadened our understanding of spelling checkers in general.
These benefits were not without cost.
Because the "spelling checker" metaphor enabled such rapid early progress,we mademany decisionsbefore we had a complete understandingof the user's needsand assumptions.
Theseearly commitmentsand the power of the metaphor often madeit difficult to correcttheseproblems.
An important function of linguistic metaphors is in defining the structure and boundaries of social groups, with societies or segmentsof a society often defined by sharedmetaphors.Teenagersseek new figures of speech that adults will not share, just as hipsters have always used denseand rapidly changing metaphorsto lock out "square" society.
Cognitive science's use of an information processing metaphor virtually defines the field, and distinguishes it from other psychological and biological approaches to understandingthought.
As the development of the DFM advisor showed, this social function is one of the most important aspectsof design metaphors.
The "spelling checker" metaphor provided a common frame of reference that enhanced communicationamongmembersof the designteam.This was particularly important in enabling us rapidly to outline an initial systemdesign and developmentplan.
It remainedimportant as the project grew in complexity and different teammembers experienced potentially conflicting pressuresfrom users, customers,technology, schedules, budget and organizationaldemands.
The sharedmetaphor * "If to call a mana wolf is to put him in a special light, we must not forget that the metaphor makesthe wolf seemmore human than he otherwise would."
A commonly acceptedview of the use of metaphorholds that, as a metaphor develops and becomesbetter understood,its interpretationbecomes conventionalized,reducing its ability to convey new ideas about the target.
According to some views, the metaphor eventually becomes so conventionalized that it loses whatever suggestive power it had as a metaphor and effectively "dies."
Linguistic idioms are common examplesof dead metaphors.
For example,"clawing his way to the top" is no longer seenas a metaphorfor corporatesuccess, but is simply a common, if not trite, idiom of everyday language.Similarly, as cognitive sciencehasmatured,the information processingmetaphorhas beenconventionalized into the acceptedproblems of representation,search andcognitive architecture.
In general, design metaphors follow this life cycle, shifting from the broadly suggestive to the more conventionalizedasthey becomereified in an artifact.
As DFM nearedcompletion, at least certain aspectsof our interpretation of the "spelling checker" metaphorbecame effectively fixed in the design.However,the detailsof this process arefar from straightforward.Ratherthan a process of steadily refining the metaphor,developmentalternates betweenperiods of gradual refinement of a stabledesign, and radical shifts in the design and the underlying interpretationof the metaphor.This reflects Kuhn'sclassic model of scientific discovery .
The DFM Advisor went through at leastthreesuchradical interpretiveshifts.
Many theorists arguethat metaphorsnever completely die, but retain both the structural properties of metaphor and at least somepotential for revealing new meanings.
This is also true of design metaphors, in spite of the reifying effect of the design artifact.
As the development of DFM reveals, the eventual successof the project's initial stages further stimulated the "spelling checker" metaphor, and led to its expanded use in both talking aboutDFM and in proposingfuture projects.
The remainderof this paper usesthe developmentof the Design for Machinability Advisor as a casestudy in the evolution of a strong central metaphor acrossthe design process.
It considersboth the influence of the metaphoron the design, and the ways in which the design process changedour understandingof the metaphorin turn.
The metaphor also influences system architecture,complexity and algorithm design.These,in turn, can changethe interpretation of the metaphor.
A central function of design metaphors is social, supporting communication and cooperation among members of the design team.
This processis far from simple.
Different teammembersarrive at different interpretations of the metaphor,with often surprising results.
THE DESIGN FOR MACHINABILITY ADVISOR The DFh1 Advisor was intended to help mechanical designers improve the manufacturability of machinedmetal parts.
Typical problems that add to the difficulty of machining a part include unnecessarily tight tolerance requirements, features that require specialized machine tools, failure to standardizefeaturesacrossdifferent parts, and use of hard to machine materials.
Traditionally, mechanicaldesignershave focusedprimarily on the functionality of parts, leaving manufacturabiity concernsuntil later in the designprocess.This delay in addressing manufacturability increasesthe cost and difficulty of making needed changes.
DFIWs goal is to help mechanical designersconsidermanufacturability early in the process, when designsare still flexible and easyto change.
When launching de project, our customer proposed the metaphor of a "`spelling checker" for mechanicaldesigns.The initial specification called for a systemthat used a feature recognizer to find machined features 
A feature recognition team, consisting of two softwareengineers, who were to refine and adaptexisting feature recognition software to the needs of the DFM Advisor.
Onememberof this teamwas also experienced in artificial intelligence, and was extensively involved with the knowledge engineeringteam.
0 A knowledge engineering team consisting of a knowledge engineer  and an experienced manufacturing engineer who was initially intended to serve as a domain expert, but who also contributed significantly and actively to designdecisions.
This person also participated in the early phasesof design, and helped the design team remain synchronized with more global requirements, such as organizational standardsfor network interactions, and the needfor our system to eventually interact with other software also under development.
The other member of the management teamwasprimarily concernedwith funding andproject development,and did not participateactively in designafter the early stages.
The customer for the system was a mechanical engineer and functioned as our primary source of user input.
We also sought out other engineers and machinistsfor their evaluation of prototype systems.
It is important to note that a central implication of the "spelling checked'metaphor,that the DIM advisor should be driven by feature recognition, was effectively set very early in the project by our choice of the designteam.
Interactions among the design team were complicatedby the fact that it was spreadover four different organizations andbuildings at SandiaNational Laboratories.
The feature recognition team was at one site, the primary project managerand I were at a second, the domain expert at a third, and the customerand sampleusers at several other organizations.Although we met regularly , and communicated by phone and e-mail as needed, this organizational scattering did complicate our interactions.
One of the benefits of the unusually strong design metaphor was in providing a common focus, one that allowed us to work independently while maintaining a sharedbut flexible understandingof our commongoals.
Becauseof the ambitious nature of the project, we made an early decision to use an iterative, prototype-based methodology that would allow us to explore the design spacemore freely.
Selecting this exploratory approachin place of a more structured,top-down approachwasclearly the right decision, as many of our early assumptions eventually proved mistaken.
Three prototypes were implementedandevaluatedin the processof refining the design.
A final important aspect of the development milieu is Sandia National Laboratories' commitment to both research and the development of practical, immediately useful tools.
As the project developed, these twin goals both supported the exploratory methodology we had selected, and also provided an additional set of design constraintsthat influenced our developmentof the advisor.
PROTOTYPE 1: A PURE SPELLING CHECKER The first prototype systemwe constructedwas an attempt at a direct realization of the "spelling checker" metaphor.
The featurerecognizeracquiredfeaturesfrom a solid model of a part, and sent them to the design advisor for evaluation.This prototype was only concernedwith holes.
A "Next" button allowed the user to step through the applicable critics, while additional buttonsallowed the userto skip a feature, redo a featureor start over with the first feature.
Figure 1 showsthe main screenof this prototype.In order to let the userknow which featurewas being checked,the feature recognizer displayed the part with the current featurehighlighted .
The screenalso displays the feature in profile , surrounded by information about its dimensionsand tolerances.The box below displaysthe text of critics .
The buttons at the bottom allow the user to move through both features and the critics of a given feature.
This order is determined by the feature recognition algorithms.
On reflection, the design team decidedthat there was no reasonto be bound to an arbitrary order of evaluationand, in prototype2, developeda "feature browser" that allowed the user to check features in any desired order.
This browserdisplayed a list of features;clicking on a feature caused it to be highlighted in the display of the part drawing and sent to the advisor to be evaluated.The users appreciated this improved flexibility, although it is interesting to note that no one complained about the original, more rigid order of evaluation.
I believe this results from the power of the original metaphor, and illustrates the way a strong design metaphor can lead a userto accepta less than optimal solution.
Implementing such a direct translation of the "spelling checker"metaphorrequiredthat we repair severalpotential breakdownsin its interpretation.
The first of these was lack of any obvious sequencein feature recognition.
A conventionalspelling checkerscansa documentfrom start to finish, highlighting potentially misspelled words as it checks.
In contrast, feature recognition exhibited no obvious sequence,although we did highlight the current feature in the feature recognizer's display.
A more difficult problem was in the lack of complete information from the feature recognizer.
Due to limitations of the solid modeling software the feature recognizer was built upon, it was unable to recover information abouttolerancesfrom the original engineering drawing.
This was a severe limitation, since nearly all machinability problemsinvolve tolerancesat somelevel: if you don't careabouttolerances, practically anything can be machined.Although a relatedproject wasexploring the possibility of adding this capability to the feature recognizer,it was not available to us for usein the Design for Machinability Advisor.
In order to minimize data entry requirementson the user, we felt it important to provide useful default values for tolerances on feature dimensions.
This proved difficult, since "reasonable" tolerances depend upon the feature's intended function.
Our solution to this problem was to construct a databaseof common features that could be matched with recognized features to obtain reasonable default tolerances.For example, a countersunkhole for a standard screw could be recognized with reasonable reliability, providing the user with recommended tolerance valuesfor that feature.
This solution never proved fully satisfactory.
Although we were able to classify many simple features, such as holes, in a reasonablemanner, it was clear that we would have difficulty in extending the approach to more complex,novel features.Also, by providing recommended tolerancesrather than those the user had initially entered into the design drawing, we were introducing an unacceptable possibility for confusion and error into their interaction with the system.Theseproblems were among the main reasonsfor changing the approachtaken in this early prototype.
The final difficulty encounteredin prototype 1 was in its emphasison error detection, rather than error prevention.
As a "spelling checker" for designs, it was natural to apply the advisor to existing engineeringdrawings.It was only as we made progressin knowledge acquisition that we recognized that machinability knowledge could be more easily andmore effectively appliedif we offeredit to the engineerashe or shewas creating a design,rather than after the design already existed.
It is interesting to note that although the maxim, "it is better to prevent errors than to detect them," is part of every designer's knowledge, the influence of the "spelling checker" metaphor led us to ignore this valuable rule of thumb until relatively late in the development of the first prototype.
Similarly, although our customer clearly specified that the advisor would be usedto check finished designs, on seeing the prototype, he askedif it couldn't "detecterrorsashe was working."
A deeperproblem was in the complexity of recognizing machinability problems.
Spell checking a textual document is a relatively straightforward process of matching words in the document against those in a dictionary and indicating words that failed to match.
Formally, this is a process of matching text strings, and algorithms exist for doing this efficiently.
As we worked with our domain experts in acquiring knowledge of machinability problems it became clear that evaluating machinability problems was significantly more complex than finding a word in a spelling checker'sdictionary.
For example,determining whether a 0.002" diametertolerance on a 0.25" hole is excessiveor not dependsentirely on the intended use of the hole.
This, in turn, required asking extensive questions of the user, a further violation of the "spelling checker" metaphor.
Although we did not formally characterize the complexity of evaluating features, it clearly cannot be done by simple matching algorithms, and is most likely context sensitive.
Further evidenceof the interaction betweenmetaphorand computational complexity can be found in the customer's initial suggestionthat we not considerthe intendeduse of features in our evaluations, as this was too difficult.
On subsequentconversationswith the customer,our domain expert and other engineers and machinists, everyone acknowledged the importance of this information.
Although I can only speculate, it seemsreasonablethat the "spelling checker" metaphor may have led the customerto add this limitation to our initial requirements in an effort to fit the problem to the metaphor.
This impact of complexity on a design metaphor is both unexpectedand significant None of the literature I have encounteredon the use of metaphorin discovery or design mentions the impact of complexity issues on metaphor interpretation.
Generally, metaphorsare assumed to fail if they make predictions that prove to be false.
The secondprototype addressed many of thesedifficulties, but did not abandonthe metaphor entirely.
Although the domain expert andI had doubtsaboutthe metaphorby this time, the feature recognition team and the customerstill found it to be useful.
Our discussionsrevealed a number of effective argumentsfor the benefits of a feature driven approach.Among these was the ability of the advisor to serveas a final check before manufacture,the learnability and usability gains provided by the metaphor,the easeof fitting a "spelling checker" into the engineering development process, and the technical benefits of providing the feature recognition team with a challenging test of their capabilities.
Consequently, we chose to implement a "dual-use" strategy, retaining the featuredriven approachas one mode of usefor the advisor, while also allowing the advisor'smachinability knowledgeto be usedwithout featurerecognition.
When used as a checker for existing models,prototype 2 took an approach that was similar to prototype 1.
The only real difference was in replacing the one-at-a-time approachto checking featureswith a more flexible feature browser that allowed the user to select featuresfrom the solid model and check them in any desired order.
In providing a second,non-feature-driveninterface,we made the databaseof typical features directly available to the user.
They could browse this list, selecting, for example, recommended configurationsfor commonfeaturessuchas countersunkholes or holes for a rotating pin or shaft.
The user could then edit these recommendedconfigurations, changing either dimensions or tolerances.
Where these changes violated any of the machinability checks, appropriatecritics would fire to alert the user.
In evaluatingthis "dual-use" approach,it was clear that we had moved in the right direction.
The final prototype built on its predecessor'sdual-use approach,but made two notable additions to it.
The first of these was in recognizing that certain types of knowledge could be useful for either front-end design or feature checking, but not both.
We supported this by dividing our knowledge base into "tools" and "critics."
Critics wereusedexclusively to evaluateexisting features, whereas tools could be used for either evaluation of existing features,or to designfeaturesfrom scratch.A key differencebetweentools andcritics wasthat tools involved more extensive user interaction, while critics simply detectedpotential problems without requiring additional user input.
This allowed critics to function more like "pure" textual spelling checkers,while letting the "tools" providericher forms of adviceto the user.
An exampleof a tool wasthe PINFIT ADVISOR which advised the user on dimensions and tolerancesof holes that were to fit a pin or moving shaft.
In contrast,critics were simple if/then tests and required \ no user input.
A typical critic detected holes whose diameter failed to match any standardsize drill bit, and called this problem to the user's attention.
Becauseof their simplicity, critics were able to fit the "spelling checker" metaphormore directly than tools like the Pin Fit Advisor.
In effect, prototype #3's critic facility returned to an almost pure implementation of a "spelling checker" for designs,although in doing so, it became only one componentof a larger machinability tool kit.
When checking an existing mechanical design, the user browsed the features, and selected those to be checked.
Each tool or critic included a condition test to determine its applicability to a given feature.
When the user requested a featurebe checked,DFM displayedboth critics that detected problems with the feature and tools that might be useful in its refinement.
Selecting an entry either displayeda descriptionof a problem, or initialized the tool with the feature's dimensionsand launchedit asa separate application.
Becausethe advisor did not use the feature recognizer to initialize tools with feature dimensions,the user enteredthe required dimensionsand toleranceinformation directly.
Freed from this tight coupling with the featurerecognizer, we had more freedom in designing tools that were not feature oriented.
One of thesetools, the SURFACE FINISH EVALUATOR, determined which machining processes would be neededto achievea specsed surfacefinish, and evaluated the relative cost of these processes.This tool bore no direct relationship to particular geometricfeatures.
A significant change in the third prototype was architectural.
The advisor was decomposedinto much more specialized, independent objects than the earlier versions.
For example, we recognized that the feature browser was a potentially valuable addition to the feature recognizer that could stand alone from the Design for Machinability Advisor.
Consequently, it was separated from DFM, and implemented as a pure feature browser that communicated with clients  through messagepassing.
Similarly, each feature analysis tool, such as the Pin Fit Advisor could be either invoked as an independentapplication, or initialized with data from the feature recognizer.
These were deliberately designed as independent objects to enable later migration to a distributed object environment, as is consistent with broader corporate software strategy.
As we came to understand the design  better, we were able to focus more clearly on thesearchitecturalissues.
Prototype 3's division of machinability knowledgeinto distinct "tools" and "critics", where only critics were required to be applicable to geometric features.
This allowed us to create tools that had no direct link to the feature recognizer.
Essentially, this step pushed the "spelling checker" metaphorback into part of the DFM Advisor ,both returning to a "purer" instantiation of the metaphorand allowing other parts of the tool to function in a less constrained manner.
In addition to exhibiting the shifts of meaning predicted by the interaction theory, the developmentof the "spelling checker" metaphoralso supportsLakoff andJohnson's contention that metaphorsnever really die.
Although the third prototype of the advisor both reducesthe metaphor's importance and fixes its interpretation in an artifact, both the customerand the project managerscontinue to usethe metaphor for marketing DFM and planning future projects.
The Design for Machinability Advisor has become one instance of a larger metaphor that will continue to be explored through future projects.
Becausethe "spelling checker" metaphorwas so strong, it enabledus to quickly agreeon a basic design and rapidly develop the first prototype.
Prototype 1 was completedin about 4 months, which was fairly impressive given the fact that it involved a separatefeature recognizer and knowledge based system interacting over a computer network.
However, as the design matured, the metaphor also interfered with our ability to respondto an emerging understanding of the user's needs and abilities.
In particular, the "spelling checker" metaphor made it difficult to move into a fully dual-use approach that allowed both evaluation of existing designs and the provision of front-end designtools.
The developmentof designmetaphorsclosely follows the interaction theory, being characterized by shifts in the interpretation of both the design  andthe sourcemetaphor.As the DFM Advisor developed, it extended our understanding of "`spelling checkers" to include more complex interactions with the user and greater user control over the order with which items are check& Although design metaphors do tend to move from the broadly suggestiveto a more static interpretation as the design becomesfixed, this is far from a steady process, but alternatesbetween periods where the interpretation of the metaphor remains relatively stable, and times of radical shift in the understanding of the metaphor.In the developmentof DFM, there were three suchshif& 1.
Recognizingde implications of the featurerecognizer's lack of obvious order, and the rejection of a fixed order of analysisin favor of a more flexible featurebrowser.
The adoption of a dual-use strategy that allowed the userto access systemknowledge either to checkfeatures, or independentlyof the featurerecognizer.
Although my understandingof metaphorsin languageand science had prepared me for the likelihood that certain implications of the "spelling checker" metaphor would prove wrong for the design advisor, I had assumedthat these would be strictly semantic in nature; that is, I assumed that the metaphor would fail if it led to the wrong functionality or a confusing interface.
Experience with the Design for Machinability Advisor demonstrated that a metaphor could also break down if the underlying computational complexity of the resulting design was drastically different from that of the source.
Because the designteam was separatedboth geographically and organizationally, and becauseof the short developmenttimes required for a prototyping methodology,we often had to makedecisions without adequatelyconsulting other membersof the team.
This was particularly true of the feature recognition and the knowledge engineering groups.
Although these often resulted in minor inconsistencies,none of theseinvolved deepersemantic problems and all were easily repaired.
PAPERS believe that this was due to the common understanding engendered by the shared metaphor.
Another surprising discovery was that different interpretations of the design metaphor coexisted harmoniously within the design team.
As the project progressed, the interpretations of the metaphordeveloped along multiple lines: the machining expert and I cameto reducethe importanceof the "spelling checker"metaphor, while the customer and one of the managementteam retaineda more direct interpretation.
We were concerned that this might causemisunderstandingor rejection of the system.Surprisingly, they were quite happy to continue characterizing the advisor as a spelling checker, and accepted the final prototype as a faithful rendering of the metaphor.
Although reliance on the "spelling checker" metaphorinitially causedsomeconfusionfor the customer in using the final system,they quickly adapted,and did so without feeling a need to abandon the metaphor.
Finalization of the design did not detract from the flexibility with which different teammembersinterpreted the metaphor.
Similarly, the featurerecognition teamcontinuedto regard the advisor as a "spelling checker" for designs,which is not surprising, since the use of the featurerecognizerwas closely tied to this metaphor.However, they were quick to acceptsuchchanges in the metaphor'sinterpretationasthe shift to a feature browser driven approach.
It is also interestingto mention that as the featurerecognition team hasstartedto explore other applicationsfor their software, they havelargely ignored the "spelling checker"metaphor.
Although they continue to use it in discussingDFM, the metaphor plays little role in their continuing work.
Because it servesno useful function, it is essentiallydead for this portion of our team.
I would like to thank Sandia National Laboratories for their generoussupport of the Design for Machinability Project, and Ken Washington, Steve Kleban, Dwight Miller and John Linebarger for commentson early drafts of this paper.I also thank the membersof the Design for Machinability team: John Mitchiner, Kim Mahin, Jill Rivera, Lothar Bieg, RobertLaFarge,David Plummerand Marcus Craig.
Carroll, J., R. Mack, and W. Kellogg, Interface metaphors and user interface design, in Handbook of Human Computer Interaction, Hellander,Editor.
Erickson, T., Working with inter$ace metaphors, in The Art of Human-Computer Inter$ace Design, B. Laurel, Editor.
Reaching through analogy: A design rationale perspective on roles of analogy.
Madsen, K.H., A Guide to Metaphorical Design, Communications of the ACM, 1994.
Coyne, R., Designing Information Technology in the Postmodem Age: From Method to Metaphor.
As our experience with the Design for Machinability Advisor indicates, the use of metaphor in design is far from a simple affair- It is characterized by radical shifts in interpretationof the metaphorandresulting changes in the design.
In spite of the metaphor's ability to bring the designteamto a commonfocus in a rapid manner,it often hinderedour understandingof userreactionsand a flexible response to problemsin the developing designOn balance,I believe that theseare not so much problems that need to be fixed as they are essentialfeatures of an inherently complex process.I do not believe that we could have started,let alone completed,this project without the contributions of this strong central design metaphor.By leading us to developan initial prototype quickly, we were able to imposea structure on what would have otherwise beenan enormousand ill-defined design space.Although the system has largely moved beyond it, the "spelling checker" metaphor was, and remains an essential componentof our understandingof the DFM Advisor.
Black, M., Models and Metaphors.
Lakoff, G. and M. Johnson,Metaphors We Live By.
Gibbs, R.W.J., The Poetics of Mind.
Hesse,M., Models and Analogies in Science.
1966, Notre Dame,Indiana: University of Notre DamePress.
Gentner, D., Flowing waters or teaming crowds: Mental models of electricity, in Mental Models, D. Gentner and A.L.
Stubblefield, W.A., Source Selection for Analogical Reasoning: An Interactionist Approach.
Gentner, D., Structure mapping: A theoretical framework for analogy.
Kuhn, T.S., The Structure of Scientific Revolutions.
Laurel, B., Computers as Theater.
