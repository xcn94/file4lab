The goal of this project has not been to design novel interaction techniques but rather to focus on high-level choices about tool features.
Thus, we conducted field studies to find out how an informal animation tool might be used and whether or not it could be made general-purpose.
From these interviews with nineteen animators and wouldbe animators, we compiled a library of 72 usage scenarios for an animation system.
In an earlier workshop paper , we presented preliminary results from this fieldwork.
Here, we analyze these results in more detail and describe a novel optimization technique that enabled us to make K-Sketch's interface simultaneously fast, simple, and powerful.
Our evaluations show that K-Sketch has come a long way toward accomplishing its goal.
In a laboratory experiment that compared K-Sketch to a more formal novice animation tool , participants worked three times faster, needed half the learning time, and reported significantly lower cognitive load with K-Sketch.
Participants also reported that K-Sketch felt easier and faster, that they were no less comfortable showing their animations to others, and that they were significantly more comfortable creating animations in front of others using K-Sketch.
We begin by reviewing our interviews with animators and with non-animators.
This is followed by an analysis of the library of usage scenarios we collected and a description of our interface optimization technique.
We then present KSketch and the evaluations we conducted.
We close with related work, conclusions and future work.
Because most animation tools are complex and timeconsuming to learn and use, most animations today are created by experts.
To help novices create a wide range of animations quickly, we have developed a general-purpose, informal, 2D animation sketching system called K-Sketch.
Field studies investigating the needs of animators and would-be animators helped us collect a library of usage scenarios for our tool.
A novel optimization technique enabled us to design an interface that is simultaneously fast, simple, and powerful.
The result is a pen-based system that relies on users' intuitive sense of space and time while still supporting a wide range of uses.
In a laboratory experiment that compared K-Sketch to a more formal animation tool , participants worked three times faster, needed half the learning time, and had significantly lower cognitive load with K-Sketch.
Research into "easy" animation has produced many new tools and techniques in recent years.
Some support specific tasks, such as studio-quality production , classroom examples or exercises .
Unfortunately, no tool is fast enough for sketching ideas, simple enough for novices, and powerful enough to handle a wide variety of tasks.
Borrowing ideas from informal interfaces  and demonstration-based animation systems , we have developed an informal, 2D animation system called KSketch, the "Kinetic" Sketch Pad.
K-Sketch is a pen-based system that relies on users' intuitive sense of space and time while still supporting a wide range of uses.
K-Sketch animations are often rough, but they are still useful in informal situations and as prototypes of formal animations.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Since many novice animators wish to do what experienced animators do, we began our field studies by interviewing eight experienced animators to see how an informal tool would fit in their work process.
Six participants were professional animators  with an average of 10 years of experience.
One of these also taught animation.
The other two animators were Computer Science graduate students with much less experience who produced animated conference presentations.
Though the range of participants was broad, commonalities did emerge.
Interviews were structured around the following questions: * Describe the steps in your work process.
Give more detail on the early stages and the parts that involve sketching.
During the interviews, we recorded how participants go about the various steps in their process, collecting sketches, photographs, animations, and video of the animators at work whenever possible.
There was variety in the animators' work processes.
One artist did much of her work in clay with stop-motion photography, but produced early versions of her work with drawings that were animated in Adobe AfterEffects.
Several other artists worked with similar tools, though some drew out all frames by hand .
Our two students took a vastly different approach, coding their animations in Slithy , an animated presentation language.
Six mentioned prototypes as a key step in their process.
Traditional animators begin prototyping with paper sketches, then move to animated "character sketches" or other short timing tests, and then move to storyboards.
Then, many animators build videos  that show storyboard frames in sequence with rough timing and sound tracks.
Animatics are important for the animators' creative processes, but they are also an important tool for communicating project status to clients.
Other participants had different approaches to prototyping.
Animator 7 was so experienced with Flash that she was often able to mock up animations directly in the tool after only a few sketches.
Animator 4 worked exclusively in Slithy and was so proficient that he sometimes skipped the storyboarding phase entirely.
Animator 5 was less proficient in Slithy, however, and expressed a need to do more prototyping, though he was not sure how.
At some point in each interview, we described possible designs for a rough animation tool, suggested ways that the animator might be able to use such a tool in their work process, and noted their reactions.
Most were interested in such a tool as a prototyping aid.
Animator 8 also expressed interest in using such a tool for finished works.
Researcher Domain Biology Physics Eng.
Her students frequently "act out" the actions of characters in front of the camera.
These interviews show that informal animations can play an important part in the development of more formal animations.
In the following section, however, we will see that many novices do not require a formal end result.
As our project progressed, we encountered many people who did not create animations but were looking for fast, easy ways to create them.
To better understand their needs, we recorded these conversations in a structured way.
We recorded interviews with people who met these criteria: 1.
They must describe animations they wish to create in sufficient detail for us to create them.
There must be a plausible reason why they do not already produce the animations they describe.
The animations must support a specific task.
There must be a plausible reason why the animation is necessary to accomplish that task.
We believed these criteria would lead us to people who could give us a clear picture of the needs of inexperienced animators.
Table 1 describes those who met our criteria.
Most of the participants were teachers , engineers, or scientists seeking to explain a concept.
Some teachers did not know where to find animations that fit their needs, and others wanted to customize the animations that they found.
Participant 1 wanted her students to produce animations as a visualization exercise.
Participant 8 wanted animations to entertain and motivate her students.
Engineers and scientists were seeking to explain ideas in small, informal meetings .
Participant 4 wanted to visualize a set of dance moves before directing dancers .
Most of our participants did not know how to go about creating the animations they envisioned.
Only two  knew of useful domain-specific animation tools, but their need did not justify the effort required to learn these tools.
Some participants believed general purpose animation tools would be prohibitively complex.
Teachers had trouble devoting lesson planning time to learning or using these animation tools.
Participant 1 was concerned that her students would waste studying time learning to use animation tools.
Participants who worked in science and engineering said that the need for an animation would arise suddenly in meetings, and there was no hope of creating an animation at the last minute.
These interviews further convinced us that there is a need for informal animation tools that require very little time to learn or use.
However, as the next section shows, our participants described a wide variety of usage scenarios, presenting us with a considerable design challenge.
It seemed that the complexity of general-purpose tools might be necessary.
In hopes that we could identify a small set of capabilities that would still support a wide range of animations, we gathered task scenarios into a library for deeper analysis.
Each scenario contains a description of objects and actions as well as a detailed description of the user and goal.
Currently, the library includes 16 scenarios from nonanimators and 27 scenarios from animators.
Animator 3 also gave us 22 animations produced by children in her class.
Many of these were rough animations.
Finally, we created 7 scenarios that were significantly different from any in our library, giving 72 scenarios total.
In the remainder of this section, we discuss the patterns that emerged in these scenarios, starting with the users.
Finally, two scenarios had a goal of Thinking through some problem.
Informality can be useful in all of the above situations, and most categories of users can benefit from reduced learning time.
Of the above categories, all but "Artists" have very limited time to learn about animation tools.
This is why reducing learning time has been a major focus of our work.
We now turn our attention to the more challenging problem of analyzing the content of each animation.
Each animation tool provides a set of operations for specifying animation, and the complexity of a tool is determined by the number of operations and how the interface supports each one.
Following the tradition of informal tools , we wanted our interface to match users' intuition as closely as possible.
As part of our analysis of each animation, we noted how a user might intuitively express the events that took place.
We found many different ways to express events, but over time they fell into a relatively small number of categories.
These categories can serve as the primitive language elements, or operations, of an informal animation tool.
After a detailed analysis of the 72 usage scenarios in our library, we defined the following 18 animation operations: Translate, Rotate, Scale: Common, simple operations.
Set Timing: Specify the speed and acceleration of a motion, rather than moving it at a constant speed.
Move Relative: Add a motion on top of another, so that the new motion is relative to the old motion's reference frame.
Appear, Disappear: An object appears or disappears.
We count them separately because some tools support only one.
Trace: Animate a line over time, as if traced by a pen.
Repeat Motion: Repeat an event sequence.
Copy Motion: Move an object in the same way or a way similar to another object.
Define Cels: Create alternate appearances for an object, as in traditional 2D animation cels.
Morph: Turn one object into another over time.
Physically Simulate: Move objects as in "real life."
Interpolate: Define the start and end states of a change and animate the transition between the two.
All users fell into one of the following five categories.
Each title is followed by the number  of scenarios with a user in this category.
These users are undertaking small creative tasks that may not involve animation directly.
Amateur animators would use an informal animation tool to tell short stories, solve a problem, or share an idea.
These users are undertaking larger creative tasks that involve animation.
They would use informal animation to try out new ideas quickly, to prepare animated storyboards, and to share these with clients.
These users are working to impart knowledge to their students.
It is likely that animation will be used to explain a dynamic concept, or to make course material more engaging.
Education research is conclusive in showing these uses have positive educational impact .
These users have a teacher who has asked them to create an animation as a learning exercise.
This class of users may be growing .
These are knowledge workers who are working on a variety of complex tasks.
They may use an animation tool to explain a concept to a colleague, think through a problem, or prototype a more formal presentation.
When we look at users' goals in these scenarios, a similar picture emerges.
Prototyping is the goal in 35% of scenarios, and nearly all of these scenarios come from artists.
Amateurs wanted to Entertain others  or just Doodle for themselves .
Move Forward/Back: Change the stacking order of objects, so objects that were covered up are now uncovered.
Deform: Stretch an object out of its current state.
Move Limb: Define object skeleton & move a segment.
Orient to Path: Translate an object while pointing it in the direction it is moving.
In addition to these 18 animation operations, we defined five variants of Translate, Rotate, Scale, and Set Timing, but we do not discuss them here, because they added little to our analysis.
We also defined eight other operations that are fairly orthogonal to the operations above  or common to graphical editors .
These also added little to our analysis, and we assume that all would be present in a product.
This left us with 18 animation operations to choose from.
The length of this list helps to explain why general-purpose animation tools are so complex, and it was a major design obstacle for us.
We knew that we could not support all operations, but we lacked a method for choosing between them.
This led us to develop a new analysis and optimization technique, described in the following section.
We then built an optimization program that computes small, fast, and powerful operation sets and displays them to help a design team understand the tradeoffs.
For each animation in our library, we enumerated the "features" that a user would have to represent to accomplish their goal.
For each feature, we listed one or more "approaches" to representing that feature and noted the operations required by each approach.
We can then say that a set O of operations "supports" scenario S if all the features of S can be represented with one or more approaches for which all operations are contained in O.
Not all approaches are equivalent.
Preference was given to those that gave the best results for the task and that could be performed the most quickly and easily.
Subsequent approaches might produce animations that are less precise, but acceptable.
If an approach required the user to perform more work than the preferred approach, we noted the number of extra steps.
For example, if an animation had two objects that moved along curved paths, each of which could be approximated by 4 straight paths, then using straight paths would result in 8-2 = 6 extra steps.
Given this data, our goal was to compute the minimal sets of animation operations that would support every size subset of scenarios.
We computed these results with a Python script that tested every combination of animation operations against combinations of sufficiently fast feature approaches.
The definition of "sufficient" was configurable.
We considered several possibilities, but decided that approaches with four or fewer extra steps were acceptable.
We ran the script with these options on a 2.8 GHz Intel Xeon CPU with 2 GB RAM, and after 18 minutes, it produced the results in Table 2.
Our goal was to make K-Sketch fast enough to accomplish most tasks in minutes or seconds, simple enough for novices to learn after a short demonstration, but powerful enough to handle most of the scenarios in our library.
We expressed this as an optimization problem, maximizing the number of animations we support , while minimizing the number of steps needed to complete a task  and the number of animation operations available .
Table 2: The data produced by our interface optimization technique .
Each column shows the minimal sets of operations that would support the percentage of scenarios at the top.
If an operation is needed in all minimal sets, a dark gray box appears in its cell.
Light gray boxes show those operations that are in some, but not all minimal sets.
Figure 3: K-Sketch User Interface.
We assume the presence of a physical "Alternate" button that users operate with their non-dominant hand to access alternate modes.
We allow Tablet PC bezel buttons, handheld remote controls, and keyboard keys to be Alt.
This form of mode switching has been shown to be effective .
K-Sketch models animation as a sequence of editing steps over time.
By default, any edit operation that the user performs happens instantaneously at the current time index and is visible from that time forward.
Drawing and erasing are treated as any other edit, and this is how K-Sketch provides the Appear and Disappear animation operations.
To record an animation, users perform these edit operations while time is advancing.
When they do this, their edits are recorded in real time as they are performed.
The following sections describe these editing and time control features and show how they support the remaining animation operations.
The operations toward the top are clearly more important than those toward the bottom, which helps us to optimize the user interface for the more common cases.
We set our target for K-Sketch aggressively at 80% of scenarios.
Because our method finds only operation sets that allow tasks to be completed quickly, we can "support" more scenarios than commercial tools such as Flash  and PowerPoint , which have slower precisionfocused operations.
We can reach 79% by providing the operations Disappear and above in the table plus two of the following: Trace, Repeat Motion, Copy Motion, and Define Cels.
We chose Trace and Copy Motion, since they fit naturally into our design idea.
We also included Orient to Path to bring us over 80%, because it also fit naturally.
This technique is general enough for a variety of domains.
Our optimization program has exponential complexity and is impractical for large numbers of operations, but it parallelizes easily.
The technique should not be used to compute one "optimal" solution, because designers' intuitions may reasonably conflict with computed results .
Objects are selected in K-Sketch by drawing a loop around them while holding the Alt.
If 60% of a stroke lies inside the selection loop, it is selected and rendered in outline .
Individual strokes can be selected by holding the Alt.
When an object is selected, a manipulator  appears on top of it.
This manipulator is designed for pen interaction, and it allows objects to be animated in a variety of ways, depending on where the user touches it .
A similar manipulator appears in Integrated Manipulation .
Tracking Menus  are also similar, but they follow the pen instead of hovering over selected objects.
Whenever strokes are edited with this manipulator, they are implicitly grouped so that they can be easily selected in the future.
Using the manipulator inserts an instantaneous change into the animation at the current time.
If the user holds the Alt.
This is how K-Sketch supports Translate, Rotate, Scale, and Orient to Path.
Because the timing of these motions is taken directly from the user's pen movement, this supports Set Timing as well.
The manipulator initially appears centered, axis-aligned on the selected strokes.
K-Sketch currently supports all ten desired animation operations: Translate, Scale, Rotate, Set Timing, Move Relative, Appear, Disappear, Trace, Copy Motion, and Orient to Path.
Also recall that our analysis assumed the presence of eight other operations.
Of these, we currently support only Repeat Playback and Copy Object.
The others are straightforward to add and have little research value.
The K-Sketch user interface appears in Figure 3.
There is no difference between recording and playing in KSketch-edits to a playing animation are recorded, and this means that all objects move simultaneously when time advances.
Users must rely on their intuitive sense of timing to coordinate the motion of objects, but K-Sketch provides three features to assist them: motion paths, a global speed control, and ghosts.
Figure 5 shows some of these features in action as a user coordinates the collision of two particles.
Motion paths  are pen traces that appear whenever the user records an edit with the object manipulator.
These paths can help users coordinate movements by showing where objects will go in the future.
The line is rendered solid for that portion of the motion that has already occurred and dashed for that portion that is yet to come.
A motion path is visible whenever its object is visible.
If the canvas becomes too cluttered, the user can turn motion paths off through a button in Figure 3c.
If objects are moving too fast for users to respond to them, they can slow down the animation through the Speed button .
This button shows a slider allowing users to speed up or slow down the global clock.
Ghosts  are transparent views of objects that appear at the moment in time when an object is erased to help users remember where it was.
They are useful for coordinating the position of a drawing that replaces another, such as the explosion in Figure 5h.
Ghosts can also appear under the pen when adding relative motion .
Users can modify an existing motion path by going back in time and demonstrating the motion over again.
By default, new motions overwrite existing motions.
Any existing motion that was in progress is truncated, and any motions that started during the new motion are removed.
Motions that end before or start after the new motion are unaffected.
Users may not always wish to overwrite motions, however.
To support the Move Relative animation operation, it is necessary to add a motion on top of an existing motion.
For example, a rolling wheel might be created by translating the wheel and then adding a rotation motion that occurs simultaneously in a new reference frame.
It is easy for novices to imagine adding motions in this way, but we found that performing such an operation can be difficult if users must add motions in a particular order or explicitly specify the added motion's reference frame.
Our solution is to use heuristics to predict the reference frame that users intend to modify and to provide a correction interface when our prediction is incorrect.
When only one reference frame exists, new motions overwrite existing motions.
If the user does not like the result of adding a motion, she can select "Fix Last Motion" in the context menu.
This displays animated thumbnails of the resulting animations from all possible reference frame choices and allows the user to intuitively pick the correct one.
In practice, the correction interface is quite fast.
For most animations, it is needed only once for each new reference frame.
Because few animations in our studies required more than three reference frames, this list is usually short.
Also, since most relative motions fall into a few types, we are often able to put the most likely alternative first in the list.
K-Sketch is implemented in C#.
The implementation makes heavy use of the Piccolo.NET graphical interface toolkit , which we modified to use the ink collection, rendering, and selection methods provided by the Microsoft.Ink API.
K-Sketch totals 67 classes with 28,000 lines of code, plus 7 classes with 3,900 lines of code added to Piccolo.NET.
K-Sketch also provides the standard editing controls Cut, Copy, and Paste , and these can be used to perform the Copy Motion animation operation.
When an object is selected, users can click "Select Motions" in the context menu to select the motions applied to that object.
When motions are selected, a Copy command will copy them to the clipboard.
When another object is selected, a Paste command will apply those motions to the new object.
We conducted three small user studies with K-Sketch as part of an iterative design process.
These studies helped us to refine K-Sketch's recording controls and selection controls in numerous ways.
They also helped us refine our support for the Trace animation operation and demonstrated the need for a global speed control.
These studies also convinced us that novices could use K-Sketch to do realworld tasks after about 30 minutes of practice.
These user tests were helpful, but we needed a comparative evaluation with another tool to evaluate our claim that KSketch makes animation more accessible to novices.
In our first attempt at such an evaluation, the first author produced 10 animations from our field studies with both K-Sketch and Flash.
This user was a K-Sketch expert, but was also quite experienced with Flash.
In this evaluation, most animations took 4-8 times longer to produce with Flash.
We believed these results to be promising, but we knew that the system needed to be evaluated with true novices.
Also, we realized that Flash is a poor tool for comparison, because it is too complex for novices.
For these reasons, we planned a larger laboratory experiment that compared KSketch to an animation tool for novices.
Users can perform the Trace animation operation in KSketch by pressing "Go" and drawing a line.
The appearance of the line will be animated over time as would any other edit operation.
However, users cannot hold the Alt.
Instead, K-Sketch provides a "Record Drawings" mode  that advances time whenever the pen touches the screen for a draw or erase operation.
Instead of a complex timeline that shows the history of every moving object separately, K-Sketch compresses time navigation into a single slider with an iconic overview of history .
Every edit event adds a tic mark at that moment in history .
When an object is selected, the slider highlights the edits related to that object .
Users can move through time by dragging the slider thumb or by tapping on either side of the thumb, which jumps to the next event.
There are also buttons  that jump to the beginning and end of the animation and that "nudge" time forward and back by 1/15th of a second.
Users can tweak the start or end time of a motion by sliding the edit history tics along the timeline.
By default, moving an event also moves any others that occur after it, but holding the Alt.
The order of events is always preserved.
We decided to compare K-Sketch to Microsoft PowerPoint and focus on the advantages of informality.
PowerPoint has powerful "Custom Animation" features targeted at allowing novices to make animated presentations.
The tool provides most of the animation operations provided by K-Sketch; but is missing Trace and Orient to Path, and its support for Set Timing is limited.
It is a good example of a formal, generalpurpose animation tool for novices.
Instead of using standard "VCR-like" recording controls with recording, playing, and stopped modes, we chose to limit K-sketch to two modes  controlled with a single button .
We did this to reduce the number of controls and the possibility of confusion between playing and recording modes.
It is possible, therefore, for a user to play an animation and wait for an appropriate time before manipulating an object.
As long as the animation is going, the edit will be recorded over time.
Our study was a within-subjects comparison of PowerPoint and K-Sketch.
Participants completed a practice task followed by two experimental tasks with one tool, and then repeated the process for another tool.
Our independent variables were the tool used and the task performed, and both were counterbalanced across participants.
The tasks were simplified versions of tasks from our field studies, a particle collision  and a dance maneuver .
We chose these because both require multiple objects to be in motion simultaneously, the tools support the required operations, and pilot tests showed they could be completed in a 4 hour session.
The practice task was designed to teach users everything needed to complete the experimental tasks.
Our primary dependent variable was the time to complete each task.
We knew comfort was likely to be different depending on the audience.
Therefore, for each situation , we asked the question for eight different audiences .
Responses were on a seven-point scale .
There were also three variables dependent on tool only.
After using each tool, participants took the NASA TLX cognitive load self assessment .
We also asked participants for subjective feedback on both tools at the end of the experiment.
We asked how easy it was for them to work with both tools  and how fast they were at operating both tools .
Each task was an animation that participants needed to create.
Participants viewed these animations in the QuickTime player, allowing them to replay and scan through the animation as much as they wished.
These animations were formal so that participants could form a clear mental picture of the task as quickly as possible.
To create a sense of time pressure, participants were instructed before each task to complete the task as quickly as possible.
The instructions stressed that participants did not have to make the animations look perfect, and that it was more important for them to work quickly than it was to reproduce objects or their motions precisely.
They were required, however, to keep the sequence of events the same.
Participants learned to use each tool during the practice task by working through an 8-10 page written tutorial that showed them how to use the tool to complete the practice task.
They were allowed to keep this tutorial as a reference during the experimental tasks.
During the experimental tasks, participants were asked to avoid asking for help unless they were stuck, and the experimenter intervened only when necessary to keep things moving.
Most reported a desire to create animations once a year , although some wished to make them once per week .
The purpose of these animations varied, including new works of art and animations for a company web site.
Participants had little or no experience with PowerPoint Custom Animation  or other animation tools .
On a 7-point scale , participants agreed somewhat that they were discouraged from creating animations.
Test sessions took between 21/2 and 41/2 hours to complete.
We limited our interaction with participants during experimental tasks, but it was sometimes necessary.
7 participants  needed help 1-5 times to finish tasks with PowerPoint, and one needed help twice to finish a task with K-Sketch.
Help was given in gradual stages, to limit interaction as much as possible.
Table 3 shows the means and standard deviations for all our dependent variables.
To account for multiple tests of significance, we used a per-comparison alpha level of .007 for each t-test  to determine statistically significant effects.
For ease of interpretation, p-values are reported.
Except for "Comfort Sharing", all the differences shown in the table are statistically significant.
The time to complete experimental tasks was about three times lower with KSketch than with PowerPoint .
There was no other significant interaction on completion time.
Row five shows that the NASA Task Load Index was about two times higher for PowerPoint than for K-Sketch .
We recruited 18 participants through a poster that called for people who are "interested in creating animation but have never done so."
Of these, two were discarded from our analysis because they could not complete the tasks in the time available.
Of the remaining 16, seven were men, and nine were women.
Nearly half were students, and the others worked as artists, technology professionals, teachers, or dental assistants.
To compare participants' comfort showing their animations to others and creating them in front of others, we first averaged each participant's responses across all eight possible audiences.
The values shown at the bottom of Table 3 are the means and standard deviations of these averages.
We then considered each possible audience separately, but still found no significant differences between tools on comfort showing animations.
However, participants were significantly more comfortable creating animations in front of others with KSketch than they were with PowerPoint .
There was no other significant interaction on comfort creating animations.
When asked what they liked or disliked about K-Sketch, six participants said they liked using the pen, five commented that it was simple or easy to learn, and four said that it felt natural or intuitive.
However, eleven participants commented that K-Sketch needed more tools for creating and editing precise graphics as in PowerPoint.
When asked what they liked or disliked about PowerPoint, four participants said they liked PowerPoint's similarity to tools they were familiar with, and four said they liked the presence of precise graphical tools.
On the other hand, seven disliked the fact that PowerPoint felt complicated or "technical", four said it was time-consuming or tedious, and three said it was inflexible or too structured.
Finally, we believe these results hint that spontaneous animation may become a practical medium in collaborative environments.
Participants were more comfortable creating animations in front of others with K-Sketch, and their cognitive load was much lower.
The most helpful animation research indicates when and how to use animation effectively.
Rieber described conditions under which animation aids learning of concepts involving motion or trajectory .
Others explain why many animations fail to communicate effectively, and note that interactive playback control is important .
We have taken these results into account by designing K-Sketch to support the use cases that these researchers envision.
These results show that K-Sketch's simple interface has strong benefits.
Experimental tasks took an average of onethird the time with K-Sketch.
Participants' complaints about the complexity of PowerPoint indicate a major cause.
Many participants were confused by PowerPoint's timeline and by its many menu options for timing control.
By contrast, KSketch required less cognitive load, and participants felt that it was easier and faster.
Participants found K-Sketch's simplified timeline to be more accessible than PowerPoint's, and we were pleased to see many participants manipulating events in K-Sketch's timeline, even though this was only briefly mentioned in the tutorial.
The simplicity of K-Sketch's interface also meant less practice time was needed before tasks could be performed.
The benefits of informality are also evident in these results.
The goal of informal interfaces is to allow deferring of details, but the results of this study show that informality can help participants to defer details when lack of time requires them to do so.
The impulse to perfect in PowerPoint seemed involuntary.
Participants were asked repeatedly to work fast and avoid making objects or motions perfect, but participants still spent time perfecting PowerPoint animations, which contributed to longer task time.
The roughness of K-Sketch animations, on the other hand, probably contributed to the fact that K-Sketch felt easier and faster.
In seeking a way to make animation more accessible to novices, we have taken inspiration from previous work in informal sketching tools .
The great insight of these systems is that much of the complexity of conventional design tools comes from their focus on precise details.
When these details can be ignored or deferred, design tool interfaces can be much simpler.
Sketching has often been used to simplify the animation process.
Much of this prior work is geared toward producing highly polished final results.
For example, sketched motion paths  have been used to direct the motion of 3D figures.
Others have automatically generated animated movements of polished 2D character sketches .
K-Sketch is less concerned with polish and more concerned with accomplishing animation tasks quickly and easily.
There have been other efforts to apply sketching to rough animation.
Alvarado used sketched annotations to generate imprecise animations of mechanical systems .
MathPad2 generates animations from sketches of figures and mathematical equations .
These systems are valuable in certain domains, but K-Sketch attempts to be useful across many domains.
KOKA  is a general-purpose animation tool that supports 17% of our scenarios.
It defines a visual language for animation, which we avoid, because visual languages are difficult for novices to learn.
Living Ink  is another general purpose animation tool which supports 51% of our scenarios.
It uses static motion path sketches to generate motion and has a stack-based metaphor for combining motions that may be confusing for novices.
Our system is most similar to systems that use timing in addition to the spatial extent of strokes or gestures.
Genesys  was the first system to use sketching for both creating objects and demonstrating motion.
K-Sketch brings these ideas to novices and addresses open questions, such as which operations to support, how to select between operations, and how to navigate through time.
Most current work in animation demonstration simplifies the process of creating expressive motion for articulated figures  or deformable objects .
RaceSketch  is much more similar to K-Sketch than any other project listed here.
It supports 25% of our scenarios with the operations Appear, Translate, Orient to Path, Set Timing, and Deform.
It also provides a novel technique for timing refinement, but we believe a global speed control is sufficient and easier to apply in many cases.
All of these projects contribute fast interaction techniques, but none share our goal of optimizing for both simplicity and power.
Our analysis suggests that the costs of some techniques may outweigh the benefits.
For example, Table 2 shows that the Deform operation is less important than others, and most rough tasks can do without expressive articulated figures.
We have presented K-Sketch, an informal animation sketching system for novice animators.
Our efforts to reduce the complexity of animation tools while supporting a wide range of tasks caused us to carefully analyze the requirements of 72 usage scenarios.
The resulting system relies on users' intuitive sense of space and time and allows tasks to be accomplished quickly and with little learning.
This paper makes the following contributions: * The implementation of a novel tool, K-Sketch, that helps novices quickly create 2D animations.
In the near future, we plan to run another evaluation similar to the one reported here but with one-fifth as many participants and five times more experimental tasks to more fully demonstrate the generality of our tool.
K-Sketch is available at k-sketch.org.
