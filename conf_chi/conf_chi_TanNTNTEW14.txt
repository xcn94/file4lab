In Apple's iOS 6, when an app requires access to a protected resource , the user is prompted with a permission request that she can allow or deny.
These permission request dialogs include space for developers to optionally include strings of text to explain to the user why access to the resource is needed.
We examine how app developers are using this mechanism and the effect that it has on user behavior.
Through an online survey of 772 smartphone users, we show that permission requests that include explanations are significantly more likely to be approved.
At the same time, our analysis of 4,400 iOS apps shows that the adoption rate of this feature by developers is relatively small: around 19% of permission requests include developer-specified explanations.
Finally, we surveyed 30 iOS developers to better understand why they do or do not use this feature.
In Apple's iOS 6 , permission request dialogs appear at runtime whenever an app first requests access to any of the following six resources: the user's geophysical location, address book contacts, photos and videos, calendars, reminders, and Bluetooth pairing .
To make these requests more understandable to users, developers can optionally specify a purpose string to explain why an app needs access to a particular resource.
Figure 1 shows an example of a calendar request with such a purpose string.
We studied the effects of developer-specified purpose strings through three different experiments.
First, we performed an online experiment on 772 smartphone users to measure their willingness to grant access to protected resources.
We observed that on average, the rate at which participants approved permission requests increased by 12% when purpose strings were present.
Surprisingly, the actual content of the purpose strings did not have an observable effect .
Second, we performed an analysis of 4,400 iOS apps to measure how many are taking advantage of this feature and whether there are any trends with regard to developers' text choices.
Finally, we performed a qualitative survey of 30 iOS developers to examine their opinions of this feature, including why they choose  to use it.
Taken together, our experiments show that purpose strings can lead users to grant more requests , but few apps employ them, due to developers being unaware of the feature or its impact on user behavior.
In 2012, the number of smartphone users crossed 1 billion, and that number is expected to double by 2015 .
Smartphones allow third party apps to access sensor data 
To empower users to make informed choices about how their data is used, each smartphone platform has a method for allowing users to grant permission for an app to access certain types of data.
Copyrights for components of this work owned by others than the author must be honored.
Abstracting with credit is permitted.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Copyright is held by the owner/author.
Publication rights licensed to ACM.
Purpose string "Let Gmail use your contacts to autocomplete email addresses."
Research has shown that with regard to mobile device security and privacy, malicious apps are rare .
A more widespread threat appears to be apps that, possibly unintentionally, access users' personal data in ways that users neither expect nor condone.
Researchers have developed techniques to track the flow of privacy-sensitive data and detect when it leaves the device  and to identify overprivileged applications .
Because users may weigh the trade-off between privacy and functionality differently, many mobile platforms allow users to decide whether third party apps can access certain protected resources.
When choosing how to represent permission requests, platform developers have essentially four mechanisms at their disposal: automatically granted permissions, trusted UI components, runtime warnings, and install-time warnings .
Android uses install-time warnings for all of its permission requests.
Instead of presenting a list of all requested permissions at installation, some platforms  show permission requests to the user at runtime, when an app first requests a resource.
While runtime requests provide context to the user, a decade of usability research has shown that users may become habituated to these warnings, making them ineffective .
Because habituation increases with each warning exposure , researchers have studied ways to minimize unnecessary warnings  and to make important warnings more salient .
Capturing users' app privacy preferences is challenging .
Experiments by Fisher et al.
They surveyed iOS users and concluded that while users grant the majority of location requests, most users deny at least one app access to location.
They found that even when users read permission requests and are aware of the resources an app uses, users still have trouble understanding why certain resources are needed, which makes it difficult for users to make informed decisions based solely upon the permissions an app accesses.
They also found that participants were significantly more comfortable when the purpose of resource requests was explained.
We performed an online experiment to determine whether users are more likely to grant iOS 6 permission requests when developer-specified explanations  are present, whether users better understand the reasons for these requests when purpose strings are present, and whether users are more satisfied with their decisions.
Our experiment involved three tasks.
In the first two tasks, participants viewed a screenshot of a real app with a purpose string  and a screenshot of a different real app with its purpose string removed .
We randomized the order of these two tasks.
Each screenshot was randomly selected from a pool of 15 permission request screenshots , taken from real apps and using real purpose strings.
We included logic so that no one saw screenshots from the same app for both tasks.
Thus, these two tasks allowed us to perform a within-subjects analysis of participants' decision-making with and without purpose strings.
It helps me make a more effective decision about the sharing of my information.
It gives me more control over the sharing of my information.
It makes it easier to decide on the sharing of my information.
It allows me to quickly decide on whether to share my information.
It allows me to efficiently decide on whether to share my information.
It addresses my concerns over the sharing of my information.
I am satisfied with it.
It makes me more comfortable deciding on whether to share my information.
It is clear and easy to understand.
The language used is simple and natural.
I feel like it is necessary for me to make an effective decision about the sharing of my information.
Each participant answered 12 questions on a 7-point Likert scale .
We took the average of these 12 responses to create a "satisfaction score."
For the third task, we showed a screenshot of a fake app, Party Planner, requesting access to the user's contact list.
This request featured a purpose string randomly selected from a pool of 14 .
This task allowed us to perform a betweensubjects analysis of the effect of text choice in the purpose strings, while also controlling for app familiarity .
For each of the three tasks, we included three pages of questions.
On the first page, we displayed a screenshot of the app followed by a detailed description of what the app does.
We then asked participants to type the name of the app and to report whether or not they had previously used the app.
Each task's second page showed a screenshot of one of the aforementioned permission requests.
When participants viewed the Purpose task, the request featured a purpose string from Table 1; when they viewed the Control task, no purpose string was displayed; and when they viewed the Party Planner task, the purpose string was drawn at random from Table 4.
We asked, "if you click `OK,' what information will the app get access to?"
They could select from ten multiplechoice options, including "none of the above" and "I don't know."
We used this question to establish whether they had studied the screenshot.
Next, we asked three open-ended questions: "Why do you believe the app is asking for access to this information?
Two coders independently tagged responses to look for common themes.
Finally, we asked whether they would allow the request.
On the third page of each task, participants rated 12 statements about the permission request they had just viewed on a 7-point Likert scale .
For each task, we averaged each participant's responses to all 12 statements, to create a "satisfaction score."
While each statement was phrased positively, this is not a cause of bias because we only used these to make relative comparisons between experimental conditions.
Our survey concluded with demographic questions, including whether participants were iOS users.
From the 826 responses that we received, we filtered out participants who claimed not to own a smartphone, specified a make/model that did not match a specified platform,1 or wrote gibberish for the open-ended questions.
This left us with 772 responses.
For each of the three tasks, participants named the app  and its requested resource .
Due to some ambiguity, many chose a superset of the correct resource .
We therefore accepted supersets of the correct responses.
Based on the low reliability of these questions , we chose to filter participants out on a task-by-task basis.
For example, we removed those who could not name both the Purpose task app and its requested resource from the Purpose task analyses, but included them in the Party Planner task analyses if they could correctly name that app and its requested resource.
This reduced the number of participants to 666 for the Party Planner task and 623 for the Purpose and Control tasks.
When participants viewed purpose strings , they approved 73.6% of the requests, whereas when the requests did not have purpose strings , they approved 65.8% of the requests .
A Wilcoxon Signed Ranks test found this difference to be statistically significant .
To determine whether the significant change in behavior was due solely to the presence of the purpose strings or some other factor, we examined whether there were any observable effects due to the ordering of the within-subjects tasks, participants' familiarity with the specific apps in the first two tasks, or their familiarity with iOS in general.
We first examined the effect of the within-subjects questions' order .
We performed Fisher's exact test to compare the approval rates in the Purpose task  between participants who saw this task first and those who saw it after completing the Control task.
We observed no statistically significant differences .
Likewise, we performed the same test on the Control task approval rates and also observed no statistically significant differences .
This suggests that the difference in approval rates was not due to task ordering or that participants deduced our goals and acted to please us: participants had no chance to deduce the stimulus until the second task , leaving their first task untainted by demand characteristics.
If participants were acting to please us, those who performed the Control task first  would have behaved differently than participants who performed this task second .
We randomly displayed apps drawn from the same pool in the Purpose and Control tasks to prevent participants from being more familiar with the app in one task than the other.
However, we also explicitly tested for this: we performed a within-subjects comparison to see if participants were more likely to report using the apps shown in requests containing purpose strings  than the apps shown in requests not containing purpose strings .
Thus, participants' familiarity with the apps did not have an observable effect on their behavior.
We explored the similar question of whether participants' iOS familiarity affected decisions to allow permission requests.
Neither of the first two tasks showed a significant difference in approval rates between current users of iOS and those of other platforms .
Thus, we conclude that the presence of purpose strings was responsible for the significant difference in behavior.
Surprisingly, purpose strings did not observably help participants explain why their data was being requested: 6.0% could not provide an explanation for why their data was being requested during the Control task versus 5.4% during the Purpose task .3 Likewise, we discovered that the purpose strings were unlikely to better communicate whether personal data would be used for other purposes: 31.0% were uncertain during the Purpose task versus 32.7% during the Control task, which was not statistically significant .
Thus, our data shows that while participants were significantly more likely to allow requests when presented with purpose strings and that they felt positively about these requests, the purpose strings did not help them understand why their data was being requested or how it might be used.
In order to measure participants' level of satisfaction with each request, we asked them to rate 12 statements  using a 7-point Likert scale .
For each task, we calculated participants' satisfaction scores as the average of all 12 questions.
We then performed a within-subjects comparison of the satisfaction scores during the Purpose task  and the Control task : we observed a statistically significant difference .
This indicates that participants felt more positively about their experiences when they were presented with requests containing purpose strings.
To examine why participants felt better about their decisions when presented with purpose strings, we examined the responses to our three open-ended questions.
We examined the Party Planner task data to better understand how the specific text of a purpose string may influence participants.
The fictitious Party Planner's purpose strings were randomly drawn from Table 4.
This allowed us to perform between-subjects comparisons to examine the effects of the specific text, while controlling for the app.
We designed these purpose strings to convey varying amounts of information.
When viewing the control statement, participants' satisfaction scores were significantly lower than they were when viewing the other statements .
Though despite this difference, we ultimately observed no differences in behavior: Fisher's exact test did not yield any statistically significant differences between the approval rates of participants shown the control purpose string and those shown the other purpose strings .
In the previous section, we showed that developer-specified explanations for permission requests impact user behavior and satisfaction.
In this section we examine the adoption of this feature by developers.
We performed a combination of automated and manual analysis to identify apps that requested access to any of the six resources that require user approval, and of these, what percentage included developer-specified explanations for resource requests .
Finally, we examine trends in developers' explanations.
Purpose String Control: "Contact access is required for this app to work properly."
Don't worry, we're not storing them."
We won't use your contact information for any other purposes."
This data is maintained securely and is not shared with another party."
They won't leave your phone."
We created a corpus of 4,400 free iOS 6 apps by downloading the top 200 apps for each of the 22 app categories in the iTunes Store.4 Estimating the total adoption rate across our entire corpus took three steps.
First, we calculated the numerator by extracting purpose strings from each app's plaintext metadata file.
Next, we calculated the denominator by performing static analysis on the decrypted binaries to estimate how many apps requested access to any of the six protected resources .
Finally, we manually examined 140 apps to validate our results.
We decrypted the 4,400 apps by loading them onto a jailbroken iPhone and used the iOS app decryption tool, Rasticrac .
We used iOS 6.0.2 on the iPhone, which was the latest version for which a jailbreak method was available.
Any apps that required a newer version of iOS were excluded and replaced with another app ranked in the top 200 for the same category.5 After decryption, we used the Unix strings tool to extract function names.
By searching for the names of the API functions used to access the six protected resources, we could automatically determine whether a given app would access any of those resources.
Additionally, we also searched for the method that is invoked when developers specify a location purpose string using the deprecated API method.
Although we could not obtain the actual deprecated location purpose strings using the strings tool alone, this method allowed us to gain a more accurate understanding of total adoption.
Applications for iOS have two parts, an encrypted binary  and unencrypted metadata files.
Purpose strings are optionally included in the latter , known as a "property list" or plist.
We searched for these files within each app in our corpus, recording any purpose strings that they contained.
In previous versions of iOS, developers had the option of specifying a purpose string for location requests .
Because the purpose string was passed as a parameter to API calls in older versions, they are stored encrypted and cannot easily be extracted .
For backwards compatibility, iOS 6 still displays purpose strings specified via this deprecated method, which means that only extracting purpose strings from plist files will not yield all the possible purpose strings that a user is likely to encounter.
We used static analysis of the binaries to close this gap.
We were concerned that simply searching for function names using our static analysis method might yield false positives.
For instance, if a request to access a user's contacts is contained within a section of unreachable code, our static analysis would indicate that this app requests access to contacts, whereas in reality no such request would ever be made.
Similarly, if the set of function names we searched for was incomplete, our static analysis would report false negatives.
Therefore, we validated our static analysis results by performing manual testing on a subset of apps in our corpus.
We selected the top 10 free apps in 14 categories, resulting in 140 apps.
We used manual testing to record all resource requests made by these 140 apps, and their associated purpose strings, if any.
If a purpose string was provided for a location resource request, but no corresponding string was found in its plist files, we deduced that this purpose string was specified using the deprecated API method.
Across all resources, 3.6%  of apps specify a purpose string using the new method.
This suggests that it is only a matter of time before developers use the new method to communicate to users why their apps request these resources.
We extracted 175 unique purpose strings specified in the plist files of 125 apps.
Multiple people each read through all of the strings and then created a set of categories based on the themes that they observed.
Next, two coders independently tagged each purpose string with one or more of the following agreed-upon categories: * User benefit.
The purpose string describes how granting permission to the request will benefit the user's experience.
The purpose string promises or guarantees that the accessed information will not be misused, or that it will be used only for the described purposes.
We'll never misuse them, promise!"
The purpose string explains whether the accessed information will be used locally or uploaded.
Your photos won't be uploaded to CoverMe servers."
The purpose string describes how the accessed information will be protected against unauthorized access.
The purpose string describes the policy for sharing information with third parties.
We won't ever share it."
Your contacts remain confidential, Call Bliss does not copy or share them."
The purpose string explains whether the data will or will not be stored, or addresses the storage duration.
Overall, of our corpus of 4,400 apps, we estimated that 3,486  request access to one or more of the six protected resources.
Our manual analysis of 140 apps corroborated these findings: 17.4%  included purpose strings.
We combined our plist-specified purpose string data with our static analysis predictions to determine the overall adoption rate for developer-specified purpose strings in resource requests.
Table 5 depicts our results, classified by resource.6 Of the 140 apps that we tested manually, 92 requested access to at least one of the six protected resources.
Manual testing found no false negatives in our static analysis: static analysis found every resource request that we found through manual testing.
Our static analysis predicted that 130 of the 140 apps accessed protected resources, but we were only able to confirm this using manual testing for 92 apps.
This indicates a false positive rate of up to 41%, which further suggests that the overall purpose string adoption rate is likely higher than estimated in Table 5 .
Data collected by Agarwal et al.
Ad libraries may account for the large false positive rate.
We examined the apps yielding false positives for evidence of 6 popular ad libraries and found evidence in 71% .
When app developers include an ad library but do not target ads, targeting methods appear as dead code in the app binaries.
Our static analysis would then predict a resource request that disagrees with manual testing results, inflating the false positive rate.
Developers' use and awareness of purpose strings.
For instance, of the 28 developers who have written apps that request protected resources, thirteen  were unaware of purpose strings.
Table 6 depicts the number of purpose strings that fell into each category.
Nearly all strings  mentioned the benefits of granting access to the requested resource.
The second most common category was assurances against inappropriate resource use, with 13.7% of strings providing this information.
The categories were not mutually-exclusive .
For example, you may upload information from your address book or connect your Vine account to your account on another service such as Twitter.
Vine will match the information you provide with the contact information of other Vine users.
We do not retain your address book information after displaying these matches.
Our applications may use data from your address book to allow you to search for and navigate to the addresses of your contacts and our applications may use calendar entry data to provide you with reminders about upcoming appointments and to provide navigation to the locations of your appointments.
We will only access this data if you have given permissions for a particular Telenav application to do so, and you can revoke such permissions at any time by changing the settings on your mobile device.
Our survey concluded with open-ended questions to help us confirm participants were iOS developers: the programming languages used, the testing/debugging tools used, the number of years developing iOS apps, and the target iOS versions.
We recruited participants through ads on StackOverflow7 and iPhoneDevSDK.8 On StackOverflow, we placed our advertisement on pages with tags related to iOS , since these pages were likely to be visited by iOS developers.
Participants who completed the survey were entered into a raffle for one of four $100 Amazon gift cards.
We required participants to have developed at least one app that was approved for the iTunes App Store.
To screen participants, we asked them how many iOS apps they had previously developed and whether any were available in the iTunes store.
Following this page, we provided participants with an explanation and screenshot of a "purpose string" and asked them if they had heard of this feature or used it in any apps that they had developed.
We asked them to select all the resources that their apps utilize from a multiplechoice list, which included the six protected resources.
If applicable, we asked them to specify all the resources for which they had written purpose strings.
Based on participants' previous responses, we asked them why they did or did not include purpose strings in their apps.
Multiple coders categorized the open-ended responses to determine the reasons why developers choose to use purpose strings.
We examined the types of purpose strings developers write by presenting participants with descriptions and screenshots of two popular apps, Vine and Scout.
We subsequently displayed screenshots of each app's request for a user's contacts, using a placeholder for a purpose string ; we asked participants to write purpose strings for each of these requests.
Each app description included an explanation for how the data would be used, adapted from each app's real privacy policy.
The goal of the task was to observe how developers would transform these descriptions into purpose strings:
Our survey was visited by 102 people, with 74 recruited from StackOverflow and 14 from iPhoneDevSDK.9 Of these, 53 people opted to not participate and 16 stated that they had not developed iOS apps and were disqualified.
Among the 33 participants who submitted responses meeting our requirements, three could not answer questions about the tools they use to develop iOS apps and were removed.
However, only 17 developers  in our survey claimed to be aware of purpose strings.
Of the developers who had requested a protected resource and were aware of purpose strings, seven  reported having used a purpose string; the two developers who did not access protected resources were nonetheless aware of purpose strings.
We found no relationship between developers' awareness of purpose strings and their years of experience developing iOS apps nor the number of apps that they had developed, which may suggest that lack of awareness is due to poor documentation of the feature, rather than developer inexperience.
In the remainder of this section we explore developers' responses to the open-ended questions, including why they chose to use purpose strings  and the themes that emerged from the example purpose strings that they wrote.
Some examples of these purpose strings included: * "To quickly find your friends on vine and give you a better experience, we need access to your contacts.
All information is safely sent and stored."
We never contact anyone without your permission, which can be revoked at any time."
The results of our developer survey suggest that the main reason developers do not use purpose strings is simply due to lack of awareness, which also explains why we observed so many deprecated API functions .
That said, a majority of developers believe that it is important for users to understand why their information is being requested, even if they choose to notify them through in-app methods rather than with purpose strings.
We asked the eight participants who claimed to not use purpose strings, despite being aware of them and writing apps that accessed protected resources, why they chose not to use them.
Two participants omitted responses to this question.
Two indicated that they intentionally do not use them because they use separate messages within their apps to inform users: * "We try to give the user a heads-up before that permission dialog appears" * "Because we include an entire screen explaining the purpose ahead of requesting it."
Similarly, the remaining four thought they were unnecessary: * "Don't think it's necessary."
All seven of the participants who use purpose strings indicated that they believed they are effective at communicating why a resource is necessary.
Examples included: * "To make it clear to the user why a permission is being requested, especially for non-obvious cases."
To gain insight into the types of information developers find important in purpose strings, we examined the strings that they provided for the Vine and Scout resource requests.
Multiple coders categorized these strings according to the same categories and methodology in the Adoption section .
Every single purpose string explained why data was being requested .
Examples included: * "Contacts are used to find the people you want to share your videos with."
For Vine, it was common to also discuss the storage of users' data.
Although users grant resource requests with purpose strings more often than those without, there does not appear to be much change in their behavior as a function of the specific text used within a purpose string.
In our user survey, requests with purpose strings were granted or denied independently of whether the purpose string contained useful information.
A possible explanation for this effect may be similar to what Langer et al.
In the case of purpose strings, simply having something that looks like an explanation may make users more compliant with the request.
Another possibility is that the inclusion of a purpose string distorts the look and feel of the request dialog enough to break habituation; that is, it might not matter what the request says, simply that it looks different from previous requests.
However, if this were the case, we would expect to see a correlation with whether users were existing iOS users, which we did not.
Despite not observing any effects on behavior based on the choice of text, we observed through our adoption and developer experiments that the vast majority of developers try to provide users with explanations that address why information is being requested.
Unfortunately, users are presented with purpose strings in less than one out of five apps.
The results of our developer survey suggest that adoption may be low partly because developers are unaware of purpose strings or how to use them.
Furthermore, developer awareness of purpose strings did not correlate with the number of years of iOS development experience nor the number of iOS apps developed.
This suggests that the low adoption rate is not simply a reflection of developer inexperience, but a result of poor documentation.
Anecdotally, we found the iOS documentation incomplete and sometimes contradictory during the course of our experiments.
Creating developer resources to improve app privacy may increase developer compliance.
A consequence of allowing developers full freedom in specifying purpose strings is that many fail to effectively utilize them.
An alternate approach would be to provide developers with a set of pre-defined purpose string templates from which they can choose.
These templates could address the types of information we commonly found in our collected purpose strings, such that the context of the requests can be made clear to users .
These templates might also make it easier for developers to supply purpose strings.
Of the 23 developers we surveyed who were either unaware of purpose strings or did not use them, thirteen said that they would be "very likely" to use pre-defined templates, if given the option in the future.
The primary purpose of this study was to examine developer adoption of purpose strings and their impact on user behavior.
Since we controlled for the apps participants viewed , future work is needed to examine how the trustworthiness of an app influences a participants' willingness to grant permission requests.
While we observed significant differences in user behavior across the resources we tested, additional research is needed to examine whether behaviors change based on the resource accessed.
Such studies should be performed in situ, such that users understand their real data is at risk.
This work was supported in part by TRUST , which receives support from the National Science Foundation , NSF award number CNS-1318680, and by Intel through the ISTC for Secure Computing.
Thanks to Rebecca Pottenger, Erika Chin, and Aim ee Tabor for their support and feedback.
Agarwal, Y., and Hall, M. ProtectMyPrivacy: detecting and mitigating privacy leaks on iOS devices using crowdsourcing.
In Proceeding of the 11th annual international conference on Mobile systems, applications, and services, MobiSys '13, ACM , 97-110.
Signal words and signal icons in application control and information technology exception messages - hazard matching and habituation effects.
Apple Inc. What's New in iOS.
We used a simple form of static analysis to predict resource requests and purpose strings specified using the deprecated API method.
Due to its simplicity, this analysis does not consider many of the factors necessary to provide more accurate predictions .
Although we provide insight on users' understanding of resource requests, we rely on users to self-report this understanding.
While our user study was controlled so that we could observe relative differences as a function of the presence of purpose strings, it is not clear how these findings might translate to the real world where users are influenced by other factors; we measured the efficacy of purpose strings in altering behavior, rather than their effectiveness.
Likewise, we measured users' willingness to approve requests, rather than whether or not they were acting in their best interests.
Despite not risking the disclosure of any real data, the significant differences we observed between randomly-assigned conditions show that participants took the tasks seriously.
Our experiments were limited to free iOS apps.
Although we expect similar results for paid apps, an exception may be in the developer adoption rate of purpose strings.
Paid apps are less likely to contain advertising libraries , which could reduce the number of resources requested by apps, thus increasing the estimated adoption rate.
Benisch, M., Kelley, P. G., Sadeh, N., and Cranor, L. F. Capturing location-privacy preferences: quantifying accuracy and user-burden tradeoffs.
Bravo-Lillo, C., Komanduri, S., Cranor, L. F., Reeder, R. W., Sleeper, M., Downs, J., and Schechter, S. Your attention please: designing security-decision UIs to make genuine risks harder to ignore.
In Proceedings of the Ninth Symposium on Usable Privacy and Security, ACM , 6.
Brustoloni, J., and Villamar in-Salom on, R. Improving Security Decisions with Polymorphic and Audited Dialogs.
In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, CHI '05, ACM , 81-90.
You've been warned: An empirical study of the effectiveness of web browser phishing warnings.
Enck, W., Gilbert, P., Chun, B.-G., Cox, L. P., Jung, J., McDaniel, P., and Sheth, A. N. TaintDroid: an information-flow tracking system for realtime privacy monitoring on smartphones.
In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI '10, USENIX Association , 1-6.
Enck, W., Octeau, D., McDaniel, P., and Chaudhuri, S. A study of Android application security.
Felt, A. P., Greenwood, K., and Wagner, D. The effectiveness of application permissions.
In Proceedings of the 2nd USENIX Conference on Web Application Development, WebApps '11, USENIX Association , 7-7.
Felt, A. P., Ha, E., Egelman, S., Haney, A., Chin, E., and Wagner, D. Android permissions: user attention, comprehension, and behavior.
Fisher, D., Dorner, L., and Wagner, D. Short paper: Location privacy: User behavior in the field.
In Proceedings of the Second ACM workshop on Security and Privacy in Smartphones and Mobile Devices, SPSM '12, ACM , 51-56.
Kelley, P. G., Benisch, M., Cranor, L. F., and Sadeh, N. When are users comfortable sharing locations with advertisers?
Kim, S., and Wogalter, M. Habituation, dishabituation, and recovery effects in visual warnings.
In Proceedings of the Human Factors and Ergonomics Society Annual Meeting, vol.
Lever, C., Antonakakis, M., Reaves, B., Traynor, P., and Lee, W. The Core of the Matter: Analyzing malicious traffic in cellular carriers.
In Proceedings of the ISOC Network & Distributed Systems Security Symposium, NDSS '13 .
Expectation and purpose: Understanding users' mental models of mobile app privacy through crowdsourcing.
In Proceedings of the Second ACM workshop on Security and Privacy in Smartphones and Mobile Devices, UbiComp '12, ACM , 51-56.
Nissenbaum, H. Privacy as contextual integrity.
Pearce, P., Felt, A. P., Nunez, G., and Wagner, D. AdDroid: privilege separation for applications and advertisers in Android.
In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, ASIACCS '12, ACM , 71-72.
Understanding and capturing people's privacy policies in a mobile social networking application.
Sunshine, J., Egelman, S., Almuhimedi, H., Atri, N., and Cranor, L. F. Crying wolf: an empirical study of SSL warning effectiveness.
When it's better to ask forgiveness than get permission: attribution mechanisms for smartphone resources.
In Proceedings of the Ninth Symposium on Usable Privacy and Security, ACM , 1.
Xia, H., and Brustoloni, J. C. Hardening web browsers against man-in-the-middle and eavesdropping attacks.
Yang, J. Smartphones in use surpass 1 billion, will double by 2015. http://www.bloomberg.com/news/
