Current user-computer dialogues tend to be one sided, with the bandwidth from the computer to the user far greater than that from user to computer.
A fast and effortless mode of communication from a user to a computer would help redress this imbalance.
We therefore investigate the possibility of introducing the movements of a user's eyes as an additional input medium.
Available techniques for measuring eye movements vary considerably; while none is perfect, some are considerably more suitable for user-computer interaction than others.
First, note that our goal is to measure visual line of gaze, that is, the absolute position in space at which the user's eyes are pointed, rather than, for example, the position of the eye in space or the relative motion of the eye within the head; not all eye tracking techniques do this .
Since both eyes generally point together, it is customary to track only one eye.
The simplest eye tracking technique is electronic recording, using electrodes placed on the skin around the eye to measure changes in the orientation of the potential difference that exists between the cornea and the retina.
However, this method is more useful for measuring relative eye movements than absolute position.
Perhaps the least user-friendly approach uses a contact lens that fits precisely over the corneal bulge and is held in place with a slight suction.
This method is extremely accurate, but suitable only for laboratory studies.
More practical methods use remote imaging of a visible feature located on the eye, such as the boundary between the sclera and iris, the outline of the pupil, or the corneal reflection of a light shone at the eye.
All these require the head to be held absolutely stationary , to be sure that any measured movement represents movement of the eye, not the head.
However, by simultaneously tracking two features of the eye that move differentially , it is possible to distinguish head movements  from eye movements , and the head need not be rigidly fixed.
This is currently the most practical method for use in a conventional computer-and-user setting, since the eye tracker sits several feet from the user, nothing contacts him or her, and the head need not be clamped.
In our laboratory, we use an Applied Science Laboratories 
Figure 1 shows the components of this type of eye tracker.
It simultaneously tracks the corneal reflection  and the outline of the pupil .
Visual line of gaze is computed from the relationship between the two tracked points.
Such work involves recording the eye movements and then analyzing them subsequently; the user's eye movements do not have any effect on the computer interface while it is in operation.
Our interest is, instead, on dialogues that combine real-time eye movement data with other, more conventional modes of user-computer communication.
The most common way of moving the eyes is a sudden, saccade.
It is typically followed by a ballistic, and nearly instantaneous fixation, a 200-600 ms. period of relative stability during which an object can be viewed.
During a fixation, however, the eye does not remain still; it still makes small, jittery motions, generally covering less than one degree.
Smooth eye motions, less sudden than saccades, occur only in response to a moving object in the visual field.
Other eye movements, such as nystagmus, vergence, and torsional rotation are relatively insignificant in a user-computer dialogue.
The overall picture of eye movements for a user sitting in front of a computer is a collection of steady  fixations connected by sudden, rapid saccades.
The eyes are rarely entirely still.
They move during a fixation, and they seldom remain in one fixation for long.
This will require filtering of the raw eye position data to eliminate the high-frequency jitter, but at the same time we must not unduly slow response to the high-frequency component of a genuine saccade.
The most naive approach to using eye position as an input might be to use it as a direct substitute for a mouse: changes in the user's line of gaze would cause the mouse cursor to move.
This is an unworkable  approach, because people are not accustomed to operating devices just by moving their eyes.
They expect to be able to look at an item without having the look "mean" something.
Normal visual perception requires that the eyes move about, scanning the scene before them.
It is not desirable for each such move to initiate a computer command.
At first, it is empowering to be able simply to look at what you want and have it happen, rather than having to look at it  and then point and click it with the mouse or otherwise issue a command.
Before long, though, it becomes like the Midas Touch.
Everywhere you look, another command is activated; you cannot look anywhere without issuing a command.
The challenge in building a useful eye tracker interface is to avoid this Midas Touch problem.
Ideally, the interface should act on the user's eye input when he wants it to and let him just look around when that's what he wants, but the two cases are impossible to distinguish in general.
Instead, we investigate interaction techniques that address this problem in specific cases.
We use an Applied Science Laboratories corneal reflection eye tracker.
The user sits at a conventional  desk, with a Sun computer display, mouse, and keyboard, in a standard chair and office.
The eye tracker camera/illuminator sits on the desk next to the monitor.
Other than the illuminator box with its dim red glow, the overall setting is thus far just like that for an ordinary office computer user.
In addition, the room lights are dimmed to keep the user's pupil from becoming too small.
The eye tracker is, strictly speaking, nonintrusive and does not touch the user in any way.
Our setting is almost identical to that for a user of a conventional office computer.
Nevertheless, we find it is difficult to ignore the eye tracker, It is noisy; the dimmed room lighting is unusual; the dull red light, while not annoying, is a constant reminder of the equipment; and, most significantly, the action of the servo-controlled mirror, which results in the red light following the slightest motions of user's head gives one the eerie feeling of being watched, One further wrinkle is that the eye tracker is designed for use in experiments, where there is a "subject" whose eye is tracked and an "experimenter" who monitors and adjusts the equip ment.
Operation by a single user playing both roles simultaneously is somewhat awkward because, as soon as you look at the eye tracker control panel to make an adjustment, your eye is no longer pointed where it should be for tracking.
A user generally need not position his eye more accurately than the width of the fovea  to see an object sharply.
Finer accuracy from an eye tracker might be needed for studying the operation of the eye muscles but adds little for our purposes.
The eye's normal jittering further limits the practical accuracy of eye tracking.
It is possible to improve accuracy by averaging over a fixation, but not in a real-time interface.
Despite the servo-controlled mirror mechanism for following the user's head, we find that the steadier the user holds his head, the better the eye tracker works.
We find that we can generally get two degrees accuracy quite easily, and sometimes can achieve one degree .
The eye tracker should thus be viewed as having a resolution much coarser than that of a mouse or other typical devices, perhaps more like a traditional touch screen.
A further problem is that the range over which the eye can be tracked with this equipment is fairly limited.
In our configuration, it can barely cover the surface of a 19" monitor at a 24" viewing distance.
Our approach to processing eye movement data is to partition the problem into two stages.
First we process the raw data from the eye tracker in order to filter noise, recognize fixations, compensate for local calibration errors, and generally try to reconstruct the user's more conscious intentions from the available information.
Because eye movements are so different from conventional computer inputs, we achieve success with a philosophy that tries, as much as possible, to use natural eye movements as an implicit input, rather than to train a user to move the eyes in a particular way to operate the system.
We try to think of eye position more as a piece of information available to the user-computer dialogue involving a variety of input devices than as the intentional actuation of an input device.
The eye tracker calibration procedure produces a mapping that is applied uniformly to the whole screen.
Ideally, no further calibration or adjustment is necessary.
In practice, we found small calibration errors appear in portions of the screen, rather than systematically across it.
We introduced an additional layer of calibration into the chain, outside of the eye tracker computer, which allows the user to make local modifications to the calibration, based on arbitrary points he inputs whenever he feels it would be helpful.
If the user feels the eye tracker is not responding accurately in some area of the screen, he can at any point move the mouse cursor to that area, look at the cursor, and click a button.
After improving the calibration, we still observed what seemed like erratic behavior in the user interface, even when the user thought he was staring perfectly still.
This was caused by both natural and artificial sources: the normal jittery motions of the eye during fixations as well as artifacts introduced when the eye tracker momentarily fails to obtain an adequate video image of the eye.
Figure 3 shows the type of data obtained from the eye tracker.
It plots the x coordinate of the eye position output against time over a relatively jumpy three second period.
Zero values on the ordinate represent periods when the eye tracker could not locate the line of gaze, due either to eye tracker artifacts, such as glare in the video camera, lag in compensating for head motion, or failure of the processing algorithm, or by actual user actions, such as blinks or movements outside the range of the eye tracker.
Unfortunately, the two cases are indistinguishable in the eye tracker output.
During the period represented by Figure 3, the subject thought he was simply looking around at a few different points on a CRT screen.
Buried in these data, thus, are a few relatively long gazes along with some motions to connect the gazes.
Such raw data are quite unusable as input to a human-computer dialogue: while the noise and jumpiness do partly reflect the actual motion of the user's eye muscles, they do not reflect his intentions nor his impression of what his eyes were doing.
The difference is attributable not only to the eye tracker artifacts but to the fact that much of the fine-grained behavior of the eye muscles is not intentional.
The problem is to extract from the noisy, jittery, error-filled stream of position reports produced by the eye tracker some "intentional" components of the eye motions, which make sense as tokens in a user-computer dialogue.
Our first solution was to use a simple moving average filter to smooth the data.
It improves performance during a fixation, but tends to dampen the sudden saccades that move the eye from one fixation to the next.
Since one of the principal benefits we hope to obtain from eye motions as input is speed, damping them is counterproductive.
Further, the resulting smoothed data do not correctly reflect the user's intentions.
The user was not slowly gliding from one fixation to another; he was, in fact, fixating a spot and then jumping ballistically to a new fixation.
Instead, we return to the picture of a computer user's eye movements as a collection of jittery fixations connected by essentially instantaneous saccades.
We then identify and quickly report the start and approximate position of each recognized fixation.
We ignore any reports of eye position during saccades themselves, since they are difficult for the eye tracker to catch and their dynamics are not particularly meaningful to the user-computer dialogue.
Specifically, our algorithm, which is based on that used for retrospective analysis of eye tracker data and on the known properties of fixations and saccades, watches the input data for a sequence of 100 milliseconds during which the reported eye position remains within approximately 0.5 degrees.
As soon as the 100 milliseconds have passed, it reports the start of a fixation and takes the mean of the set of data collected during the 100 milliseconds duration as the location of that fixation.
A better estimate of the location of a fixation could be obtained by averaging over more eye tracker data, but this would mean a longer delay before the fixation position could be reported to the user interface software.
Our algorithm implies a delay of 100 milliseconds before reporting the start of a fixation, and, in practice this delay is nearly undetectable to the user.
Further eye positions within approximately one degree are assumed to represent continuations of the same fixation .
To terminate a fixation, 50 milliseconds of data lying outside one degree of the current fixation must be received.
Blinks or artifacts of up to 200 milliseconds may occur during a fixation without terminating it.
At first, blinks seemed to present a problem, since, obviously, we cannot obtain eye position data during a blink.
However , the screen need not respond to the eye during that blink period, since the user can't see it anyway.
After applying this algorithm, the noisy data shown in Figure 3 are found to comprise about 6 fixations, which more accurately reflects what the user thought he was doing .
Figure 4 shows the same data, with a horizontal line marking each recognized fixation at the time and location it would be reported.
Applying the fixation recognition approach to the real-time data coming from the eye tracker yielded a significant improvement in the user-visible behavior of the interface.
Filtering the data based on an a priori model of eye motion is an important step in transforming the raw eye tracker output into a user-computer dialogue.
In order to make the eye tracker data more tractable for use as input to an interactive user interface, we turn the output of the recognition algorithm into a stream of tokens.
Each such token is tagged with the actual fixation duration to date, so an interaction technique that expects a fixation of a particular length will not be skewed by delays in UIMS processing or by the delay inherent in the fixation recognition algorithm.
In between fixations, we periodically report a nonfixation token indicating where the eye is, although our current interaction techniques ignore this token in preference to the more processed fixation tokens.
A token is also reported whenever the eye tracker fails to determine eye position for 200 milliseconds and again when it resumes tracking.
These tokens, having been processed by the algorithms described above, are suitable for use in a user-computer dialogue in the same way as tokens generated by mouse or keyboard events.
We then multiplex the eye tokens into the same stream with those generated by the mouse and keyboard and present the overall token stream as input to our User Interface Management System.
The desired user interface is specified to the UIMS as a collection of concurrently executing interaction objects .
The operation of each such object is described by a state transition diagram that accepts the tokens as input.
Each object can accept any combination of eye, mouse, and keyboard tokens, as specified in its own syntax diagram.
An interaction technique is a way of using a physical input device to perform a generic task in a human-computer dialogue .
It represents an abstraction of some common class of interactive task, for example, choosing one of several objects shown on a display screen.
This section describes the first few eye movement-based interaction techniques that we have implemented and our initial observations from using them.
The task here is to select one object from among several displayed on the screen, for example, one of several file icons on a desktop or, as shown in Figure 5, one of several ships on a map in a hypothetical "command and control" system.
With a mouse, this is usually done by pointing at the object and then pressing a button.
With the eye tracker, there is no natural counterpart of the button press.
We reject using a blink for a signal because it detracts from the naturalness possible with an eye movement-based dialogue by requiring the user to think about when he or she blinks.
In one, the user looks at the desired object then presses a button on a keypad to indicate that the looked-at object is his choice.
In and caused it to be selected Figure 5, the user has looked at ship "EF151" .
The second uses dwell time-if the user continues to look at the object for a sufficiently long time, it is selected without further operations.
At first this seemed like a good combination.
In practice, however, the dwell time approach is much more convenient.
While a long dwell time might be used to ensure that an inadvertent selection will not be made by simply "looking around" on the display, this mitigates the speed advantage of using eye movements for input and also reduces the responsiveness of the interface.
To reduce dwell time, we make a further distinction.
If the result of selecting the wrong object can be undone trivially , then a very short dwell time can be used.
For example, if selecting an object causes a display of information about that object to appear and the information display can be changed instantaneously, then the effect of selecting wrong objects is immediately undone as long as the user eventually reaches the right one.
The lag between eye movement and system response  is hardly detectable to the user, yet long enough to accumulate sufficient data for our fixation recognition and processing.
The subjective feeling is of a highly responsive system, almost as though the system is executing the user's intentions before he expresses them.
For situations where selecting an object is more difficult to undo, button confirmation is used.
We found no case where a long dwell time  alone was useful, probably because it does not exploit natural eye movements  and also creates the suspicion that the system has crashed.
Pilot studies for an experiment that will compare response time for object selection by dwell time versus conventional selection by mouse pick, using the more abstract display shown in Figure 6, suggest a 30 percent decrease in time for the eye over the mouse, although the eye trials show more variability y.
A good use of this object selection interaction technique is for requesting further details or attributes of one of the objects on a display.
Our approach is to provide a separate area of the display where such attributes are always shown.
In Figure 5, the window on the right is a geographic display of ships, while the text window on the left shows some attributes of one of the ships, the one selected by the user's eye movement.
The idea behind this is that the user can look around the ship window as desired.
Whenever he looks over to the text window, he will always find there the attribute display for the last ship looked at--presumably the one he is interested in.
However, if he simply looks at the ship window and never looks at the text area, he need not be concerned that his eye movements are causing commands in the text window.
The text window is double-buffered, so that changes in its contents could hardly be seen unless the user were looking directly at it at the time it changed .
Another important interaction technique, particularly for direct manipulation systems, is moving an object on the display.
We have experimented with two methods.
Our initial notion was that, in a direct manipulation system, a mouse is typically used for two distinct operations--selecting an object to be manipulated and performing the manipulation.
The two functions could be separated and each assigned to an appropriate input device.
In particular, the selection could be performed by eye position, while the hand input device is devoted exclusively to the manipulations.
We therefore implemented a technique whereby the eye selects an object  to be manipulated  and then the mouse is used to move it.
The eye selection is made precisely as in the previously-described interaction techniques.
There is no visible mouse cursor in this scheme, and the mouse is used as a relative position device--it starts moving from wherever the eye-selected ship was.
Our second approach used the eye to select and drag the ship, and a pushbutton to pick it up and put it down.
The user selects a ship, then presses a button; while the button is depressed, the ship drags along with the user's eye.
When it is released, the ship remains in its new position.
Since the processing described previously is performed on the eye movements, the ship actually jumps to each fixation after about 100 milliseconds and then remains steadily there-- despite actual eye jitter--until the next fixation.
Our initial guess was that the second method would be difficult to use: eye movements would be fine for selecting an object, but picking it up and having it jump around on the screen in response to eye movements would be annoying-- a mouse would give more concrete control.
Once again, our initial guess was not borne out.
While the eye-toselect /mouse-to-drag method worked well, the user was quickly spoiled by the eye-only method.
Once you begin to expect the system to know where you are looking, the mouse-to-drag operation seems awkward and slow.
After looking at the desired ship and pressing the "pick up" button, the natural thing to do is to look at where you are planning to move the ship.
At this point, you feel, "I'm looking right at the destination I want, why do I now have to go get the mouse to drag the ship over here?"
Another interaction technique is for choosing a command from a menu.
Since pop-up menus inherently assume a button, we experimented with an eyeoperated pull-down menu.
In Figure 8, if the user looks at the header of a pull-down menu for a given dwell time , the body of the menu will appear on the screen.
Next, he can look at the items shown on the menu.
After a brief look at an item , it will be highlighted, but its command will not yet be executed.
This allows the user time to examine the different items on the menu.
If the user looks at one item for a much longer time , its command will be executed and the menu erased.
Alternatively, once the item is highlighted, pressing a button will execute its command immediately and erase the menu.
If the user looks outside the menu , the menu is erased without any command executed.
Following formal An mouse equipment Accuracy mouse, while less, is and eye or Brooks' "findings" tracker keyboard and, the more range obtainable nonintrusive it is perhaps well, this, possible, viewing movements and our initial by eye a recognize dialogue interaction object correct movements pick it taxonomy of our as an is, is can and amazing can our input and , we present research device that at this is far by similar cover this the his can powerful explicit information rather the in the we cases system.
