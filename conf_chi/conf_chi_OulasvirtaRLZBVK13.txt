We study the design of split keyboards for fast text entry with two thumbs on mobile touchscreen devices.
The layout of KALQ was determined through first studying how users should grip a device with two hands.
We then assigned letters to keys computationally, using a model of two-thumb tapping.
KALQ minimizes thumb travel distance and maximizes alternation between thumbs.
An error-correction algorithm was added to help address linguistic and motor errors.
Users reached a rate of 37 words per minute  after a training program.
With such rates, two-thumb text entry on touchscreens may be limited to simple tasks such as entry of messages, addresses, calendar events, and names .
Our goal is to investigate the upper limit of typing performance via methods known to improve typing performance.
We address two major issues.
First, no convention exists comparable to touch typing with physical keyboards that informs how to hold the device or how to move the thumbs.
Touchscreens offer poor tactile feedback for keypresses, and the touch sensor does not allow the thumb to rest on its next target while the other thumb is moving, a technique known to boost rates with physical buttons .
Moreover, users may grip the device in ways that are detrimental to performance.
Second, it is not known whether the QWERTY layout, traditionally used such that both thumbs are responsible for a single key, is efficient when the thumbs do all the presses.
The design of KALQ, shown in Figure 1, is informed by a series of studies that shed light on these open questions: 1.
Button size, keyboard shape, and position are informed by a study of symmetric two-hand grips .
Letter-to-key assignment is resolved computationally, informed by a model of two-thumb performance acquired from a bimanual tapping task .
Online error correction is based on a large corpus of mobile text and by modeling tap inaccuracies.
Tablet computers and large smartphones with touchscreens are commonly interacted with using two thumbs.
Use of the thumbs has an intuitive appeal: the grip is stable and supports typing while walking, sitting, or lying down.
Despite these advantages, the low rate of text entry is a recognized problem.
Reported rates  for two-thumb typing on a touchscreen range from 14 wpm  to 31 wpm .
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
We cast the design problem as a performance-optimization problem: the goal is to find the design with minimal average thumb movement time for typing representative English sentences.
Movement time MT is measured here as targetacquisition time in tapping tasks and is considered in conjunction with accuracy and errors.
In our effort to improve entry rates, our design choices favor superior performance.
To maximize typing performance, we discuss not only design choices but also typing skill.
Our design process consists of five steps performed on a 7" tablet: In Step 1: Grip Study, we consider grips allowing landscape-oriented device usage.
We single out one grip that is best both in performance and in reducing occlusion of the display.
We then decide on button size and on keyboard position, size, and shape.
In the subsequent steps, we assume this grip, because it yields the best tapping performance.
These choices place our focus on split keyboard designs with non-overlapping movement of thumbs.
In Step 2: Thumb Movement Modeling, we study two-thumb performance in the N-return task, a novel variant of the Fitts' task modified for bimanual tapping.
It allows us to model same-side taps and taps that alternate sides while taking into account lateralization .
In line with previous work, in addition to the standard Fitts'-model parameters, our model for alternate-side taps considers the time elapsed while the thumb awaits its turn .
To minimize MT in alternating taps, users adopted a hover-over strategy wherein the "idle" thumb travels toward its next target and hovers over it, waiting for its turn.
We found that if a long time has elapsed, visual attention is needed to recover the position of the thumb.
This is at considerable cost to MT, something that the computational layout optimizer tries to avoid.
In Step 3: Computational Layout Optimization, we utilize a computational keyboard-optimization method  to evaluate 5.6 million letter-to-key assignments.
We extend previous work in keyboard optimization to twothumb entry.
We follow a hybrid method that combines global and local search.
The layout of the best keyboard is further optimized via horizontal row-shifting.
In Step 4: Error Correction, we add error correction that addresses two factors: linguistic context and the distribution of touch inaccuracies.
The error-correction algorithm allows skilled users to increase their speed by letting the algorithm correct errors.
In Step 5: Training and Evaluation, after the users' baseline performance with QWERTY is established, they undertake a special 13-19-hour training program addressing the learning of key locations, grip, idle-thumb movement, use of spacebars, motor programs for frequent bigrams and words, and error correction.
The grip on a device determines several performanceaffecting factors: the degrees of freedom in joint movement, the controlling muscles, and the orientation of the thumbs' joints in relation to the display.
It also determines the keyboard's ideal size, position, and shape.
Previous work on touchscreens has analyzed grips in terms of the framing it provides within the kinematic tree of the upper limbs .
We here identify the best-performing grip empirically, discuss the framing involved, and derive a keyboard layout.
We focus on symmetric grips since they tend to be more stable and may offer simpler motor control than asymmetric grips.
To define a grip, we utilize basic terminology of anatomy and joint movement .
A grip is defined by the touching area and the angle of the tablet's edge and corner on the palmar space .
Given a touch area, the hand clasps the device and the fingers extend around the back side .
Within the space of possible grips, we ruled out uncomfortable grips, unstable grips, and grips that are equivalent in terms of joint movement.
This resulted in six candidate grips.
These were grouped on the basis of the touch area on the palmar space:
We employed a tapping task with point-targets appearing randomly one at a time on either side of the display.
Targets appeared only in the thumb's active area: the area that the thumb can reach without "breaking" the grip.
The drawback of using random targets with no preview is that average performance is slower  and the user's thumb may occlude a target.
The advantage over the standard reciprocal/cyclical tasks is that active areas can be thoroughly sampled with fewer subjects.
Students from Saarland University participated in the study: six right-handed males, with ages ranging from 23 to 26 .
The experiment followed a within-subjects design with one factor: Grip .
After introduction of a grip, its active region was calibrated by having the user sweep his or her thumb from its highest position to its lowest position.
The experimental task was to hit a red crosshair + as quickly and accurately as possible.
A new crosshair appeared immediately after the previous one was pressed.
Side and position were randomized for each target.
Three sessions were completed per subject per grip, with each session having 1,000 targets.
To minimize order effects, pre-trial practice was employed and breaks were provided between trials.
The experiment was carried out in an office room with no distractions.
Subjects were compensated at 10/hour.
The best grip, Grip 1, is presented in detail in Figure 3.
We chose Grip  1  because it had the lowest average MT.
Though Grip  1's active region is the smallest , it can easily accommodate enough buttons for the alphabet.
This grip benefits from the tablet's edge being on the thenar crease, locking the more distal joints of the hand.
The fastest grips, 1-3, all inhibit control by distal muscles and joints, and they rely on the three thumb joints for tapping.
By contrast, grips 4-5 allow control by the more distal palmar muscles, which have a small cross-sectional area so are not as fast .
Our tentative conclusion is that pulling/pushing the thumb with the wrist or distal parts of the hand is slower.
However, our data is from a limited sample of right-handed male students.
Given this grip, we determine three parameters of the keyboard layout.
First, to determine button size, we took the 99% confidence interval for Grip 1's offset .
For simplicity, we assumed a square button design, arriving at a button width of 62 pixels.
To utilize the full active area, we increased the width slightly, to 66 pixels .
This button width is in line with the recommendations of two earlier studies of button size for thumb tapping .
To determine the layout and position of the keyboard, we examined the active area for this grip by averaging the sweep radii of subjects.
We assumed regular shapes, and we fitted the largest rectangle consisting of 9.9 mm buttons inside.
This resulted in a 4x4 square-shaped grid, shown in Figure 3.
A 3x5 row layout similar to QWERTY  would have required either smaller buttons or exceeding the active area.
Previous work has shown that tapping the corners or edges of the active region is slower .
In our design, only the two medial corner buttons would fall close to these inefficient areas; others are clearly within the active area.
We learned in informal testing that the areas close to the proximal edge of the tablet are particularly hard to reach, so we shifted the keyboard 5 mm up, as Figure 3 shows.
We now describe how we extended the modeling of two-thumb text entry from physical keyboards to touchscreens.
Our model addresses the following issues: 1.
Same-side taps: sequential keypresses on one side 2.
Alternating taps: switches between sides 3.
Lateralization: difference between left and right thumb To inform model optimization and user training , we focus on superior performance, defined as the fastest tap sequences with under 5% errors.
This approach is justified because letter-to-key assignments based on such a measure favor performance-enhancing typing strategies.
We focus on speed here and will address accuracy in Step 4.
Our data are acquired from a bimanual tapping task wherein we manipulate telapsed by increasing the number of buttons that one hand is typing while the other is waiting.
In the N-return task, the user has to type a sequence of 3-7 numbers .
Therefore, a thumb has to wait for N keys before it returns to tapping.
In each sequence, the first key is on one side, then N keys on the other, and the last key is back on the initial side.
Figure 4 illustrates the task.
Participants: Twenty right-handed male students were recruited from Saarland University .
Half of the subjects were well acquainted with touch-typing in a physical QWERTY context.
They were compensated for their time at 10/hour.
To motivate the subjects further , we offered a bonus of 30 to the best 10% of subjects with respect to average MT.
Experiment design: The experiment followed a randomized block design with 10 unique number sequences.
The sides and positions of the 3-7 numbers were randomized within their keygrids with the constraint of disallowing repeated taps.
Use of many repetitions was deemed necessary for users to learn the parallel movement of the "idle" thumb.
Each sequence had 10 trials, each with 10 repetitions.
Task and apparatus: The experimental task was to tap the sequence of numbers in ascending order 10 times as rapidly as possible while trying not to miss any key.
The numbered targets were persistently shown during a trial to allow preplanning of movement.
If a subject failed to complete a trial because of an error rate higher than 5%, the trial had to be redone.
The same tablet device was used as in Step 1.
Procedure: Subjects were first taught Grip  1 and the hover-over technique.
For the hover-over technique, we instructed subjects to position the thumb over the next key while waiting for its turn.
During the experiment, feedback on keypresses was given in real time via a black asterisk *  and red asterisk * .
After each trial, a screen appeared with a summary of the speed and accuracy.
For alternate-side  taps, the "idle" thumb is assumed to approach its next target aggressively.
Its movement time is affected by not only ID but also the time elapsed, telapsed, before its turn.
After it presses keyn, the thumb immediately starts to approach keyn.
If it has not yet reached it when its turn comes, the remaining movement is shorter than if having to start from the beginning.
If telapsed is long enough for the thumb to reach keyn, it can rest over or on it.
Then, only a minimal time tmin is needed for pressing keyn.
The total time Tn for the nth letter in a word is:
In the case of touchscreens, resting on a key is impossible because it would cause an erroneous tap.
For one to benefit from the waiting time, there are two possibilities: the thumb can either stay in the air in a fixed position or hover over the next key.
Because D is smaller with the latter technique, and tfitts as well, we taught this technique to our subjects.
The R values for the left and right side were .94 and .95, respectively .
We draw two observations from Eq.
Moderate lateralization: The dominant hand is about 30 ms faster than the non-dominant.
The lowest-ID targets are slower than medium-ID targets, in contrast to the standard Fitts'-law models.
We learned that the non-dominant hand is generally the better switcher, with a faster average MT.
The benefit is due to the hover-over behavior wherein the thumb moves immediately towards its next target, only needing to press down when its turn arrives .
Observing this behavior is unsurprising, given that we taught it to the participants.
In contrast, for taps where telapsed > 600 ms, a substantial penalty in MT was observed, similar to the slowing effect .
We conjecture that this is due to interrupted memory : As time passes without attention to the idle side, uncertainty over the thumb's position grows.
Once the thumb's position has been forgotten, it needs to be restored via a glance .
Out of 14,619 returning taps  in data, filtering to the best 15% within a condition yielded 5,105 data points .
The 5% threshold was chosen to address the fact that reaching the best performance in alternating taps requires quite a few repetitions, and we had fewer observations of returning taps per sequence.
Our model is a bivariate quadratic function with telapsed  and ID as the predictive variables:
We arrived at three implications for letter assignment: 1.
In same-side tapping, favor the dominant-hand side.
While the non-dominant side supports multiple key clusters, keys on the dominant-hand side should be packed around a center, to minimize travel costs.
The fit for left- and right-thumb models was satisfactory: R2=.79.
The following observations were made: 1.
Alternating taps are faster than same-side taps but only when telapsed is small.
The non-dominant thumb  is better at switching between thumbs when telapsed < 600 ms.
In this range, its performance is less dependent on ID: it can virtually "teleport" over its next target.
The dominant hand is better only for very brief switches with a short distance.
In alternate-side taps, ID has almost no effect, except for brief switches by the dominant  hand.
There is a large penalty for long waiting.
This slowing effect similar to that observed in previous work .
Finding a mapping of letters to keyslots that minimizes finger travel time is an NP-complete problem that is best addressed by means of computational optimization methods .
In this section, we formulate this problem as a combinatorial optimization problem, extending existing keyboard optimization research from a single end-effector  to two end-effectors.
In line with previous work , the keyboard is represented as a permutation of 26 letters, two spacebars, and four empty keyslots.
Inclusion of empty slots allows the optimization algorithm to move them around the grids.
The goal is to find a permutation that minimizes our cost function: average MT as defined by simulated typing of a representative corpus of sentences under equations 3-6.
Representing keyboard as a permutation assigned to a fixed grid with keyslots yields a problem size of 4x1026.
We extend previous work in permutation-based optimization by creating a hybrid approach that utilizes both gradient descent and simulated annealing .
Initially, gradient-descent search is performed from 5,000 random starting locations.
We pick the 100 best permutations, assuming that these must have gotten some critical parts of the layout correct.
Simulated annealing is performed 10 times for each candidate layout.
This effectively searches around the promising keyboard before convergence at the best local optimum.
In the final step, gradient descent is performed for the 10 best keyboards.
For this step, we allow double and triple transpositions also.
This modification is inspired by evolutionary algorithms wherein larger transpositions are allowed .
With the iteration counts given in Figure 7, this process yields a total of 5.6 million iterations.
As our corpus we use the MobileEmail corpus, consisting of phrases written with mobile devices from the Enron e-mail dataset .
We simulate letter-by-letter transitions by applying equations 3-6 as appropriate and keeping a record of thumb location and telapsed.
Following a recommendation from previous work , our spacebar policy is alternation: the thumb on the opposite side always presses the spacebar.
In each iteration, the average cost C1 of a permutation is calculated for a corpus by means of Eq.
After this step, two keys are transposed and the cost of the new layout C2 is calculated.
The only exception is the beginning of a new phrase, when the thumb starts at the third button from the edge on the second row .
If C2<C1, the new permutation is accepted.
If not, there are two alternatives for acceptance or rejection of C2.
In gradient descent, we never choose a permutation with lower cost.
Layout tuning: We conducted a row-tuning exercise for the best keyboard.
This was inspired by recent split-keyboard designs such as dextr  in which key columns and rows are not aligned.
Each row of keys  was shifted 0, 20, 40, or 60 pixels horizontally, independent of all others, yielding 48=65,536 layouts, from which we picked the best one.
We looked at horizontal shifting only, because we learned that shifting vertically would require extending the thumb too far in attempts to reach the topmost keys.
This change produced a gain of only 0.1 wpm.
The negligible gain is due to the interconnectedness of keys: shifting a key decreases the distance to some keys but increases the distance to others.
KALQ  is the best keyboard after 5.6M iterations and layout tuning with a predicted entry rate of 49.0 wpm.
For comparison, we created a quasi-QWERTY layout in a 4x4 grid, following QWERTY's division of buttons by hand and retaining their relative order .
KALQ is superior to the quasiQWERTY  layout by 4.1% and to the alphabetical layout by 6.1%.
The following observations were made about KALQ: 1.
The division of work is almost equal, at 54% and 46% for the right and left thumb, respectively.
Alternation is rapid: 62% of the taps are switches.
Travel distances are short: On average, the left thumb moves 86 px, the right 117.
The spacebars are centrally located.
The right thumb handles all vowels except y.
The clustering of vowels around the spacebar favors quick switches and minimizes travel distance.
The right thumb is responsible for 64% of same-side taps.
The left thumb has most of the consonants, exploiting its ability to hover above the next button sooner.
It has most first letters of words and most of the consonants.
Figure 8 depicts the average movement times and the frequency of taps on letters.
It demonstrates how the right thumb's side has quick-to-operate, frequently pressed keys clustered around the spacebar, whereas the left thumb has only a few fast-action keys while the rest are more diffuse.
This exploits the unique switching characteristics observed in the N-return study.
A typing example is given in Table 1.
Previous work has shown improvements in text-entry accuracy on mobile devices through error-correction techniques that consider linguistic context and movement characteristics .
Ideally, error correction should operate in real time, correcting erroneous characters as they are typed.
Building on previous work , we constructed an errorcorrection technique for KALQ  that utilizes both linguistic information and the movement model for two-thumb text entry.
For each touch point T, the error-correction model finds the key   that maximizes the posterior probability:   = arg max!
Duplicate tweets, retweets, and non-English-language tweets were eliminated via a language-identification module  .
We included only tweets written on mobile devices as judged from a tweet's source string.
We split each tweet into one or more sentences and kept only sentences wherein all words  were in a list of 330K English words.
The latter word list was obtained by concatenation of a number of humanedited dictionaries .
After filtering, the training data consisted of 94.6M sentences, 626M words, and 2.56G characters.
Our language model used a vocabulary of the letters A-Z plus space, apostrophe, comma, period, exclamation point, and question mark.
Using the SRILM toolkit, we trained a 7-gram language model, using Witten-Bell smoothing and no count cutoffs.
In response to resource constraints of our mobile device, we entropy-pruned the model to reduce its size.
Our final model had 1.4M parameters  and a compressed disk size of 9 MB.
We tested the predictive power of the model by using a set of messages written on Blackberry mobile devices .
We measured language-model performance in terms of average per-letter perplexity.
The perplexity indicates the average number of choices the model thinks are possible next, given the previous context.
The perplexity of the MobileEmail sentences in our model was 3.84.
Despite its small size, the model performed well even when compared to an unpruned 10-gram model with 340M parameters.
This large model only reduced the test set's perplexity to 3.44.
Since KALQ is a new keyboard layout there is no straightforward method to collect representative touch point data.
We could not train a likelihood model on the evaluation study's touch point data as this would mean we would train the model on the same subjects.
Therefore, we instead estimated the likelihood P by using a prescriptive model that assumes normal distribution of touch points , which is justified by existing evidence .
This parameter was estimated from training data of Step 2 that is disjoint from the evaluation .
Empirical evaluation is preferable to model-based predictions in the case of novel layouts, because predictions have turned out to be higher than the empirically achieved rates .
To minimize the training time and to maximize eventual performance, we developed a systematic training program.
Our training program builds on existing work: teaching key locations , practicing frequent bigrams and distributing practice over time , and rewarding high performance monetarily .
The program consists of 13-19 one-hour sessions structured in the manner Table 2 describes.
The baseline performance level is assessed first with QWERTY, without practice and instruction in typing.
The first training sessions with KALQ focus on learning the grip, spacebar use, and the hover-over technique.
We provide instructions in each and monitor performance.
Key locations are practiced by typing the alphabet without seeing the key labels.
After learning these basics, the trainees enter sessions with the most common English bigrams and words.
In the subsequent full-sentence practice, they type randomly chosen sentences of increasing length from the MobileEmail corpus .
From that point on, we set performance goals and give feedback on typing rate.
We also include a special session that focuses on bigrams or words that had been slower than average for the user.
After performance starts to stabilize, toward the 12th session, we introduce error-correction exercises, asking users to speed up and ignore errors.
Six tests were carried out throughout the program : the first for QWERTY and the rest to track improvement in KALQ.
Our QWERTY  setup was a full-width threerows-plus-spacebar keyboard identical to the built-in keyboard of the tablet .
Because using the same phrase sets repeatedly overestimates entry rates , we used separate phrases sets for training vs. testing.
Our phrase set is a subset of the MobileEmail corpus with verified memorable sentences: 200 phrases, 1,073 words, and 5,253 characters .
The training phrase sets had 1,147 unique sentences after the removal of these sentences.
All tests included a 15-minute warm-up session.
Users' final performance was tested with and without error correction .
Six right-handed students  were recruited from Saarland university .
They reported having almost no experience with large touchscreen devices such as tablets, and only one was a touch-typist on physical QWERTY keyboards.
The participants were compensated at 10/hour, and the two best were given a bonus of 100.
We used a Samsung Galaxy Tab 7.7", which has a slightly larger and more responsive touch sensor than the tablet of our previous studies.
Feedback on error rate and wpm was given after each phrase.
In exercises but not in testing, a REDO button appeared if the error rate exceeded 5%.
During typing, a black asterisk * was presented for correct taps and a red one * for incorrect taps.
With error correction, coloring was turned off to improve the latency of feedback.
The users' baseline performance with the full-width QWERTY layout was 27.7 wpm .
Figure 9 shows the development of typing performance over the course of the program.
The difference to QWERTY was significant .
We believe that in a task involving text generation, their performance would be even better.
We noticed that in the transcription task, long sentences caused problems, because users often had to glance at the stimulus phrase and they lost the position in the text because only asterisks were pro-
Therefore, we examined the distribution of MT and divided the phrases into two bins by whether they contained taps longer than 900 ms.
The latter, in our experience, correlates well with the glancing behavior.
The average typing speed for "non-glance phrases" was indeed slightly higher: 40.2 wpm .
This result is considered tentative, because an eye-tracker was not used.
More interestingly, the results can help future efforts by providing estimates of the gains attributable to different design and ergonomic choices: * Grip: Grasping the tablet with its corner in the "valley" created by the thenar and hypothenar eminence yields ~4% faster tapping performance than does a "random" grip.
Moreover, the associated keyboard layout  occludes the display the least.
Based on Figure 5, we estimate that this typing strategy saves about 10-20% on MT in alternating taps.
As a result, it maximizes alternating taps and minimizes same-side travel distances.
Our model predicted a benefit of only 4% over a comparable quasiQWERTY  layout.
However, this prediction was made assuming the same typing technique and grip.
Although our users' error rates were not improved by the online version of our corrector, offline analyses showed that with better parameters, the error rate can be decreased by 1.3 percentage points.
The design of KALQ is readily usable.
The layout has space to accommodate more buttons without breaking the grip.
Backspace, shift, punctuation, and special characters can be placed in the empty slots on KALQ`s right-hand side.
To tune the keyboard to the hand dimensions of the user, it could be scaled, with calibration asking the user to perform the sweep gesture shown in Figure 3, and left-handed users could select a version wherein the left and right keygrids are swapped.
However, because the associated improvement due to the optimization layout is small, not many users may want to learn KALQ.
Our results suggest that tangible improvements can be achieved also for QWERTY simply by changing the grip and learning the hover-over technique.
However, we hypothesize that, because of the smaller travel distances, KALQ is more ergonomic when used intensively.
We foresee several opportunities to reach even higher typing rates.
To improve letter-to-key assignment, other factors affecting two-thumb typing should be incorporated, such as the angle of approach, occlusion by the thumb's tip, and the absolute screen location of keys.
To improve the design for goals other than performance, especially learning time, multi-objective optimization could be used .
Error correction can be improved through training of the movement model with real-world user data.
We have studied only one grip, which is probably contingent on properties unique to our sample.
The users' entry rate with error correction was about the same as without it: 36.7 wpm .
Disappointingly, the error rate was slightly higher with the online version of our error-correction technique than without it.
We hypothesized that this is probably due to the chickenand-egg problem of no suitable training data from true KALQ expert users being available before the experiment was conducted.
Therefore, once experimental data had been collected, we performed two offline experiments with the typing data.
We used a single user typing 26 phrases as training data, a dataset disjoint from the testing data on which we ran the offline experiment.
The typing data from this user were then used to re-estimate the error-correction model's touch-point parameters.
We found that allowing the error-correction algorithm to learn touch-point regularities from even a single expert KALQ user was enough to result in a percentage point's reduction in CER, both for test data originally collected with online error correction and for data originally collected without it.
We also investigated the impact of allowing the error-correction algorithm to leverage prior recognition context  instead of having to rely on a character string as the sole prior context.
In other words, the error-correction algorithm performs a search through all possible letter combinations over the entire prior context when it tries to identify the most likely text in view of the user's input, instead of just performing a point estimate for the last inputted key.
Since a search over all letter sequences is infeasible, we used a pruning beam to speed up the search.
We found that using prior recognition context further reduced the error rate, with a 1.3 percentage point reduction in CER, both for test data collected with online error correction and data collected without it.
This work has contributed to understanding how to design usable and effective keyboards for two-thumb text entry on mobile devices using touchscreens.
We have presented a series of studies with the goal of improving text entry rates.
With all design choices in play, trained users achieved an entry rate of 37 wpm --an improvement of 34% over their "naive" baseline performance with a standard touch-QWERTY system.
This rate represents an improvement of 19% over the best rate, of 31 wpm, reported in the previous literature .
However, the entry rates are not directly comparable due to differences in the samples and the training procedures.
Nevertheless, given that our users were non-native speakers, we consider the result promising.
Finally, our sampling has been limited to right-handed male students and a 7" tablet.
Future research needs to examine handedness and the different hand sizes and form factors.
Larger form factors are likely to exhibit phenomena similar to those reported here, but smaller form factors will face novel issues, such as that the thumbs' active regions will overlap .
The code for optimization, predictive models, the keyboard, and empirical data are released on our project homepage.
This work was supported by the Max Planck Center for Visual Computing and Communication , EPSRC , and the Scottish Informatics and Computer Science Alliance.
