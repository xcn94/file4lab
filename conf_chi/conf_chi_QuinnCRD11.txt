Philip Quinn,1 Andy Cockburn,1 Kari-Jouko Raiha,2 Jerome Delamarche3 1 Dept.
Several enhanced pointing techniques aim to reduce the Fitts' law targeting distance by providing multiple target trajectories in the hope that a shorter path is available.
However, these techniques introduce a search or decision component to pointing - users must examine the alternatives available and decide upon the trajectory to use.
We analyse these difficulties, present a methodology for examining them as well as other behaviour issues, and report empirical results of performance with pointer wrapping and Ninja cursors.
Results show that offering multiple trajectories incurs a significant search or decision cost, and that users are therefore poor at capitalising on the theoretical benefits of reduced target distance.
When there is only one trajectory, the choice of how to move the cursor is obvious; but when multiple alternatives are introduced, users must first select a trajectory and then execute the movement.
There is a risk that the search/decision cost could reduce  the benefits of providing these shortcut paths.
Figure 1 illustrates efficient  and inefficient  trajectories for pointer wrapping and Ninja cursors when moving from the right to left targets.
We developed a methodology for examining the decision component of pointing techniques by comparing them to a user's expected direct pointing performance as described by Fitts' law.
We were also interested in examining the selected trajectories chosen when presented with these techniques - do users make the right decisions?
The following section briefly reviews research on pointing models and multiple trajectory techniques.
We then present a method for examining performance with these techniques.
Finally, we report experimental results for pointer wrapping, where the cursor can wrap around screen borders, and Ninja cursors in configurations of four and nine cursors.
Several approaches to improving pointing performance with a mouse focus on reducing the index of difficulty  of the pointing task, as described by Fitts' law .
That is, by manipulating the representations of the cursor or the target, they reduce the target distance or increase target width.
One approach for reducing target distance is to provide multiple pointing trajectories.
Kobayashi and Igarashi describe Ninja cursors , in which multiple cursors are controlled in unison with a single mouse, allowing a different trajectory for each cursor.
Another multiple trajectory approach is to allow the cursor to `wrap around' the screen edge: for example, exiting the East side enters the West.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Fitts' law  is a well-established model of target acquisition, predicting movement time MT = a+b x ID, where ID = log2, and D and W are target distance and width.
Since the seminal work of Card et al.
Ninja cursors  display multiple cursors that are moved in unison with the mouse.
While only one cursor can be `active' at any time, users can use any cursor to acquire a target.
To prevent targeting ambiguity a queuing algorithm determines which cursor is `active'.
For each cursor on the screen, an independent ID and MT can be calculated; with a good distribution of cursors, the minimum ID can be significantly less than that of single-cursor pointing.
Kobayashi and Igarashi  evaluated Ninja cursors in several cursor configurations and distracter densities, using tasks that intentionally removed the search/decision component of pointing.
Ninja cursors significantly outperformed traditional pointing, except in conditions with high target density.
Researchers have subsequently used eye gaze to eliminate the inefficiency of the queuing algorithm .
Blanch and Ortega  separately analysed reaction time and movement time, observing high reaction times for their Rake Cursor technique, which they attributed to the need to decide between alternative cursors.
Another technique, pointer wrapping, uses a single cursor with the traditional appearance.
However, the cursor does not stop when it reaches the edge of the screen; instead, it `wraps' around to the opposite edge of the display.
For example, when the cursor tries to move beyond the bottom of the display, it re-appears at the corresponding horizontal position at the top of the display .
Pointer wrapping introduces multiple trajectories through the possible wrapping actions: users can either move directly, or wrap around edges of the screen.
Related techniques eliminate all non-target space: the Bubble Cursor  enlarges the cursor activation area to always enclose a target, and Object Pointing  analyses motion kinematics to jump between targets.
These techniques may incur search/decision costs, even though they do not create multiple trajectories.
When multiple pointing trajectories are present, the user needs to determine:  if they need to switch cursors; and  which path to switch to.
For Ninja cursors, this is a decision between cursors against the one that has their present focus .
For pointer wrapping, the decision is between direct pointing or wrapping around the screen .
The switching decision requires a comparison between all possible IDs, but ultimately the decision is between the best possible ID for not switching and the ID for switching: that is, ID = IDns - IDs.
Controlling ID allows isolation of the switching cost/benefit.
It also allows examination of how switching behaviour varies with theoretical benefit.
IDns is the direct pointing ID, when not switching cursors or wrapping around the screen.
IDs is the minimum ID achievable when switching cursors - the ID from the closest cursor , or when wrapping around an edge of the screen.
A negative ID indicates a theoretical cost to switching, while a positive ID indicates a benefit, as illustrated in Figure 1.
We conducted an experiment to investigate pointing and decision time behaviour in three interfaces: pointer wrapping, Ninja cursors with four cursors , and Ninja cursors with nine cursors .
Additionally, each participant completed a Fitts' law calibration phase.
Our implementation of Ninja cursors matched that described by Kobayashi and Igarashi .
Cursors were spaced evenly across the screen, matching the aspect-ratio of the display.
As there were no distracter targets, no queuing algorithm was necessary and there were no limitations on which cursor could be used to make selections.
Cursors wrapped to the opposing edge when they reached the edge of the display, but targets were controlled so that on-screen cursors were initially closer to the target than wrapped ones.
Ninja cursors and pointer wrapping both introduce a search or decision component to pointing interactions by giving users a choice between multiple valid trajectories.
Our goals are to examine the size and impact of this component on performance and to examine how well users select paths.
Neither of these techniques alters the representation of the cursor or target; once a trajectory/cursor has been chosen, the task is a direct pointing task and can be modelled by Fitts' law.
With this observation, if the Fitts component is known, then whatever additional time remains in the pointing task can be attributed to search/decision factors.
Therefore, by calibrating the Fitts a and b parameters for a user, their expected pointing times can be calculated and compared to actual pointing times with other techniques.
In order to examine trajectory choice, the benefits of each possible trajectory must be controlled.
Pointing experiments typically control the ID of the target selection; however,
Core 2 Duo machine running Fedora 12 and was presented on a 22 LCD monitor at a resolution of 1680x1050.
Input was collected through a Microsoft Wheel Mouse Optical.
Fifteen volunteers  participated in the experiment.
All were post-graduate computer science students and each received a $10 gift certificate.
In bi-directional tapping tasks, pairs of targets were chosen and presented to participants; the target to select was presented as a solid red circle, while the paired target was shown as a hollow black outline.
The order of random and bi-directional tapping within each stage was counter-balanced between participants.
In random stages, participants selected 46 targets .
In bi-directional tapping stages, fifteen pairs of targets were presented serially, and participants selected each target in the pair four times .
Random and bi-directional tapping tasks were used to provide insights into how users make trajectory decisions in different types of activities.
Random tasks involve a unique decision for every target, but bi-directional tapping involves repeated reciprocal trajectories, so the costs of an initial decision can be dissipated across improved performance in many trials.
In the Fitts calibration stage, participants selected or tapped between targets with IDs of {1, 2, 3, 4, 5} bits, within a tolerance of 0.0001 bits.
Each ID value was used for nine trials.
The ID ranges differ between wrapping and Ninja cursors due to target distance being bounded by cursor separation in Ninja cursors.
Consequently, results cannot be directly compared between the wrapping and Ninja cursors conditions.
Additionally, the distance of the target was controlled to ensure that targets at high IDs for the Ninja-9 condition were distributed over the full range of possible targets.
Figure 2 shows results for pointer wrapping in the random  and bi-directional tapping tasks .
Each plot shows actual mean times as well as Fitts' predictions for direct  and wrapping .
They show that actual performance was substantially slower than Fitts' law predictions for both the optimal trajectory and for the suboptimal trajectory .
The rightmost plot shows the difference between actual and predicted optimal performance.
Even with bi-directional tapping, where users could recover the initial decision cost through multiple trials, actual performance was substantially worse than the optimum Fitts' predictions.
It is interesting that actual performance was best when the theoretical costs of switching were highest  and worst when ID was slightly positive .
This suggests that hard decisions, where the trajectories are evenly balanced, take longer to make , making performance much worse than if the multiple trajectory option was absent.
Enabling multiple trajectories reduced participants' performance beyond that attainable with normal pointing - the decision costs of between 380 and 677 ms  overwhelmed any potential benefit in all conditions.
It was analyzed for each interface using a 2x5 within-subjects ANOVA for the factors task  and ID.
Each trial continued until successful target selection.
After each selection, the cursor was snapped to the centre of the target to ensure an accurate ID in the following trial.
In summary, the experiment consisted of: 4 interfaces x 5 IDs or IDs x  = 660 target selection trials per participant Prior to each stage, participants were instructed on the interface and completed fifteen sample random selection trials.
Participants were instructed to perform the tasks as quickly and accurately as possible; they could take breaks between each task, and completed a questionnaire after each stage.
The experiment lasted approximately 20 minutes.
Figures 2 show results for Ninja-4 and Ninja-9 respectively.
With random Ninja-4 targets , left, participants' actual performance matched that of normal pointing  at ID = 2, and outperformed it at ID = 3, showing that for very distant targets Ninja cursors can offer a performance benefit.
However, the plot also shows that Ninja cursors' multiple trajectories reduced performance beyond that expected for normal pointing with ID in the range 1 to +1.
The plots for Ninja-9  show similar performance trends: for random trials it reduced performance beyond normal pointing in all but the most favourable conditions.
The search/decision costs for random targets ranged from 148 to 310 ms with Ninja-4, and from 102 to 436 ms with Ninja-9.
Overall, Ninja cursors reduced performance with random targets.
Very few experimental conditions showed benefits for multiple trajectory techniques with random targets .
This shows a major challenge for multiple trajectory techniques because the random condition best resembles real world pointing .
In all other conditions, the decision cost of these interfaces was too high for their theoretical advantages to be realized.
It might be tempting to think that users could be given the option to `turn on' Ninja cursors for distant targets, but these results suggest that each additional decision costs time, and adding further decision points is likely to further harm performance unless targets are very distant.
We presented an examination of the search/decision cost in pointing interfaces that provide multiple possible target trajectories.
We carried out a controlled experiment where pointing with two such interfaces - pointer wrapping and Ninja cursors - were tested and compared with Fitts' law predictions for optimal trajectories and for traditional pointing with a single cursor.
Results showed that actual performance was far from optimal, and that traditional pointing outperforms multiple trajectories in many conditions - the search/decision costs overwhelm the benefits.
Further work includes evaluating multiple trajectories with very large screens and multi-monitor environments, further analysis of the independent effects of target distance and width, and analysis of other enhanced pointing techniques such as Bubble Cursor  and Object Pointing .
In almost all conditions, actual performance was substantially slower than the optimal Fitts' law predictions.
Performance with multiple trajectory methods was also worse than normal pointing Fitts' law models  in all but the most favourable conditions.
The search/decision times associated with pointer wrapping overwhelmed any potential advantage of shortened trajectory - even when the theoretical advantages or penalties  of wrapping were large.
Participant comments identified major differences in the nature of the search/decision costs between pointer wrapping and Ninja cursors.
With wrapping, participants referred to `getting confused', `hard to decide', and `easier to ignore', indicating that it demanded a cognitive decision about the trajectory, as supported by the high time difference between theoretical and actual times .
With Ninja cursors, however, participants referred to `seeing the nearest cursor straight after beginning', indicating a visual search pop-out effect.
