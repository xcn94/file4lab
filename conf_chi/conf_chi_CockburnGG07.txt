Menus are a primary control in current interfaces, but there has been relatively little theoretical work to model their performance.
We propose a model of menu performance that goes beyond previous work by incorporating components for Fitts' Law pointing time, visual search time when novice, Hick-Hyman Law decision time when expert, and for the transition from novice to expert behaviour.
The model is able to predict performance for many different menu designs, including adaptive split menus, items with different frequencies and sizes, and multi-level menus.
We tested the model by comparing predictions for four menu designs  with empirical measures.
The empirical data matched the predictions extremely well, suggesting that the model can be used to explore a wide range of menu possibilities before implementation.
These problems arise because the theories have not adequately taken the Hick-Hyman Law into account.
This law models human decision time as a function of the information content conveyed by a visual stimulus .
Although other models such as Fitts' Law have been rigorously studied in HCI, the Hick-Hyman Law has failed to gain momentum despite its value for modelling the time taken to choose a command or action.
In this paper, we propose a model of menu selection time that incorporates both the Hick-Hyman and Fitts' Laws, and that integrates a transition from novice to expert performance.
As we will see, the model accommodates a variety of alternative menu designs, both adaptive and non-adaptive.
We conducted an experiment to calibrate several parameters in our model, and we then used the model to predict performance with four menu types: traditional menus, recency-based split menus , frequency-based split menus, and a novel `morphing' design.
Finally, we conducted an experiment to compare the predictions with actual performance.
The empirical data matched the model's predictions extremely well.
This experience shows the model's potential for comparing existing menu designs, and for predicting the expected performance of new menu designs.
For example, the `morphing' menu to be described in this paper is an intuitively appealing design: it reduces pointing time for frequent items by gradually enlarging them.
However, our model predicted that morphing menus would give very little advantage over traditional menus; this prediction was subsequently confirmed by an empirical analysis of its use.
These and other results suggest that designers could use the predictive model to evaluate a larger number of menu designs without having to implement them or carry out extensive user trials.
Menus are one of the primary controls for issuing commands in graphical user interfaces.
Commensurate with their importance, there has been a great deal of research into alternative designs, including marking menus , keyboard shortcuts , split menus , adaptive menus , tracking menus , cascade improvements , and fisheye menus .
While the empirical work evaluating menus is strong, there has been less theoretical work attempting to predict the efficiency of alternative designs.
When models have been proposed, they have been based on the Fitts' Law pointing requirements and thus ignore the time taken to find the item in the menu , or they ignore the users'
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Both Hick-Hyman and Fitts' Laws are derived from information theory , where the information content H of an event, measured in bits, is inversely proportional to its probability - likely events have low information content; unlikely ones, high.
The formula for information content is: H=log2, where p is the probability of the event.
The Hick-Hyman Law, then, states that the time T to choose an item is proportional to its information content, giving T=a+bxH, where a and b are empirically derived constants.
When the user chooses between C equally probable alternatives, the Hick-Hyman Law can be rewritten as T=a+bxlog2.
Similarly, Fitts' Law is based on the amount of information that a person must transmit through their motor system to move to an item - small, distant targets demand more information than large close ones, and consequently take longer to acquire.
The movement time MT taken to acquire a target is modelled by the formula MT=a+bxID, where the `index of difficulty' ID=log2, and A is the amplitude of movement and W is the target width.
Fitts' Law has been heavily used in HCI research, largely because many expert tasks require low-level object selection of graphical screen elements or of physical keys.
However, the Hick-Hyman Law has failed to gain widespread use.
Seow  provides a recent analysis and review of Hick-Hyman and Fitts' Laws in HCI, observing that while Fitts' Law has been robustly applied across many experiments, attempts to model behaviour with the Hick-Hyman Law have been less successful.
For example, Soukoreff and MacKenzie  tried to fuse Hick-Hyman and Fitts' Law to predict performance with visual keyboards, but their later empirical work refuted the model .
Hoffmann and Lim  also attempted to fuse HickHyman and Fitts' models, with limited success in an abstract decision plus pointing task.
However, their model is not directly applicable to typical computer use.
GOMS and KLM models are limited for two reasons: they are confined to expert performance of routine tasks, and they use a 1.35s average time for mental preparation, which is crude compared to the precision accessible through the Hick-Hyman law.
Evidence of Fitts and Hick-Hyman together.
Sears and Shneiderman  present a simple model of menu performance.
They observed that selection times degraded logarithmically with menu length for frequently selected items, but linearly with infrequent ones.
Although they did not use the Hick-Hyman Law to explain the observation, we conjecture that their participants were moving from linear visual search with unfamiliar items to Hick-Hyman decision times as the locations were learnt.
Landauer and Nachbar  did observe that expert performance in hierarchical full-screen menu selections is well described by Hick-Hyman and Fitts components applied in series.
Their tasks explicitly emphasised decision time over visual search by having well practiced participants select an integer or word from among 4096 candidates.
Each menu presented between 2 and 16 subdivided ranges of integers or alphabetically ordered words, requiring navigation through between 3 and 12 levels of hierarchy.
Although seminal work, the deep hierarchies analysed, the total ordering of menu labels and the full-screen menus are all highly dissimilar to the menus used now, more than two decades after their study.
Visual search and spatial memory.
Prior work has shown that users quickly form and rely on spatial knowledge of menu item location .
Consequently, for expert users there is little visual search involved in menu selection, reducing the task time to Hick-Hyman decision time plus Fitts' pointing time .
Novices, however, who have not yet formed a spatial model must visually search the menu for the target item.
While there have been conflicting theories and cognitive models of how users search menus - randomly , linearly , and in parallel  - eye-tracking data supports a predominantly top-to-bottom search order .
Regardless of how users conduct their search, there is consistent empirical evidence that novices' search time is linear with menu length .
A model of menu performance must accommodate the fact that the frequency of item selection is non-uniform.
It is well established that the frequency of command use follows a Zipfian distribution  - that is, a power-law function Pn ~1/na, where Pn is the frequency of the nth ranked word, and a is close to 1.
Regression analysis showed that both datasets are strongly Zipfian for `File' and `Insert' menu selections , and `Format' menu selections fit reasonably well .
Byrne  and Anderson, Matessa and Lebiere  use the ACT-R/PM cognitive architecture to predict performance in random menu contents.
Their models, however, are predominantly concerned with how users visually search for menu targets.
While this previous work hints at the relation between the Fitts and Hick-Hyman Laws, they do not address the user's transition from novice to expert behaviour - that is, that search time in terms of menu length  shifts from linear to logarithmic as expertise increases.
Our model calculates the decision/search time  by interpolating between a linear visual search-time component  and a logarithmic Hick-Hyman decision time  component: Tdsi = Tvsi + ei Thhi Equation 4. where ei is the user's expertise with that item, from 0  to 1 .
The equation reflects the fact that as users become familiar with the items in the menu, their visual search time decreases towards zero, and the Hick-Hyman decision time dominates.
We propose a model of menu performance that integrates both the time to find the item and the time to move to the target as components of performance.
It also incorporates the user's gradual transition from linear visual search to logarithmic decision time as they gain expertise.
Given a menu with multiple items, our model predicts selection time Ti for each item i, based on the sum of the decision/search time Tdsi and the Fitts' Law pointing time Tpi for that item: Ti = Tdsi + T pi Equation 1.
As we are ultimately interested in predicting the average performance of entire menu widgets, rather than just individual selections, we generalise the model to average performance  using:
We use two factors to model the user's expertise ei with menu item i: ti, the number of previous trials  of the item and L, the `learnability' of the interface.
Equation 5. ei = L x  Expertise ei ranges from 0 to 1, with 1 indicating that the user is entirely expert.
L also takes values in the range 0 to 1, with 1 representing an entirely learnable menu representation - that is, the items do not change locations or positions.
The value of L can be estimated for different interfaces by calculating one minus the average distance that items move as a proportion of half of the total menu length - e.g., random items will on average move half of the menu length l per selection, hence L=1-0.5l/0.5l=0.
This measure of expertise is important because it is used to model the users' transition from novice visual search to expert Hick-Hyman decision, and also because it shows that some menu designs can never reach Hick-Hyman performance levels because of poor learnability.
Note that this model of expertise is limited in that it makes no allowance for the number of items in the menu; in reality, users are likely to need more trials to become expert with longer menus .
Our model assumes that all items are initially equally probable , but that their probabilities are continually modified to reflect the number of times each item is selected .
Thus, the model can reflect Zipfian or other frequency distributions.
The model for Ti assumes optimal decision-making - that users always select items from the split when they are available there and from the regular menu when they are not in the split.
Pi_split represents the probability that the item is in the split, and can be calculated from knowledge about the menu design and the distribution of selections.
Performance within the two parts of the menu  is modelled using the original formulation of Equations 1-8.
Note that the learnability of the split region  is likely to be lower than that of the regular region  due to item movement in the split.
Also, certain split designs will prohibit the calculation of expertise using Equation 5, because the exact number of trials with each item at each split location will be unknown.
In such cases, a fixed value can be used for esplit that is determined either by the designer's understanding or by a simulation of the menu design.
For example, in the prediction of recency-based split menus below, we used the value 0.2 for esplit, based on a simple programmatic simulation of the split menu that showed approximately a one-in-five probability of items remaining in a stable location in the split.
Once expert, decision time is dependent on the entropy of each item Hi=log2.
Hence, decision time for each item is given by: Thhi = bhh H i + a hh Equation 7. where ahh and bhh are empirically determined HickHyman decision constants.
See the Calibration section for estimation of these constants.
Although the model assumes that Tdsi and Tpi occur in series, this will often not be the case: for example, if the cursor is used to track the current visual search region, then the visual search and targeting activities will occur in parallel.
In these cases, however, the logarithmic pointing component Tpi is likely to be small in comparison to the linear search time Tdsi .
For the average efficiency of a multi-level menu widget, Equation 2 for Tavg is modified by replacing Ti with MLi.
Ahlstrom also proposed adding Fitts' and steering components to model cascade menu selections , and for traditional cascade menus the steering cost scj can be modeled using the steering law : sc=a+b.
Split menus copy regular menu items into an extra region at the top for fast access.
Their performance is predicted by treating the menu as consisting of two separate menus: the split region  and the regular menu region .
We conducted an initial study to calibrate the main undefined parameters: Fitts' a and b, visual search avs and bvs, Hick-Hyman ahh and bhh.
The study analysed Fitts' target acquisition in menus, and two menu designs that represent opposite extremes in terms of menu learnability: static menus, in which items are never relocated; and random menus, in which every item is randomly located in the menu on each successive posting.
Static menus were tested with two datasets: an unfamiliar dataset  that allows us to examine how quickly users learn their item locations, and a familiar set from Microsoft Office that represents `optimal' use.
The splitDecision term models the time required for the user to decide between the split region of the menu and the regular region.
Thh2 is the time to decide between the two regions, calculated from bhh+ahh in Equation 5 .
Eight participants took part in the study and performed a number of single-level menu selections.
All participants were right-handed graduate computer science students and thus competent users of mice, screens and computers.
They were all familiar with Microsoft Office applications.
Each participant initially completed a Fitts' Law block of tasks involving pointing to cued menu items.
These tasks allow us to calibrate the Fitts' Law parameters a and b; and with these values determined, we can then calculate the decision/search time  by subtracting pointing time from the overall acquisition time .
Only the target item was labelled in the menu; all others items were blank.
Software measured the time from leaving the menu button to correctly clicking on the target.
The menu used in the Fitts' Law block was sixteen items long .
The item in the first menu location was labelled "1", 2nd location "2", and so on up to item "16".
The entire block consisted of ten selections of each of the following items, presented in a random order: 1, 4, 8, 12, and 16 - 50 selections in all.
The participants then completed a series of menu selections in twelve different conditions covering three menu conditions  and four menu lengths .
The participants completed all three conditions in a random order with each length before proceeding to the next longest length.
In the static+unfamiliar and random conditions, the menu was populated with randomly selected country names  from a list of 177 countries.
Each country name was only used in one condition to avoid transfer effects.
In the random condition, the menu items were randomly relocated each time the menu was posted.
In the static+familiar condition, each menu of length n contained the first n items from the list `New, Open, Close, Save, Save As, Save As Webpage, Page Setup, Print Preview, Print, Send To, Properties, Exit', based on the contents of Microsoft Office `File' menus.
Trials within each condition were presented in a series of blocks: seven blocks with the static conditions, three with random.
Each block consisted of n menu selections: one for each of the n items in the menu, presented in a random order.
The seven blocks in the static conditions were intended to reveal any transition from visual search to spatial knowledge of the menu.
Participants began each trial by clicking on a `Menu' button, which posted the menu and immediately displayed the name of the target alongside.
Software logged all mouse movements and timed the task from the initial display of the target.
The dependent measure Tdsi was calculated by subtracting the Fitts' time from the total selection time using Tdsi=Ti-Tpi .
Data from each of the three menu conditions  were analysed separately, using regression analyses across menu length  and block .
Data from the random condition were used to calibrate visual search parameters ; data from static+familiar were used to calibrate Hick-Hyman parameters ; and data from the static+unfamiliar condition were used to inspect the learning model's accuracy .
Figure 1 plots the mean measured decision/search time against the number of items, and it shows best-fit regression lines for each condition.
It clearly shows that the trends in Tdsi times across number of items in the menu conform to our model's predictions.
In the random condition, search time linearly increases with the number of items, and the static+familiar condition closely adheres to the logarithmic Hick-Hyman predictions.
In Figure 2, the static+unfamiliar condition shows users making a transition from linear visual search to logarithmic HickHyman performance.
Note that the Tdsi differences between conditions are relatively large - any model failing to account for the transition between novice and expert performance will be inaccurate.
In the random condition, the participants were dependent on visual search alone to find their targets - there was no way for them to anticipate the location of each item, equating to zero expertise in our model .
Data from the random condition were therefore used to parameterise the visual search constants in Equation 6.
An analysis of variance of performance over blocks showed significant improvement between blocks 1 and 2 , presumably because there is an additional cost in reading the menu labels for the first time.
To avoid incorporating this oneoff cost in the calibration of visual search we removed block 1 from the visual search analysis.
Our model is therefore based on visual search for items that have been previously read, which avoids conflating familiarity effects with visual search costs.
The model of increasing expertise is further described below.
Regression analysis shows an excellent linear relationship between Tdsi and the number of menu items : Tdsi=Tvsi=0.08n+0.3, R2=0.99, giving values of 0.08s/item for bvs and 0.30s for avs.
Once completely expert, Equation 4 predicts that decision/search time Tdsi depends solely on the HickHyman formula in Equation 7.
As intended, our participants were most expert when using the static+familiar condition, so we used this data to parameterize Equation 4.
Block 1 was slower than the others , presumably due to reading and familiarization effects.
As Equation 7 only concerns expert performance we removed block 1 from this analysis.
Mean decision/search time for the three menu conditions across blocks of trials .
Having calibrated the visual search and Hick-Hyman parameters of Equations 6 and 7 above, we calculated the cross-block learning prediction for Tdsi using Equations 4 and 5; as shown in Figure 2.
The line shows the predicted rate of transition from visual search to Hick-Hyman decision for static menus - from initial values determined by the random condition in blocks 2-3, towards HickHyman decision times determined by the latter blocks of the static+familiar condition.
Determining the `correct' formulation of Equation 5 is complex because the rate of gain in expertise will be influenced by several factors, including the nature or the dataset contained in the menu.
For example, memory chunking suggests that a menu containing three groups of four related items will be more memorable than one containing twelve unrelated items .
Data from the static+unfamiliar condition represents an entirely learnable menu design , but a `hard' data-set because the items contained in the menu are semantically unrelated country names.
Data from the static+familiar condition also represents an entirely learnable interface, but with an `easy' data-set because it is familiar from Microsoft Office and chunked.
Four menu types were implemented, modelled and evaluated.
Traditional menus are the baseline.
Recencybased split menus were included because they are widely used in desktop interfaces, and frequency-based split menus were used because of prior favourable results .
The split menu types were visually identical , using a three-item split region at the top of the menu, containing the three most recently or frequently selected items.
Both split menu variants left the main menu region unaltered - items were not removed from the main menu when added to the split region.
Both recency and frequency based split menus have been previously evaluated elsewhere ; to further test the predictive capability of our model we also included a new and intuitively appealing menu design, which we call `morphing menus'.
The design intention is to minimise the Fitts' Law pointing requirement for high-frequency items, while maintaining both the user's ability to form a spatial understanding of item location and the designer's intended item order.
Figures 3a/b show a morphing menu in use during the experiment.
The eighteen male and female participants  used all four menu types.
An incomplete Latin square controlled menu type order.
Each participant completed five blocks of tasks with each menu type before proceeding to the next.
Each block of tasks consisted of 45 menu selections, with a Zipfian distribution of selection frequency.
The correspondence between item location in the menu and item frequency was determined by a one-off random process, and re-used across all menu conditions.
This was necessary to avoid a menu-type bias due to differences in the location of the frequently selected items: for example, if the most frequent item was at the top of the menu in one condition, it would create an artificially low Fitts' pointing requirement.
Participants received no instruction on the frequency of menu item selections or on the location of frequent items.
They were simply informed that their tasks involved selecting menu items as quickly and accurately as possible.
The contents of the menu remained constant across the blocks with each particular menu type, but changed across menu types - the intention being to allow participants to develop expertise with each menu type independently.
All menus contained three groups of related items split by a thin line : one group of four items , then two groups of five items.
For each participant with each menu type, the menu contents were randomly constructed by selecting one group of four items and two groups of five items.
No group of items was reused in any other condition.
Example groups include car manufacturers  and furniture .
The target is shown next to the menu button when posted.
High frequency items `borrow' motor-space from infrequent items.
Mouse-over enlargement is used to aid visual identification of items that are displayed in the minimum size.
Importantly, this enlargement does not move the text of the item under the cursor.
This avoids `hunting' effects caused by fisheye distortion .
To help users learn item locations, `morphing' avoids abrupt item enlargement.
Initially all items are of equal probability and size.
After each selection, the probability of each item is recalculated: i, pi=ti /tt.
A damping function is used: tt=nxdamping, where n is the number of items and damping is a small integer value .
To reiterate, high frequency probable items `borrow' motor-space from improbable ones.
The amount of menu space available for reallocation is n times the difference between the minimum and maximum menu heights : sharedHeight=nx.
The height of each menu item hi is then calculated with hi=minHeight+.
The experiment began with a Fitts' Law calibration block of tasks, identical to that at the start of the calibration experiment - the menu was long enough to display 16 items, but only the target item was displayed; and the participants made five selections of the 1st, 4th, 8th, 12th and 16th menu item, with logs recording the time from the cursor leaving the menu button to selecting the target.
The menu selection tasks followed, with each task involving selecting an item from a 14 item menu.
Each target item was cued by showing the name of the item alongside the menu button, but the target was not revealed until the menu was posted.
Logs recorded the time from posting the menu to selecting the item; hence, task times included the decision/search time.
We designed the study both to test the accuracy of our prediction model, and to compare the performance of the four different menu designs.
For the accuracy analysis, we report percentage differences and regression analyses between predicted and actual values.
For the comparison part of the study, we analysed selection time data using a 4x5 RM-ANOVA for factors menu type  and block .
The theoretical predictions for traditional and morphing menus were calculated exactly as described by the equations above .
The split menu predictions required additional parameterisation as follows.
For recency-based splits, we used a general parameter for esplit  to replace Equation 5 which requires a-priori knowledge of item location that is unavailable due to the split's behaviour.
Previous models based purely on expert performance or purely on visual search fail to account for this marked improvement.
Empirical data  matched the predictions extremely well.
The percentage difference between the cross block empirical and predicted means range are all under 2% for each of the designs: 1.1% for traditional, 0.8% for morphing, 1.3% for recency-based splits, and 1.8% for frequency-based splits.
Regression analysis of the predicted cross-block mean for each design against the empirical mean shows a strong relationship that is close to Similarly, unity: pred=1.02xemp-0.01, R2>0.99.
As Figure 4 suggests, regression analysis of predicted values against empirical ones for each design across blocks shows a strong relationship for morphing  and frequency-splits , but weaker ones for recency-splits  and traditional menus .
The poor fit for traditional menus is caused by the participants' degrading performance after block 3, which we believe was due to a boredom effect caused by their familiar non-adaptive behaviour.
It is important to note that the disparity between the predicted and actual data is relatively small when compared to the differences between some of the menu designs.
For example, frequency-based splits were predicted to be 21.8% faster than recency-based ones and empirical measures showed this prediction to be accurate, with an actual value of 21.5%.
It is also important to note that the fundamental premise of the model - that users will migrate from linear search strategies to logarithmic Hick-Hyman choice - accounts for a substantial effect in performance measures, particularly when a design fully supports it.
A post-hoc Tukey HSD of 0.11s showed significant pair-wise comparisons between recency splits and all others, but not between the other conditions.
These results support earlier work  comparing traditional and split menus.
Finally, there was a significant typexblock interaction , evident in the slowdown with traditional menus.
These studies confirm the primary hypothesis of the model as predicted by Hick-Hyman and Fitts' Laws: performance with spatially stable menus migrates from novice behaviour that degrades linearly with menu length due to visual search time, through to expert behaviour that degrades logarithmically with menu length.
Our calibrated model accurately predicted several types of menu behaviour, both adaptive and non-adaptive.
In the following sections we discuss issues for consideration in further work: reflections on details of the model, on the model as a tool for design, and on the value of predictive performance models in UI design.
Consequently, the participants could gain `experience' with menu items before they had encountered them: for example, it is reasonable to expect that previous selections of `Ford', `Honda' and `Mazda' would help the user select `Toyota' for the first time because of its association with the group of cars.
Our current model fails to account for this chunkbased incidental learning between tasks.
Despite this weakness in the learning model of Equation 5  it is notable that the participants rapidly became expert when the designs allowed them to do so.
This highlights the importance of modelling learnability because certain designs inhibit the transition to expert performance.
For example, the model accurately predicted that expertise would account for a 24% improvement with frequency-split menus, compared to only 11% for the recency design currently in wide use.
The model was used to predict performance for several menu designs.
Perhaps the most interesting case of these is morphing menus - an intuitively appealing design with  a sound basis in Fitts' Law, but one that the model correctly predicted would provide almost no performance improvement.
First, the example of morphing menus shows the value of a predictive model - that in situations where many designs are possible and many designs appear to have potential, a model can provide an objective view.
Second, the model is also valuable in explaining why designs do or do not perform well.
In the case of morphing menus, there were two reasons for the design's lack-lustre performance.
First, morphing menus only focus on pointing time, ignoring decision time; this limits the possible improvement that can be realized.
Second, morphing menus increase some items' size at the expense of others, in order to take advantage of the distribution of selections.
However, less-frequent items will take longer, and the model showed clearly that the overall benefit from the larger items would be small.
It is also possible that performance with morphing menus could be improved by changing the parameters of use .
This raises an additional use for the predictive model - as part of a simulation system that can test a range of parameters, looking for the local performance maxima for a particular design.
We are continuing to develop and test the model in three ways: better modelling of expertise, more work with cascading menus, and work with other menu types.
We are now developing variants of Equation 5 to better model increasing expertise.
In particular, we want to account for three factors influencing the gain in expertise: the number of menu items ; the number of semantic chunks in the menu; and incidental learning across chunk items.
In future work we will empirically test the model of cascading menu selections .
We will also test the model's success with menus that have different forms than the rectangular pull-downs evaluated to date.
For example, we believe that pie menus will be accurately modelled - like traditional menus, they are spatially constant , and they have both a decision and pointing component.
Certain menu designs, however, will be harder to model.
Bederson's Fisheye Menus , for example, dynamically adjust the location and size of the items as the cursor approaches.
This causes undesirable `hunting effects'  because items are displayed away from the motor-space that activates them, but users can `lock' the fisheye to ease the problem.
Modelling user performance with this design is challenging because the cost of the hunting effect is unpredictable - it depends on how often the lock is used.
Despite this challenge, the model will predict relatively poor learnability  for Fisheye Menus due to the low spatial constancy of items.
Scrolling menus are another challenge for the model.
Although we have focused on menu selection, the model should apply equally well to any interaction that involves a choice decision followed by a pointing task.
This type of interaction is very common in user interfaces, for example selecting an item on the desktop, or in a folder, toolbar or button-panel.
Empirical work is needed to validate the model's use in these domains.
Finally, it is important to empirically determine whether the model is successful with menu selections in real tasks, rather than experimentally controlled selections.
Menus are one of the primary controls for issuing commands in user interfaces.
There are many different menu designs, but most constrain the user to predictable patterns of behaviour that are amenable to theoretical analysis.
We presented a model that integrates the HickHyman and Fitts' Laws to predict the efficiency of alternative menu designs.
The model accommodates variable item probabilities, the users' increasing expertise, and adaptive and non-adaptive behaviours.
The predictions were accurate - within 2% of empirical data.
The model is important for two reasons.
First, from a theoretical standpoint, there has been surprisingly little work in HCI to combine the fundamental Hick-Hyman and Fitts' Laws.
Our success will hopefully stimulate further work on modelling tasks that include both decision and pointing components.
Second, the model should aid researchers and developers working on alternative menu designs, of which there have been many in recent years.
Indeed, the authors of this paper hotly debated the efficacy of the morphing design prior to its modelling, implementation, and testing.
The model will allow other designers to rapidly test alternative schemes without the labour costs of implementation and empirical evaluation.
