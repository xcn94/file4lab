Keyboard shortcuts allow fast interaction, but they are known to be infrequently used, with most users relying heavily on traditional pointer-based selection for most commands.
We describe the goals, design, and evaluation of ExposeHK, a new interface mechanism that aims to increase hotkey use.
ExposeHK supports these objectives by displaying hotkeys overlaid on their associated commands when a modifier key is pressed.
We evaluated ExposeHK in three empirical studies using toolbars, menus, and a tabbed `ribbon' toolbar.
Results show that participants used more hotkeys, and used them more often, with ExposeHK than with other techniques; they were faster with ExposeHK than with either pointing or other hotkey methods; and they strongly preferred ExposeHK.
Our research shows that ExposeHK can substantially improve the user's transition from a `beginner mode' of interaction to a higher level of expertise.
Hotkeys, also called keyboard shortcuts or accelerators, offer a shortcut alternative to pointer-based selection of commands from toolbars and menus.
Their efficiency stems from three mechanical advantages over pointing: first, in many tasks such as word-processing, the hands rest on the keyboard, so hotkeys eliminate the need to move the hand to a pointing device and back; second, they eliminate the need for a pointing round-trip from the workspace to the control widgets and back; and third, they allow a wide range of commands to be selected with a single key combination, thus removing the need to traverse a menu or tab hierarchy.
Despite this potential, hotkeys are under-used: several studies have demonstrated that few users employ any form of shortcut interface .
Carroll's `paradox of the active user'  suggests that users are simply too engaged in their tasks to consider learning alternative strategies or methods, even if these methods may eventually improve performance.
In addition, keyboard shortcuts require that users learn hotkeys beforehand, potentially resulting in errors due to incorrect hotkey/command memory associations.
The poor adoption of hotkeys and other high-performance interface techniques creates a substantial usability problem.
While the performance difference between hotkeys and pointerbased commands may be small for some actions, it can be large when command activation involves hierarchical navigation  or when selecting widgets located far from the workspace.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
It is therefore important to find ways of helping users transition from the pointer to hotkeys.
Two recent studies show the state of the art in encouraging hotkey use.
However, these approaches have three substantial limitations.
First, they use pointer-based selection as the starting point for hotkey presentation .
Consequently, users reinforce pointing even while trying to learn a faster non-pointer method.
Second, cost-based techniques work by penalising pointer selections, rather than by making hotkeys more attractive.
For example, one of Grossman's successful techniques imposed a delay after pointer-based selection: the hotkey `incentive' was turning users away from the old technique, rather than actually improving performance.
Third, users are unable to exploit the spatial-location knowledge developed through prior pointer-based selection.
Users must switch entirely to the new approach, which usually implies a temporary but substantial reduction in performance  that is likely to deter hotkey use.
We have developed and evaluated a new method for encouraging and improving hotkey use - called ExposeHK  - that addresses these issues.
When activated with a modifier key , EHK displays the hotkeys in the application's toolbar , menu, or ribbon.
Importantly, EHK is compatible with existing toolbar and ribbon designs, and it can be readily adapted to menus.
This work makes three main contributions.
First, it describes design principles for promoting hotkey use.
Second, it presents ExposeHK  - a system instantiating the principles with toolbar, menu and ribbon designs.
Third, it presents empirical results showing that EHK promotes earlier and higher levels of hotkey use, that participants are faster with it, and that they strongly prefer EHK.
In most contemporary interfaces hotkeys are not displayed until the user posts a menu item or dwells on a toolbar item .
Consequently, learning hotkeys involves moving the cursor to the point where a simple click would complete the selection - but then pausing, awaiting the shortcut feedback, and committing it to memory before proceeding .
Any memory errors while learning hotkeys will further inhibit performance.
To avoid this trap, systems should allow users to browse hotkeys without requiring a pointing action.
ExposeHK meets this goal by showing the hotkeys when a modifier key is pressed, as shown in Figures 1 and 6.
Users can therefore initiate their command actions using the same modality that they will ultimately use as experts.
Novice users will still need to visually search for the target interface control, but once identified, they can press the EHK modifier key to display the hotkeys underlying the control, avoiding the need to move the hand to the mouse and point to the target.
Furthermore, EHK does not require that users learn hotkeys beforehand, avoiding errors due to incorrect hotkey/command memory associations.
EHK uses a simple interaction mechanism to promote hotkey use.
While a modifier key is held down, all hotkeys are concurrently displayed on top of their graphical controls.
Selections are completed using the hotkey or by pointing.
We implemented and evaluated three forms of the technique for toolbars , menus , and ribbons , with details presented later.
This section describes the design goals for EHK, as well as key associated prior work.
The ultimate objective of EHK is to improve the rate at which users attain expertise with interfaces, by promoting hotkey use.
Figure 2, adapted from , illustrates this idealised objective.
It shows that switching to traditional shortcuts involves a temporary `performance dip' that discourages their use.
In analysing factors influencing the development of expertise, Kurtenbach  proposed the principle of rehearsal: `guidance should be a physical rehearsal of the way an expert would issue a command'.
He deployed this principle in marking menus, which allow novices to select items by moving the cursor into one segment of a visually displayed `pie menu' 
Experts select items using exactly the same physical action , but without waiting for feedback.
The potential value of using the same physical action for novice and expert selections is supported by psychology literature on automaticity and the power law of practice .
Automaticity  represents a high level of attainment in motor learning, allowing controls to be manipulated without substantial conscious deliberation.
It is characterised by fast and parallel processing.
These effects support Kurtenbach's principle of rehearsal, yet few shortcut interfaces  exploit the principle.
Traditional hotkey methods require users to discover hotkeys using a non-hotkey modality , and consequently users rehearse pointing, not hotkey use.
EHK, in contrast, allows users to discover and rehearse hotkeys using only the hotkey modality.
Furthermore, EHK is compatible with traditional interfaces, whereas systems like marking menus require interface changes .
There is extensive literature on understanding and supporting expert performance with user interfaces.
This includes work on user strategies , interface techniques that optimise expert performance , techniques supporting transitions from novice to expert performance , understanding collaborative skill sharing , and supporting community expertise .
Key prior work specifically on hotkeys includes empirical performance comparisons between shortcut techniques including hotkeys  and specialised hardware promoting hotkey use .
Finally, the two studies most closely related to our objectives concern the use of interaction cost as a disincentive for pointerbased selection  and the use of feedback to help users learn hotkey bindings .
As summarised in the introduction, we want to promote hotkeys without requiring pre-learning, without imposing an explicit cost on pointer-based techniques, and without the potential distraction of post-action feedback.
When users have an intermediate level of skill, they are likely to have partial knowledge of their interaction environment.
For example, users may know the spatial vicinity of controls, even if not their exact location; or they may suspect that a particular hotkey sequence triggers a needed command, but be unwilling to execute it without confirmation.
EHK leverages human spatial memory by ensuring that hotkeys are displayed at the spatial location of the underlying visual control, which reduces visual search time and allows rapid confirmation of hotkey bindings.
A key reason for hotkeys' efficiency is that most hotkey interfaces use a single key combination to select a command, instead of a series of several point-and-click activities to traverse the command hierarchy.
For example, the hotkey CTRL-B may replace two pointing actions for the `Font' menu and `Bold' item.
Importantly, not all hotkey methods support hierarchy flattening.
For example, Alt-Key navigation  displays hotkeys associated with successive levels of the interface hierarchy when the `Alt' key is pressed, allowing users to traverse the interface.
Theoretical and empirical results tend to show that selection time increases with the number of menu levels for experts .
In addition, it has been shown that it is difficult to chunk a multiple-keys sequence into one single cognitive unit when using Alt-Key navigation .
ExposeHK's hotkey bindings are also stable across invocations , which allow users to learn and rapidly reproduce key sequences.
While this may seem an obvious feature of hotkey interfaces, there are interesting accessibility interfaces that support some of EHK's characteristics, but violate this goal.
We conducted three studies to deploy and evaluate ExposeHK with traditional organizations of commands in graphical user interfaces: toolbars, menus, and ribbons.
Studies 1 and 2, which respectively used toolbar and menu adaptations of ExposeHK, focus on goals 1 to 3, which concern promoting transitions to hotkey use.
The primary measure of studies 1 and 2, therefore, is the proportion of commands completed using hotkeys - these studies answer the question, `does ExposeHK promote earlier and increased hotkey use compare to other methods?'
Study 3 then focuses on goal 4, examining the performance improvements that ExposeHK can provide when applied to the Microsoft Ribbon user interface, in comparison to existing methods.
The toolbar version of ExposeHK , shown in Figure 1, overlays the hotkey associated with each toolbar item when a modifier key is pressed.
Study 1 focuses on hotkey adoption with ExposeHKT compared with traditional tooltips and audio feedback.
Traditional tooltips provide baseline comparison with a commercial standard, and audio feedback was used because Grossman et al.
The audio feedback condition used voice synthesis to read the hotkey binding when the pointer clicked the item.
Participants in the study were free to complete selections by pointing to toolbar items or by invoking hotkeys.
The study was designed to answer several questions about ExposeHKT in comparison to traditional tooltips and audiosupplemented hotkey feedback:
The potential benefits of using hotkeys were not mentioned to the participants.
The toolbar used in the study consisted of 25 buttons, with a different set of buttons for each interface .
Participants completed six blocks of trials with each interface.
The same 12 targets with the same frequencies were repeated in each block.
Targets within this distribution were controlled so that the target appearing 8 times was activated by holding the control key and pressing a hotkey in the left-hand side of the keyboard , the target appearing 4 times was selected by a key in the right set , and a target selected twice was in the middle-keyboard .
The remaining targets were evenly distributed across the left, middle, and right keyboard sides.
Finally, the physical location of targets in the toolbar was controlled to balance the pointing distance for each target of a particular frequency across interface conditions.
Participants were instructed to complete selections as quickly and accurately as possible.
To discourage `racing through' the study irrespective of errors, each erroneous selection incurred a 3 second delay prior to initiating the next task.
Once all blocks with an interface were complete, participants completed NASA-TLX worksheets  for the technique and gave comments.
At the end of the experiment, which lasted approximately 30 minutes, participants ranked their preference for the interfaces and gave final comments.
The experiment used a 3x6x4 analysis of variance for within-subjects factors technique , block , and frequency .
Order of technique and the dataset used with the toolbar were counterbalanced across the participants using a Latin Square.
The primary dependent measure was the proportion of trials completed using hotkeys.
Additional dependent measures included selection time  and error rate.
Although the within-subjects factor technique was counterbalanced, we anticipated the possibility of asymmetric skill transfer, with particular technique orders differently influencing performance in subsequent conditions .
We therefore analysed factors order and technique, and found a significant interaction.
The method was based on Grossman et al.
Each task involved selecting a toolbar item in response to a voice-synthesised audible stimulus that read the name of one of the targets - Figure 3 shows a toolbar used in the study.
Voice-synthesis was used to ease risks of confounds stemming from factors such as visual pop-out effects due to exact matches between the stimulus  and its representation in the interface.
The audio stimulus was produced, and task timing began, when the cursor was inside a 70x70 pixel box in the center of the screen and the space bar was pressed.
The participant then selected the corresponding item, either by clicking on the target or by selecting the correct hotkey.
As in Grossman et al.
Completing one trial immediately initiated the next.
All user events were logged, including mouse movement and incorrect selections.
Participants completed tasks with all three interfaces: ExposeHKT , audio feedback, and tooltips.
In the ExposeHKT condition, the hotkey binding replaced the corresponding toolbar icon when the control key was pressed.
In the audio feedback condition, voice-synthesis read the hotkey binding when the user clicked on the item .
In the tooltip condition, a tooltip showed the hotkey immediately when the cursor entered a toolbar item.
Immediate display was used  to maximise hotkey exposure and minimise the performance penalty for awaiting the tooltip.
Before using each interface participants received brief training  in which they were prompted to select one item from a toolbar containing four items, first using the pointer, and then selecting the same item using a hotkey.
For significant ANOVA effects, we include partial eta-squared  as a measure of effect size .
36 university staff and students participated, aged 20-45, 6 female.
Experimental software, implemented in Java Swing, ran on Windows XP, using a 1680x1050 22" display, optical mouse, standard QWERTY keyboard, and earphones.
The overall mean time for a correct item selection was 3.37s , with a low overall error rate of 2.8%.
The following paragraphs describe analysis of the dependent measures.
Subjective responses for all studies are reported after Study 3.
Figure 4  shows the proportion of command selections completed using hotkeys with the three techniques across blocks.
Figure 4  shows that ExposeHKT users made an early and sustained switch to hotkeys, contrasting with other techniques' gradual increase.
This suggests that ExposeHKT fulfills goal 1 , as over 81% of first block selections were completed using hotkeys.
While hotkeys were consistently employed regardless of item frequency with ExposeHKT , low-frequency items were seldom selected using hotkeys with tooltip and audio conditions.
Finally, our study replicates Grossman's finding  that audio feedback outperforms standard tooltips.
Deploying ExposeHK with toolbars is simple because each icon has a unique spatial location, giving an unambiguous position for each hotkey when ExposeHK is activated.
However, extending ExposeHK to the large command sets offered by menus raises design challenges because items can share the same display location.
For example, Figure 5  shows that the `Safari' menu extends horizontally across `File', `Edit', `View' and `History' menus.
To understand how hotkeys are used in existing menus, and the degree of overlapping, we wrote a program using the Mac OS accessibility API to inspect the structure and location of menus in 30 mainstream Mac applications such as Microsoft Word and Adobe Photoshop.
Across applications, a mean of 77.8% of hotkeys were located in top-level menus, and 22.1% in second-level menus.
The proportion of menu items with associated hotkeys is 47.6% in top-level menus and 15.4% in second-level menus.
Study 2 examined hotkey use with ExposeHKM in comparison to traditional menus supplemented with audio feedback .
Audio feedback was used because it succeeded in promoting hotkey use in  and in Study 1.
The method was based on Study 1 , with modifications described below.
Tasks involved selecting a menu item in response to an iconic target stimulus .
Iconic stimuli were used instead of text because pilot studies suggested that long and short word stimuli were easier to visually identify in the menu; iconic stimuli removed this confound: Figure 6 shows a menu and stimulus used in the study.
The mechanism for presenting stimuli and completing selections was otherwise identical to Study 1.
The primary design concept of ExposeHKM is similar to ExposeHKT - pressing a modifier key exposes all of the menu items with associated hotkeys overlaying items, as shown in Figure 6.
Command selections can be completed by pressing the hotkey or by using the pointer.
Second-level menu cascades are not displayed, so some degree of pointer-based selection is still necessary.
ExposeHKM modifies the visual layout of menus to remove spatial overloading.
This is necessary to support hotkey browsing  and to help intermediate users exploit their spatial memory .
With ExposeHKM , the width of the gap between top-level menu items is determined by the width of the longest item with a hotkey in each menu.
If a longer item without a hotkey exists within the menu, the name is truncated until the cursor hovers over it.
An obvious consequence of this design is that the menubar width increases.
Using data from our menu structure analysis, we calculated a mean menubar width of 1204 px for the 30 applications , ranging from 722 px to 1736 px.
This raises interesting issues for deployment - ExposeHKM can be readily adapted to Mac OS X menus because they extend across the width of the primary screen; however, it would be more difficult to deploy in small windows where the menubar resides within the window.
We return to issues of deployment in the discussion.
Although ExposeHKM is intended to promote hotkey use, it is compatible with pointer-based interaction and users can select items using the pointer if preferred.
Doing so should be more efficient than traditional menus because it removes the requirement to first point to a menu to post it , thus replacing two pointing actions with a single one.
Although this design risks giving an initial impression of visual clutter, studies suggest that similar methods of parallel presentation can improve pointer-based selection performance  and reduce visual search times because rapid eye saccades can replace comparatively slow pointer-based manipulation .
Finally, users can still browse the menus and select the items using the pointer only as with a regular menubar if preferred.
All participants completed the tasks using ExposeHKM and audio feedback.
With both interfaces selections could be completed by pointing or by using a hotkey.
In the audio feedback condition voice-synthesis read the hotkey binding  whenever a selection was made using the pointer.
The hotkeys associated with target items all consisted of a single letter plus the Control key.
The menus were populated using Grossman et al.
Participants received brief training prior to using each interface, which involved selecting an item 4 or more times using the pointer and hotkey .
They then completed six blocks of trials, with each block consisting of 24 selections, using the same distribution as Study 1.
The experiment was designed as a 2x6x4 repeated-measures design for withinsubjects factors technique , block and frequency .
Order of Technique was counterbalanced.
The target sets used in the menus were also counterbalanced.
All participants from Study 1 proceeded immediately to Study 2 using the same apparatus.
With ExposeHKM , 99% of selections were completed using hotkeys, ranging from 93% in block 1 to 100% in block 6, compared with 64% with audio, ranging from 37% in block 1 to 77% in block 6.
The continuous high hotkey use with ExposeHKM , compared to the gradual increase with audio caused a significant techniquexblock interaction .
There was also a significant techniquexfrequency interaction  caused by ExposeHKM 's consistently high hotkey use across frequencies, but only 42% hotkey use for infrequent targets with audio.
Item selection time and errors.
Figure 7  shows the mean selection time  with the different techniques across block .
As anticipated there were significant main effects of block, and frequency , but technique did not interact with either.
Regardless of technique, the mean hotkey selection time was 2.53s, which was less than half that of pointer selections .
Hotkey error rates  were also lower than pointer selections , which we attribute to the narrow height of menu items causing relatively frequent `off by one' errors.
In summary, the results provide similar validation to that of Study 1.
With ExposeHKM , participants chose to use hotkeys for nearly all commands almost immediately.
In contrast, with audio feedback the transition to hotkeys was more gradual: hotkey use reached a lower maximum level, and hotkeys were comparatively rarely used with infrequent items.
Adapting EHK to the ribbon is challenging because each of several tabs places different items in the same spatial location.
Also, the ribbon supports an Alt-key method for navigating its ribbon that is superficially similar to EHK.
This raises two questions: can EHK be adapted to the ribbon, and does it improve performance over the Alt-key technique?
The ribbon adaptation, called ExposeHKR , is visually similar to ExposeHKT , but it additionally allows users to move between tabbed toolbars using the scrollwheel  or arrowkeys.
To remain consistent with the Ribbon's tabbed subsets, ExposeHKR relaxes goal 1, which motivated the concurrent presentation of all items with toolbars and menus.
There are two key differences between Microsoft's Alt-key interface and ExposeHKR , both arising with respect to goal 4 .
First, every selection with Alt-keys is necessarily hierarchical, involving a hotkey specification of the target tab and then the target item within the tab.
Multi-level selections are necessary even when the correct target tab is pre-selected.
With ExposeHKR , in contrast, hotkeys are globally available in a flat hierarchy.
Furthermore, selecting a hotkey with ExposeHKR has the side effect of switching to the tab that contains the target item, which is intended to assist with browsing hotkeys when users make a series of selections within the same tab.
Second, Alt-keys are unstable, with the same letter representing different meanings in different modes , whereas ExposeHKR 's commands are stable and mode-insensitive.
These design differences have implications for the designer's choice of hotkey bindings, as discussed later.
Studies 1 and 2 focused on the proportion of hotkey use resulting from techniques that aim to promote them.
In Study 3, the primary concern is the ultimate objective of hotkey interaction - improved performance - compared across three ribbon methods: ExposeHKR , mouse selection, and Alt-keys.
Each task involved selecting an item within a ribbon-like interface  in response to a text stimulus representing the target.
The mechanism for presenting stimuli and handling errors was otherwise identical to Study 2.
The key-bindings for ExposeHKR all used Control then a single keypress.
All participants completed the tasks using ExposeHKR , Alt Keys and pointer .
With each condition they were required to complete selections using the primary interaction modality in order to get them to a performance maximum with that modality.
Therefore, with ExposeHKR and Alt Keys they were required to use hotkeys and with pointer hotkeys were disabled.
Before using each technique, participants received brief instruction and then completed eight random selections from a ribbon populated with a training set of items .
They were instructed to select targets as quickly and accurately as possible.
The ribbon used in the experiment consisted of 7 tabs with 18 items each.
Participants completed 8 blocks of 12 selections with each interface.
Each block comprised 2 selections of the same 6 targets, allowing participants to gain expertise across blocks.
Half of the selections in each block involved switching to a different tab, allowing us to inspect the impact on performance of tab-switching with the different interfaces.
Selection time data was analysed using a 3x8x2 analysis of variance for withinsubject factors technique , block , and tab switch .
Order of technique and the dataset used with each technique were counterbalanced across participants.
Experimental software, written in C#, ran on Windows 7 with a 1280x1024 22" display, optical mouse, and QWERTY keyboard.
Figure 9  shows the significant techniquextab switch interaction , which is best attributed to the contrast between the pointer and ExposeHKR being similarly affected by the need to switch tabs, while performance with Alt Keys was more consistent across the tab switch levels.
This is explained by the Alt Key mechanism requiring users to carry out identical hierarchical actions regardless tab switch state, whereas pointer and ExposeHKR actions are different depending on the need to switch tabs .
With experience, however, once hotkeys are well learned, ExposeHKR users do not need to switch tabs, which best explains the three-way significant techniquexblockxtab switch interaction .
Figure 9 summarises the selection time results for the three techniques across block  and tab switch .
However, Figure 9  shows a significant techniquexblock interaction, with ExposeHKR slightly slower than pointer in the first two blocks, but substantially faster  than pointer by the final block .
Pairwise comparison of performance in the final block shows significant differences between all three interfaces.
The early asymptote of the pointer performance curve suggests that pointer selection rapidly reaches a relatively low performance ceiling.
After each study participants completed NASA-TLX worksheets to assess subjective workload with each interface, they ranked the interfaces for overall preference, and they provided comments.
In all cases, the participants' subjective responses strongly favoured EHK - 66.7% ranked it first for overall preference in Study 1, 77.8% preferred it over audio in Study 2, and 88.9% ranked it first in Study 3.
Mean responses are shown in Table 1, with significant differences shown in bold .
In studies 1 and 2, NASA-TLX measures showed that EHK had the lowest or equal-to-lowest workload measure in all categories.
Several participants also commented that the audio feedback method was "annoying", and that they intentionally decided ignore its feedback.
In study 3, EHK was assessed as resulting in lower physical demand, less frustration, and higher perceived success than pointing, but it had higher mental demand.
Interactions such as EHK have no visual representation to aid their discovery until the user accidentally or deliberately presses its modifier-key trigger.
Similar problems of weak affordances are present in many forms of interaction, such as touchscreens, where the number of taps, the number of fingers, the tap location, or press duration can be used to control different interactive effects, without any visual representation.
In such cases designers often use techniques such as on- and off-line tutorials, `tip of the day' utilities, and general marketing to promote discovery and awareness.
Social interactions around computing  also play a major role is disseminating useful system capabilities .
Consequently, useful facilities can become widely known even when their presentation is subtle or relatively cryptic.
Studies 1 and 2 explicitly instructed users to make a series of pointer-based and hotkey-based selections with each interface prior to beginning experimental tasks.
However, in pilot studies, some participants completed selections using the pointer despite clearly displayed instructions to use hotkeys, and they continued to do so until verbally instructed to use the hotkeys.
Breaking this inertia of pointerbased interaction is challenging, but doing so is a primary objective of goals 1-3.
Regardless of these challenges to adoption, it is important to note that EHK is largely compatible with existing designs - it supplements their functionality without changing their basic behavior, allowing users to maintain existing interaction strategies without performance detriment, but also offering a higher performance ceiling if used.
In on-going work we are developing an application that will incorporate ExposeHKM into Mac OS X menus.
This will allow us to gain insights into longitudinal use of EHK in realworld deployments.
Design goals 1-3 address issues in promoting users' transition to using hotkeys: helping novices browse hotkeys , using physical rehearsal , and drawing on spatial memory to assist hotkey identification and confirmation for intermediate users .
Studies 1 and 2 showed that toolbar and menu adaptations of EHK improved on the state-of-the-art systems for promoting hotkey use.
Participants made an early, comprehensive, and sustained switch to hotkeys when using EHK, whereas standard tooltips and post-selection audio feedback resulted in slower hotkey adoption and lower levels of use.
Participants, mostly university staff and students, were almost certainly aware of keyboard shortcuts as an interface mechanism, possibly increasing hotkey use for all conditions.
Finally, participants also strongly preferred EHK to the other conditions tested .
Design goal 4 addresses ultimate performance with hotkeys by advocating stable bindings that are globally applicable in a flat interface hierarchy.
Study 3 therefore examined user performance with EHK when adapted to a contemporary `ribbon' design of tabbed toolbars, comparing performance with standard pointer-based selection and with a commercial hierarchical `Alt' Keys interface.
Results showed that EHK quickly outperformed the pointer by up to 30% on selection time.
EHK substantially outperformed the Alt keys interface throughout.
Together the studies suggest that user performance in command selection can be improved by incorporating EHK in standard toolbar, menu, and ribbon interfaces.
With EHK novice users have a mechanism to browse hotkeys without using the pointer, and they can issue hotkey commands as a rehearsal of the expert mechanism.
Intermediate users can draw on their spatial knowledge of commands to rapidly find hotkey bindings.
Finally, the ultimate performance of experts is improved through stable bindings and flat hierarchies.
The following subsections discuss issues of deployment and identify promising areas for further work.
The studies show that when participants are aware of EHK they use it to their advantage and are enthusiastic about it.
However, all three studies included explicit instruction and practice with EHK prior to experimental tasks, which raises questions of how it will be discovered and used in practice.
The hotkeys in our experiments used only the Control key as a modifier.
Although we have not yet evaluated multiple modifiers, we suspect that the results will generalise to modifier key combinations.
Importantly, design guidelines advocate using single modifier keys  for important commands: for example, Apple recommends that developers "use the Command key as the main modifier key in a keyboard shortcut" .
Furthermore, our analysis of how hotkeys are used in 30 mainstream applications showed that 93.4%  of commands use the Command key, suggesting that our method is representative of contemporary hotkey deployments.
When multiple modifiers are required, EHK could be further adapted to help users learn the modifier key bindings.
By advocating for stable hotkey bindings in a globally accessible flat hierarchy, goal 4 limits the number of commands accessible through a single hotkey character with each single modifier key to  45 .
In contrast, a two-level Alt hierarchy that uses a single character at each level gives access to up to tx45  commands .
Pragmatically, though, we suspect that very few users know as many as 45 hotkeys in any existing system.
Several design solutions could be used to adapt EHK to menu and toolbar combinations.
Most toolbar items are replicated in menus, so the simplest solution would be to allow the menus to occlude the toolbar.
However, this would impair intermediate users' ability to use their spatial memory of items in the toolbar .
By displaying all of the available menu commands at once, ExposeHKM effectively turns the command-access interface into a CommandMap .
Consequently, even when items within ExposeHKM have no associated hotkey, ExposeHKM should improve performance over traditional schemes.
Keyboard shortcuts such as hotkeys are widely deployed in current applications but they are known to be underused.
We presented ExposeHK, a simple interactive technique that overlays hotkeys onto existing widgets when a modifier key is pressed.
Its design promotes hotkey use and enhances efficiency through four goals: enable hotkey browsing; support physical rehearsal; support rapid hotkey identification; and support stable commands in a flat hierarchy.
We presented three ExposeHK exemplars that work with the main methods for organising commands in graphical user interfaces: toolbars, menus, and tabbed `ribbon' toolbars.
Three studies, one with each of the designs, demonstrated that the adaptations succeed in promoting earlier and higher levels of hotkey use than other methods, that they improve user performance, and that they are subjectively preferred to alternatives.
Understanding and Improving Navigation Within Electronic Documents.
PhD thesis, University of Canterbury, Christchurch, New-Zealand, 2009.
Appert, C., and Zhai, S. Using strokes as command shortcuts: cognitive benefits and toolkit support.
Bailly, G., Lecolinet, E., and Nigay, L. Flower menus: a new type of marking menu with large menu breadth, within groups and efficient expert mode memorization.
