Transforming analog graphic data, such as maps, into digital format by manual digitizing is slow and expensive, but is nevertheless widely performed.
Studies of digitizing methods to find opportunities for optimization are therefore warranted.
The work reported here investigates the possibility of applying the Keystroke-Level Model to the modeling and optimization of manual map digitizing tasks.
We tested the suitability of the model for manual digitizing at a national mapping agency and determined unit tasks with their performance times.
The paper describes the design of an experiment to measure performance times under production conditions.
Two new keystroke level operators are defined for manual digitizing.
The use and suitability of the model are demonstrated by analyzing the differences between predicted and measured performance times for unit tasks.
The results confirm the applicability and the economic importance of keystroke-level analyses of real world tasks.
For a detailed survey of these and other applications see .
The tasks detected in these areas were modeled by the GOMS Model, describing the Goals, Operators, Methods and Selection rules used to solve a task.
The Keystroke-Level Model served to analyze and predict execution times of tasks.
These times could generally be predicted with high accuracy, suggesting that the model could also be applied to more complex areas.
So far, one case study of a user interface for graphical design, VLSI design on the ICARUS computer, has been documented .
Command execution times have been predicted by the Keystroke-Level Model with about 16% error.
While GOMS and keystroke-level analyses have been criticized for ignoring important cognitive aspects, the work reported here is motivated by the substantial amount of routine operations being performed in non-trivial application areas.
The hypothesis to be tested--that the Keystroke-Level Model is applicable to tasks occurring in manual map digitizing--has great economic potential.
Manual map digitizing is one of the primary methods of making geographic  data accessible to digital processing .
The acquisition, management, analysis and presentation of such digital geographic data are done with Geographic Information Systems  .
Our case study focused transforming analog map data to digital form at a national mapping agency that establishes a countrywide cadastral database.
About 260,000 mapsheets have to be digitized on 150 workstations.
The Keystroke-Level Model provides a simple method to predict the time expert users need to perform given tasks.
The central idea of the model is that the time it takes experts to do a task on an interactive system is determined by the time needed to perform the keystrokes.
Therefore, one can write down the execution method used for a task, count the number of keystrokes required, and multiply by the time a single keystroke takes to get the total time.
Obviously, other elementary operations must be added to the model.
These operations are pointing, homing the hand, mental preparation and system response times .
43,000 maps  have been digitized during the first four years of the project.
The slow and expensive nature of manual digitizing processes and the lack of reliable, fully automated alternatives require the investigation of the user interface characteristics for digitizing tasks .
The paper presents the methods and tasks for manual map digitizing and an experiment for measuring execution times under production conditions.
Two modified keystroke level operators for manual map digitizing are described and measured performance times for digitizing tasks are compared with model predictions.
Since the Keystroke-Level Model can only predict execution times, a second requirement is to find tasks whose acquisition times can be neglected.
This reduced the total to 38 tasks that represent some 50% of all possible digitizing tasks, but enable users to perform 90 to 95% of all observed operations.
The eliminated tasks were mostly those used for error correction.
A third requirement is the subdivision of all tasks into standardized sequences of keystroke-level actions, called unit tasks.
Such action sequences were determined for all 38 tasks.
An example of a digitizing task is Continuous boundary digitizing where vertices in a parcel boundary are digitized .
For this task the following action sequence was detected: Pointing to a vertex P Digitizing the vertex K The keystroke-level action sequences determined for each task neglect the mental preparation operator M. Adding these operators and defining the resulting sequences as unit tasks was done in the analysis of the experiment described below.
The goal of manual map digitizing is to build up digital geographic data bases.
In the case of the mapping agency in this study, analog cadastral maps are scanned and the scanned images are digitized on screen , using a 16-button cursor on a digitizing pad as input device.
The result of manually digitizing a part of a cadastral map is shown in figure 1.
A requirement when applying the Keystroke-Level Model to manual map digitizing is the subdivision of digitizing operations into error-free repetitive tasks at the keystroke level.
In total, 80 tasks were identified for digitizing parcel boundaries, houses, delineation lines, parcel identifiers, and symbols.
The measurements of performance times were done entirely under production conditions at the mapping agency.
Expert users were observed at their regular work places using their normal hard- and software configuration.
The agency requested that the experiment should not interfere with the production process.
This represented a difference to other experiments done under laboratory conditions .
The agency uses a digitizing program based on AUTOCADTM, installed on a high end personal computer.
The input device is a standard high resolution digitizing tablet with a 16 button cursor.
Digitizing itself is done on a 21" color monitor.
The idea of only videotaping the actions was dismissed, because the time spent on each action is too short to accurately recognize its start and end.
Also, the number of performed actions would be too high for an efficient video analysis.
Instead, a program to record the measurement data was written.
It had to be set up so that it did not interfere with AUTOCADTM and the overall digitizing process.
The program was installed on a separate laptop computer, connected to the cable between the digitizing pad and the PC running AUTOCADTM .
The program recorded each signal sent by a button press on the cursor together with a time stamp.
For the first four users, the video camera was focused on the digitizing pad and the keyboard during the whole observation time.
For the other three users, the camera was focused on the screen while they were digitizing lines.
This allowed us to determine the times for the system response operator R and to examine the times for pointing P and mental preparation M.
The analysis of the experimental data started out by verifying whether the existing Keystroke-Level Model operators can be used for manual map digitizing.
Two additional operators were introduced.
After separating action sequences and defining the unit tasks for manual map digitizing the Keystroke-Level Model was validated as a whole.
The value for the keying operator K given by Card et al.
The time for the pointing operator P was estimated as tP = 1.16 sec with standard deviation  = 0.26 sec from 50 occurrences.
These times show good correspondence with the times given in .
Due to our small numbers of occurrences the times of Card et al.
The time for the mental preparation operator M was not estimated independently, because of its ill-defined nature.
We used the standard heuristic rules  to define unit tasks with this operator.
When comparing predicted and measured performance times  these rules and the given time tM = 1.35 were found to provide good matches.
For the system response operator R two times were determined for three different actions.
The first operator, R1 was detected both for selecting a new function from the command menu and for building up a zoom/pan window.
For both these system times the mean time was calculated to be t R1 = 0.25 sec .
The second operator, R2, stands for the time it takes the system to close automatically a polygon .
To show this effect, the task from Figure 2, Continuous boundary digitizing as performed by a particular user is used.
In analyzing this task, the videotape and the observation records showed that screen manipulation functions done in between digitizing tasks were affecting performance times.
Thus, the task was split into two new tasks.
The first, called T-4, was performed normally, while the second, called T-8, differed in that the users had to reorient themselves on the screen after a screen manipulation function .
Therefore, an additional operator M for mental preparing was postulated.
The task T-4 corresponded to the task Continuous boundary digitizing with the previously given keystroke level operators.
Using the standard operator P and the measured t KC = 0.28 sec for this particular user, the total performance time for this task is predicted to be: Texecute = tP + t KC = 1.38 sec A mean value of 1.25 sec  was calculated from the observations resulting in a difference of 9% between predicted and measured times.
Based on our observations and on an analysis of the histogram for this task , we assumed that values larger than 2.4 sec belong to another task where the user needs a second pointing action PS to digitize a vertex.
This assumption will be verified below by analyzing the task times from all users.
Two additional operators were introduced for manual map digitizing.
They model application specific deviations from the pointing and keying times of Card et al.
The operator PS stands for two special pointing actions.
The first pointing action is used if a vertex cannot be detected immediately on the scanned original.
Users are then extending the pointing line to find the vertex where the line breaks .
After detecting it, a second pointing to the vertex itself is necessary.
According to Fitts's Law the second pointing time is shorter because of the shorter pointing distance.
The other new pointing action occurs when using a snap function to point at an already digitized vertex.
Using the snap function increases the target size.
Therefore the pointing time is reduced, again following Fitts's Law.
The other new operator KC defines a button press on the 16 button cursor.
For the seven observed users different times for a keystroke on the keyboard tK and a button press on the cursor t KC were measured.
The times range from 0.28 to 0.47 sec, differing by as much as a factor of two for some users.
Analyzing all users, the mean values for both operators were estimated with tK = 0.40 sec and t KC = 0.39 sec.
Since they are not significantly different, we assume both operators take 0.40 sec .
The task T-8 is Continuous boundary digitizing plus a mental operator M for reorientation after a screen manipulation function .
For this task, a modified sequence of actions must be given.
The relevant operators from the Keystroke-Level Model are: Orientation on the screen M Pointing to a vertex P Digitizing the vertex KC The total performance time for this task is predicted to be: Texecute = tM + tP + t KC = 2.73 sec The distribution function for task T-8 is also given in Figure 5.
The mean value to perform this task was calculated to 2.98 sec , referring to an approximate normal distribution between 2.0 and 4.0 sec.
Thus, the difference between predicted and measured performance times was again 9%.
Verifying the assumption about multiple action sequences for certain tasks, the three major tasks done by all users were analyzed.
These tasks are Continuous boundary digitizing, Continuous boundary digitizing and defining a vertex as control point and a zoom/pan task.
For these tasks the distribution functions looked very similar.
The histogram of task T-4 is given in figure 6.
The first action sequence for this task was modeled as P, K with a predicted performance time of 1.5 sec.
Assuming a normal distribution between 0.60 and 2.4 sec  for this action sequence, and subtracting it from the observations,
When analyzing this new distribution, a second action sequence was detected which corresponded to the first one plus the operator for a second pointing action.
Thus, the new task was modeled as P, PS, K with a predicted performance time of 2.35 sec.
In the same way, yet another action sequence was detected for this task.
It corresponds to the second one plus a mental operator M for finding a vertex.
Thus, the new action sequence was P, M, PS, K combined for all users.
The other two major tasks were analyzed in the same way.
Each could be subdivided into two different action sequences.
The extension of a single unit task distribution was taken to be 3 for each action sequence, in agreement with .
As these results confirmed those for the first task, we assume that action sequences can in general be separated with this procedure.
Further details on the statistical analyses are contained in .
Separating different action sequences for the 38 digitizing tasks and defining them as unit tasks resulted in 97 unit tasks.
About 85% of these unit tasks were performed without errors.
For all these errorfree unit tasks, mean values and standard deviations of measured performance times were determined.
The predicted performance times were calculated using the known keystroke level operators as well as the new operators PS for a shorter pointing action and KC for a button press on the cursor.
These tasks represent 83% of all defined unit tasks and 63% of all recorded tasks.
In this comparison of the data for all users, the operator K with tK = 0.40 sec was used both for a keystroke on the keyboard and for a button press on the cursor.
Detailed comparisons for each user can be found in .
This will indicate how detailed application knowledge in conjunction with careful modeling and analysis is able both to validate the Keystroke-Level Model and to support the improvement of user interfaces in real world applications.
For three boundary digitizing tasks mental operators M had to be added because of user decision times.
For the task T-3 the operator M models the decision where to start digitizing using the snap function for an already digitized vertex.
The M in task T-5 stands for deciding which vertex is digitized next if there are several possibilities .
In task T-14 M stands for deciding whether digitizing should be ended or not.
Task T-19 describes the digitizing of lines other than boundaries.
Table 2 shows that the predicted times match the measured performance times with an average difference of 5% and a maximum difference of 11%.
Comparing these results with those from other published keystroke-level analyses clearly establishes that the Keystroke-Level Model is suitable for a practically important graphics application like manual map digitizing.
The data driven process of our unit task definitions, however, suggests some caution when comparing predicted and measured performance times.
The discussion of individual results given in table 2 will be limited to a few selected highlights.
Therefore, the lines are digitized less accurately, which is modeled using the second pointing operator PS.
Some interesting observations can be made for zoom/pan tasks.
The tasks T-23 and T-24 are used for a simple zooming task.
Analyzing the sequence of actions revealed the use of a complicated method that explains the need for mental preparation: A window showing zoom and pan commands is opened, then the zoom command is selected, reducing or enlarging the view centered on the screen.
Some users need mental preparation M again .
To show how tasks can be optimized using the KeystrokeLevel Model, we analyze a modified zoom/pan task.
In task T-23 the command to open a window is pressing the button 9 on the cursor .
Then, a system time R1 is required to open the window.
Choosing the zoom or pan command is done by pointing P and another button press K. To redraw the modified view centered on the screen, a system time R1 is needed again.
The performance time for this task is thus predicted with 2.40 sec .
An optimized sequence would need a button press K to select the zoom or pan command and the system time R1 for redrawing.
Some of the 16 buttons would have to be programmed for choosing these commands.
The resulting performance time is predicted to be 0.65 sec.
The cost of digitizing for the entire cadastral map of Austria will be about $ 12 M. Approximately three quarters of the total digitizing time are spent on the observed routine tasks.
The above zoom/pan task was found to be used during roughly 11% of that time, costing around $ 1 M. Optimizing this task alone in the described manner, reducing its performance time by 73%, would consequently save costs about $ 730,000.
This figure confirms the motivation for this work, i.e., that keystrokelevel analyses hold great economic potential for routine operations performed in many application areas beyond text editing.
It also concurs with a more systematic optimization study based on a critical path and GOMS analysis of toll and assistance operator tasks .
We conclude that the Keystroke-Level Model retains its appeal even for complex applications that may otherwise require more sophisticated models for overall design and analysis .
In practice these applications often contain substantial amounts of routine operations and are therefore candidates for keystroke-level analyses.
Also, the high labor costs involved often make such analyses economically attractive.
The study produced a wealth of observation data  and suggests a broad range of further analyses.
While our validation of the model focused on average performance times for all observed users, studies of individual differences and their patterns seem to be indicated.
Also, recent extensions of the model to accommodate parallel actions  could be applied, for example, to two-handed input from cursor and keyboard.
Finally, the study confirmed a need  for a better understanding of probability density functions for task performance times.
This study investigated routine tasks in manual map digitizing.
The experimental data were collected in a major national digital mapping project and analyzed with the Keystroke-Level Model.
The main goal was to establish the suitability of this model for manual digitizing operations.
Our results indicate clearly that the Keystroke-Level Model is applicable to manual map digitizing.
This holds true under the usual restrictions to error-free, routinely performed tasks and with the definition of two additional operators for special pointing and keying actions.
We found an average of 5% and a maximum of 11% difference between predicted and measured task performance times.
The Keystroke-Level operator times of Card et al.
Multiple intertwined action sequences for certain tasks could be successfully separated combining application knowledge about task semantics  with the conventional rules for placing mental operators.
Furthermore, considerable optimization potential was found and demonstrated for the example case of a zoom and pan function for which performance time can theoretically be reduced by 73%.
Card, S.K., Moran, T.P., & Newell, A., The Keystroke-Level Model for User Performance Time with Interactive Systems.
Card, S.K., Moran, T.P., & Newell, A., The Psychology of Human-Computer Interaction.
Lawrence Erlbaum Associates, Hillsdale, New Jersey, 1983.
Frank, A.U., The use of Geographical Information Systems: The user interface is the system.
In Medickij-Scott, D. & Hearnshaw, H.
Gray, W.D., John, B.E., & Atwood, M.E., The precise of project Ernestine or an overview of a validation of GOMS.
In Proceedings of ACM CHI'92 Conference on Human Factors in Computing Systems, 1992, pp.
Haunold, P. & Kuhn, W., A Keystroke Level Analysis of Manual Map Digitizing.
Haunold, P., A keystroke level analysis of manual map digitizing .
John, B.E., Extensions of GOMS Analyses to Expert Performance Requiring Perception of Dynamic Visual and Auditory Information.
In Proceedings of ACM CHI'90 Conference on Human Factors in Computing Systems, 1990, pp.
In Proceedings of ACM CHI'92 Conference on Human Factors in Computing Systems, 1992, pp.
Kuhn, W., Editing Spatial Relations.
In Proceedings of Fourth International Symposium on Spatial Data Handling , 1990, pp.
