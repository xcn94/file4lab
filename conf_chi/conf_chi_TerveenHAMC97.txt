ABSTRACT As people participate in the thousands of global conversations that comprise Usenet news, one thing they do is post their opinions of web resources.
Phoaks is a collaborative filtering system that continuously parses, classifies, abstracts and tallies those opinions.
About 3,500 users per day consult Phoaks web pages that reflect the results.
Phoaks also features a general architecture for building similar collaborative filtering interfaces to We report here on the Phoaks conversational data.
Keywords human-computer interaction, human interface, computersupported cooperative work, organizational computing, social filtering, collaborative filtering, data mining, resource discovery, World Wide Web, Usenet, Netnews.
INTRODUCTION Global online conversations, such as Usenet newsgroups and public or corporate mailing lists, contain significant information.
However, the useful information may be thinly scattered over hundreds or thousands of high volume message streams.
A favored analogy for complaining about this situation is to speak of a low signal conversations is an interesting problem because finding high quality, topically relevant URLs is difficult, and because it is plausible that people participating in an online conversation about a topic will exchange opinions about online resources for that topic.
Usenet is an interesting and challenging research arena because of its scale , fast turnover, lack of structure , and the wildly varying quality of information.
In pursuit of our research goal, we are committed to a field research methodology, We believe that only by confronting the scale and messiness of the real world  can we discover the important problems, let alone begin to craft solutions.
Therefore, Phoaks processes about 100,000 netnews messages in more than 1500 newsgroups each day, looking for mentions of web resources .
The web site went live in February 1996.
As of the end of December 1996, it had been accessed by about 300,000 users from 100 nations, and we have received more than 600 feedback messages.
The utility of the feedback and access data has confirmed the value of our methodology.
We have made dozens of changes to our system and have learned interesting general lessons about Phoaks has creating interfaces to conversational data.
One of the primary results of our experience was that we generalized the system architecture, moving beyond a "one of a kind" system toward a general framework for creating interfaces to conversational data.
We realized support for rapid development, analysis, and continuous modification was crucial.
Further, messages from people interested in collaborating with us and our own continuing investigation made us aware of many problems similar to that of mining recommended web resources from netnews.
Examples include recognizing FAQ postings Frequently Asked Questions, pointers to educational resources recommended by expert teachers, commercial brands,
Therefore, we product references, stock symbols, redesigned the Phoaks architecture as a generic engine for mining, processing and presenting conversational data that can be configured for specific tasks.
We also evolved a set of tools to aid designers in creating, analyzing, and iterating the system and interface design.
In the remainder of the paper, we first articulate the principles of the Phoaks approach and discuss how they relate to other research efforts; we then describe the Phoaks URL recommendation interface, illustrating our principles for collaborative filtering interfaces; next we describe the system architecture, motivating its design features in terms of our experience and principles; finally, we discuss general lessons we have learned about interfaces to conversational data from Phoaks users.
Phoaks approach is aligned with this finding.
Other systems are exploring reuse of conversational data.
Recently, Marx and Schmandt  reported on a personalized and dynamic system  that selects personal email message content for reuse in computational support for ongoing daily activities.
Ackerman and McDonald  describe a new generation of Answer Garden technology which promotes the reuse of corporate knowledge for technical and other kinds of support.
Reusing recommendations leads to a type of virtual collaboration between the producers and consumem of the recommendations.
This computer-mediated collaboration offers some of the benefits of collaboration -- e.g., ef%ciently gaining from the experience and expertise of others -- without requiring social relationships or explicit communication.
However, users of collaborative filtering systems often want to communicate to develop further the mutual interests they have discovered .
Apropos this desire and the possibilities inherent in the recommendation mining style of collaborative filtering, the Phoaks design strikes a balance between participants' needs for privacy and desires for connectedness.
Traditional message filtering systems, such as SIFT , GroupLens , URN  and Infoscope , recommend a subset of messages they judge human readers will find relevant.
Phoaks is in a different tradition, that of computer-mediated collaborative filtering systems ; its job is to recognize, manipulate, store and present content that occurs first in on-line conversational streams.
Three design principles distinguish it from other computer-mediated collaborative filtering systems: role specialization, reuse and recontextualization.
We expect that these principles will be useful for future Phoaks-like collaborative filtering systems.
Many collaborative filtering systems, particularly ratingsbased systems  are built upon the assumption of role u.niformify.They expect all users to do the same types of work and share the same types of benefits: for example, in the case of ratings-based systems, everyone rates objects of interest.
Yet there is evidence that people naturally prefer to play different roles in the information ecology ; in particular, only a minority of people expend the effort of judging information and volunteering their opinions to others.
Independently, we have observed such role specialization in Netnews ; authors volunteer long lists of recommended web resources at a stable but extremely low rate.
Phoaks assumes that the roles of recommendation provider and recommendation recipient are specialized and different.
Phoaks reuses recommendations from existing online conversations.
This reuse requires no extra work from providers and no judgments of information quality from Phoaks users.
What qualities make for successful reuse of conversational data?
Whittaker  evaluated the factors that affect use of Lotus Despite users' NotesTM as an organizational memory.
However, these systems present the pointers as decontextualized lists.
In contrast, Phoaks pays a great deal of attention to context and builds the human interface upon it .
As we discuss in detail below, Phoaks selects and orders URLs to present by computing over contextual information and includes selected contextual information as a resource for evaluating recommended URLs.
The first Phoaks application attacks the problem of extracting recommendations of Web resources  from Usenet messages and creating interfaces to the recommendation data.
It builds on work  that provides empirical evidence that Usenet messages are a useful source of resource recommendations.
Figure 1 illustrates the final result.
It shows the intersection between resources recommended on Usenet  and resources in Since FAQs newsgroup FAQs for 313 newsgroups.
The X axis of the graph in Figure 1 shows resources  as ranked from 1 to 20 by the number-of-recommenders measure, and the Y axis shows the percentage of resources from each rank that are present in the related FAQ.
For example, 29% of the 313 top ranked resources, 22'ZOof the 313 second ranked resources, and 19% of the 313 third ranked resources occur in the relevant FAQ.
The graph shows that the more distinct recommenders a resource has, the more likely it is to appear in the FAQ.
Thus, the number-of-recommenders measure is consistent with human judgments of quality.
Phoaks searches netnews for mentions of URLs, finding about 39K each day.
It applies rules that categorize each mention .
For our purposes, the most important categories are recommendations and contact pages, since these are the resources we want to present in our interface.
Phoaks maintains a database of recommended resources and associated contextual information, and generates web pages as an interface to the recommendation data.
We now discuss the interface in a bit more detail, emphasizing how it illustrates the design principles of role specialization, reuse, and  recontextualization.
First, Phoaks allows people to play two distinct roles, producers and consumers of recommendations.
Second, URL recommendations are reused, i.e., extracted from netnews messages and redistributed.
Reuse raises both the opportunity for new connections and the danger of privacy violation; Phoaks has to balance the two.
Finally, computing with and presenting contextual information is the very foundation of the Phoaks interface.
Phoaks applies fairly complex rules to the textual context that surrounds URLs to determine which ones are being recommended; further, the interface ranks resources by the number of distinct recommenders.
In addition to these computations on context, the Phoaks interface also presents contextual information directly; for example, users can find out who the recommenders for a resource are and other resources they recommended to the newsgroup being viewed.
This is useful in at least two ways.
First, regular readers of a newsgroup are likely to know who else on the newsgroup has opinions that they trust.
Thus, they can investigate just those resources that have been recommended by these people.
Second, after investigating and liking a resource, one can find other resources recommended by the people who recommended that resource.
Phoaks limits the scope of this feature to work within a single newsgroup.
So, if a poster recommends web resources in two different groups, say talk.
That is, we do not allow name searches, so it is impossible to construct a comprehensive view of a person's posting behavior.
We include hyperlinks to recommender's personal home pages  to allow readers to find out more about recommenders.
However, we chose not to include "maiho:" links because we thought that by default people who participate in a newsgroup ought not to be easily contacted by people who are not part of the group.
Users also can access opinions about a resource as expressed in the surrounding message context.
This is especially important because our classification rules use only limited semantic information.
Another important benefit is that a message may mention many resources, some of which did not make it into our summary , yet users still may visit them when they encounter them in the message context.
Finally, users can see the timeliness of a resource within a community.
A "histogram" of shaded boxes is displayed for each resource, with one box for each distinct recommender -- the more recent the recommendation, the darker the box.
In developing Phoaks, we faced two hard problems; indeed these are key problems for any conversational data First, algorithms must be developed to interface.
Second, interfaces must be created that present the information effectively.
Making progress on these problems requires constant iteration of both algorithms and interface, based on user feedback and data analysis.
Generality is the first goal of the Phoaks architecture.
It is parametrized to allow searching, categorization, and disposition functions for a particular task to be plugged in.
Robustness is a second goal.
Since Phoaks works in a networked environment and processes unstructured and uncontrolled conversational data, it must tolerate and recover from ill-fomned data, network errors, and system crashes.
Portability is a final goal.
We want other people to be able to use Phoaks to create conversational data interfaces; therefore, it does not rely on any commercial software packages or architecture-specific features, so it can be installed and run on any UNIX platform, unencumbered by commercial licenses.
Phoaks can search for literal strings or regular expressions.
It can search in either the message header , the message body, or both.
For example, message bodies are searched for URL recommendations, and the subject line is searched for FAQs.
Phoaks can search either through an arbitrary specified directory structure  or set of files.
It keeps track of messages already processed, so it only examines new messages.
When searching netnews messages, it is aware of cross-posting, so it processes each message only once.
This is significant, since we have found that the average message is cross-posted to 4 different newsgroups.
When Phoaks detects a hit -- e.g.
The Phoaks designer can specify which header lines and body lines to include.
Rules are written in terms of syntactic features of the message, such as the email address of the message poster, line number of the hit, keywords occurring near the hit, etc.
Thus, features must be extracted from the contextual data before the rules can apply.
Developing a good set of categorization rules is a difficult, intrinsically y iterative problem.
For example, consider the message signature, a key concept for classifying URLs.
How can a signature be recognized automatically?
Features like closeness to the end of the message, separators , and clue words like the message poster's email address or literals like "homepage", "WWW",`Lurl", "email" all are helpful.
Rule design begins with an examination of a large set of messages.
The rules then must be run, data gathered, and their accuracy judged.
Real conversational data always hold surprises because there is no formal, agreed upon structure.
For example, we might find new ways of separating the message body from the signature.
We might find new clue words.
And we might discover complications with the "closeness to the end' feature; for example, what if one message replies to another, and includes the repliedto message as a quote at the end?
Now the signature is not near the end.
Currently, Phoaks rules cover hundreds of conditions Ieading to 16 categories of URL mentions.
To determine the accuracy of a set of rules, human judges independently classi~ some data on which the rules have been mn, and the human judgments serve as a baseline for judging rule accuracy.
Phoaks provides several tools to support testing rule accuracy.
By default, Phoaks selects a random subset of messages during each run.
It writes the messages, along with auxiliary files that contain each hit , the computed category, and the values of all the features.
A separate off-line program presents the hit and surrounding contextual data to a human judge for categorization.
Another program collects the judgments of each person who judged the data, computes the inter-rater reliability , and finally computes the precision and recall of the machine's performance, using the data that the human judges agreed on as the benchmark.
Phoaks can be run repeatedly on the same set of messages.
When a problem is found, this makes it easy to modify the rules and rerun them on the same data to see if the problem has been solved.
Of course, true validation of rules requires that they be run on data different from that on which they were developed.
After categorizing each hit in a message record, Phoaks performs the specified disposition.
The disposition is typically task-specific, although storing information in a database is likely to be done in most cases.
For the URL recommendation application, one hard problem is determining when two URLs or two message posters are the same.
The same URL may be referred to in textually different ways, such as with or without the default port or a trailing "r', or with inconsistent capitalization.
The same person may post from different computers in the same domain or may have several different email addresses, and one person using a single email address may change his or her nickname.
Another problem involves fetching URL content.
We fetch the content for three reasons.
First, this is a way to verify that the URL is valid .
Second, we extract the title to use in our presentation of the URL.
Finally, we store a reduced representation  of the content, which we use to create indices for our web site and to facilitate user search for relevant newsgroups.
The fetching process can tolerate or recover from failures such as ill-formed I-ll14L, server unavailability, network downtime, and the crash of the machine Phoaks is running These are all fairly common occurrences for a on.
This pattern was true both for access to our site in general and for specific newsgroups.
However, including message context had a significant price: it made our pages large, thus increasing download time which matters to human users.
A goal of our current design was to decrease page size for humans but still retain the indexing advantage via spiders.
To decrease page size, we created separate message context pages.
Keeping our pages highly indexed required more work.
Then, if a resource summary page is requested, we return special indexing text created by concatenating the reduced representation of the content of all the pages that the resource summary page links to.
Since Phoaks pages serve as link pages -- people visit them to find content that they actually are interested in -- this is an accurate representation of the content users can access via any particular Phoaks page.
One other aspect of the cgi script's response to spiders is that it lets us control which of our pages do and do not get indexed.
Specifically, we do not let the pages for individual posters get indexed.
This solves a problem with our earlier design -- some people complained to us because a Phoaks page was indexed more highly than their personal home page , and other people did not want to show up in our pages at all.
Furthermore, search engines could be used to correlate poster activity across newsgroups via information provided on Phoaks.
We had inadvertently violated one of our design principles, respecting the privacy concerns of the producers of conversational data.
We designed a simple page definition language, which can be viewed as an extension to HTML.
HTML code is augmented with iteration and conditional constructs and a useful set of special variables.
The language makes it very simple to describe, for example, a resource summary page as an iteration over all the recommended resources for a newsgroup .
All pages are dynamically pages are pre-generated cached after generation.
We designed a cgi script that responds to requests for Phoaks pages.
A page request is a query URL.
We have a well-defined query language of attributes  and legal values .
When a page is requested, the script checks to see if the page has been cached.
If so, it returns the page.
If not, the page is generated, cached, and then returned.
By analyzing access to the Phoaks web, we found that about 75% of the pages accessed are resource summary or index pages.
Therefore, we run queries to generate and precache these pages fresh every time we complete a run through netnews and update our databases.
Thus, the most accessed pages will already exist whenever they are requested.
The query language also supports programmatic access: a program can construct the proper query URL to pass to our server.
Given the proper query attribute, Phoaks returns the results as simple, structured text .
The intent is to allow others to experiment with creating their own interfaces to Phoaks data.
We have implemented forms that lets users add links, judge resources as being good or off-topic, and submit URL change notices; a few users give us each type of feedback daily.
In effect, we treat the automatically constructed pages as a rough draft that we expect human experts to help refine.
This is a kind of participatory design  of content.
In our original design, resource summary pages included message context, excerpts from up to 50 messages that mentioned the URLs contained on the page.
We did this to gain the significant advantage of popular search engine spiders indexing our pages richly.
Currently some Alta Vista queries contain Phoaks pages as the first and/or second returned page, for example: "Stephen King", "Rush Limbaugh', "country western music", "pc hardware chips".
We responded to this concern by modifying the language used in the interface to try to minimize the impression of competition among people and URLS.
Second, we confirmed the danger of labeling or describing people's activity.
In particular, in our original design wc described people as "recommenders" and we referred to We used these terms, of "recommended resources".
However, even though our rules have good precision, certain rare false positive errors have very For example, a person posted a message high cost.
When this person found the relevant Phoaks page and saw that he was described as a "recommender" of the URL, he was understandably upset.
We responded to this problem by replacing terms like "recommend" with more neutral terms like "post".
In the newest version of the system, we also have added extensive help text that explains our terms and makes it clear that posting a resource does not always count as an endorsement of that resource.
We also point out that going to the message context for a resource will give some indication of what the poster was saying about it.
This raises a general issue in the design of interfaces to conversational data: does a system like Phoaks offer a faithful history of a conversation, or does it create a more abstract memory?
For example, do the people who participate in soe.culture.african-american want the URL of a white supremacist group to show up in Phoaks when it shows up in netnews?
Does it matter whether it was posted by a member of the community who was condemning it, or by an outsider who was attacking the community by posting it?
These are the type of thorny issues that any conversational data interface face, and that can only be addressed through dialogue with the producers and users of the conversational data.
To conclude, Phoaks is an experimental system for building collaborative filtering interfaces to conversational data.
The results of the experiment so far are encouraging.
Usenet news messages are a rich source of URL recommendations, and the recommendations can be extracted fairly accurately and efficiently and ranked automatically.
Our web site summarizes recommendations and associated contextual information for about 1500 newsgroups, and, as of December 1996, attracted about 3,500 users per day and generally positive user feedback.
Ackerman, M. and McDonald, D., Answer Garden 2: Merging Organizational Memory with Collaborative Help.
To summarize the scope of the Phoaks architecture, we briefly describe the steps involved in creating a new conversational data interface system.
Stream selection -- specifying the source of the conversational data to be processed; for example, its location in a filesystem.
Feedback from users has taught us several important lessons about creating interfaces to conversational data.
In general, visitors find the Phoaks web site useful.
For example, two hundred other sites now point at Phoaks.
First, a few people expressed concern that making certain information explicit could harm the social fabric of a community.
For example, in our original design we used language like the "top 10" resources and the "top contributors" to a newsgroup.
User models: Theory, method and practice.
Brothers, L., Hollan, J., Nielsen, J., Stornetta, S., Abney, S., Furnas, G., and Littman, M., Supporting informal communication via ephemeral interest groups.
Fischer, G. and Stevens, C. Information Access in Complex, Poorly Structured Information Spaces.
Grudin, J., Social Evaluation of the User Interface: Who Does the Work and Who Gets the BENEFIT?
Burke, R., Martin, C., and Lytinen, S. FAQ Finder: A Case-Based Approach to Knowledge Navigation.
In AAAI Symposium on Information Heterogeneous, Distributed Gathering in Environments.
L. G., Hill, W.C., Amento, B., McDonald, D., and Creter, J. Phoaks: A System for Recognizing and Sharing Recommendations.
To appear in Communications of the ACM, special issue on recommender systems, April 1997.
S. Electronic Collaboration: An Empirical Evaluation of Factors Affecting Mediated Group Interaction.
