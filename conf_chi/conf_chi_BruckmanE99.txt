Should programming languages use natural-language-like syntax?
What sorts of errors do novice programmers make?
Does using a naturallanguage-like programming language lead to user errors?
In this study, we read the entire online interactions of sixteen children who issued a total of 35,047 commands on MOOSE Crossing, an educational MUD for children, We counted and categorized the errors made.
A total d 2,970 errors were observed.
We define "natural-language errors" as those errors in which the user failed to distinguish between English and code, issuing an incorrect command that was more English-like than the correct one.
A total of 314 natural-language errors were observed.
In most of those errors, the child was able to correct the problem either easily  or with some effort .
Natural-language errors were divided into five categories.
In order from most to least frequent, they are: syntax errors, guessing a command name by supplying an arbitrary English word, literal interpretation of metaphor, assuming the system is keeping more state information than is actually the case, and errors of operator precedence and combination.
We believe that these error rates are within acceptable limits, and conclude that leveraging users' natural-language knowledge is for many applications an effective strategy for designing end-user-programming languages.
Of course a f&v years later a few people admitted that maybe you could use assembly language.
But the entire establishment was firmly convinced that the only way to write an efficient program was in octal.
They totally forgot what happened to me when I joined EckertMauchly.
They were building BINAC, a binary cohputer.
We programmed it in octal.
Thinking I was still a mathematician, I taught myself to add, subtract, multiply, and even divide in octal.
I was really good, until the end of the month, and then my checkbook didn't balance!
Afler several evenings of work he informed me that at intervals I had subtracted in octal.
And I faced the major problem of living in two different worlds.
That may have been one of the things that sent me to get rid of octal as far as possible."
Computers were astronomically expensive, and many argued that their resources shouldn't be squandered to cater to the weakness of human programmers.
If coding in octal was time-consuming or error-prone, the coders were simply not working hard enough.
It took time to recognize that those delays and errors are inevitable, and better accommodating the needs of the human programmer is not indulgent coddling but simply good business sense.
Today, computers are no longer so expensive, but elements of the underlying attitude remain: technologies that are too user-friendly are often denigrated as "not serious."
In 1959, a committee with representatives from industry and government was formed to design a "Common Business Language"-what eventually became COBOL.
At one of their first meetings, they made a list of desired characteristics of the new language.
Since the very beginning of computing, the use of naturallanguage-like syntax for programming languages has been controversial.
In fact, the use of words of any kind was initially hotly debated.
Admiral Grace Murray Hopper, speaking at the history of programming languages conference in 1978, told this story:
Permission to make digital or hard topics of all or part ofthis work fix personal or classroom use is granted without fee provided that topics are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation w the first page.
To copy othcrwisc, to republish, to post on servers or to rcdisuihutc to lists.
The COBOL committee was concerned primarily with manipulability-in other words, expressive power for mathematical applications.
Another key issue and the primary concern of this paper is Zeamability and the slippery slope of natural language: will novice programmers be able to draw a distinction between English and code?
Will they try to insert arbitrary English sentences into programs?
More than twenty-five years after the design of COBOL, the designers of Hypertalk had similar goals and strategies.
When asked about the language ancestors aE Hypertalk, designer Bill Atkinson replied "The first one is English.
I really tried to make it English-like" .
Ted Kaehler, another member of the Hypertalk design team, comments that "One principle was `reads as English, but does not write as English.'
Like an ordinary programming language, it depends on exactly the right syntax and terms" .
English-like scripting languages are becoming more common, but few empirical studies have addressed the pros and cons of this design approach.
Work on the MOOSE programming language began in mid-1993, and it has been in public use since October 1995.
The language was designed for one restricted application: for children to create places, creatures, and other objects that have behaviors in a text-based multiuser virtual world .
The fundamental goal is for children to learn reading, writing, and computer programming through the process of creating such objects .
This is an unusual design goal: the process of programming and what is learned from that process is more important than the product .
Another significant influence is Logo, the first programming language designed explicitly for kids .
The designers* deliberately tried to make the MOOSE language as natural-language-like as possible while ' "MUD" stands for "Multi-User Dungeon."
The first MUDS were violent adventure games .
The following is a MOOSE program written by Wendy  3, one of the randomly selected subjects of this study.
The program choreographs a sequence of events as a magic.al book is opened: on read blue book tell context "You take an old and musty blue book off of the shelf.
As you blow the dust off the cover, a symbol painted in gold appears.
It resembles a circle with a - in the middle" + ".
The dust swirls up in a flurry of gray mysts4.
A in gold on the cover svmbol imprinted emerges.
As you peer inside, you see a life like painting of a brook behind a poppy field and infront of an apple orchard...." announce-all-but context context's psc + ' hesitantly opens the strange book."
The syntax of a basic MOOSE command is a verb followed by some number of arguments.
Arguments can be string constants, numbers, or references to objects.
Quoting of strings is optional as long as those strings don't contain words that function as logical operators .
The environment includes both a command-line language and scripting language, which were designed to be as nearly identical as possible.
This allows the learner to try most commands out at the command line, and later use them in programs.
The language was designed with eight basic heuristics: 1.
Have a gently-sloping learning curve.
Prefer intuitive simplicity over formal elegance.
Avoid non-alphanumeric characters wherever possible.
Make essential information visible and easily changeable.
It's OK to have limited functionality.
Hide nasty things under the bed.
1131 Are these heuristics useful?
Of particular interest is rule four, "Leverage naturallanguage knowledge."
The designers felt that a naturallanguage-like programming language would increase accessibility to young children, However, we worried about the slippery slope of natural language: would children understand the differences between MOOSE and English?
This paper attempts to address that question systematically.
When you run this program by typing "read blue book," you are magically transported to a babbling brook.
This is what you see: You take an old and musty blue book off of the As you blow the dust off the cover, a shelf.
It resembles a circle with a - in the middle.
As you peer inside, you see a life like painting of a brook behind a poppy field and infront of an apple orchard....  A strong wind blows in from the open windows.
As the breeze frolicks above the flowers, the dance and sway like the sea.
Behind you is a forest of apple trees, pear trees, orange and peach trees.Underneath them is a trees, carpet of green green moss, soft and springy.
Beside you is a babbling brook which giggles and laughs as it slides down over the sMOOth pebbles.
As you stick your foot in you are suprised.
This stream is not cold like all the others, but warm, and soothing.
Tiny mare's tails walts across the sky.Can this last forever?
A bright sunny day with few clouds.
Note that this paper addresses the risks and possible downsides of natural-language-style programming, but not the benefits.
Three years of observation of children using the MOOSE language in the virtual world called MOOSE Crossing have led us subjectively to believe that it has significant benefits.
Children as young as seven have been able to program in MOOSE.
Kids can immediately read other children's programs and use them as examples to learn from.
The intuition that reliance on natural language is part of what makes this possible is based on years af participant observation, clinical interviews, and, log file analysis.
A systematic analysis of the benefits of naturallanguage-style programming would be desirable.
However, that is beyond the scope of this study, and is left for future work.
In this study, we attempt to examine the downside risks systematically.
THE STUDY At the time of this writing, the MOOSE language has been used for almost three years by 299 children and 211 adults.
All input to and output from the system is recorded, with written informed consent from both parents and children.
A total of 1.1 Gb of data has been recorded as of July 31"`, 199K5 To re-evaluate the language's design and principles underlying it, we randomly selected 16 children, and categorized every error each child made.
While this retrospective analysis is not a controlled study, the data is intriguing and we believe sheds light on general questions of programming language design for children.
Data about the random sample of children appears in Table 1.
The children range in age from six to f&en at the start of their participation.
Their length c6 involvement ranges from seven minutes to thirty-three months.
The total number of commands they typed into the system  is perhaps a better measure of their varying degrees of involvement.
Seven of the children wrote no programs; five attained basic or slightly above basic programming knowledge; one, intermediate knowledge; two, advanced knowledge; one, expert knowledge.
Definitions of coding categories are: Basic Intermediate Advanced Expert Simple output.
Consequently, he is listed in the Basic category.
For each child, Elizabeth Edwards read the child's entire online experiences, and categorized each error the child made.
For example, Wendy typed: the was here as way it describe before!!
We can reasonably infer that the outcome 
Certainly the measures used in the two studies are not directly comparable, and the definitions d "natural-language errors" differ.
However, if it were the case, broadly speaking, that natural-language errors were less common in MOOSE than Pascal, this finding wouldn't be surprising.
In an English-like language such as MOOSE, relying on natural-language knowledge is oRen a success&l strategy.
In a more formal language like Pascal, this approach is more likely to lead to errors.
For the sixteen children, a total of 2,970 errors were observed .
They are broken down per child in Table 3.
There is no apparent correlation between the child's age or level of programming achievement and the number of natural language or other errors they make.
Errors are divided into seven basic categories .
From most to least fi-equent, they are: object manipulation, command-line syntax, typos, scripting movement, system bugs, and syntax, communication/interaction errors.
A more detailed breakdown appears in Table 5.
Interaction in the virtual world takes place at the interactive command-line prompt.
Scripts are written in a separate window, in a client program  designed to give the child a supportive programming environment.
Clicking "save" in the client compiles the script and returns feedback to the user.
Note that command-line errors are counted per individual line typed; however, scripting errors are countedper compile.
In each of these error categories, some errors can be categorized as natural-language errors, and some can not.
Examples appear in Table 6.
Generally speaking, we define natural-language errors as those errors in which the incorrect command is more English-like than the correct.
In total, 10.6% of errors found were judged to be naturallanguage related.
A total of 3 14 natural-language errors were found.
In most cases, such errors involve a child guessing at a command's name or the syntax of its arguments.
The "examine" command will tell you what commands are available for a particular object and what their exact syntax is; however, children frequently guess rather than use "examine."
In a study of novice Pascal programmers, JefI?ey Bonar and Elliot Soloway found error rates attributable to "step by step natural-language knowledge" from between 47%
Roy Pea comments: " default strategy fir making sense when encountering difficulties of program interpretation or when writing programs is to resort to the pow&l analogy of natural language conversation, to assume a disambiguating mind which can understand.
It is not clear at the current time whether this strategy is consciously pursued by students, or whether it is a tacit overgeneralization of conversational principles to computer programming "discourse."
The central point is that this personal analogy should be seen as expected rather than bizarre behavior, for the students have no other analog, no other procedural device than "person" to which they can give written instructions that are then followed.
Rumelhart and Norman have similarly emphasized the critical role of analogies in early learning of a domain-making links between the to-be-learned domain and known domains perceived by the student to be relevant.
But, in this case, mapping conventions for natural language instruction onto results in programming error-ridden performances."
One approach to countering this problem is deliberately to leverage students' natural-language knowledge in the programming-language design.
Table 7 sorts the 314 natural language errors into different categories+ategories more descriptive of the nature d natural-language errors we observed.
Many of these errors demonstrate a lack of understanding of underlying computer-science concepts.
In the first example, Wendy apparently wants to make her pet follow her around the virtual world.
She expresses that in an Elnglish-like fashion .
However, she evidently fails to understand that making a pet follow you involves setting a property on the pet's object 
Wendy demonstrates an understanding of the use of properties in other contexts, but not in this instance.
Perhaps the most intriguing category of error is literal interpretation of metaphor.
For example, to get rid of an object that you no longer want, you "recycle" it.
Recycling is a metaphor for a process that caln be more precisely described as deleting a database entry.
Interpreting that metaphor somewhat literally, atnumber of participants have tried to "reuse" objects.
The next most prevalent category is assuming the system tracking or aware of state more than it is.
When travelling through the virtual world, children will o&n type "back" to try to retrace their steps.
Short Long The problem takes more than one attempt but is solved in that particular sitting.
The child doesn't solve the problem in the initial attempt, but returns to it later  and solves the problem then.
Child does not determine how to execute this particular command, but constructs a di&rent string of commands that produce the desired results.
Child is interrupted by a message, arrival of another child, parental threat cf grounding if they don't get off the computer, etc., and does not appear to return to the problem.
Interestingly enough, the least common category is the one we were most worried about before we began data analysis: operator precedence and combination.
The conditional clause "if A is B or C" is parsed by the computer as equivalent to "if  or "; however, it's often the case that the user meant "if  or ".
Another type of operator error involves the insertion d extra operator words.
For example, children often write statements of the form "if x is member of y," inserting an extra "is" before the "member of' operator.
This particular problem can be automatically detected and is corrected by the MOOSE compiler.
Concern about operator errors was the original motivation for undertaking this study.
However, only seven of 314 natural language errors and 2,970 total errors fell into this category.
It's worth noting that only four of sixteen children demonstrated an understanding of the use cf conditionals.
Those four children had a total of 2125 errors.
Operator precedence and combination errors represent only 0.3% of the total.
But how serious are these natural language errors?
Certainly an error that is immediately corrected is quite differen from one that causes the child to abandon a project in frustration.
We divided error recovery into six categories: Immediate As soon as feedback is received, the next command directed towards the problem solves it.
For each of the 3 14 natural language errors observed, we categorized the recovery time.
This data appears in Table 8.
Table 9 analyzes how quickly errors were recovered by type, grouping them into easily recovered , recovered with difficulty , not recovered , and unclear .
Error recovery rates were not calculated for non-natural-language errors.
This would be an interesting topic for future work.
At first glance it surprised us that guessing errors were the most "serious'`-aren't operator errors, for example, conceptually deeper?
However, it's likely that this is simply a reflection of the depth of the child's engagement with the task at hand.
A guessing error may often be a whim-if the task isn't easy, it is readily abandoned.
Consequently, the child is more likely to spend the time to solve the problem or in most cases find a workaround.
It makes sense then too that syntax errors are more likely to be successmlly resolved than guessing errors: with a syntax error, the child has found a command and simply needs to learn to use it correctly.
In the case of a guess, no such command or concept may exist.
Is it advisable to "leverage natural-language knowledge" in designing programming languages?
The question of course can't be answered in the general case, because different applications and target audiences have d&rent needs.
A more focused question might be: is it wise to leverage natural-language knowledge in the design of a programming language for children designed to promote learning?
We began in 1993 with the intuition that the answer was "yes."
This study supports that conclusion.
This work primarily addresses the risks of naturallanguage-style programming.
A formal analysis of its benefits of would be desirable, but is beyond the scope CE this study.
In total, we found that 16 children made a total of 2,970 errors.
Of those, 3 14 were natural-language-related.
Most of those errors were easily recovered or recovered with some difficulty .
Those that were not recovered represent 37.3% of the natural language errors and only 4.2% of total errors.
We believe these rates to be within acceptable limits.
Leveraging users' naturallanguage knowledge does not appear to cause serious problems.
We believe that making use of people's preexisting natural language knowledge is an effective strategy for programming language design for children, end users, and others new to coding.
In future work, we hope to continue to analyze this set c&' data to shed light on other aspects of programminglanguage design for novice users.
Glusman, G., E. Mercer, and I. Rubin, Real-time Collaboration On the Internet: BioMOO, the Biologists' Virtual Meeting Place., in Internet for the Molecular Biologist., S.R.
Van Buren, D., et al., The AstroVR Collaborator-y, Astronomical Data Analysis Software and Systems ZV R. Hanish and H. Payne, Editors.
1994, Astronomical Society of the Pacitic:.San E'rancisco.
O'Day, V., et al., Moving Practice: Classrooms to MOO Rooms.
Computer Supported Cooperative Work, 1998.
Community Support for A., 12.
Computer Supported Cooperative Work, 1998.
A., MOOSE Crossing: Construction,' Community, and Learning in a Networked Virtual World for Kids.1997, MIT, Ph.D. dissertation:
Hopper, G.M., Keynote Address, in History of Programming Languages, R.L.
Sammet, J., The Early History of COBOL, in History of Programming Languages, R. Wexelblat, Editor.
Spohrer, J. and E. Soloway, Analyzing the High Frequency Bugs in Novice Programs, in Empirical Studies of Programmers, E. Soloway and S. Iyengar, Editors.
Boulay, B.D., Some Dtfficulties of Learning to Program, in Studying the Novice Programmer, E. Soloway and J.C. Spohrer, Editors.
1989, Lawrence Erlbaum Associates: Hillsdale, NJ.
Goodman, D., The Complete HyperCard Handbook.
Children, Computers, and Powerful Ideas.
Miller, Styles, strategies, and constrasts: IBM Systems Journal, 1981.
Bonar, J. and E. Soloway, Knowledge: A Major Source of Misconceptions in Novice Programmers, in Studying the Novice Programmer, E. Soloway and J. Spohrer, Editors.
1989, Lawrence Erlbaum Associates: Hillsdale, NJ.
Pea, R.D., Journal ti "`Bugs" in Novice Programming.
