Interaction designers typically revise user interface prototypes by adding unstructured notes to storyboards and screen printouts.
How might computational tools increase the efficacy of UI revision?
This paper introduces d.note, a revision tool for user interfaces expressed as control flow diagrams.
The paper reports two studies that compare production and interpretation of revisions in d.note to freeform sketching on static images .
The revision production study showed that testing of ideas during the revision process led to more concrete revisions, but that the tool also affected the type and number of suggested changes.
The revision interpretation study showed that d.note revisions required fewer clarifications, and that additional techniques for expressing revision intent could be beneficial.
Interaction design teams oscillate between individual work and team reviews and discussions.
However, proposed changes can rarely be realized immediately: the proposer may lack implementation knowledge, the changes may be too complex, or the ideas are not sufficiently resolved.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
They are rapid to construct, they enable designers to handle different levels of abstraction and ambiguity simultaneously , and they serve as common ground for members with different expertise and toolsets .
Individual designers later incorporate the proposed changes into the next prototype.
This annotate-review-incorporate cycle is similar to revising and commenting on drafts of written documents .
While word processors offer specialized revision tools for these tasks, such tools do not exist for the domain of interaction design.
This paper demonstrates how three primary text revision techniques apply to interaction design: commenting, tracking changes, and visualizing those changes.
It also introduces revision tools unique to interaction design: immediate testing of revisions and proposing alternatives.
Because interaction design specifies both appearance and behavior, revisions should be testable immediately when possible.
Because enumeration and selection of alternatives is fundamental to design , revisions should also be expressible as alternatives to existing functionality.
The proposed revision techniques are embodied in d.note , a tool for interaction designs created with d.tools .
Concrete modifications to behavior can be tested while a prototype is running.
Such modifications can exist alongside more abstract, high-level comments and annotations.
This paper also characterizes the benefits and tradeoffs of digital revision tools such as d.note through two user studies.
We show that the choice of revision tool affects both what kind of revisions are expressed, as well as the ability of others to interpret those revisions later on.
Participants who used d.note to express revisions focused more on the interaction architecture of the design, marked more elements for deletion, and wrote fewer text comments than participants without d.note.
Participants that interpreted d.note diagrams asked for fewer clarifications than participants that interpreted freeform annotations, but had more trouble discerning the reviser's intent.
In the remainder of the paper, we discuss related work, survey today's UI revision practices, and describe revision principles from related domains.
We then introduce d.note and its implementation.
We present results from two studies of revision expression and interpretation, and conclude with a look at the larger design space of revision tools.
The well-known diff algorithm shows differences between two text files .
Offline comparison algorithms also exist for pairs of UML diagrams  and for multiple versions of slide presentations .
The d.note visual language is most closely related to diagram differencing techniques introduced for CASE diagrams  and for statecharts  in the Kiel Integrated Environment for Layout .
Such research contributes algorithms to identify and visualize changes.
Prior work has demonstrated techniques for designers to sketch GUIs , web sites , and multimedia content .
TEAM STORM  enabled collaborative sketching for multiple co-located participants.
Topiary  exported sketched interfaces to mobile devices and allowed sketched comments as a secondary notation in the editor.
SUEDE  and d.tools  introduced the concept of integrating design, test, and analysis in a single authoring environment.
We are inspired by the approach to explicitly add support for the larger context of design activity into a prototyping tool.
The two prior systems focused on user testing; d.note focuses on design revision.
Change tracking and commenting tools are pervasive in word processors.
Such functions enable asynchronous collaboration, where different members may have different functions, such as author, commenter, and reader .
It takes inspiration from tools that capture sketched comments and interpret these as commands to change an underlying software model.
In Paper Augmented Digital Documents , annotations are written on printed documents with digital pens; pen strokes change the corresponding digital document.
In ModelCraft , users draw on physical 3D models created from CAD files, to express extrusions, cuts, and notes.
These annotations then change the underlying CAD model.
We contacted practitioners to find out how interaction design teams currently communicate revisions of user interface designs.
Ten designers responded through a professional mailing list; seven of them shared detailed reports.
There was little consistency between the reported practices -- techniques included printing out screens and sketching on them; assembling printouts on a wall; capturing digital screenshots and posting them to a wiki; and using version control systems and bug tracking databases.
We suggest that the high variance in approaches is due to a lack of specific tool support for UI designers.
We also noted a pronounced divide between physical and digital processes .
One designer worked exclusively on printouts; four reported a mixture between working on paper and using digital tools; and two relied exclusively on digital tools.
To make sense of this divide, it useful to distinguish between two functions: recording changes that should be applied to the current design; and keeping track of multiple versions over time.
For expressing changes to a current design, five of the surveyed designers preferred sketching on static images because of its speed and flexibility.
In contrast, designers preferred digital tools to capture history over time and to share changes with others.
We hypothesize that designers will benefit from tools that bridge the gap between capturing changes and tracking history.
Design histories capture and visualize the sequence of actions that a designer or a design team took to get to the current state of their work.
The visual explanations tend to focus on step-by-step transformations, e.g., for web site diagrams , illustrations , or information visualizations .
Revision tools such as d.note focus on a larger set of changes to a base document version, where the order of changes is not of primary concern.
Design histories offer timeline-based browsing of changes in a view external to the design document; d.note offers a comprehensive view of a set of changes in situ, in the design document itself.
The fundament T tal actions in written w docum ment revision are a h history-preserv ving modificat tion and com mmenting.
Each o operation has tw wo component ts: visual synta ax and semantic cs.
F example, a common interlinear For i syn ntax to expre ess d deletion is strik king through th he deleted text ; 2 th he semantics are a to remove the stricken te ext from the ne ext v version of the document, sho ould the revisi ion be accepte ed.
O Original and modification m are a visible sim multaneously, to c communicate th he nature of a change.
Furthe ermore, edits are a v visually disting guished from th he base versio on.
When editin ng d documents col llaboratively, different social roles of coc a author, comme enter, and reade er exist .
Offering O ways to m modify the text t as well as add ding meta-cont tent that sugges sts f further modific cation serves th hese different ro oles well.
Source-code revision S r tools, such as vi isual differen nce e editors, enable users to compa are two version ns of source fil les s side-by-side  .
3 In contras st to docume ent r revision tools, changes are ge enerally not tra acked increme enta ally, but comp puted and visua alized after the fact.
Commen nts in n source code differ from co omments in text documents as th hey are part t of the sou urce documen nt itself.
Met tac commenting  is s generally on nly a available at the e level of an ent tire set of chan nges.
WYSIWYG do W ocument editor rs do not disti inguish between s source and fina al document; authors a revise a single, shared r representation.
For program source s code, th here is no way to c comment direc ctly on the output of the program, only th he s source.
In con ntrast, movie producers an nd video gam me d developers con nvey revisions by drawing dir rectly on outpu ut, i.
Becau use the revisio ons a address change es in appearanc ce, sketching ra ather than text is th he preferred method m of expr ression.
Worki ing in the outp put d domain is a co ompelling app proach, but ha as thus far been li imited to static c content .
Comparing these three existing domain C ns leads us to f formulate four design princip ples.
UI revisi ion tools shou uld s support the foll lowing: 1 1.
In d.tools, designers define the hardware , graphic cal output , and interaction log gic .
Lo ogic diagrams are inspired by b the statecha art formalism : transitions express contro ol flow .
The following scenario introduces the benefits d.note provides to interaction design teams.
Adam is designing a user interface for a new digital camera with on-camera image editing functions.
To get feedback, he drops his latest prototype off in Betty's office.
Betty picks up the camera prototype, and tries to crop, pan and color-balance one of the pictures that Adam pre-loaded on the prototype.
She opens up the d.tools diagram for the prototype.
She notices that the image delete functionality is lacking a confirmation screen - images are deleted right away.
To highlight this omission, Betty creates a new state  and sketches a rudimentary confirmation dialog, which she connects to the rest of the diagram with new transitions so she can immediately test the new control flow .
She next notices that exiting to the top level menu is handled inconsistently in the three different edit modes.
She deletes some incorrect transitions to the menu state , as well as a superfluous state .
Betty is not convinced that the mapping of available buttons to crop an image region is optimal.
She selects the crop state and creates an alternative for it .
In the alternative, she redirects button input and adds a comment for Adam to compare the two implementations.
In text, the atomic unit of modification is a character.
Because interactive systems have a larger set of primitives, the set of possible revision actions is more complex as well.
In d.tools, the primitives are states, transitions, the device definition, and graphical screens.
With each primitive, d.note defines both syntax and semantics of modification.
This section will provide examples of each operation.
States and transitions rendered in black outline are elements existing in the base version; added elements are shown in blue; deleted elements in red.
Currently, d.note focuses on supporting actions of a single reviewer.
However, collected meta-data make distinguishing between multiple revision authors straightforward.
Revised document elements could show author identity through icons, tooltips, or unique colors.
Users can add states and transitions in revision mode as they normally would; these states and transitions are rendered in blue to indicate their addition .
These states and transitions behave like their regular counterparts.
When users remove states from the base version, the state is rendered as inactive in red.
To visually communicate that this state can no longer be entered or exited, all incoming and outgoing transitions are rendered as inactive with dashed lines .
At runtime, incoming transitions to such states are not taken, making the states unreachable.
Individual transitions can also be directly selected and deleted.
Deleted transitions are shown with a dashed red line as well as a red cross, to distinguish them from transitions that are inactive as a result of a state deletion .
When users remove states or transitions that were added in revision mode, they are completely removed from the diagram.
In addition to functional revision commands, users can sketch comments on the canvas of device, graphics, and state editors .
Any stroke that is not recognized as a revision command is rendered as ink.
This allows tentative or ambiguous change proposals to coexist with concrete changes.
Inked comments are bound to the closest state so they automatically move with that state when the user rearranges the state diagram.
Designers can modify graphics by sketching directly on top of them with a pen tool within the graphics editor.
Sketched changes are then rendered on top of the existing graphics in a state at runtime .
In addition to sketching changes to appearance, users may also rearrange or otherwise modify the different graphical components that make up the screen output of a state.
The changes are thus not visualized on the level of an individual graphical widget.
With d.note, users can introduce alternatives for appearance and application logic.
Incoming transitions are re-routed to point to the encapsulating container.
Each state maintains its own set of outgoing transitions.
To define which of the alternative states should become active when control transfers to an alternative set, the container shows radio buttons, one above each contained state.
To reduce visual clutter, only outgoing transitions of the active alternative are shown; other transitions are hidden until their alternative is activated.
Thus far, we have described changes to the information architecture and graphic output of prototypes.
When prototyping products with custom form factors such as medical devices, the set of I/O components used on the device may also be subject to change and discussion.
When revising designs in d.note, users can introduce new physical hardware elements by sketching them in the device editor .
Prior to binding the new software component to an actual piece of hardware, designers can simulate its input during testing.
Because much of early design relies on sketches as a visual communication medium , d.note's revision interface can be either operated through mouse and keyboard commands, or it can be entirely stylus-driven.
Stylus input allows for free mixing of commands and non-command sketches.
Com mmand gesture es to create sta ates and altern nati ives use a pigtail p delimite er, to reduce the chance of m misinterpretatio on of other rectangular strokes.
Th he g gesture set co ontains comma ands to delet te the graphic cal e element undern neath the gestu ure, and to cr reate new state es, tr ransitions and alternatives.
All A other stroke es are interpreted a comments .
To understand T d the user experience of the interactiv ve r revision techni iques manifest t in d.note, we e conducted tw wo s studies: the firs st compared au uthoring of rev visions with an nd w without d.note e; the second d compared in nterpretation of r revisions with and without d.note.
We re ecruited produ uct d design and HC CI students at t our university.
Because th he r required expert tise in creating g UIs limited recruitment, we w o opted for a wit thin-subjects design, d with co ounter-balancin ng a randomizat and tion where app propriate.
In the d.note conditi ion, students were w given a demonstrad tion of f its revision features, and five minutes to become familia ar with the com mmands using the t warm-up project p they comple eted earlier.
Participants wer re then given a working prototy ype, run by d.t tools and d.no ote, and asked to take 15 minute es to revise the prototype di irectly in the application a using d.note's d comm menting and rev vision features.
In the e non-d.note condition, c par rticipants were e given a workin ng prototype along with a static image of the d.tools state diagram d for the e prototype.
The T image was s loaded in Autode esk Sketchbook Pro, a tablet PC drawing application, a and pa articipants wer re given 15 mi inutes to draw w modifications and a comments on top of that t image.
While e designers today often use pape er for static an nnotation, com mparing the digital d.note interf face to anothe er digital inte erface is a stronge er minimal pa airs design.
Because B fewer r variables differ among a the con nditions, one can c draw more e confident conclu usions from the e results.
The ca aveat of our de esign is that ord dering of cond ditions may have affected a usage.
For example e, participants may have becom me more comfor rtable, or more e fatigued, for the second conditi ion.
For word processing, Wojah F hn  found that t the functi ion nality provided by a revis sion interface influenced th he n number and ty ype of problem ms discussed.
Do users revi ise in nteraction desi igns differently y with an inter ractive tool than w freeform, static annotatio with ons on a diagra am?
We recruited twelve par W rticipants.
Pa articipants each c completed two revision tasks s: one without t d.note and on ne w with.
The non-d d.note conditio on was always assigned first to p prevent the ex xposure to d.note notation from f influencin ng f freeform anno otation pattern ns.
Each revis sion task asked p participants to critique one of two inform mation applian nce p prototypes, one e for a keycha ain photo view wer, and one for f th he navigation and managem ment of images on a digital st till c camera .
The tasks were insp pired by stude ent e exercises in Sh harp's interact tion design tex xtbook .
We W c counterbalance ed task assignm ment to the cond ditions.
Participants could control this workstatio on w with stylus as s well as key yboard and mouse.
In contrast, deletions were rare without d.note ; but common with d.note .
Finally, revisions with d.note focused on changes to the information architecture, while freeform revisions often critiqued the prototype on a more abstract level.
Our results thus corroborate Wojahn's finding that the choice of revision tool affects the number and type of revision actions .
The post-test survey asked participants to compare the relative merits of Sketchbook and d.note.
We categorized their freeform written answers .
The two most frequently cited advantages of d.note were the ability to make functional changes , and to then test proposed changes right away .
Three participants suggested that commenting was more difficult with d.note; two wrote that the tool had a steeper learning curve.
Two participants with a product design background wrote that using d.note led them to focus too much on the details of the design.
In their view, the lack of functionality in the Sketchbook condition encouraged more holistic thinking.
Why did participants write less with d.note?
One possibility is that that users wrote more with Sketchbook because it was easier to do so .
To the extent this is true, it provides impetus to refine the d.note implementation, but tells us little about the relative efficacy of static and dynamic approaches to design revision.
More fundamentally, d.note may enable users to capture intended changes in a more succinct form than text comments.
Four participants explicitly wrote that d.note reduced the need for long, explanatory text comments in their survey responses: " making a new state is a lot shorter than writing a comment explaining a new state"; " I felt I had to explain my sketches."
In d.note, users can implement concrete changes interactively; only abstract or complex changes require comments.
Without d.note, both these functions have to be performed through the same notation , and participants explained their graphic marks with additional text because of this ambiguity.
In our data, inked transition arrows drawn without d.note  were replaced with functional transitions with d.note .
Though participants could have disregarded the revision tools and only commented with ink, the mere option of having functional revision tools available had an effect on their activity.
This tendency has been noted in other work ; understanding the tradeoff deserves future research.
Why did participants delete more with d.note?
While participants created new states and transitions in both conditions, deletions were rare without d.note.
Deletions may have been implied, e.g., drawing a new transition to replace a previously existing one, but these substitutions were rarely noted explicitly.
We suggest that deletions with d.note were encouraged by the ability to immediately test concrete changes.
Quick revise-test cycles exposed areas in which diagrams had ambiguous control structure .
Why were more changes to information architecture made with d.note?
The majority of revision actions with d.note concerned the flow of control: adding and deleting transitions and states.
In the Sketchbook condition, participants also revised the information architecture, but frequently focused on more abstract changes .
The scarcity of such comments with d.note is somewhat surprising, as freeform commenting was equally available.
One possible explanation is that participants focused on revising information architecture because more powerful techniques were at hand to do so.
Each tool embodies a preferred method of use; even if other styles of work remain possible, users are driven to favor the style for which the tool offers the most leverage.
The cumulative counts of clear and unclear revision suggestions for all participants are shown in Table 3.
Participants, on average, requested 1.3 fewer clarifications on revisions when using d.note than when sketching on static images =1.90, p=0.03.
The post-test survey asked participants to compare the relative merits of interpreting diagrams revised with d.note and Sketchbook.
The most frequently mentioned benefits arose from having a notation with specified semantics : revisions were more concrete, specific, and actionable.
Frequently mentioned drawbacks were visual complexity and problems discerning high-level motivation in d.note diagrams.
Eight  participants interpreted the revisions created by participants of the first study.
After a demonstration and warm-up task , participants were shown the two working prototypes and given time to explore them.
Next, participants were shown screenshots of annotated diagrams  on a second display.
Participants were asked to prepare two lists in a word processor: one that enumerated all revision suggestions that were clear and understandable to them; and a second list with questions for clarification about suggestions they did not understand.
Participants completed this task four times:
Why did participants ask for fewer clarifications with d.note?
When interpreting revised diagrams, participants are faced with three questions: First, what is the proposed change?
Second, why was this change proposed?
Third, how would I realize that change?
The structure of this study asked participants to explicitly answer the first question by transcribing all proposed changes.
We suggest that the formal notation in d.note decreased the need for clarification for two reasons.
First, the presence of a formal notation resulted in a smaller number of handwritten comments, and hence less problems with legibility .
How might we improve capturing the motivation for changes?
In the survey, participants commented that it was harder to understand why certain changes were proposed in d.note.
While handwritten comments focused on high-level goals without specifying implementations, tracked changes make the opposite tradeoff: the implementation is obvious since it is already specified, but the motivation behind the change can remain opaque.
We see two possible avenues to address this challenge.
First, when using change tracking, multiple individual changes may be semantically related.
For example, deleting one state and adding a new state in its stead are two actions that express a desired single intent of replacement.
The authoring tool should detect such related actions automatically or enable users to specify groups of related changes manually.
Second, even though freeform commenting was available in d.note, it was not used frequently.
Techniques that proactively encourage users to capture the rationale for changes may be useful.
How might we reduce the visual complexity of annotated diagrams?
Visual programs become harder to read as node and link density increases.
Showing added and deleted elements simultaneously in the diagram sometimes yielded "visual spaghetti": a high density of transition lines that made it hard to distinguish one line from another.
The connection density problem becomes worse when state alternatives are introduced because each alternative for a state has an independent set of outbound transitions.
In response, we already modified the drawing algorithm for state alternatives to only show outgoing connections for the currently active alternative within an alternative container.
Additional simplification techniques are needed though.
The particular implementation of revision techniques in d.note represents only one point solution in a larger design space of possible user interface revision tools.
The main salient dimensions we considered during our work are summarized in Table 5. d.note focuses on revision of information architecture and screen content of user interfaces through sketching of comments and modifications on top of UI state diagrams and screen images.
In our study, these functions were used to point out problems and to suggest as well as implement changes.
The design space reveals additional areas of exploration we have not touched upon so far.
For example, it is not yet possible to directly modify dynamic behaviors such as animations, as those are defined in source code.
In fact, it is not even feasible to efficiently comment on dynamic behaviors either, as there is no visual record of them in the interaction diagram.
Recording and annotating video of runtime behavior is one promising avenue to enable commenting on dynamic aspects.
Many usability testing tools already support video annotation.
How to tie comments and annotations back to the source representation of the UI is an open question.
The particular revision actions of d.note are based on a visual language that shows both user interface content and information architecture in the same environment.
Such tools exist both in research  and industry .
In addition, change visualization for node-link diagrams of interactive systems can also apply to popular commercial data flow authoring environments such as MaX/MSP and Apple Quartz Composer.
But how might we express revisions for user interfaces specified entirely in source code?
Existing source revision techniques do not permit designers to comment or revise the output of their application.
Future research should investigate if sketch-based input and annotation in the output domain of a program can be applied to UIs expressed in textual source code.
This paper introduced the d.note revision notation for interaction design.
It contributed an analysis of how to transfer principles of document revision to the domain of interaction design and introduced concerns unique to the revision of interaction designs: design alternatives as a revision operation; and immediate testing of proposed functional revisions.
The paper also evaluated d.note against freeform sketched comments in two studies.
The second study on revision interpretation found that participants asked for fewer clarifications about revisions, but had less insight into the motivations behind revisions when using d.note.
Our study pointed out that optimally balancing both structured and informal feedback may not be straightforward.
Fundamentally, the presence of functional revision tools appeared to discourage participants from freeform commenting.
Future work should address how to structure a revision tool so that it leads to more balanced suggestions.
DEMAIS: designing multimedia applications with interactive storyboards.
Buxton, B. Sketching User Experiences: Getting the Design Right and the Right Design, Chapter on Visual Story Telling.
Cross, N. Designerly Ways of Knowing.
Drucker, S.M., Petschnigg, G., and Agrawala, M. Comparing and managing multiple versions of slide presentations.
Girschick, M. Difference detection and visualization in UML class diagrams.
Guimbretiere, F. Paper augmented digital documents.
TEAM STORM: demonstrating an interaction model for working with multiple ideas during creative group work.
Harel, D. Statecharts: A Visual Formalism For Complex Systems.
