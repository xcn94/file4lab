Studies investigating user control of pressure input have reported time-accuracy trade-offs of, on average, over 30%, when interacting with a large number of pressure levels.
To increase the level of control with pressure input, we designed and evaluated four different discretization functions: linear, fisheye, visual fisheye, and clustered.
The fisheye discretization dynamically modifies the range of pressure values based on the position of the pressure cursor.
Our results show that a fisheye function results in significantly lower error rates and a lower number of crossings than have been reported in the literature.
Furthermore, the fisheye function improves control without compromising speed.
We discuss the findings of our study and identify several design recommendations for integrating pressure control into common interface tasks.
As a result, pressure input may not be highly practical as a reliable input dimension.
This limited ability to properly control pressure has made it difficult to introduce pressure input to facilitate tasks that require multiple levels of pressure control such as in menu navigation , scrolling, and high-precision zooming .
Recently, several studies have reported the benefits of pressure-based interaction as an alternative input channel .
Their results revealed that adequate control of pressure values is tightly coupled to a fixed number of discrete pressure levels .
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
The discretization method that researchers employed for dividing the pressure range into discrete units or levels is an important aspect of the pressure-based systems in previous studies.
However, since manufacturers of pressure-sensing devices apply different analog-to-digital  converters there is no standard mechanism to discretize the number of pressure levels.
As a result, there are many methods and mappings for discretizing the number of controllable levels using a pressure-based device .
In this paper we present the design of PressureFish, a fisheye discretization function  and compare it to a variety of discretization methods proposed in the literature.
We carry out our investigation on a pressure augmented mouse .
Our results show that the fisheye function increases accuracy without compromising speed.
For example, at 10 pressure-levels with a fisheye function, users are significantly more accurate with 78% accuracy compared to 54% for linear and require significantly less target crossings  with an average of 0.4 crossings per trial compared to 0.7 for linear.
Overall, by using the fisheye discretization function users are able to exhibit better control of pressure input.
The analog force exerted by the user on a pressure sensor is converted to a digital data stream through a manufacturerspecific AtoD converter.
As a result, manufacturers provide 256, 512, or 1024 discrete integer pressure values.
However, users cannot effectively control these large numbers of discrete values.
Applications further discretize the raw integer values by grouping adjacent values into unique controllable pressure levels .
Here we describe the various discretization functions  we evaluated in this study.
In our descriptions we use the following variables: x - the raw pressure value from the sensor; l - the number of pressure levels the space is divided into; R - the total number of raw pressure values from the pressure sensor.
Linear Discretization: A linear function  partitions the entire pressure space into equal units.
For instance, a pressure space of 600 units  divided into 10 levels  would produce levels consisting of 60 pressure units each.
As a result, when the user presses the pressure sensor and fixes it to a particular level, the selected pressure value remains selected despite small variations in the applied pressure value.
Second, finger-tips have a tendency to exert inadvertent forces.
Such forces directly affect the movement of the pressure cursor, thereby reducing the level of user control.
Since the fisheye function reserves sufficient space for the active pressure item, minor forces from the tips of the finger do not significantly impact pressure control.
Finally, since the control space involves depressing a sensor rather than moving a mouse, users are less likely to have targeting problems.
We use the following fisheye function :
Numerous studies have reported using a linear function to control pressure input .
Clustered Discretization: Some groups  have used functions that assign more pressure levels to the middle range of the pressure space by hand-picking various design parameters like the starting pressure unit for each level and the number of pressure units for each pressure level.
Rather than hand-pick, we used a K-means clustering algorithm to discretize the space.
Users were asked to select randomly highlighted pressure levels discretized using the linear function described above and a quadratic function described by Cechanowicz et al.
We collected raw pressure values for 6 users  and used the K-meansclustering algorithm to design an overlapping discretization for each pressure level.
Following a pilot study that showed no significant difference between the quadratic and linear functions, we decided to proceed with the linear function only, to allow us to compare and contrast linear  with Kmean clustered linear .
PressureFish Discretization: This fisheye function  was inspired by the fisheye distortion functions introduced by Furnas  and applied to fisheye menus .
The idea of a fisheye function is to make the area near the point of interest highly visible.
This results in a distortion with a variable amount of space reserved for the various elements in the pressure space.
Items further away from the focal point occupy less space, while items closer to the focal point occupy more space, and the item of focus itself occupies the largest amount of space.
While this distortion of the visual space offers enhanced visibility researchers have also reported targeting problems that arise from the constant change of control-to-display ratio .
However, the fisheye function could be particularly advantageous as a discretization function for three reasons.
To effectively control the fisheye selection, several design choices are possible.
Each of the design parameters consist of modifying the values for r, R, and l given the equation above.
These values were selected based on a number of pilots we ran before starting the final study.
Visual Fisheye Discretization: Visual feedback is an essential element in pressure-based interaction .
While the fisheye function divides the entire pressure space into nonuniform units, the visual fisheye  function uses an underlying linear function but presents the visualization as a fisheye menu.
As a result, the users are controlling the pressure cursor using a linear function but are being led into believing that the pressure is being controlled using a fisheye technique.
The motivation behind the design of VF is that if such a technique were to be successful then developers could simply enhance the visual presentation of pressure input.
Our experimental goal was to examine differences in accuracy, speed and number of crossings using different functions.
The experimental design we used was adapted from two other studies .
The experimental software recorded trial completion time , errors , and number of crossings  as dependent variables.
MT is the total time taken for the user to apply the appropriate amount of pressure and select the target.
NC is the number of times the cursor leaves a target after first entry for a particular trial.
E is the number of times the participant selects a location which is not a target.
The trial ended only when the user selected the right target, so multi-
While MT gives us an overall success rate, E and NC provide information about the level of control achievable using each of the different pressure-control mechanisms.
We used an optical mouse with a pressure sensor mounted on the left side, where it is easy and comfortable to be accessed with the thumb .
The sensor  could measure a maximum pressure value of 1.5N and provided 1024 pressure levels.
However in our experiment we only used the range from 0 to 600, as earlier studies suggest that user fatigue is common at higher pressure ranges .
The software was implemented in C# and the sensor was controlled using the Phidgets library.
The experiment was conducted on a 1024x768 pixels screen with a P4 3.2 GHz, Windows XP.
In the task, participants were asked to control a red cursor moving vertically in a gray rectangular menu.
The cursor starts at the top of the gray menu when the pressure value is 0.
The cursor moves down when participants press the pressure button and moves up when participants release the pressure button.
The menu is divided into small units based on the selected function and the number of pressure levels.
The system randomly highlights, in yellow, a menu item the user is required to select.
In each trial, participants are required to move the red cursor into the yellow target area and select the target with a Dwell or Click selection mechanism, which have been shown to be the Figure 2: best selection mechanisms for a  Select pressure mouse .
The trial ends when the yellow target with the participant selects the appropriate the red target.
If the selected item is not the cursor.
To select using Dwell, users maintain the cursor within the target for 750 ms, whereas Click users click with the left mouse button.
The study used a 4x4x5x2 within-participants factorial design.
The factors were: * Function: FE, VF, L, and KC.
The order of presentation was first controlled for function type, and then for pressure level.
Levels of the other two factors were presented randomly.
After explaining the selection mechanisms, participants were given ample time to practice the techniques.
The experiment consisted of three blocks with two repetitions per block, per condition.
With 14 participants , 4 functions, 4 distances, 5 pressure levels, 2 selection mechanisms, 3 blocks, and 2 trials, the system recorded a total of 13440 trials and the experiment took approximately 1 hour per user.
None of the participants had any experience with pressure-based input.
FE was the fastest followed by KC, L and VF .
Post-hoc pair-wise comparison of the functions showed that FE had significantly fewest errors followed by L, KC, and VF .
Figure 3b shows the average E for each function.
In the case of Click, the ranking of the functions was similar to that reported above, while for Dwell the order was L, KC, FE, and VF.
However we could not find any significant difference between the functions for Dwell selection technique.
Post-hoc comparison of the functions showed that FE had significantly fewer crossings than all other functions followed by KC, VF, and L .
Figure 3c shows the average NC for each function.
Subjective Feedback: FE was most preferred by nine users followed by L with three, KC with one and one with VF.
In line with our expectation, our results show that the method of discretizing the pressure space has a significant effect on the user's ability to control pressure.
Additionally, users preferred this function over all the others.
This effect is felt across all pressure levels .
Results on speed, number of crossings, and accuracy, indicate that performance decreases gradually as the number of pressure levels increases beyond 6 .
However, beyond 12 pressure levels, we observe a very sudden drop in performance with all functions except the fisheye.
In the case of the fisheye function, users can control up to 16 pressure levels almost as comfortably as 12.
As reported in previous studies  we too observed a larger number of errors with the Click selection technique in comparison to Dwell.
One reason for this is that any force applied by one finger co-activates adjacent fingers simultaneously .
This effect is pronounced in the case of the Click selection technique as clicking the mouse button with the index finger activates muscles in the thumb, which in turn interferes with pressure control on the sensor.
However, our results show that the fisheye function operates equally well with both selection techniques in terms of error rate, as well as the number of crossings.
This suggests that fisheye functions can be universally applied across different selection mechanisms.
Although untested, we believe this result is valid for a pressure sensitive stylus.
In this paper we report on the design and effectiveness of PressureFish, a fisheye discretization function that allows users to control pressure input with fewer errors than previously reported discretization techniques, without time penalties and with higher user preference.
We believe our results will facilitate integrating pressure-based input with other input mechanisms.
In the future, we will investigate the possibility of designing pressure menus that behave similarly and that share the common advantages of marking-menus.
We will also investigate other fisheye functions to improve accuracy and facilitate the design of novel and improved navigation techniques such as pressure-scrolling, panning and zooming.
Effective control of pressure input can also lead to designs that allow users to manipulate the control-to-display ratio in instances such as cursor control in multi-display or large display environments.
Our results showed that users had difficulties controlling pressure in the VF condition.
This result is consistent with other similar findings on desktop pointing and focus targeting with Fisheyes which suggest that distorting the control space results in better control  and distorting the visual space causes targeting problems if careful consideration is not given for the control space .
In all conditions, we found no significant difference in performance between KC and L. However, in most cases KC was marginally better than L. This can be attributed to the overlapping pressure units and the context-sensitive manner of deciding the pressure level.
However, we believe that better segmentation of the pressure units could be achieved by careful analysis of the different types of errors  that users commit.
