An increasing number of users are adopting large, multimonitor displays.
The resulting setups cover such a broad viewing angle that users can no longer simultaneously perceive all parts of the screen.
Changes outside the user's visual field often go unnoticed.
As a result, users sometimes have trouble locating the active window, for example after switching focus.
This paper surveys graphical cues designed to direct visual attention and adapts them to window switching.
Visual cues include five types of frames and mask around the target window and four trails leading to the window.
We report the results of two user studies.
The first evaluates each cue in isolation.
The second evaluates hybrid techniques created by combining the most successful candidates from the first study.
The best cues were visually sparse - combinations of curved frames which use color to pop-out and tapered trails with predictable origin.
Users of desktop computers are increasingly turning to larger displays and multiple-monitor setups; indeed, usability studies show significant productivity benefits and higher satisfaction .
A key advantage of additional screen space is the ability to keep more windows open simultaneously, reducing the amount of resizing, repositioning, and other window-management activity .
Unfortunately, however, additional windows also mean that more windows are competing for the users' attention.
This can make it harder for users to locate desired contents.
In this paper, we specifically look at the task of locating a window receiving focus .
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Spatial awareness often facilitates this task, and users of multiple-monitor setups tend to manually arrange windows .
But spatial awareness cannot always be assumed, especially when windows are many or activations are system-initiated.
Two visual cues help draw the user's attention to the target window in such situations.
First, in case the window was partially occluded or has just been created, that area is now repainted.
Second, window managers typically highlight the active window by altering the color of its title bar.
On large screens and multi-monitor systems, however, these cues typically fail, because they are localized to the region of the newly active window, which may be outside the user's field of view .
Once a user has missed activation, the new window provides no further signals likely to catch the user's eye.
Only the second cue, the difference in color, remains, which is a comparably weak cue .
Given this lack of a pop-out effect, finding the active window now requires a time-consuming visual scan of the display.
In the two user studies reported in this paper, this scan often took several seconds.
A variety of visual effects have been proposed for directing attention on the screen.
Phosphor  shows diagrammatic depictions of interface transitions.
The Leopard operating system bounces popup windows as they appear, and Vista highlights the active window using a shadow effect.
In this paper, we ask whether these techniques can be used to speed up window switching and if so, which is most effective.
In two user studies we investigate nine methods and combinations for guiding users through focus switches .
We find that hybrids of trails and frames are highly effective, and conclude with implications for design.
Humans see only 2 degrees with high acuity, but low-acuity peripheral vision may extend to 100-110 degrees from the point of fixation.
Furthermore, the visual field is not constant but shrinks with mental workload and with age .
In comparison, a three-monitor configuration, such as that used in our study, covers a visual angle of 143 degrees.
Feature integration theory  assumes that search proceeds in two stages: an initial stage of pre-attentive search, where low-level features  are efficiently extracted in parallel across the full field of view, and a stage of attentive search, where interesting points identified in the first stage are visited serially.
If an item visually pops-out because a feature pre-attentively guides attention, the time required to find it is independent of the number of distracters.
Numerous studies have thus tried to identify features that can guide attention.
The most certain features are color, motion, orientation, and size .
Other likely features are shape and shading.
Shading can enable the perception of depth which pops out .
Not all guiding features have the same visual span, however.
For example, motion can be detected at greater distances from the point of fixation than color  or shape.
Furthermore it has been found that guiding features are not truly independent: Random variations of color interfere with the ability to find a target based on orientation  or shape .
The converse may also be true but to a lesser degree, suggesting that there exists a hierarchy with some features, such as color, dominating others, such as orientation or shape .
Complex backgrounds may also make it harder to separate items and thus also reduce search efficiency .
In the presence of distracters, search becomes more efficient when target and distracters are less similar.
Heterogeneity among distracters reduces search efficiency, but if distracters can be grouped by some criteria efficiency is improved .
In contrast to common belief, motion does not necessarily draw attention, although the appearance of a new perceptual item does .
Yet, a short interruption in what is being seen, such as a blink, can prevent a person from detecting visual changes.
Larger targets and fewer distracters reduce the likelihood of change blindness .
The Popout Prism  enlarges occurrences of search terms in a document and places them on a semi-transparent bright background, to speed localization.
In addition to color and size, the appearance of the cue itself draws attention.
Halo  is a visualization technique for objects that are offscreen, such as relevant places on a map.
Halo makes use of shape and color; its red arcs easily pop-out from the rectolinear structure of typical road maps.
Motion, however, may also be found distracting, and Bartram showed that moving animations were more distracting than anchored animations; the least distraction came from slow blinking.
This is consistent with Plaue et al.
Spotlight  is a technique for directing users' attention by darkening the majority of a display, leaving a focal area brightly visible.
A variation of the technique, which combines the spotlight with a beam descending from the center top of the display, performs equally well.
For their tasks on a desktop-sized screen, they found there to exist a range of mask intensities where highlighted objects visually pop-out without hindering reading background.
Nevertheless, subjects consistently reported difficulty reading background material when masking effects were displayed.
The Safari browser uses a mask to direct attention to keywords in page-level searches.
In our work, we evaluated the use of color, shape, and shading to draw attention to window activations.
We also created a mask that darkens the screen around the target.
Given the high frequency of window switches per day, we felt that distraction and visual fatigue would likely be an issue with motion-based techniques.
We therefore follow recommendations in the literature  and only consider local fadein and fade-out animations.
The former have the potential benefit of harnessing the pre-attentive visual system, making the target stand out from remaining content; the latter have the potential to work even when the target is not within the user's field of view and in the presence of substantial visual noise, in which case they may reduce search in two dimensions to a one dimensional scan.
To avoid the drawbacks of motion-based methods, several researchers have proposed innovative static depictions.
Drag-and-pop  is an interaction technique for accessing objects which would otherwise be hard to reach.
Users can interact with translated copies of icons and "rubber bands" show where these originate.
Phosphor  alerts users to potential mistakes  by showing diagrammatic depictions of interface transitions, after they have occurred.
Inspired by these ideas, we created four graphical trails to guide users to the target window .
Our main design goal is to successfully direct the user's attention to the window receiving focus.
A successful technique, however, also needs to minimize side effects.
More concretely, the technique should  not distract users who already know where the target window is located ,  minimize its impact on other screen content .
A cue should therefore affect only a small area of screen space.
And  the technique should use only sparse visual effects to minimize visual fatigue.
Based on these requirements, we created nine basic cues, each representing a unique feature.
We use a factorial design, meaning that these cues can be combined to create more complex ones, including those in the literature.
In our study we evaluate the basic cues and selected combinations.
All highlighting conditions attempt to enable quick visual search by leveraging guiding features in vision.
Since we do not want to affect the user's ability to work with the target window, the window area itself is taboo.
Instead we draw visual effects around the target.
Our goal is to obtain a pop-out effect.
In order to achieve this, the stimulus has to be different from window contents, including standardized user interface toolkits, but also web page contents, such as flash animations designed to draw the user's attention.
A priori it is not clear which guiding features would stand out from such content.
We therefore consider several features that have been identified in the perceptual literature, including motion, color, shape, shading and luminance.
Rather than combining all features into a single cue, we investigate each feature individually, so that we can systematically search for better cues by combining promising candidates.
In total, we created four frames, each utilizing the same screen area, and a mask: BlinkingFrame is a black rectangular 20-pixel-wide frame.
Its opacity fades back-and-forth between 50% and 0%  every second.
This cue is motivated by work suggesting that fade-in and fade-out animations are less distracting than others .
RedFrame is a red rectangular 20-pixel-wide, 25%-opacity frame.
We chose pure red because it is bright and distinct from the blue, black, and gray frequently used in current window managers.
BubbleFrame is a black 25%-opacity "inflated" rectangle, 10 pixels wide around the window's corners and 28 pixels along edge centers.
We chose a rounded shape, because it separates nicely from recto-linear screen contents .
ShadowFrame is similar to a cue used in Vista--a black rectangular 20-pixels-wide frame with a transparency gradient ranging from 50% along the window edge to full transparency at its outside edge.
This shading resulted in rounded corners.
We expected the cue's gradient-nature to minimize impact on the readability of background content.
DarkMask is motivated by Spotlight  - a 75%-opacity black mask covering the entire screen except for the target window.
Before users can follow a trail, they must first visually acquire a part of it and then determine the direction to follow.
To investigate these aspects, we used a factorial design with two dimensions: trail origin and trail shape.
All four conditions create a visual path, 25% opacity black, from a known screen location to the newly active window.
CenterBeam draws a 2-pixel-wide line from the center top of the center screen to an edge of the target window, such that an extension of the line would intersect the center of the window.
The use of a fixed location facilitates location of the trail's origin, although eye travel may be required.
The location at the top center almost always leads to an angled line, which contrasts with recto-linear screen contents.
Pilot testing had revealed that a 2-pixel line suffices for recognition, while minimizing interference.
CenterSplash, which is motivated by Searchlight , also uses a trail from the top center of the screen to the target, but the trail has a concave, tapered shape that grows in width from one pixel at the display's center top of the display to the full width of the target window.
The asymmetry provides a cue for directionality, the taper's concavity serves as a cue for distance, a la drag-and-pop , and a curved outline distinguishes the trail from the background.
WindowBeam uses the same line as CenterBeam; however, the line starts at the center of the previously active window to approximate the user's current focus of visual attention and minimize eye travel.
To convey directionality, the beam is rendered on top of the previous window and "below" the target window.
If the new target is located on top of the previous window, the beam is drawn as a curve leaving the window and looping back in.
WindowSplash combines the tapered trail of CenterSplash with the previous-window origin of WindowBeam.
Directionality is again conveyed by the tapered path.
In our original implementation we detected the activation of new windows by installing a global hook on the HSHELL_WINDOWACTIVATED message.
Unfortunately, rendering of certain cues and communication with the operating system introduced a noticeable lag between window activation and cue appearance.
Thus, we programmed our system to automatically take screenshots of all activated desktop windows prior to the study, and to display the frame of an activated window together with the cue.
This ensured that in the study the cue appeared simultaneously with the window's title-bar color change.
Combining cue effects defines a space of 160 possible styles: 2  x 2  x 2  x 2  x 2  x 5 trails .
Figure 1 shows one of these styles, a combination of RedFrame, BubbleFrame, ShadowFrame and CenterSplash.
Trail-based cues require users to trace the trail, while targetwindow highlighting avoids that additional step.
In that sense, a trail may be seen as a fallback in case users miss the highlighting.
In terms of design goals, this suggests that trails should not interfere with target highlights.
During a pilot study, however, we noticed precisely this interference with some designs.
The individual cues just presented take this into account - the trail lines are sufficiently distinct from the surface-oriented target cues.
In addition, the thinness and colors minimize interference with the background.
To evaluate the relative effectiveness of the visual cues we performed two user studies.
Our goals were to measure the effectiveness of each cue at directing the user's attention to the target window and to measure side effects.
As previously mentioned a successful technique should not distract users who already know where the target window is, should minimize impact on other screen content, and should minimize visual fatigue.
The first requirement is captured by analyzing response time when switching windows.
To estimate awareness, we occasionally introduced changes to content in non-active windows when cues were displayed.
Since objective measures of visual fatigue are costly to obtain, vary widely and are sensitive to many factors such as task period , we instead rely on subjective user feedback.
Since it is infeasible to evaluate the full factorial design with 160 combinations, we restricted our first study to the nine basic cues.
Based on these findings, we then selected promising combinations to evaluate in the second study.
There were 10 interface conditions: Control plus the nine cues BlinkingFrame, RedFrame, BubbleFrame, ShadowFrame, DarkMask, CenterBeam, CenterSplash, WindowBeam, and WindowSplash.
We implemented all nine cues in a program which activates whenever a window receives focus.
Any of the 160 combinations may be selected through a configuration menu, which is invoked by clicking on a systray icon.
The program is written in C# using the Windows Presentation Foundation API.
Each effect is rendered onto a DrawingVisual pane using basic shapes, such as Bezier curves or polygons, and gradient or solid fills.
The DrawingVisual is then placed into a transparent window which spans the entire desktop and is positioned on top of all other windows.
During each trial, the participants' task was to switch window focus by hitting the space bar, and then to locate the newly active window.
To verify that participants had located the right window, they were required to enter the number of the new target window.
The title bar of each window read "Window - #", where # was a number from 09.
Participants read the number and entered it by pressing the corresponding number key on the keyboard.
If an incorrect number was hit, the system provided no feedback.
If the correct number was hit, the number was removed from the window's title bar as were all displayed cues.
When the user next pressed the space bar, a new  number was placed back into that window's title bar and the system activated a new window.
In 20% of the cases when participants switched windows, a popup window with a capital letter appeared for 350 ms at another location on the screen.
In addition to locating the newly active window, participants were asked to type the letter if they saw the popup and recognized its letter.
The study design was within subjects with 10 conditions  and 62 repetitions for each condition.
For each trial, we recorded task completion time and error in finding the target window when no popup window was displayed, and error in recognizing the letter on the popup window when a popup window was displayed.
We pre-computed 10 different experimental configurations, each with a different desktop layout, sequence of window activations, choice of numbers in window title bars, as well as pop-up windows and their letters.
Participants performed the study with each configuration and in the same order.
However, each such configuration was combined with an interface condition and the order of interface conditions was balanced following a Latin square of order 10.
Prior to the study, users filled out a background questionnaire and trained on all interface conditions, each time performing at least 3 window activations and seeing 1 popup window.
Trials were grouped into blocks of 62 repetitions and each block was performed using a new interface condition.
Grouping was necessary, because frequent switching between the visual styles might prevent users from getting used to any of them and developing expertise in interpreting feedback.
After each block, they were asked to provide subjective feedback on the condition just used.
After the study, participants filled in another questionnaire about their subjective preference with regards to all conditions.
The appearance of the desktop and windows  was set to Windows XP defaults.
Animations contained in some original websites were not reproduced in our study system.
Windows were positioned uniformly at random across the whole display, but only positions where a window was entirely within monitor boundaries were considered.
The sequence of window activations was random, but not uniform.
Since we separately consider different distances between subsequently-activated windows in our analysis, we wanted a roughly uniform distribution on these distances.
We obtained this by sampling the next window with a weight exponential in the distance to the previous window.
Since we believed that the difficulty of finding a target window also depends on the amount of overlap between windows , we ensured that a balanced number of trials each did and did not involve a flashing effect due to a change in z order.
Popup windows were placed uniformly at locations in the screen area spanned by a vertical line through the screen center and the outermost vertical line that tangents the target window.
Numbers and letters were drawn uniformly.
All re-sizeable windows were set to 640x400 pixels, except for dialog boxes which had their original fixed size .
While application windows are often larger, the sizes and numbers are realistic if we consider palettes  and desktop widgets , all of which affect visual search.
Fewer and larger windows may reduce the benefit of visual cues, but arrangements with less occlusions make cues more useful .
Overall we believe that the relative effects are stable.
Two monitors were driven by an nVidia Quadro FX 4600 card, and one by an nVidia Quadro NVS 285, all at 60 Hz refresh rate.
The operating system was Windows XP.
The angle between monitors was 43, following the guidelines by Su and Bailey  suggesting an angle of 45 or less.
Participants sat on a chair which was firmly attached to the desk using a leash and whose back had a distance of 34'' from the center monitor.
In a pilot experiment, we noticed that some participants moved backwards as the study proceeded; this movement reduces the visual angle covered by the displays, making visual changes more easily detectable.
We adjusted the distance of the chair such that an average person was looking at the center screen from 25'' distance.
Eight were graduate students; one was an undergraduate, and one was employed.
All participants reported at least 5 hours of computer usage daily, and half reported at least 5 hours of daily usage of dual monitors.
Only one participant did not use a large display  or dual monitors on a regular basis, and no participant used three monitors.
All participants had normal or corrected-to-normal vision; none were color-blind.
Those in bold were  confirmed.
Thus, BlinkingFrame and RedFrame will outperform BubbleFrame and ShadowFrame.
Therefore, CenterBeam will perform better than WindowBeam, and CenterSplash will perform better than WindowSplash.
We first report on task completion time , measured from the time when a cue was presented to the time when the participant hit the correct number on the keyboard.
We cleaned our dataset by removing the first two trials in each condition, all trials at which a popup was displayed, and all trials at which the user entered a wrong number.
We performed a Mixed Model analysis, modeling Participant as a random effect and Condition and Distance as model effects.
We applied Holm's sequential Bonferroni correction.
Analyzing the frame conditions, we found that cues using dominant features, BlinkingFrame and RedFrame, had lower task times than cues using less dominant features, BubbleFrame and ShadowFrame =8.9, =.01, p<.
Next, we compared trails with predictable locations to trails with window-based locations.
H3 therefore is not fully confirmed.
We next report on participant's detection of letters in the popup windows when they switched to a newly active window .
Popup windows were displayed in 13 of the 62 trials for each condition.
We performed a Mixed Model analysis of the error, modeling Participant as a random effect and Condition as a model effect, and applied Holm's sequential Bonferroni correction.
H6 can not be confirmed.
This confirms H7a and may imply that more visual change occurring at different parts of the screen impacts user's awareness of other screen content.
To find statistically relevant differences in the ratings, we computed an ANOVA on ranks and applied the Wilcoxon test.
As expected, frames with dominant features  were found more annoying than BubbleFrame and ShadowFrame , confirming H8a.
Our data revealed that the majority of participants strongly disliked DarkMask but that two participants strongly favored it for its effectiveness.
Although CenterSplash was clearly one of the most popular cues, our data did not provide enough support for H9.
After the study, we also asked participants to rank all conditions.
Ordering the conditions by their average ranks we obtained CenterSplash, WindowSplash, CenterBeam, RedFrame, BubbleFrame, WindowBeam, DarkMask, ShadowFrame, BlinkingFrame, and Control.
One participant reported that this flashing effect also made it impossible for him to detect the target window based on its flashing .
Several participants complained that the change in luminance when displaying and removing the mask was "painful to the eye".
WindowBeam was the only cue that did not perform better than Control, and qualitative feedback from participants provided further insights.
The beam was often rendered over a large amount of screen content, reducing its visibility.
Due to the horizontal configuration of monitors, WindowBeam's 2-pixel line was frequently nearly horizontal and thus difficult to follow given the cluttered background.
CenterBeam, in contrast, did not suffer from this problem, since the angle was typically much farther from rectilinear.
Participants also reported that they sometimes were inclined to "chase the tail" of the line, because WindowBeam's symmetry provided no affordance of the direction to the target window.
CenterSplash was very effective, allowed detection of popup windows, and was barely annoying.
It was the participants' favorite cue.
Our analysis revealed major differences among conditions.
All frames were more effective than Control, but several participants remarked that they did not notice much difference between ShadowFrame and Control.
The shadow used was very subtle and did not stand out much from other screen content.
It is remarkable, however, that even with just 25%-opacity and given the relatively noisy background used in the study, basic features such as shape, color, and motion easily pop-out.
As we expected, the animated BlinkingFrame was found more annoying than other frames.
DarkMask was very effective, but participants had greater difficulty in detecting popup windows with this cue.
We used 8 interface conditions : Control, CenterSplash, CenterSplash+R, CenterSplash+R+B, CenterrSplash+R+B+S, WindowSplash+R+ B+S, CenterBeam+R+B+S, DarkMask+B.
We included CenterSplash because of its good performance in the first study.
There were 15 possible combinations with the individual frame conditions , but to keep the number of conditions manageable, we instead created a linear number of conditions by successively adding frames in order of descending perfromance: RedFrame , BubbleFrame , and ShadowFrame .
We left out BlinkingFrame, because of its low satisfaction rating.
We also included WindowSplash and CenterBeam, combined with the same three frames to match the CenterSplash condition.
We did not include BlinkingFrame and WindowBeam, because of their low satisfaction ratings.
Finally, we added another variation of DarkMask to the set of interfaces.
It had performed poorly on the popup detection task, but we were wondering if a different opacity might alleviate this.
We reduced opacity from 75% to 25%, but preliminary experiments showed that this made it more difficult to find the target window.
In addition to reducing opacity, we combined the mask with BubbleFrame, which meant highlighting a more rounded area around the rectangular target, similar to the effect in Spotlight .
We had four hypotheses :  Adding a frame to CenterSplash will reduce task completion time.
Figure 9 shows the results.
To evaluate participant feedback, we again computed an ANOVA on ranks and applied the Wilcoxon test with sequential Bonferroni, which confirmed H13 - DarkMask+B was found more annoying than any other cue.
We again asked users to rank all conditions and computed an order by average ranks: CenterSplash+R+B+S, CenterSplash+R+B, CenterSplash+R, CenterSplash, WindowSplash+R+B+S, CenterBeam+R+B+S, DarkMask+B, and Control.
We recruited 8 participants, none of whom had participated in Study 1.
Five were graduate students, one was an undergraduate student and two were employed.
All participants reported regular computer usage of at least 5 hours per day, and half reported using dual monitors for at least 5 hours per day.
All participants had normal or corrected-to-normal vision; none were color blind.
Our second study shows that combining basic cues can indeed be useful.
Taking one of the best performing trails from the first study, CenterSplash, and adding RedFrame led to a further reduction in task time.
Furthermore, rankings of users seem to suggest that adding frames to trails does not make them less popular.
Another interesting result of this study is the poor performance of DarkMask+B.
After reducing opacity to 25% but adding BubbleFrame, the cue performs significantly worse than any tested trail and frame combination, despite still being more annoying than these.
We conclude that mask effects are not suitable for window switching.
The increasing use of large displays demands new visual cues for guiding attention; when using a multi-monitor system, users have greater difficulty finding the target when switching windows.
We show that highlighting the target and presenting graphical trails alleviates this problem.
The results of our two studies have important implications for the design of visual cues to guide attention:  Visual sparseness is important.
In general, more visual change means more annoyance, even when opacity is low , and visual change, which is not local to the target, interferes with the user's ability to detect the target based on its onset.
We therefore recommend against masks.
This suggests that one may wish to adapt the cue based on target distance.
We therefore suggest using asymmetric trails such as splash effects.
The dominant features, motion and color, are more effective than shape or shadows.
Unsurprisingly, however, they are also found more annoying and so we favor the use of only subtle colors, shape, and shadows.
