Games that use procedural content generation  do so in a wide variety of ways and for different reasons.
One of the most common reasons cited by PCG system creators and game designers is improving replayability--by providing a means for automatically creating near-infinite amounts of content, the player can come back and replay the game and refine her strategies over a long period.
However, this notion of replayability is both overly broad and incomplete as a motivation.
This paper contributes an analytical framework and associated common vocabulary for understanding the role of PCG in games from a design standpoint, with an aim of unpacking some of the broad justifications for PCG use in games, and bringing together technical concerns in designing PCG systems with design concerns related to creating engaging playable experiences.
In order for further advancements in PCG research to be made, it is vital that both AI researchers and designers have a common vocabulary for understanding not just what PCG is but how it can be used to induce particular experiences and what it uniquely offers to game design.
Thus, what is needed is a framework for understanding and communicating about how PCG is taking a role in game design.
This framework needs to address both the ways in which the PCG system works to create content, which is of primary concern to the PCG researcher, and the experience the player  has that is shaped by that system, which is of primary concern to a game designer .
The framework presented in this paper was created by analyzing several PCG games and research projects through the lens of the Mechanics, Dynamics, and Aesthetics  framework .
PCG is used in a variety of ways in games, with the common justifications of replayability  and tailoring content for an individual player.
This paper argues that "replayability", in particular, is a nuanced concept that requires unpacking through an examination of the designs of both the PCG system and the game that the system is embedded within.
This overly-broad justification is examined more deeply through a design-centric analysis of how PCG has been used in games thus far.
While the framework introduced in this paper focuses largely on PCG's implementation in game design, it is also important to note that the representation and mechanics portions of the framework can also be used to describe the role that PCG can play in game design tools, offering more detail than previous work in PCG design metaphors .
This paper has two main contributions.
First, a conceptual framework for analyzing the role of PCG in game design , and second, a resulting vocabulary for both practitioners and researchers--from both artificial intelligence and game design--to discuss the affordances of PCG.
Procedural content generation  is a growing area of research and practice in game design.
Researchers in artificial intelligence are creating more efficient and more expressive methods for having a computer create levels, weapons, terrain, and even game rules .
Simultaneously, game designers from both industry and research backgrounds are increasingly turning to the computer to create massive, varied worlds for players to explore, at a fraction of the cost of human authorship .
Copyrights for components of this work owned by others than the author must be honored.
Abstracting with credit is permitted.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Publication rights licensed to ACM.
However, this is not intended to be a full survey of PCG, and only illustrative examples are used.
Finally, the paper closes with a discussion of future work and a reflection on the unique experiences that can come from incorporating PCG in a game's design.
Grammars can be used purely as production rules to drive generation, without any regard for an external measure of the quality of the level.
In such cases, level quality is implicitly baked into the grammar based on how the production rules are authored.
Grammar-based methods attempt to strike a balance between designer-specified rules for how content components should fit together and computer exploration of the design space through expanding the grammar.
Grammars have been used in offline content generation for games  and in tools for designers .
There are many different approaches taken in procedural content generation, each with different affordances and tradeoffs for design.
All approaches can be used in both a game and design tool setting.
The five main categories that a content generator can fall into are: generation as optimization, generation as constraint satisfaction, generation with grammars, generation as content selection, and generation as a constructive process.
Optimization approaches to content generation treat the design process as a search for the combination of elements that best fit some criteria, which can be either specified mathematically by the system creator, or judged and curated by a human.
Optimization-based generators explicitly and externally model the desired qualities of generated content.
A great deal of research in PCG uses evolutionary algorithms , which is an optimization approach.
Optimization approaches to PCG are often  computationally expensive, making it difficult to use them in games that require a highly responsive PCG system.
They are often used with a human-in-the-loop for the evaluation function  and to create personalized content  offline.
There is some contention about whether or not selecting content from a library to piece it together is complex enough to qualify as content generation .
This paper takes the position that content selection, however simple, is a form of PCG when it is used to procedurally create an environment for the player to explore or content for the player to experience within the context of different mechanics.
Content selection is a very simple form of PCG that is susceptible to players recognizing large-scale patterns; however, it is also one of the fastest methods for generating content and is typically used in games where the generator must run during play time, such as "endless runner" games .
A constructive generator is one that builds content in an adhoc manner by piecing together customized building blocks .
It typically has all of its design knowledge baked into the algorithm; while it may perform some amount of search internally, it does not test the results of the level against some external heuristic to help guide the search process.
Constructive generators are often quite game-specific.
Examples of constructive generators are those used in Rogue-like games .
Constructive generators can be seen as content selection-based generators that use smaller pieces of content.
This approach involves the declarative specification of properties of and constraints on the content that will be created.
For example, levels in the math education game Refraction are generated by searching for solutions for a set of design constraints .
Declarative representations have the strength that a designer can specify knowledge about how the content should appear without needing to specify how the underlying search algorithm should perform.
The challenge with constraint-based approaches comes largely in determining an appropriate representation for facts about the generated content, and with debugging a set of complex, interrelated constraints.
This approach has been used extensively in tools for designers .
There are two main survey and taxonomy papers for PCG in games.
The first, from Togelius et al., focuses on the technical approaches to creating optimization-based generators, written from the perspective of PCG researchers for readers with a background in AI .
The first of these characteristics is not discussed in this paper, as the "necessity" of generated content for the player to complete the game is not relevant to how the player experiences the content.
The second property also appears in our framework as a property of the game's mechanics, in terms of how the user or player has control over the generator.
This taxonomy also mentions a scale of directness-ofrepresentation, as we do, but only in the context of evolutionary approaches to content generation.
It does not address issues of player experience or how the player interacts with the content generator within the game.
They concluded that PCG is defined as "the algorithmic creation of game content with limited or indirect user input".
This paper takes a somewhat broader view of content generation, classifying games that do not provide any user input over the generator as still containing PCG, and also contributes a more nuanced set of attributes for how to describe the role of PCG in games.
Their metaphors--which include considering the system as a tool, material, designer, and domain expert--all are broad categories for how a PCG system can be seen by a designer.
This paper has similar goals in its aim to identify design-relevant properties of PCG systems and better understand the role that PCG can play in a game's design, but takes a more detailed look at the way the systems are used.
The framework presented in this paper aims to sit closer to the middle of this spectrum: it is not formal or detailed enough to be used to immediately synthesize a new game, but offers a strong enough vocabulary and set of examples that it can be easily used by designers to describe and guide the design of their own games.
The framework is useful for the analysis performed in this paper because of its dual focus on design and experience.
In order to understand the role that PCG takes in different games, it is crucial to understand it from both the system designer's perspective and the player's perspective.
Doug Church, in his call for more work in creating "formal abstract design tools", stated that "the primary inhibitor of design evolution is the lack of a common design vocabulary" .
Since this call for a genre-agnostic design language, there have been several attempts at creating languages and frameworks for understanding a game's design, the framework in this paper being among them.
The framework contributed in this paper can also be considered as a set of "design patterns" for the role of PCG in games.
Bjork and Holopainen's work is among the most comprehensive of these efforts, and includes a pattern for "Procedurally Generated Game Worlds" , but does not offer detail into the role that these worlds play in the player's experience, or different ways that they might be implemented in the game's rules.
Other efforts for building a design vocabulary include building languages to describe specific aspects of game design, such as Dan Cook's work on skill atoms  or Joris Dormans's "machinations" framework for abstractly representing and prototyping game mechanics .
These two frameworks sit at opposite ends of a spectrum of formality.
Cook's framework, which focuses on designing for player learning and progression, is not at all formally defined.
This section describes each aspect of the framework for understanding the role of PCG in games, categorizing each property by whether or not it is related to the game's mechanics, dynamics, or aesthetics.
Each category in the framework is illustrated with an example from either a game or research project.
It is important to note that aspects and properties in the framework are not intended to be mutually exclusive from each other--for example, a game might provide multiple kinds of control over its PCG system in different contexts.
There are four main mechanical aspects of the PCG system that are considered in this framework, summarized in Table 1.
These aspects were chosen as a combination of concerns of the AI programmer  and concerns of the game designer .
Each of these mechanical aspects can be used to describe the role that a PCG system plays in a game design tool, as well as in games themselves.
How design knowledge is represented to the generator is a crucial aspect of procedural content generation, impacting the range of content that can be produced.
This framework contains four different categories for the building blocks used by generators: experiential chunks, templates, components, and subcomponents.
These categories are actually discrete points on what is close to a continuous spectrum, from highest to lowest authorial burden.
Experiential chunks are large building blocks for content that are designed by a human and are sufficiently large that, standing on their own, they can be experienced by the player.
Templates are a generalized form of experiential chunk; a human has still authored a great deal of the content, enough to dictate the kind of experience that will be had by a player, but has left some "blanks"  for the computer to fill in.
Examples of these include the quest templates used in the Scriptease authoring tool .
Component patterns are patterns that are large enough to be identifiable as human-designed in the game, but small enough that, on their own, they do not greatly dictate the experience a human will have.
Generators that operate at the subcomponent level are using the same building blocks as a human designer would if she were designing the content herself.
Subcomponents exist at the layer of how the game is represented internally, such as individual tiles within a tile grid.
Galactic Arms Race  operates at this layer, with it constructing weapon behavior to guide individual particles along a path.
Offline content generation happens before a unit of play experience begins.
Thus, the generator used in Civilization IV  is classified as an offline generator, as the entire map is created before the main game activity begins.
It is important to note that level generation in Rogue  is also considered to be offline--even though new maps are generated when the player progresses to the next level, the entire dungeon is created before the player begins exploring it and does not base generation on prior player behavior.
Online content generation happens during the play experience, optionally in response to how the player is acting.
Examples of online content generation include Canabalt's placement of level chunks in front of the player just off-screen, or Endless Web's  generation of new level geometry whenever the player alters a parameter to the underlying generator.
In most games, the player interacts exclusively with the generated content, just as if it were created by a human designer.
However, there are some games that offer the player the ability to interact with the generator itself: directly or indirectly requesting new content.
Thus, it is useful to understand the different ways that a player can exert control over the generator.
With no control, the player interacts solely with the generated content and has no influence whatsoever over the kind of content that will be created by the generator.
Examples of games that give the player no control over the generator include Rogue-like games , "endless runner" games, and Minecraft .
Parameterized control is a form of indirect control, where the player can provide the value for some set of parameters that influence the content the generator creates.
Preference control is another form of indirect control, where the system is set so that the player can state  preferences about the content they are seeing.
This form of control typically comes in the form of the player evaluating content that has already been generated to give feedback to the generator and help guide its future decisions.
For example, Galactic Arms Race  uses player preferences, inferred from player behavior, to guide the next generation of evolved weapons.
Direct manipulation involves the player actively altering the generated content to provide additional constraints to the generator.
This form of manipulation is more commonly seen in PCG-enabled design tools , rather than games themselves.
The Spore Creature Creator , a design tool offered as part of the game Spore , offers this kind of interaction.
A non-optimization based approach to experiential control comes in the game Warning Forever , in which the player's actions when attacking the boss directly influences how the boss evolves over time.
The results of these kinds of mechanics are several dynamics--ways in which the rules interact with each other and the player during play .
When considering how PCG enables these dynamics, it is helpful to compare a game with PCG to a game with similar mechanics that does not have PCG.
By doing so, it is possible to see what the unique dynamics are that are brought out by the incorporation of the PCG system, and how the mechanics related to the generator contribute to these dynamics.
Some generators are designed simply to piece together content haphazardly and let player experience emerge from the results, while others are designed for crafting particular kinds of player experiences.
In the case of generators that can be controlled by the player, it is also worth discussing whether or not the player's control extends to all aspects of how the generator designs for player experiences.
There are three different ways a generator constructs content to produce an experience.
All content generators, by their very definition, impact player experience somehow--it is simply a matter of understanding how intentional the impact is.
Generators that exhibit indirect control over desired player experience are ones that do not have any intent baked into their design.
For example, the gun generation system in Borderlands  is simply a matter of combinatorics--new guns are made by compositing different hand-authored gun properties.
There is no desire to create specific kinds of guns for specific kinds of players, or even to limit the combinations that can be made based on game constraints.
Compositional control involves influencing the appearance of particular components in the content being created, but not directly having experiential control over what is made.
For example, Endless Web  requires players to manipulate parameters that control the frequency of different level components appearing in the generated geometry, but does not offer control in the form of demanding a particular difficulty or pattern for pacing.
While the configuration of components does lead to a particular kind of experience, compositional control does not let a player explicitly control for experience, it must be left to emerge from the composition.
Experiential control means that the generator can directly control for the kind of experience the player will receive from the content generator, and that  the player can interact with the generator at the experiential level.
First, in order to understand how the PCG system is situated within the game and the dynamics that emerge from it, it is helpful to think about how the player will be interacting with the generated content and the extent to which the generated content will influence the player's overall game experience.
These games use the procedurally generated content as a core part of the player's experience.
For example, Infinite Mario Bros. relies entirely on the generated content for the player to be able to experience the game; platformers are heavily reliant on level design to dictate the aesthetic experiences that are core to the game.
These are games that use procedurally generated content to frame some aspect of the player's experience, but it does not make up the entirety of that experience.
For example, Civilization  is a game where map generation heavily influences early stage exploration and decisions about where to build cities, but there are so many other mechanics in the game that the player can build strategies around that, by the later stages of the game, the fact that the map was procedurally generated is far less important.
There are many games that use PCG to create content that is intended to be purely decorative; this is especially common in computer graphics, where a concern is how to generate reasonable textures, vegetation, and decorative facades for city buildings .
While this distinction between "decorative" and the other two categories might be seen as similar to Togelius et al.
All content in a game makes up a part of the player's experience, even if it is not directly interacted with, and thus there is no "unnecessary" content from a dynamics point of view.
Sometimes this reaction must come very quickly, in the case of endless runner games like Robot Unicorn Attack .
Other times, the reaction may be related to exploring an unfamiliar space, as in the platformer Spelunky .
It is important to note that the dynamic of reaction emerges simply from the use of randomness; it is possible for generators that perform content selection from a library of experiential chunks or templates to produce these experiences; there is no need for sophisticated generators that incorporate experiential design.
Indeed, the dynamic of reaction vs. memorization arises in games without any PCG at all, but that include a random element, such as matchthree games.
Such games would be drastically different were the gem ordering to be deterministic; players would be able to memorize sequences of moves and practice moves that lead to optimal play.
Further, it is plausible that a similar experience about reacting to unforeseen circumstances could be crafted through crowdsourcing level designs from a large pool of users, such that each time the game is played, the player sees content from a different user.
Without any input or control from the player, the role of the computer is to be an on-demand, highly productive replacement for a human designer.
There is no clear analog to this dynamic when considering games with static, human-authored content.
Building a strategy around the generator is, clearly, only possible with an actual content generator that can respond believably to human input.
In fact, generators that have only indirect control over player experience are not as suitable for producing this dynamic, as the player needs to have a mapping between action and generator reaction in order to learn how the system works and build a strategy.
This dynamic arises from a generator's ability to create vast, varied spaces that could never be reasonably made by a single author.
Generators that produce this dynamic are those that work either offline or online, at the level of components or subcomponents , create either core or framing content, and do not necessarily require any player control over the generator but can design for experience either directly or through components.
There are several examples of games that use this dynamic, including Minecraft , the academic project Charbitat , and Inside a Star-Filled Sky .
The key here is that the generator produces content that is somehow surprising to the player as they explore the space.
For example, the Borderlands  weapon generator produces a vast array of guns that the player can be surprised by, but the player might be searching for a particular kind of gun as they hunt through the space.
In order to produce this dynamic in games without content generation, it would require a large authorial burden on a team of human designers.
However, there are games that show that this level of authoring is plausible; for example Animal Crossing: New Leaf  is a game that has a huge cast of characters, each of whom have item preferences, unique home layouts, one of several kinds of personality, and unique verbal cues.
It has a large catalog of items for the player to purchase and search for over the course of play.
While the physical space of the game is a small town, there is still a massive amount of designed content in the game that produces a similar dynamic of searching and discovering a vast, designed space.
Online, controllable content generators can lead to a dynamic in which the player builds strategies around the generator.
This leads to a cycle in which the player informs the generator what should be created next, and the content presented in response informs the next decision that the player will make.
Examples include Warning Forever  and Endless Web , which is described later in the paper.
There are also games that use content generation to frame choices made by the player, where content is generated offline with or without control from the player.
The dynamic that emerges from this form of generation is an ability for the player to practice game strategies in a variety of different environments.
Civilization IV  is an example of a game that allows the player to exert parameterized control over the generator, in order to help guide the environment they will be playing and practicing in.
Diablo 3  does not give the player control over the generator, but still allows the player to practice different combat strategies or character classes in different worlds.
In comparison, games that have only a single environment to play in do not achieve the same sort of dynamic.
For example, Professor Layton and the Curious Village  is a game where the player must progress through a series of hand-authored puzzles.
If the player is stuck on a particular puzzle, there are no options other than to ask for hints or seek the solution from another player.
The incorporation of procedurally generated puzzles would allow the player to practice different solving strategies in a variety of related contexts.
On the other hand, there are puzzle games such as Picross  which do allow the player to practice and improve upon their overall puzzle solving strategy simply through practicing on a large set of hand-authored levels at increasing difficulty.
It is plausible for human-created content to compensate for the content-generator.
The design choices made for the PCG system, in concert with the mechanics of the game, lead to unique dynamics.
These dynamics then act in support of several different aesthetic experiences.
The three aesthetics mentioned below are among the eight "kinds of fun" identified by Hunicke et al.
PCG acts in support of discovery by providing new environments for the player to explore or new procedural systems for the player to learn about over time.
This aesthetic is supported by the dynamics of Searching a Vast World and Building Generator Strategies.
In the first case, discovery comes simply through exploring a large, unknown environment.
In the second case, discovery is also cast as a form of exploration for the game's generative space.
The final dynamic identified in this framework is that of how PCG impacts the community of players surrounding a game.
Gee describes this community as the "external semiotic domain" for games, and as an area where players engage in a great deal of learning and reflection while talking to each other about game strategies  PCG researchers typically focus on crafting an experience for individual players, only within the game's internal semiotic domain.
However, there is evidence that the incorporation of PCG into a game prompts communication about the underlying system and its impact on the play experience within a community of players.
For example, Civilization IV players engage in long discussions about how different map generation options work, how they impact strategies, and why they prefer certain options .
In a point-and-click adventure game that incorporated offline content generation to produce a unique set of puzzles for each player, the designer noticed that players who typically rush to post a walkthrough for adventure games worked together to figure out how the underlying content generator was working .
Understanding the community that surrounds games that use PCG is an area ripe for future research, both from a PCG AI point of view 
PCG acts in support of challenge through the dynamics of Memorization vs.
Reaction, Building Generator Strategies, and Practicing in Different Environments.
Again, each of these dynamics leads to a different form of challenge.
Games that use PCG to force the player to react quickly are providing a form of twitch challenge, where the player must make moment-to-moment decisions based on a world unfolding in front of them.
Whereas games that use PCG to force the player to react, but not necessarily in a timesensitive way, offer challenge in that the exact content being experienced has not been seen before by the player.
Similarly, Practicing in Different Environments allows the player to experience new challenges  through playing the same game in several different environments.
We can also consider dynamic difficulty adjustment as related to the Memorization vs.
Reaction dynamic, in which the player is not consciously making a decision about how to guide the generator, but nonetheless is influencing how the generator will mete out challenges over the course of the game, thus altering the player's path and making it impossible for them to memorize what will come next.
When Building Generator Strategies, the game has added challenge through the layer of strategic play that comes in learning how the generator works, what it can create, and how to use that knowledge to the player's advantage.
PCG acts in support of fellowship through creating an emergent system that encourages player communication outside of the game environment, via the Interaction with a Community of Players dynamic.
Endless Web has been used as a motivating example for several of the framework options thus far.
It is a PCG-based game , designed intentionally so that its mechanics, dynamics, and aesthetics are heavily interdependent with the PCG system, and where the PCG system and game were iteratively co-designed.
Endless Web uses a generator called Launchpad.
It is a 2D platforming game that uses entirely procedurally generated content; players are tasked with exploring Launchpad's generative space while simultaneously exploring physical pace.
These two dynamics lead to two aesthetics for the game.
The primary aesthetic is discovery, brought about by the fact that the game actively encourages the player to search a generative space as well as physical space.
The game is about the wonder and confusion of exploring a constantly changing space, which the PCG contributes to heavily.
A secondary aesthetic is challenge, which emerges from the strategies that the player needs to form and, to a lesser extent, from the platforming challenges themselves.
The Launchpad generator is a grammar-based generator.
It provides parameterized control over both compositional and experiential aspects of content.
The generator's experiential control comes in the form of being able to manipulate level pacing parameters, by specifying a length of time and frequency/pattern of actions that the player takes during that time.
Launchpad is used to perform online level generation; new level segments are generated whenever the player makes a choice that influences the generator, and in front of the player while she is running through the world.
Endless Web can theoretically produce an infinite world for the player to explore.
This paper has presented a framework for analyzing and discussing the role of PCG in game design and PCG-based design tools.
The framework has been illustrated with numerous examples from both industry games and academic research projects, and has helped uncover nuances in the motivations for using PCG in game design, and how the style of control a user has over the PCG system influences their experience.
One of the goals of this research was to unpack the concept of "replayability" and critically examine how PCG is used to impact play experience.
The first of these dynamics leads to replayability in that the entire purpose of the game is to play different content on each attempt, typically in order to beat a high score or progress further than in prior attempts.
The third leads to replayability by providing content that supports replay of more traditional mechanics as a way to practice in different scenarios.
Both the first and third dynamics could be plausibly attained through the use of large amounts of human-authored content.
While the second dynamic does lead to replayability , it is also a kind of game dynamic that is unique to what PCG can offer.
It is important to note that there are some aspects of how the player controls the content generator that are not prioritized in the framework.
In particular, no difference is explicitly drawn between intentional and unintentional control over how the generator is being controlled, it simply provides a language for the style of control from the generator's point of view.
Whether or not the player is explicitly provided with control over generated content is a matter for how the game is designed, and irrelevant to the generator.
As a platformer, the generated levels make up a core aspect of the way players interact in the game.
There are two main dynamics that emerge from this combination of mechanics: Searching a Vast Space, and Building Generator Strategies.
By being given control over the generator's content composition, the player is exploring both a physically infinite space and a very large  generative space.
She is tasked with searching for specific goals that are hidden at different configurations of this generative space, so she must manipulate the generator to find these goal points over the course of the game.
This goal-oriented play also contributes to the dynamic of Building Generator Strategies.
The player will have to experiment with different configurations of generation parameters that are at an acceptable difficulty level, and can choose to push the generator in different directions to find power-ups that can help through more difficult generated content.
One might think that intentional control might be required for a PCG-enabled game design tool, and certainly some aspects of control must be intentional--however, one of the goals of using PCG in design tools is to help the designer brainstorm different design variants, where lack of intention in control and resulting surprise over produced content is a benefit.
The presented framework finds broader relevance in the area of AI-enabled creativity and design support tools outside of the domain of games.
For example, the Picbreeder  tool for cooperating with a computer to create 2D evolutionary art can be described using the same set of "mechanics" aspects: patterns emerge from the underlying subcomponent representation that is not expected to be recognizable to the creator , is performed online in that creators are building upon each others' work, uses a preference-based interaction type, and allows users to exert compositional control over its output.
In future work, I intend to perform a broader survey of existing computationally creative tools to see how well the framework extends, as well as use the framework as a basis for exploring new potential tools, games, and research projects that use unique--or even undiscovered--forms of mechanical control to create new kinds of user experiences.
Bjork, S. and Holopainen, J.
Patterns in Game Design .
Bjork, S. Procedurally Generated Game Worlds.
A Mixed-Initiative Tool for Designing Level Progressions in Games.
Church, D. Formal Abstract Design Tools.
Cook, D. The Chemistry Of Game Design.
ScriptEase: A generative/adaptive programming paradigm for game scripting.
Dormans, J. Adventures in Level Design: Generating Missions and Spaces for Action Adventure Games.
Proceedings of the 2010 Workshop on Procedural Content Generation in Games , .
Engineering Emergence: Applied Theory for Game Design.
The Death of the Level Designer: Procedural Content Generation in Games.
Texturing & Modeling: A Procedural Approach.
Fernandez-Vara, C. Personal communication, creator of Symon game.
Gearbox Software and Feral Interactive.
Gee, J.P. What video games have to teach us about learning and literacy.
Automatic Content Generation in the Galactic Arms Race Video Game.
Procedural Content Generation for Games: A Survey.
ACM Transactions on Multimedia Computing, Communications and Applications, .
Hullett, K. and Whitehead, J.
Design Patterns in FPS Levels.
Proceedings of the 2010 International Conference on the Foundations of Digital Games , .
Hunicke, R., LeBlanc, M., and Zubek, R. MDA: A Formal Approach to Game Design and Game Research.
Proceedings of the 2004 AAAI Workshop on Challenges in Game Artificial Intelligence, AAAI Press .
Interactive Data Visualization Inc. SpeedTree .
Jennings-Teats, M., Smith, G., and Wardrip-Fruin, N. Polymorph: A Model for Dynamic Level Generation.
Khaled, R., Nelson, M.J., and Barr, P. Design metaphors for procedural content generation in games.
Professor Layton and the Curious Village .
Liapis, A., Yannakakis, G.N., and Togelius, J. Sentient sketchbook: Computer-aided game level authoring.
Proceedings of ACM Conference on Foundations of Digital Games, .
Generative design patterns for computer role-playing games.
The Complete Guide to Map Generation.
Muller, P., Wonka, P., Haegler, S., Ulmer, A., and Van Gool, L. Procedural Modeling of Buildings.
Animal Crossing: New Leaf .
Nitsche, M., Ashmore, C., Hankinson, W., Fitzpatrick, R., Kelly, J., and Margenau, K. Designing Procedural Game Spaces: A Case Study.
Ohkubo, H. Warning Forever .
Persson, M. Infinite Mario Bros!
Donkey Kong Country 2: Diddy's Kong Quest .
Regier, J. and Gresko, R. Random Asset Generation in Diablo 3.
Combining Search-Based Procedural Content Generation and Social Gaming in the Petalz Video Game.
Proceedings of the 2012 Conference on Artificial Intelligence and Interactive Digital Entertainment, .
Inside a Star-Filled Sky .
The Art of Game Design: A book of lenses.
Picbreeder: a case study in collaborative evolutionary exploration of design space.
Shaker, N., Nicolau, M., Yannakakis, G., Togelius, J., and O'Neill, M. Evolving Levels for Super Mario Bros Using Grammatical Evolution.
IEEE Transactions on Computational Intelligence and Games , .
Towards Automatic Personalized Content Generation for Platform Games.
Proceedings of the Sixth Artificial Intelligence in Interactive Digital Entertainment Conference , .
Smelik, R., Galka, K., de Kraker, K.J., Kuijper, F., and Bidarra, R. Semantic constraints for procedural generation of virtual worlds.
International Workshop on Procedural Content Generation in Games, ACM .
Smelik, R.M., Tutenel, T., de Kraker, K.J., and Bidarra, R. Integrating Procedural Generation and Manual Editing of Virtual Worlds.
Proceedings of the 2010 Workshop on Procedural Content Generation in Games , .
A Case Study of Expressively Constrainable Level Design Automation Tools for a Puzzle Game.
Proceedings of the 2012 Conference on the Foundations of Digital Games, .
Smith, G. and Harteveld, C. Procedural Content Generation as an Opportunity to Foster Collaborative Mindful Learning.
Workshop on Games and Learning, co-located with Foundations of Digital Games 2013, .
Smith, G., Othenin-Girard, A., Whitehead, J., and Wardrip-Fruin, N. PCG-based Game Design: Creating Endless Web.
Proceedings of the International Conference on the Foundations of Digital Games, ACM , 188-195.
Smith, G., Whitehead, J., Mateas, M., Treanor, M., March, J., and Cha, M. Launchpad: A Rhythm-Based Level Generator for 2D Platformers.
IEEE Transactions on Computational Intelligence and AI in Games  3, 1 .
Smith, G., Whitehead, J., and Mateas, M. Tanagra: Reactive Planning and Constraint Solving for MixedInitiative Level Design.
IEEE Transactions on Computational Intelligence and AI in Games , Special Issue on Procedural Content Generation 3, 3 .
What is procedural content generation?
Proceedings of the 2nd International Workshop on Procedural Content Generation in Games, , 3.
Togelius, J., Yannakakis, G.N., Stanley, K.O., and Browne, C. Search-Based Procedural Content Generation: A Taxonomy and Survey.
