The creation of text will remain a necessary part of humancomputer interaction with mobile devices, even as they continue to shrink in size.
On mobile phones, text is often entered using keypads and predictive text entry techniques, which attempt to minimize the effort  needed to enter words.
This research presents results from the design and testing of alphabeticallyconstrained keypads, optimized on various word lists, for predictive text entry on mobile devices.
Complete enumeration and Genetic Algorithm-based heuristics were used to find keypad designs based on different numbers of keys.
Results show that alphabetically-constrained designs can be found that are close to unconstrained designs in terms of performance.
User testing supports the hypothesis that novice ease of learning, usability, and performance is greater for constrained designs when compared to unconstrained designs.
The effect of different word lists on keypad design and performance is also discussed.
While mobile devices may not be suitable for writing novels, they are appropriate for writing notes and "to do" lists.
Text entry is also used to maintain mobile calendar and address book applications, and mobile communication needs include text messaging, retrieving information, and entering phone numbers.
But mobile applications require efficient ways to record and access information under circumstances that are often quite different from those where desktop computers are used .
Since mobile devices can be taken anywhere, the user's environment can change rapidly from moment to moment.
There can also be a significant number of people, objects, and activities vying for a user's attention aside from the mobile application itself .
Sometimes mobile users will find themselves wanting to enter text with one hand, or even no hands, and may not be able to look at the device itself while doing so.
Predictive text entry methods are often used with keypads on devices such as mobile phones.
Past research  has looked at optimizing text entry performance by creating keypad designs  that reduce the number of keystrokes needed to enter a word, or reduce the number of ambiguous keystroke combinations  This research looks at developing predictive text entry methods with keypads in a number of sizes  with the constraint that letters placed on keys must remain in alphabetical order across keys.
It is hypothesized that this constraint will increase ease of learning, performance, and usability for novice users.
In addition, the more casual, unstructured, and hurried text entered into mobile devices can be very different than that used in more formal writing or in speech.
A great deal of mobile communication is done with short messages, oftentimes using abbreviations such as HRU for "how are you" .
If predictive text entry methods use dictionaries that do not contain appropriate vocabulary, text entry will become more difficult for the user rather than easier.
Text entry methods must be developed with words and phrases suited to the intended application environment.
To address this concern, our research uses spoken and written word lists, as well as a list from derived from SMS  messages.
Mobile devices play an increasing role in supporting the interactions of our society.
While pictures and sounds are routinely sent and received with these devices, they continue to process a great deal information in the form of text.
Therefore, text entry will remain a necessary part of human-computer interaction with mobile devices, even as they keep shrinking in size.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
In this study, complete enumeration is used to find keypad designs with alphabetic constraints for which users will have the best chance of inputting words in the fewest keystrokes without running into ambiguity problems.
These designs are compared to unconstrained designs  that do not require letters to remain alphabetized.
Performance predictions with written, spoken, and SMS word lists show that constrained designs come very close to unconstrained designs with the same number of keys.
User testing comparing an eight-key constrained keypad design against a size-equivalent  unconstrained design supports the hypothesis that novice user testing and usability is greater for constrained keypad designs versus unconstrained designs.
Differences in keypad designs and performance based on the word list used are also discussed.
Research on text entry disambiguation and keypad design can be traced back to work that originally looked at ways help motor-impaired users  enter text.
Research such as , , , and  described the optimization of character placement on various-sized keypads and the development of disambiguation algorithms using word dictionaries and statistics.
Other research has looked at improving the performance of disambiguation algorithms by matching unknown words with the prefix or suffix of known words , using the context of the phrase or document being typed , or using probabilistic data from word pairs to guess a word based on its preceding word .
Since the method does not use a dictionary, it works well even with proper nouns, abbreviations, or slang.
Mobile phones keypads follow an international standard where the keys 2 through 9 are each mapped to three or four letters .
Several approaches are used to enter text with this keypad.
In the multi-press  method, the user presses the key that corresponds to a desired letter one or more times.
For example, the letter "r" requires that the 7 key  be pressed three times.
A user pauses or presses an additional key to move to the next letter.
The two-key approach requires selecting a letter's group with a first key press and location with a second.
With this method, the letter "r" requires the key press sequence 7-3.
A third approach uses single key presses and linguistic knowledge to "guess" the intended word.
For example, the sequence 8-4-3  might produce "the" out of all possible letter combinations.
This process of disambiguation must sometimes automatically choose between more than one word produced by the same set of key presses, or present the user with a series of word choices.
Word selection can be done through a combination of word or n-gram  frequency lists, user preferences, or past history of user word choices.
A common disambiguation text entry system is T9 by Tegic .
Models for text entry using keypads  have predicted expert input speeds as high as 27 words per minute  with multi-tap and two-key methods, and 46 wpm for predictive methods.
However, actual user studies have shown lower performance.
An experiment using a mobile phone  found that experts and novices reached about 8 wpm with multi-tap.
In comparison, the T9 method was used by novices at 9.1 wpm and by experts at 20.4 wpm.
In an effort to more accurately predict novice user performance, Pavlovych and Stuerzlinger recently proposed various models for non-expert keypad text entry .
Variations of keypad text entry techniques have looked at improving performance  and extending character sets beyond letters .
The predictive keypad design problem places M letters on N keys to maximize  a performance objective P. In this research, two different metrics for P were investigated.
One metric was the disambiguation accuracy , which indicates the fraction of times in which the word with the highest frequency of occurrence is the one intended by the user.
This is the probability that, if a sequence of keys is pressed, the "desired" word appears.
An optimal design is one that maximizes the DA for a given list of words.
The second metric is the average number of keystrokes necessary to enter each character, or keystrokes per character .
This assumes that the user must sometimes make additional key presses to select between word possibilities resulting from ambiguous key patterns.
KSPC is minimized for best performance.
The predictive keypad design problem is difficult because if more than one letter can be placed on a given key, then a given key sequence might correspond with many possible words.
Shifting letters between keys can reduce the possibility of this happening.
The unconstrained version of the keypad problem allows any letters to be placed on any keys, and the constrained version requires letters to remain in alphabetical order across all keys.
Previous studies have shown that users of predictive keypad methods with unconstrained letter placement can achieve high performance, but only after much practice .
Alternatively, constrained designs should increase usability and lessen learning time for novices.
This hypothesis seems reasonable given the work of Smith and Zhai, who found that a virtual keyboard created with alphabetical ordering tendency , while not optimal for advanced users, did increase performance and preference ratings for novice users .
Word prediction algorithms match the current letters entered by a user to a dictionary of words with associated frequencies of occurrence.
If the current letters  match an entire word, that word becomes a candidate for selection.
The frequencies determine which candidate ranks highest on a selection list .
The user can accept that word choice, or cycle through any remaining choices on the list .
The problem of arranging of letters on keys belongs to the NP-complete class of mathematical optimization problems .
Therefore, the most straightforward way to guarantee finding the optimal solution is by searching every possible arrangement and selecting the best one.
Enumerating the total number of different unconstrained keypad arrangements quickly becomes computationally unrealistic as the number of letters and keys increases.
Fortunately, it is easier to completely enumerate all of the constrained layouts.
The constrained problem can be viewed as placing N-1 dividing positions between a sequence of M characters, which can be solved completely in a more reasonable time.
For example, for M=26 and N=8 , the unconstrained problem has ~1.6x1020 possible solutions, while the constrained design has only 480,700.
While large problems still took several days to solve, complete enumeration was used to calculate all possible constrained keypad designs for varying numbers of keys.
A program simply generated all of the character/divider sequences, translated each into the corresponding keypad design, checked its performance, and tracked the best one.
For comparison purposes, unconstrained keypad designs were generated using a Genetic Algorithm-based heuristic.
Genetic Algorithms  simulate biological evolution behaviors such as reproduction, crossover, and mutation to quickly search for solutions to complex problems .
Our method first randomly generates a population of candidate solutions.
The best solutions from this population "mate" with each other, and their "children" become the next generation of solutions.
Reproduced children are also subject to random changes .
The best solutions of this next generation are then used to reproduce another generation.
This process continues for a predetermined number of iterations.
Additional details on the GA-based heuristic are available from the authors.
The heuristic performed quite well when its results for constrained keypad designs were compared against results found by complete enumeration.
The heuristic often found the optimal solution, and always came within 0.33% of the optimal solution for one to twelve key designs.
One limitation of most text entry research for mobile devices is that frequency information for words and phrases comes from text corpora derived from publications such as newspapers and books.
But text entry in the mobile environment can be quite different from that in the desktop environment in terms of words used and their frequency of usage.
Text entry can also vary based on the context of use, and the task being performed.
To see what effect different task environments might have on text entry interface design, we used three distinct English word lists in this study.
One list was derived from written language, one from spoken language, and one from short text messages.
The written and spoken word lists1 used in our study are derived from the British National Corpus  , which contains approximately 65,000 distinct words and their frequencies of occurrence.
These words are derived from a total sample of 100 million words of present-day English, of which approximately 90 million come from books and ten million come from conversations and monologues.
The written word list, with a total of 4420 words, contains all words that appear with a frequency of at least 20 times per million written words.
The spoken word list, with a total of 4307 words, contains all words that appear with a frequency of at least ten per million spoken words.
While these two lists are shorter than the complete word lists derived from the BNC, the written word list used in our study accounts for approximately 84% of all written words, while the spoken list accounts for about 96% of all spoken words.
The written word list is similar to those used in many previous mobile device text entry studies.
The spoken word list should better reflect the mobile environment in terms of word usage and frequencies because speech is usually less formal than writing.
The SMS word list, which contains 7325 words, was derived from a corpus 2 consisting of about 10,000 SMS messages collected as part of a research study in Singapore .
The study looked at ways to improve SMS messaging on mobile phones by remapping characters to keys .
Two-thirds of the SMS corpus was collected from several regular users of mobile phones.
The rest was primarily collected over the Web from a larger sample of other solicited mobile phone users.
The corpus was processed to create a word list and a set of associated frequencies.
There are several differences that stand out when comparing the spoken, written, and SMS word lists.
Abbreviations, such as "hrs" for "hours", and "vry" for "very," occur frequently in the SMS corpus.
On the other hand, single letters, such as "U," "S," and "A," tend to occur only in speech .
Significant differences in word frequencies also occur between the three lists.
For example, the word "you" occurs 25,957 times in one million spoken words, about 9700 times in one million SMS words, and only 4,755 times in that many written words.
The word "yeah" occurs 7,890 times in speech and only 17 times in written text per one million words.
Using complete enumeration, optimal keypad designs were found for keypad sizes ranging from one to twelve keys.
Designs were optimized by maximizing disambiguation accuracy using each of the three word lists .
Selected optimal designs  for all three lists are shown in Table 2.
Complete enumeration was then used to find optimal keypad designs using the KSPC metric.
Table 3 shows the minimum KSPC values found for keypad designs having one to twelve keys across the three different word lists.
Table 4 shows selected optimal designs corresponding to these KSPC values.
Two modifications were made to all three lists before they were used in our study.
First, all punctuation was removed and any upper-case characters were converted into lowercase.
This was done because the study focused only on creating a keypad for only the letters of the English alphabet, without punctuation marks or capitalization.
This assumption is limiting, but consistent with other studies of text entry methods.
Second, any phrase found on the list was removed, and its frequency of occurrence was added to the frequencies of all its member words.
For example, if the phrase "in addition to" appeared ten times, ten was added to the frequencies of "in", "addition", and "to".
Since the search space for unconstrained keypad designs is so large, it is impractical to use complete enumeration to find optimal layouts.
Instead, our GA-based heuristic was used to find solutions to this problem.
Maximum disambiguation accuracy values for each word list are shown in Table 5.
Selected optimal keypad designs are shown in Table 6.
The disambiguation accuracy values from Table 1 for each of the three word lists are plotted against the number of keypad keys in Figure 1.
Predicted performance is poor for small designs, but increases rapidly as the number of keys increases and then begins to level off.
For keypad sizes up to nine keys, the performance level for the written word list is always greater than or equal to the spoken list.
Performance with the SMS word list is consistently lower than that obtained with the other two lists, and the rate of increase in performance is also lower.
Very good performance  was achieved with designs of seven keys for the written and spoken word lists, but not until ten keys with the SMS list.
But this result is tempered by results with the SMS word list, which requires seven keys to approach the same performance level.
Table 2 shows that the optimal keypad designs are different for each of the three word lists, except at twelve keys, where the written and spoken list designs are the same.
Besides offering better performance, the constrained designs should also offer greater ease of learning and usability, especially for novices.
In addition, the constrained eight-key design is similar enough to the North American design such that user effort to change over to the new design if it were implemented on mobile phones would be minimal compared to unconstrained designs.
An optimal keypad design was also proposed in the study that collected the SMS corpus used in our research .
The optimal constrained keypad design using the SMS word list from our study is compared to the eight-key unconstrained design from  in Table 9.
The difference in DA values is 1.76% in favor of the SMS keypad design, but the difficulty in learning the unconstrained keypad design may negate the performance advantages that can be gained by the higher DA value.
A similar trend in performance is found with the KSPC values in Table 3.
For up to ten keys, optimum predicted performance with the written word list is greater than with the spoken word list, which in turn is greater than with the SMS word list.
For eleven and twelve keys, performance becomes greatest with the spoken word list, followed by the written and SMS lists.
A comparison of Tables 2 and 4 shows that for all three word lists, the two metrics provide different optimal keypad designs for a given number of keys.
This suggests that optimal keypad designs might be task or condition specific, and that the choice of keypad design may depend on the type of performance that is desired.
That is, whether it is more desirable to minimize the number of keystrokes, or maximize the number of correct word predictions.
Comparing Table 5 with Table 3 shows that maximum DA values for unconstrained keypad designs consistently meet or exceed the DA values of equivalent constrained designs across the three word lists.
But the optimal unconstrained keypad designs  are radically different than their constrained counterparts .
Results of a comparison test between two size-equivalent constrained and unconstrained designs are presented later in this paper.
Table 7 shows a performance comparison  between our optimal constrained keypad designs and three unconstrained designs proposed in the literature .
A comparison is also made to the standard North American telephone keypad, which is a constrained design .
Size-equivalent  constrained designs from our study have performance advantages of between 0.61% and 4.20% over all four other designs.
In addition to providing support for constrained keypad designs, our research has shown the effects of different word lists on keypad design and performance.
If a design is optimized on an inappropriate corpus, performance will suffer.
Table 8 shows DA values with the SMS word list for keypad designs originally created  using the written or spoken word lists.
The values are consistently much lower than the DA values achieved when the keypad is designed using the SMS word list.
The effect of the word lists is also shown by the differences in optimal keyboard design  for different size keypads.
Except for the one, two, and twelve key designs, at least one of the constrained optimal designs is different from the other two for a given keypad size.
For half of the keypad sizes, all three constrained optimal designs are different.
The size of a word list can factor into how well a keypad design can be optimized in terms of DA and KSPC.
The more words on a list, the harder it is to find key combinations that match only one word from the list.
The SMS word list is much larger than the spoken and written word lists, so it seems reasonable that final DA and KSPC values for given keypad sizes might be lower than for the other word lists.
Another factor that can affect keypad performance is the distribution of word sizes.
Table 10 shows the percentage of words of a given word length in each word list.
Figure 2 summarizes this same data graphically.
This is not surprising since it is expected that users would tend to favor shorter words for text messaging due to text entry difficulty and limitations on message size.
But placing increased emphasis on shorter words, especially with larger word lists, makes it more difficult to find well-performing solutions.
Distribution of word sizes may also be the reason that performance with the spoken word list becomes better than written list performance for designs of ten to twelve keys.
The text box is cleared for the next sentence.
To investigate the hypothesis that the constrained keypad designs are easier for novices to learn and use than their equivalent unconstrained designs, we performed an experiment.
The optimal eight-key constrained and unconstrained keypad designs found using the spoken word list were used to create two text entry interfaces using virtual keys.
These interfaces were implemented on a Pocket PC using the .NET Compact Framework environment.
The interface with the constrained keypad design is shown in Figure 3.
The interface was divided into two parts.
The top section was a text box, used to display the text that is entered.
The bottom section was a twelve-button keypad.
Eight keys were assigned letters.
Eight computer science graduate and undergraduate students voluntarily participated in the experiment.
Six of the subjects were male, and two were female.
The median age of the subjects was 29 years, and all but one carried a mobile phone.
The other seven had carried mobile phones for 3.7 years on average, and three stated that they used the mobile phone daily.
Subjects primarily used their mobile phones for voice calls, checking the time, and for reminders or alarms.
Among the seven subjects who carried mobile phones, five of them reported occasional use of text messages, and the other two said they never received or sent text messages.
Since none of the subjects used the phones for text messages on a regular basis, they were all categorized as novices for the purpose of this study.
Two testing sessions were conducted.
For the first session, each subject first filled out a questionnaire asking for background information.
A stylus was used to "press" each key.
An explanation on how to enter a sentence was given, and the subject entered two sample sentences for practice.
After this training, each subject performed four task sessions.
During each task session, the subject entered one of four sets of six sentences.
Each subject entered all four sets over the course of the testing session, but the order of the sets was randomly chosen.
A sample set of sentences is shown in Table 11.
Sentences were chosen from those provided in .
The sets were balanced to provide the same number of characters in each set, and the same number of words that require an ambiguous keystroke sequence .
For each task session, subjects alternated between the constrained and unconstrained keypad designs, starting with the one they trained on, therefore using each interface twice.
Opinions about the interfaces were solicited at the end of the testing session.
Subjects were told to work as quickly and accurately as possible, and to correct any errors that they noticed.
For the second session, Table 13 shows the average input speed for the constrained and standard telephone keypad designs, along with the average number of errors made per sentence.
This analysis shows that average entry speed using the constrained keypad design is not significantly different than that with the standard telephone design, and the error rate is not significantly different either.
Since the same sentences were input by the same subjects using the constrained keypad design in both sessions one and two, learning effects can be analyzed.
Table 14 shows the average text entry speed for the constrained keypad designs in both sessions, along with the average number of errors per sentence.
This analysis shows that average entry speed in session two is significantly higher than that in session one, and the error rate is not significantly different between sessions.
For the second session, the same subjects returned one week later to perform a similar set of tasks, although a questionnaire and training session were not administered.
In addition, instead of using the unconstrained design, the constrained design was tested against the North American standard telephone keypad design.
Subjects used the constrained interface for inputting the same two sentence sets they entered in session one.
The remaining sets of sentences were used with the telephone keypad design.
While this experiment is small, and only looks at three designs from one keypad size, its results generally support the hypothesis that novice user testing and usability is greater for constrained keypad designs versus unconstrained designs.
From Table 12, we see that novice users were able to use the constrained eight-key keypad design more effectively than an equivalent unconstrained design.
Text input speeds are higher without any difference in error rate.
Table 13 shows that while the average input speed with the standard telephone keypad is slightly higher than with the equivalent constrained design, the difference is not significant.
There is no significant performance difference in terms of error rate between the two designs as well.
Table 14 suggests that subjects can effectively learn and use constrained keypad techniques over time, especially since they were not provided with any additional training at the beginning of the second session.
Non-parametric  tests were used to see if there were differences in performance for the two keypad designs.
For the first testing session, Table 12 shows the average input speed  for the constrained and unconstrained designs, along with the average number of errors per sentence.
Errors are defined as each use of the backspace key to correct a character .
The significance of the difference between the two values is reported in the last column.
While analysis showed that performance tradeoffs exist between the designs, reasonable performance can be achieved by relatively small keypads, and performance is close to that found for size-equivalent constrained designs.
Optimal keypad designs also differed for the two performance metrics used, suggesting that the best keypad design might depend on the type of task involved.
User testing of an eight-key design supported the hypothesis that novice user ease of learning and usability is greater for constrained designs than for unconstrained designs.
Second, the study showed that different word lists affect optimal predictive keypad designs.
The study used three word lists from different corpora, including one created from SMS messages, and found that performance for the same size keypad can vary greatly based on the word list used.
It was hypothesized that not only list size, but the distribution of word length in a list, could affect performance of keypad designs because keystroke ambiguities become more difficult to resolve.
The analysis of different word lists and corpora for keypad design has not been addressed in previous studies.
A secondary contribution of this study is the development of a GA-based heuristic to find effective solutions  to the NP-complete problem of creating unconstrained keypad designs based on various word lists.
The heuristic also finds good solutions to the constrained keypad design problem.
While GA techniques have been applied to unconstrained keypad design in the past, they have not been applied to constrained keypad design.
Many "optimized" text entry methods are counterintuitive and radically different from what users are already familiar with.
They can require great amounts of learning time to use effectively, and can frustrate users in the process.
This study has investigated predictive keypad text entry methods that can increase ease of learning, usability, and performance for novice users.
The methods conform to the basic design principle of standardization, which is done through alphabetization of letters across keys.
Techniques that build on familiarity and intuition should work well not only for novices, but also for mobile users who may be attending to other tasks while entering text.
While this study makes several significant contributions, it also has limitations.
First, while a full set of English letters was used for keypad design purposes, numbers and punctuation were not addressed in this study.
The results may also not be directly applicable to keypad designs for languages other than English.
In addition, editing was limited to a backspace command, with no ability to perform more advanced actions such as deleting an entire word.
The written and spoken word lists used to create the keypad designs in this study were subsets of the complete lists derived from the British National Corpus.
These lists were chosen to demonstrate the feasibility of designing constrained keypads and to compare their predicted performance against other keypad designs, rather than to create an "ultimate" keypad design.
The words that users should need most of the time are in these lists, but less frequent words are not.
Furthermore, it is not desirable to optimize keypad designs on the entire lists, because then designs will be optimized on words that may realistically never be used, which could negatively impact actual performance.
Of course, it may be desirable to add some less frequently used words to the lists to minimize the occurrence of missing words.
Users could also enter their own words into the system.
While the original design of the keypad will not account for such additions, a frequency or ranking for the word can be entered for use during word prediction.
The SMS corpus used in this study has limitations based on its derivation and origin.
While the messages were in English, they were collected from subjects in Singapore.
There may be cultural or country-specific differences in the type of words or abbreviations used, or the spellings of some words.
This concern comes into play with the British National Corpus as well, with the spelling of words such as color  and analyze .
The SMS corpus also consisted primarily of self-submitted messages, rather than being a true sampling of actual SMS messages sent and received by users.
Certain messages may have been purposely or mistakenly left out of the corpus, and there is also the potential for fake messages to be added.
Although not a limitation, a predictive algorithm based on word matching was used for this study.
However, the results of the keypad designs could differ if other methods, such as those based on n-grams or word pairs, are used.
This research also did not look at how physical key configuration differences for keypad designs might affect performance.
For example, comparing performance of a nine-key design arranged as a 3x3 grid or arranged as one row of four keys over another row of five keys.
The experiment reported in this paper provides a very basic level of support for the benefits of constrained keypad designs.
Larger studies are needed to test a wider variety of different keypad configurations.
Studies also need to be conducted to test longer-term learning effects.
Realistic prototypes also need to be built to better mimic the types of mobile devices these methods are intended for.
It may work best to collect various corpora from different mobile environments and applications .
Another area for future research is the development and validation of user models to aid the understanding and prediction of user performance with mobile device text entry methods.
Existing HCI models for keypad text entry fail on two accounts.
One is in their ability to predict novice  performance, although recent work by Pavlovych and Stuerzlinger  has begun to address this shortfall.
To do well in predicting novice performance, models need to account for actions that may occur  when users are first learning a system, like pauses, double checking of actions, and wrong key presses.
The other is how models account for errors, editing, and other more indirect factors that contribute to text entry performance.
For example, duplicate key presses  can occur, and users might delete an entire word and type it again rather than correcting a single incorrect letter it contains.
Both of these issues are critical to accurately modeling user performance, especially that of non-experts, on mobile devices.
The authors have started to create models that address these two issues.
