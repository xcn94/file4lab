We present ACCD, an interaction technique that allows direct drawing of long curves on 3D shapes with a tablet display over both multiple depth layers and multiple viewpoints.
ACCD reduces the number of explicit viewpoint manipulations by combining self-occlusion management and automated camera control.
As such it enables drawing on occluded faces but also around a 3D shape while keeping a constant drawing precision.
Our experimental results indicates the efficacy of ACCD over conventional techniques.
Drawing is performed with stylus strokes on the tablet display, while viewpoint manipulation is done with separated tools .
However, this configuration requires the users to frequently switch between drawing and viewpoint manipulation.
Indeed, some parts of the 3D shape might not be reachable from a single viewpoint:  faces occluded by the object itself ; and  back faces.
Viewpoint manipulations are required to access such faces.
Moreover, the drawing precision depends on  the distance from the viewpoint to the shape, and on  the angle between the line of sight  and the normal of the surface .
Controlling this precision during drawing thus requires even more viewpoint manipulations.
This number of viewpoint manipulation can be very high for complex 3D shapes, leading to tedious and time-consuming drawing task.
Furthermore, switching between viewpoint manipulation and drawing results in discontinuities at the junctions of the different sub-curves.
For example, in 3D sculpture tools, like Pixologic ZBrush , the dig out tool is controlled by user strokes on the 3D shape.
The junctions of those strokes result in visual gaps that the user must correct afterwards.
Minimizing the number of strokes required to draw a single long curve is therefore key to avoiding visual gaps and hence reducing the correction step.
This paper presents ACCD , a new approach that minimizes the number of explicit viewpoint manipulations, and so the number of strokes while drawing long curves over both multiple layers and multiple viewpoints on 3D shapes.
To do so, ACCD integrates self-occlusion management and automated camera control for accessing back faces and controlling the drawing precision.
Drawing on 3D shapes is a generic elementary action for performing various tasks: 3D models painting , 3D sculpture , sketch-based 3D objects modelling , mesh segmentation , specification and control of navigation in 3D environments .
In WYSIWYG interfaces, drawing consists of mapping 2D input strokes into curves on the 3D shape.
Computing the new position and orientation of the camera:  A new intersection i1 is computed from the new position of the stylus.
The camera is rotated and translated to keep the distance to the shape  constant.
To address self-occlusion, Fu et al.
They proposed a layer-aware drawing technique that allows to access self-occluded faces.
Also, users can display a layer above another, and draw on it.
However, back faces remain unreachable.
Moreover, changing the layers order could be disturbing as it breaks the users' depth perception.
In this paper we propose a transparency-based approach rather than a layer-based approach to self-occlusion.
To address the back-faces issue, some commercial softwares use the UVMap technique .
This technique displays all the parts of a shape by unfolding it on a single 2D plan.
However, with complex shapes: - context is lost, the shape is displayed outside its 3D scene; - understanding the new representation requires a high cognitive load, which is even higher for untextured shapes; - most of the 3D shapes cannot be unfolded in a single 2D one: It has to be cut in pieces, preventing drawing continuity.
According to Schmidt et al.
The lower are D and A, the higher is the precision.
Controlling D and A with the status-quo configuration requires frequent viewpoint manipulations, which is tedious and time-consuming.
Both drawing and viewpoint control can then be done in parallel.
In our evaluation, we compare ACCD with this bimanual approach for direct drawing and viewpoint manipulation.
Automated camera control has been explored to assist different tasks in 3D environments .
The most complete study has been presented by Kahn et al.
Hovercam proposes to ease navigation around 3D objects at constant and close proximity by integrating camera controls into a single 2D gesture.
Thus it allows to access back faces while keeping D constant and trying to minimize A.
However, this technique is designed for mouse-based interaction and it does not support the direct mapping of stylus inputs on the tablet display.
In ACCD, the self-occlusion management uses a GPU approach that interactively changes the transparency while the viewpoint changes.
No pre-computation is needed, and the principle is simple .
For a camera position , ACCD looks for intersections with the 3D object along the segment .
The closest intersection to i1  is used for separating the 3D scene into two parts.
Camera frustum is changed, and the part of the scene from ic to c1 is rendered in a texture.
Then, the other part of the scene is rendered , and finally the texture is transparently superimposed.
Figure 2 shows an overview of the 4 main steps of the ACCD computation.
The whole computation is done for each 2D stylus displacement on the screen.
The first step consist of computing the new intersection point  on the object from the 2D displacement .
ACCD takes the intersection between the object and r1 .
The camera is rotated around i1 of an angle defined by n0 and n1, the normals of the previous and the current intersection faces .
Next, the camera is translated to keep the distance to the object constant, and to keep i1 under the current stylus position.
Finally, the camera is rotated once more to have its viewpoint direction orthogonal to the current face.
Yet, the rotation is not done at once .
It only takes a percentage of the complete movement , and the orthogonality is only obtained after a few 2D displacements.
This allows to smooth the transitions between the 3D object faces.
Because of the constraint of direct manipulation, the 3D object does not stay centered on the screen during the drawing.
Manual translations of the camera has to be integrated in the process of drawing, without breaking the continuity of the curve.
This is done with a translation mode, controlled by a switch button.
It allows the user to translate the camera position along the projection plan, while keeping the drawing cursor under the stylus.
Then, it is possible to switch between drawing and translating without lifting the stylus.
In this experiment we evaluated three approaches to combine viewpoint's manipulation with long curves drawing over both multiple layers and multiple viewpoints on a 3D shape.
The goal of this experimentation is to evaluate whether or not the user takes advantage of ACCD to improve curve continuity.
To quantify this, we mainly measured both the number of strokes  and the number of viewpoint manipulations  required by each technique.
With all these techniques, drawing is performed with stylus strokes on the screen of a tablet display.
Yet, the viewpoint manipulation control differs: - One-handed : Viewpoint rotations  are available as a quasi-mode triggered by a tablet display shortcut key  and controlled with the stylus.
It is therefore possible to draw and rotate the viewpoint in parallel.
Viewpoint is automatically controlled during the drawing.
For the clutching issue, viewpoint's translations are available as a quasi-mode triggered by a screen shortcut key and controlled with the stylus.
As we wished to focus on viewpoint control, all three techniques benefited from the same self-occlusion management.
Participants were instructed to keep the guiding path within the brush while drawing.
After each trial, participants were informed of the percentage of the guiding path that lies outside the path they drew.
We asked them to try to keep this percentage around 5%.
This aimed at having a consistent accuracy across participants.
Presentation ordering of the three techniques was counterbalanced across participants using a Latin-square.
For each participants, we recorded 36 drawing tasks.
The experiment was about one hour long.
Twelve right-handed novices  participated in our experiment.
We developed an OpenGL-based ad hoc application for this evaluation.
The analysis of variance below were performed separately for each 3D shape on the mean aggregated by participants with participant as a random factor and Technique as a factor.
Means were compared using Tukey's HSD tests.
We discarded 5 unfinished trials  from the 432 recorded drawing tasks.
We asked participants to draw long strokes along a guiding path on the surface of different 3D shapes with the three techniques.
Participants were standing-up and holding the stylus in their dominant hand.
We decided to do so as the sitting posture can constraint participants' gestures.
For each of the three techniques, participants first freely practiced on an infinity loop object .
Then they performed guided drawing tasks on three different 3D models  presented in the following order: - A Sphere as a simple convex shape; - A cut Cylinder as a more complex shape with concavity and thus possible self-occlusion; and - A Trefoil Knot with a very long guiding path.
For the Sphere and the Cylinder, participants first performed 5 training tasks with a large brush  and then 5 trials with a smaller brush .
As the Trefoil Knot was much longer, participants performed only 2 trainings with the large brush, and 2 trials with the smaller one.
The Technique factor had a significant effect on both the Number of strokes and the Number of viewpoint manipulations .
The Number of strokes  was found significantly smaller with ACCD than with the two other techniques for both the Cylinder and the Trefoil Knot .
For the Sphere, ACCD's NS was only significantly smaller than Biman's NS .
The Number of viewpoint manipulations  was found significantly lower with ACCD than with Biman on all 3D shapes .
One-H 's NVM was significanlty lower than Biman's NVM for the Sphere .
The evaluation provides encouraging results on the benefits and potential of ACCD.
First, ACCD reduces the number of strokes performed to draw a curve on a 3D shape.
This indicates that it allows to draw longer curves in a single stroke.
Thus it requires less switching between drawing and viewpoint control.
Secondly, ACCD provides a higher density and more homogeneity of input points along the drawn curve.
This indicates that it provides a more constant drawing precision.
Third, it tends to be faster than the other techniques even if this was only significant for the Sphere 3D shape.
These three points show that ACCD improves drawing continuity.
We also explored the effect of Technique on two measures of drawn curves regularity and found significant effects.
First, the Density of input points on the 3D curve  was found significantly higher with ACCD than with the two other techniques for all 3D shapes .
The only significant  difference between One-H and Biman was found for the Cylinder .
Second, the Standard deviation of the distances between input points along the 3D curve  was found significantly smaller with ACCD than with the two other techniques for the Sphere and the Cylinder .
For the Knot, ACCD's d was only significantly smaller than One-H 's d .
An outcome of our experiment was that occasional explicit viewpoint control would be helpful to reorient the viewpoint while drawing with ACCD.
ACCD could be extended with explicit finger strokes based viewpoint rotation.
The user would then rotate the viewpoint with its finger with the current drawing brush position as the pivot point.
We asked participants for their preferred technique, 9/12 participants said it was Biman and 7/12 said ACCD, but none answered One-H .
Those measurable results are consistent with participants' comments.
All participants were comfortable using ACCD, and no participant complained about the camera rotations.
Only one participant found clutching of ACCD annoying.
Another participant said that Biman needs more training than ACCD and two further participants clearly preferred ACCD, as the technique avoids jumps between different parts of the same shape.
Some participants expressed the need for occasional explicit control of the viewpoint while drawing with ACCD.
