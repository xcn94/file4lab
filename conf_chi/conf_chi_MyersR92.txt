ABSTRACT This paper reports on the results of a survey of user interface programming, The survey was widely distributed, and we received 74 responses.
The results show that in today's applications, an average of 48?10of the code is devoted to the user interface portion.
The average time spent on the user interface portion is 45% during the design phase, 50?70 during the implementation phase, and 37% during the maintenance phase.
345Z0of the systems were implemented using a toolkit, 27'-%o used a UIMS, 1470 used an interface builder, and 26% used no tools.
The projects using only toolkits spent the largest percentage of the time and code on the user interface  compared to around 45% for those with no tools.
This appears to be because the toolkit systems had more sophisticated user interfaces.
The projects using UIMSS or interface builders spent the least percent of time and code on the user interface  suggesting that these tools are effective.
In general, people were happy with the tools they used, especially the graphicai interface builders.
The most common problems people reported when developing a user interface included getting users' requirements, writing help text, achieving consistency, learning how to use the tools, getting acceptable performance, and communicating among various parts of the program.
INTRODUCTION We were tired of seeing rcfcrcnccs to papers from 1978 for data about how much of the time and code in applications is devoted to the user interface.
Surely with m&iern window managers, toolkits, intcrfacc builders and UIMSS, Lhc data have changed!
Therefore, wc decided to conduct a new survey to determine what user intcrfacc programming is like today.
This paper rcpmls on the rcsulLs or lhat survey.
These resuiLs will bc useful for a number of purposes.
First, they will help user interface dcvclopcrs dcmonswatc to their managers that, in fact, most projects spend significant time and resources on designing and programming the user interface portion.
Indeed, the numbers reported here might be used by managers to predict lhc type and amount of resources to be dircclcd toward user inlcrfacc development.
Third, Lhc results can bc used to support proposals to research and dcvciop ncw user interface tools and techniques, and lhc survey rcporLs on some specific problems and rccom mcndaLions for ncw mois.
Some of the questions on Lhe survey hIVCStigNCd how lhc various projects were organized, the process used to dcvciop the user interface, and what tools were used.
Clearly, user interfaces for programs have incrcascd in sophistication, with Lhe usc of dirccl manipulation and WYSIWYG styles, mice, window managers, CLC.
This, in Lurn, has made lhc programming task morv d ifficuk.
However, tools to help with user inLcrfacc software have also become more sophisticated and helpful.
Pmmiccion to copy without fw all or part of thie material IS crrant~d provided that the copies are not made or distributed for dtrect commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice ISgwen that copying IS by permission of the Association for Computing Mach !nery.
To copy otherwwe, or to republish, requires a fee and/or specific permission.
In artificial intelligence applications, an informal poll found it was about 5070 of the code , which is similar to the results of one AI project which reported 40% .
A recent paper discusses a number of reasons why user interface software is inherently more difficult to create than other kinds of software, and argues that we should not expect this problem to be "solved" , These reasons include that iterative design is necessary which makes using software engineering techniques more difficult, that multiprocessing is required to deal with asynchronous events from the user and window system, that the performance of the resulting interface must be fast enough to keep up with users, that there is an absolute requirement for robustness so the interface never crashes, and that the tools for developing user interface software can be very difficult to use.
SURVEY METHODOLOGY A draft of the survey was circulated on the SICXHI electronic mailing list, and a number of USCIUI comments were incorporated.
The responses were all received between April, 1991 and November, 1991.
We should emphasize that although some of the respondents were recruited d ircctl y, the majority were scllselected.
Thcrcforc, at lhc beginning of the survey, wc inclttdcd the following paragraphs:
Also, we arc not including the part of the application lhaL gcncranwrfacc component.
A window system is a software package that divides the computer screen into different areas for different contexts.
Although a more common term is window manager, some systems use that term only for the user interface, and use "window system" for the programming interface.
A toolkit is a collection of widgets such as menus, buttons, and scroll bars.
When developing a user interface using a toolkit, the designer must be a programmer, since toolkits themselves only have a programmatic interface.
An inter-ace builder is a graphical tool that helps the programmer create dialog boxes, menus and other controls for applications.
It provides a palette showing the widgets available in some toolkit, and allows the designer to select and position the desired widgets with the mouse.
Other properties can then be set.
Interface builders are limited to only laying out the static parts of the interface that can be created out of widgets, however.
They cannot handle the parts of the user interface that involve graphical objects moving around, By our definition, a User Interface Management System  is a more comprehensive tool than an interface builder.
A UIMS covers more of the application's user interface than just dialog boxes and menus.
Typically, it will provide help with creating and managing the insides of application windows.
Some tool makers have reported significant gains in productivity by users of their tools.
For example, the MacApp tool from Apple has been reported to reduce development time by a factor of four or five .
As another example, designers were able to create new, cus-
70% ~amc were from Canada, and 7'% were lrom olhcr places.
Thus it is not surprising that most or the applications described were dcvclopcd as commercial, Intcrnaj or military products .
Systems We asked that the answers to the survey questions be based on a single recently-developed application.
Application domain was quite varied, including programs intended for sophisticated users , programming aids , process control and military systems, office applications of many sorts , simulation and CAD systems, educational software, and even a few games.
These includes a number of major, well-known commercial products.
As can be seen in Figure 1, the most common hosts for these applications were either workstations  or personai computer systems .
The workstations include 8 systems for Sun, 4 for DECStations, 4 for HP, 2 for Silicon Graphics, and one each for RS6000, Intel, Apollo, and Tandem.
14 workstation systems did not specify which platform was used.
The personal computer category includes 12 programs for IBM PCs or compatibles, 9 for Macintosh, 2 for PS/2, and one for an Amiga.
There were also 4 systems for mainframes, and 3 systems designed to be portOne of the interesting able across multiple machines.
These are labeled "Combination" in Figure 1.
A majority of systems  used the C programming language.
All the Ada applications were military.
A very interesting result is that 58% of the systems were written using multiple languages, which is reflected in the counts above.
Often, this was a highcrlevel language and assembly language, or C++ and C, but other times, a special-purpose user interface language was used along with a` `regular" programming language.
We asked whether the applications required the cnd users to have any special training to use the system , and 48% said "none."
Hopet'ully, this reflects a growing ease of usc of the applications being written, rather lhart an unrealistically optimistic view of the user interfaces.
15 respondents did not supply any data on this question.
Developers Most of the people who fillcci out the survey were experienced programmers.
The median years of cxpcricncc was 7, and the median number of applications dcvclopcd was 5.
Most of the projects  involved multiple persons, although only 7% of the dcvclopmcnt groups had The Iargcst projccl rcpotlcd greater than 10 individuals.
200 developers, but some Iargc projects did not rcpml the number.
For the mtdti-person projecL$, Lhc respondent was usually the manager or the person in charge of' the user interface.
In terms of number of man-years for the entire project, lhc range was 0.01 man cars , up to ; `several hundred" man years.
The median was 2 man years.
For these, the average times were 34.8% for design and 65,2% for implementation.
84V0 of the applivalions used some kind of menu, Menus were popular even with applications not using a mouse, with over half of the non-mouse systems having menus.
In an effort to characterize the user interfaces of the projects described, we offered respondents several checklists of interface characteristics, covering input , output , interaction techniques , and presentation techniques .
Most  of the systems used a mouse.
Only one system reported using an exotic input device, and it was a scanner to read text.
None reported using a DataGlove, touch tablet, video camera, etc.
Similarly, few used unusual output devices: 70% supported only bitmap screens, 16% supporred only character terminals, and 13% supported both.
72% of the systems supported color.
Only 6 systems reported using audio output for anything other than beeping.
These included digitized audio in multi-media presentations, audible ticks as feedback during tracing, synthetic speech for blind users, and simple voice messages.
78% of the applications ran under a window system.
The most popular were X/l 1 , Macintosh  and Microsoft Windows ; others mentioned were Amiga, DECWindows, Gem, HP-VUE, Next, Presentation Manager, Silicon Graphics, SunView, Symbolics, Vermant Views and Zinc.
Six systems used internally developed window packages, and one system supported multiple windowing systems.
Of those using X/l 1, 52% used OSF Motif, 13% used OpenLook, and 35% used a different X/l 1 window manager, such as uwm or twin.
These results are consistent with the distribution of machine types shown in Figure 1.
Independent of whether a window system was used, the survey asked whether multiple windows were used as part of the system's user interface.
This is relevant, since a program not on a window system might implement windows internally, and a program on top of a window system may only use a single window.
73% of the applications used multiple windows in their interface.
Of these, 57?70 used only overlapping windows, 20% used only tiled windows, and 22% used both kinds.
It is interesting to note that 14$70of the applications that were implemented on top of a window system did not use windows in their user interface, and 33% of the systems that were not implemented on top of a window system still did use windows .
Of the last group, about half were tiled and half were overlapping.
Most of these were on a PC; onc was on a mainframe.
We speculate that they might have built their own window systems because the projects were started before appropriate window systems were avaiiable on those platforms.
We asked respondents to dcscribc the process they followed in developing the user interface.
Many  indicated that the work had been very evolutionary in nature, with design and implementation of the user inwr~dcc proceeding in paralicl .
43% reported some Icvcl of formal testing with cnd users prior to release, with only two respondents indicating that the testing had Iittie or no effect.
The most common user interf%cc development process  was to build one or more prototypes, which were often offered to users for comments or testing.
In a fcw cases, these prototypes bccamc the rclcascd product, but more frequently they were part of earlier design activities.
Other projects  carried out cvalualirms of paper designs.
In some cases , this involved participatory design in which cnd users contributed dircctiy to the design of the user interface; in others, the design team interviewed users or observed them at work.
12% of the respondents claimed to have dcvciopcd user scenarios as part of their design process.
Figure TOOIS Usad Most of the projects  used tools of some sort in developing the code for their user interfaces.
For many projects  this consisted of a toolkit providing a library of user interface components .
As for the case with window managers, the most common toolkits were those for X 11 systems  and for the Macintosh.
Other toolkits mentioned included the Amiga, Athena Widget Set, DecWindows, Interviews, Objective C library, Silicon Graphics, SunView, and Vermont Views.
Other projects used more sophisticated tools, often in concert with a supporting toolkit.
So, for example, 20 projects  reported the use of a UIMS.
Five of these used Hypercard; other UIMSS included Designer Forms, Domain Diatog, Easel, Enfin, Garnet, Lex/Yacc, Menlo Vista Forms, MetaWindowsfPlus, Visual Basic and Visual Cobol.
Two projects used internally-developed UIMSS.
Ten projects  used interface builders; these included DevGuide, HP-UIMX, MacFlow, Next Interface Builder, TAE+, VUIT; and WindowsMaker.
A major goal of the survey was to assess the code and effort spent on developing the user interfaces of applications.
Thus we asked respondents to estimate the percent of code devoted to the user interface, as well as the percent of time spent designing, implementing and maintaining the interface.
Respondents spent an average of 44.870 of design time on the user interface, 50.190 of implementation time, and 37.0% of maintenance time .
These estimates did not differ significantly as a function of the type of application described, the country in which the work was done, or the host computer system.
However, wc were surprised to see that the estimates for projccLs using no tools at all were also less than those for the groups using toolkits.
Although the actual numbers have Iittlc meaning, the comparison across the three Icvels of tool usc was as expected, with the fewest techniques reported by projects using no tool support  = 9.88, p c .01.
The greatest number of techniques were reported by the projccls using Loolkits only.
These survey results are consistent with this claim, in that projects relying on toolkits incorporated a larger number of features into their user interfaces, but at greater cost with respect to implementation time and code.
We were also curious about the relative impact of different user interface characteristics, so we did a series of analyses contrasting projects who did or did not incorporate a given feature.
Given the post hoc nature of these analyses, the findings must be interpreted with caution.
This caveat aside, we found that the strongest predictor of design time was the use of menus  = 6.78, p < .01.
This could be due simply to the fact that applications with more complex functionality are more likely to need menus; it could also be that menu organization, terminology and interaction are seen as an important usability concern and thus are likely to increase the relative time spent on user interface design.
18% of the systems claimed to support different natural languages .
For those that did not, 28 respondents estimated how long would take to convert to another language, with an average of 1.8 morrlhs.
In general, lhe respondents were quite pleased with the tools they used.
When available, interface builders were especially appreciated, and were mostly thought to be easy to use.
Another important feature mentioned more than once was the ability to execute the inlcrfacc  while still inside the interactive tls.
When interactive tools were not available, people wished Recendy, a large number of inlcrfacc they had them.
This seems likely to be due to the enablement of more sophisticated graphical interfaces with bitmap displays, but again at greater implementation cost.
Modifications 51% of the respondents reported that they had been able to re-use pan of older code when creating this system.
We asked if the system was modularized well enough so that the user interface could be modified without changing the application code.
They're slow, poorly documented, plagued by bugs, and eat incredible amounts of memory to perform the simplest tasks, which they then neglect to deallocate.
It also requires ridiculous amounts of code to perform those tasks.
True, it is quite flexible ....  high learning curve.
Learning how to use the X library.
This includes problems with the usc of call-back procedures.
Communication between different computer Ianguagcs.
Portability across different windowing systems .
Onc kwgescale project noted that the automatic testing mechanisms used by the company did not find a rtumbcr of serious mouse-driven bugs.
Again, these are clearly issues that future tools, and even future versions of today's tools, would be expcclcd to handle.
However, lhc amount of time devoted to the user interface has not yet been substantially reduced by the 1001s.
Also, a few people were instrumental in getting us surveys from their organizations.
For help wilh ibis paper, we would like to thank Brad Vartder Zanden and Bernita Myers.
This research was partially sponsored by the Avionics Lab, Wright Research and Development Center, Aeronautical Systems Division , U. S. Air Force, WrightPatterson AFB, OH 45433-6543 under Contract F33615-90-C- 1465, Arpa Order No.
The views and conclusions contained in this docurnenl arc those of the authors and should not bc interpreted as rcprcscnting the official policies, either cxprcsscd or implied, of the U.S, Government.
There were many interesting responses to the question about the most difficult aspects of the development of the user interface.
Many of these related to the design of the user interface, rather than its implementation.
The most commonly raised issues about the design were: Getting information from users about what they want, and trying to predict their requirements.
Designing for the naive user while accommodating the experts.
Achieving consistency, especially when there are multiple developers.
Understanding and conforming to Motif guidel ines.
John M. Carroll and Mary Beth Rosson.
Usability Specifications as a Tool in Iterative Development.
In H. Rex Hartson, Ed., Advances in Human-Computer Interaction, Volume 1, Ablex Publishing, New York, 1985, pp.
ACM Key Principles and What Designers Think".
H. Rex Hartson and Deborah Hix.
Ed Lee, Mark Linton, John Ousterhout, Len Bass, and Frank Hall.
Interface development tools: Feast or Farnine .
ACM SIGGRAPH Symposium on User Interface Software and Technology, proceedings UIST'91, Hilton Head, SC, Nov., 1991.
Sanjay Mittal, Clive L. Dym, and Mahesh Morjaria.
Creating User Inte~aces by Academic Press, Boston, 1988.
Brad A. Myers, Brad Vander Zanden, and Roger B. Dannenberg.
Creating Graphical Interactive Application Objects by Demonstration.
ACM SIGGRNH Symposium on User Interface Software and Technology, Proceedings UIST'89, Williamsburg, VA, Nov., 1989, pp.
Mary Beth Rosson, Suzanne Maass, and Wendy A. Kellogg.
Designing for Designers: An Analysis of Design Practices in the Real World.
Jimmy A. Sutton and Ralph H. Sprague, Jr. A Study of Display Generation and Management in Interactive Business Applications.
David Wolber and Gene Fisher.
A Demonstrational Technique for Developing Interfaces with Dynamically Created Objects.
ACM SIGGRAPH Symposium on User Interface Software and Technology, proceedings UIST'91, Hilton Head, SC, Nov., 1991, pp.
