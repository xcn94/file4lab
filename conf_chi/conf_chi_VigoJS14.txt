Ontologies have been employed across scientific and business domains for some time, and the proliferation of linked data means the number and range of potential authors is set to increase significantly.
Ontologies using the Web Ontology Language  are complex artefacts, however: the authoring process requires not only knowledge of the application domain, but also skills in programming and logics.
To date, there has been no systematic attempt to understand the effectiveness of existing tools, or explore what users really require to build successful ontologies.
Here we address this shortfall, presenting insights from an interview study with 15 ontology authors.
We identify the problems reported by authors, and the strategies they employ to solve them.
We map the data to a set of design recommendations, which describe how tools of the future can support ontology authoring.
A key challenge is dealing with information overload: improving the user's ability to navigate, populate and debug large ontologies will revolutionise the engineering process, and open ontology authoring up to a new generation of users.
For example, we may describe the class of all Person as a set of objects all of which has a Sex, a Father and a Mother, with the latter two entities also being classes of individuals of class Person that have a specified Sex and are parents of a Person.
These classes of objects may be related via relationships such as hasSex, hasFather and hasMother.
Many ontologies are represented using the Web Ontology Language  .
OWL has its roots in description logics, a decidable fragment of first order logic.
An ontology written in OWL is a collection of axioms describing the classes, individuals and the relationships between them.
A consequence of OWL's strict semantics is that an OWL ontology can be subjected to automated reasoning.
Thus an OWL ontology can be a complex artefact, with thousands of axioms from which implications can be deduced.
The strict semantics, potentially numerous axioms - sometimes in complex patterns - from which deductions can be drawn means that an OWL ontology is difficult both to build and understand.
There are a range of tools that support the ontology authoring lifecycle.
Typically, these tools assist authors in carrying out particular tasks including ontology building, reasoning or debugging.
In such a fragmented landscape, the few tools that aim to support the chore processes of ontology authoring are consequently extremely popular, Prot eg e being a notable example .
Considering the potential complexity of ontologies, little is known about how well the mentioned tools help ontology authors to accomplish their tasks.
Previous work on ontology authoring dynamics addresses the socio-technical issues of distributed collaborative authoring, highlighting that reaching consensus on the use, purpose and scope of a given ontology may generate tensions among the authors .
In contrast to collaborative ontology building, axiom addition is carried out individually.
To gain a better understanding of the individual ontology authoring process and how tools support it, we interviewed 15 ontology authors about the problems they encounter and the strategies they employ.
Our results suggest that the next generation of ontology authoring tools should provide support to navigate and populate large ontologies, be able to reason on-the-fly and aid the debugging process by identifying the most relevant problems.
The use of ontologies to capture the knowledge or semantics of a field of interest has grown over the past two decades as a consequence of the needs of applications to query, integrate and analyse data on the basis of the nature of the entities being described in those data.
Ontologies have been widely used in the biomedical and healthcare domains, as well as many other areas of science, and commerce.
The production of linked data has also led to a widespread use of ontologies to describe its entities and their relationships.
An ontology attempts to represent knowledge of the entities in a field of interest.
Copyrights for third-party components of this work must be honored.
For all other uses, contact the Owner/Author.
Copyright is held by the owner/author.
The semi-structured interviews, which were conducted either face-to-face or via video-conferencing, followed this script: - Can you describe the authoring tasks you perform?
The mean interview time was 41 minutes and 31 seconds .
The interviews were recorded and transcribed.
If you have a small ontology I know every single axiom I put in there, I can remember it, whereas with big ontologies I wouldn't be able to remember every single existential restriction."
As the number increases it is more difficult to track back which instance belongs to which class."
Search problems are about unsatisfactory searching capabilities of tools or because tools cannot search in multiple ontologies.
The latter is crucial because before adding new terms to ontologies, authors check the existence of similar terms in other ontologies in order to reuse them.
We interviewed 15 ontology authors  with an mean age of 37 years .
Thirteen of these were based in the UK and 2 were based in the US.
Nine were computer scientists, 4 were biologists and the remaining 2 had a background in science.
All of them had more than 4 years of experience working with ontologies.
Participants were awarded with a 10 book store gift certificate.
The participants' interaction with ontologies can be classified into 3 different groups : ontology researchers , curators  and ontology developers .
Ontology researchers are typically computer scientists investigating the properties of ontologies, building test ontologies or building reasoning engines.
Curators are individuals with a deep knowledge about a domain and maintain large ontologies .
They receive requests from ticketing systems or a consortia to add terms, update entities or add branches into existing ontologies.
Ontology developers are computer scientists that work very closely with domain experts in order to model and validate a specific domain.
The ontologies they build are normally used by applications such as search engines or web applications.
Authors get an overview from looking at the top element of the hierarchy, especially if authors are not familiar with the domain: "The first thing would be to start from the top level of genes and just investigate the hierarchy and try to learn about it."
Resorting to domain specific information retrieval engines allows authors to obtain information about terms and finding whether a given term exists in another ontology.
The transcriptions of the interviews were uploaded to the qualitative data analysis software, Dedoose 4.5.
Transcripts were thematically analysed in an open coding fashion following established analysis methods :  familiarising with data,  generating the initial codes,  searching for themes and  iteratively reviewing themes.
The generated codebook was agreed between the authors.
Then, an independent coder was given the codebook and transcripts in order to establish coding reliability.
One of the foremost problems encountered by authors is efficiently building and populating an ontology with many entities "If you want an ontology with 100-1000 nodes Prot eg e is useful for the higher levels and abstract classes."
Ontologies do not necessarily have to be shaped as trees.
In theory, ontologies are a set of axioms, which is a view mostly supported by computer scientists and logicians: "An ontology is a set of axioms, end of story."
We call the particular style of building ontologies as a set of axioms and letting the reasoner build the relationships between nodes definitionoriented ontology development.
However, existing tools do not support definition-oriented ontologies well because the interfaces drive authors to build hierarchies by hand.
This has a number of inconveniences including maintenance problems.
Reusing existing ontologies is embedded into the ethos of the semantic web community.
Consequently and in theory, only a few ontologies have to be built from scratch.
To reuse and import existing terms, authors try to match or map their terms with those described in other ontologies .
Some authors resort to Bioportal, which can be used as an information retrieval system that searches over the annotations and metadata of some ontologies on the life sciences domain.
Those who are computer scientists use programming libraries such as the OWL API to efficiently populate ontologies.
On the other hand, curators and those who work closely with domain experts have template based tools that are given to domain experts to fill out.
These templates are then automatically processed and their content is placed into ontologies.
If these are removed high number of problems disappear.
In the context of ontology authoring, evaluation entails checking if the ontology does what is expected.
This quality assurance stage is poorly supported either by tools or processes "We don't have a formal mechanism for checking.
We rely on the fact that the ontology is being used."
Only those who work in larger teams where the ontology authoring process is carried out in a more systematic way employ evaluation procedures.
Sitting next to experts and using domain specific databases are the main strategies employed for evaluation purposes.
Natural language statements about what is expected from an ontology are also formalised as competency questions.
The following strategies are often used to speed-up the otherwise lengthy reasoning process.
Prot eg e is intended to be a tool that gives support at every step of the ontology authoring process.
Conversely, we found that a number of users employ Prot eg e only in particular situations and for very specific tasks: * To convert and classify non-OWL ontologies .
If you give them the whole ontology that's not really useful for them."
These tools are primarily used to build small ontologies and to visualise medium-sized ontologies that have been built using other means.
Assistance for populating, reasoning, debugging and evaluation is limited and not sufficiently supported by tools.
When the modification of a single axiom can affect the underlying logic and structure of an entire ontology that contains hundreds of thousands of classes, support for situational awareness is crucial.
This may be obtained through textual and visual feedback: the former would inform about the problems that may have arisen , while the latter can highlight the updated elements.
The complexity of ontologies leads some authors to invoke the reasoner at every modification they make or when complex axioms are added.
Some adopt this strategy in order to avoid the propagation of problems.
Considering how demanding reasoning is, tools and reasoners should allow authors to reason over subsets of ontologies and axioms to speed up the process.
Ideally, authoring tools should provide background reasoning capabilities, as do the compilers of software development IDEs.
Navigating ontologies is prone to information overload and disorientation.
This is especially true of the larger and the heavier axiomatised ontologies.
Implementing fundamental principles of information visualisation by providing overviews and filters can alleviate this problem.
Overviews may help those who are not familiar with the domain, whereas filters will speed up the navigation of domain experts.
Considering how intertwined the elements of an ontology are, hyperlinking the class hierarchy, entities and axioms may help authors to use the information scent in links to traverse the ontology.
Support for dealing with discrepancies between the working ontology and existing ones should provide mechanisms for mapping, aligning and merging ontologies.
We provide design recommendations to ease the authoring process of large logical artefacts that are potentially complex and are becoming more pervasive, i.e.
The possibilities of ontology use are opening up to a wide range of people, including those who may never have encountered this form of knowledge representation before.
A consequence of this is that ontology authoring will move from being a specialist enterprise that is the preserve of experts, to being a tackled by mainstream - even amateur - developers.
Adopting these design insights will help to ensure this evolution in ontology development realises its full potential.
Whilst definition-driven ontologies have several advantages over hand-crafted deep trees, current tools drive authors to build the latter type of ontologies and do not support the former.
Tools should cater for different building styles without imposing one in particular: for those who are not familiar with description logics, tree structured ontologies may be easier to understand.
