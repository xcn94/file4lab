As one of our participants succinctly states below, open source is a license as well as a philosophy, something very much on the minds of both developers and users.
This impacts the practices surrounding both the use of Open Source as well as its development: Open source is a license.
It's a legal issue if you look at it that way.
It's a license to apply to the work that is freely available.
If you look at it from a development process, it's a philosophy.
It's a different development method.
And the way of communication is something different.
This difference has forced changes to many aspects of the development process, most visible in the ways developers communicate and collaborate.
For instance, OSS developers depend almost exclusively on Internetbased communication to maintain an awareness of each other .
Though co-located teams use the Internet as well, it is not their only means of communication and coordination.
When moving to a purely or primarily online organizational structure, many practices need to change.
They found that the use of diagrams played an important role in their participants' practice; for example, they were used to understand the code, foster discussions, design, explain aspects of the software to others, and support documentation or presentations.
Some of the most interesting differences between Open Source Software  development and commercial colocated software development lie in the communication and collaboration practices of these two groups of developers.
One interesting practice is that of diagramming.
Though well studied and important in many aspects of co-located software development , its role in OSS development has not been thoroughly studied.
In this paper, we report our investigation on how and why Ubuntu contributors use diagrams in their work.
Our study shows that diagrams are not actively used in many scenarios where they commonly would in co-located software development efforts.
We describe differences in the use and practices of diagramming, their possible reasons, and present design considerations for potential systems aimed at better supporting diagram use in OSS development.
Open source software  efforts use an open software development model where the source code is made freely available to everyone.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
We refer to any kind of visualization containing information as a diagram.
Thus, a diagram may describe code structure, interactions among modules, the organization of a team, or a development schedule.
A diagram can be drawn using an analog medium , software , through Unified Markup Language , or even using ASCII characters.
RQ2.Why do OSS developers use diagrams?
RQ3.If they do not use diagrams, why?
RQ4.If they do not use diagrams, how do they cope?
To answer these questions, we conducted semi-structured interviews of active Ubuntu contributors from a variety of locations, backgrounds, and roles within the project.
Our study reveals conflicting attitudes towards the use of diagrams.
We found that diagrams served a variety of purposes, as they do in co-located software development, but that some differed.
We also learned that some participants try to avoid using diagrams and instead develop practices allowing them to complete their tasks and communicate with others without the use of diagrams.
The paper is organized as follows.
We first review relevant work, focusing particularly on previous studies on the software development practices of OSS projects and distributed collaboration.
Next, we describe our methodological approach.
We then discuss the findings from this study, describing the practices surrounding the use of diagrams in Ubuntu.
We present design considerations for future systems aiming to better support diagramming in OSS development.
The importance of a flexible drawing space shows that visual communication plays a critical role during discussion sessions.
They documented nine distinct uses for diagrams in software development teams; additionally, they found that developers themselves would in most cases quickly generate these diagrams .
Some important contextual information  available in co-located collaborations is often lost in distributed collaborations.
This loss of context results in different types of issues.
Bellotti and Bly identified four problems in their study of collaboration practices between geographically distributed team members of a design consulting firm: Team members had difficulty locating people, maintaining awareness of the location and status of other team members, keeping synchronicity in communication, and coordinating collaborative activities .
These problems led these designers to prefer co-located collaboration even if it required some physical effort, such as travel to another site to meet face-to-face.
Olson and Teasley's case study of how the use of groupware in distributed collaboration affected the behaviors of members of a design team showed that social responsibility and commitment diminished or disappeared when the team members did not meet face-to-face .
To address coordination problems in distributed collaboration, Redmiles et al.
OSS developers are often geographically distributed.
Because they face the challenges described above, many have developed their own practices to cope with these problems.
In a study of how Integrated Product Teams physically colocated work together and their requirements for working across distances, Poltrock and Engelbeck learned that scheduled meetings and opportunistic interactions amongst developers were valuable in facilitating communication, collaboration, and coordination in team work .
Similar findings were presented by Sawyer et al.
In addition, they found that a team room provided a closed environment for the project, which allowed the developers to concentrate on their work intensively.
Their observations of 15 developers at work revealed that awareness of co-workers was the most frequently sought information.
However, when surveyed, developers reported that awareness of co-workers was not very important.
Diagrams are important artifacts that have been shown to facilitate co-located software development.
For example, Dekel studied two co-located software development scenarios in which participants were given the task of producing an object-oriented framework for developing case management applications .
They found three major factors to the success of these co-located meetings:
To examine how and why diagrams are used in any and all aspects of the software development process of an OSS project, we performed a series of semi-structured interviews with contributors to one particular effort--Ubuntu.
In this section, we first discuss why we chose Ubuntu.
Next, we discuss our participant recruitment method and describe those who took part in our study.
Finally, we describe how the semi-structure interviews were conducted.
In total, we recruited nine participants from a diverse set of roles .
All participants were male, ranging in age from late-teens through late-50s, representing Europe and North America.
They had on average of two and half years of experience working with Ubuntu.
We compensated participants with $30 USD .
Because of the potential cultural differences across OSS efforts, we opted to focus on one large and diverse project.
Ubuntu is a Linux distribution with a regular release schedule and active developer base.
The project has two types of core contributors; members and developers.
Members are those who have made any type of significant contribution to Ubuntu .
Developers are members who have successfully contributed code to Ubuntu.
Ubuntu has a collection of teams that either develop software or organize efforts.
As of September 2008, there were over 30 project-based development teams that focused on specific functions or applications in Ubuntu and about 180 local communities that supported localization.
Additionally, there were two groups overseeing the overall project: The Technical Board was responsible for all technical decisions, such as the package policy, release feature goals, and package selection for new releases.
The Community Council managed the social aspects of the project, including: Code of Conduct; team creation and appointment of team leaders; and the creation of new organizational structures and processes.
Our study was divided into two phases.
First, we asked participants to complete a questionnaire and provide us with information and materials for discussion.
The questionnaire featured questions about participants' OSS experience, project participation, their roles in each project, and basic demographics.
We also asked participants to share diagrams they had created, modified or used as part of their work on Ubuntu.
In the second phase of the study, we conducted semi-structured interviews with participants.
We used the materials provided by the participants to ground the discussion about their communication with others in the Ubuntu project and their diagram use in the project.
Participants were asked to refer back to the diagrams they had provided, as well as any others they might have used or seen in the past.
Though some participants were not native English speakers, all interviews were conducted in English.
The interviews took between 40 and 60 minutes.
All interviews were recorded and transcribed with consent.
To gather a breadth of perspectives, we continued to interview participants until the interview data converged.
Although the small sample size used in our study is a potential concern, our data saturation rate is in line with what has been shown experimentally to be achievable for broader research .
Because the scope of our study is narrow, we achieved data saturation with few participants.
From the interview transcripts, we extracted approximately 200 excerpts for in-depth analysis.
Two researchers conducted open-ended inductive coding on the quotes to identify nine themes pertaining to how OSS contributors communicate and use diagrams .
The coding scheme was discussed amongst the research team and refined.
Throughout this paper, we preserve and present subjects own  use of language and grammar as faithfully as possible, omitting the traditional .
Given the qualitative nature of the interviews and the modest size of the participant pool, when numbers are presented, it is to give the reader an idea of the prevalence of certain behaviors across our sample.
These numbers are not intended as statistical evidence of frequency and their described practices cannot be assumed to generalize across OSS efforts.
However, the actions of our participants illustrate interesting behaviors which merit further research.
The most important discussion that sometimes happens there is to brainstorm.
Most of the time, you see, if it is a new concept or a new idea, it can be sent to that kind of meetings.
And then we "shoot out".
Everyone asks questions about these things.
And that's how ideas are evolved.
Most of the time, real-life meetings are real social events and make it easier to collaborate with other developers.
Because you know them in person, you can know what they look like, or that kind of stuff.
This year it was in Venezuela, but I didn't attend there because it was too far and too expensive for me to go there.
We tried to have... Let's say, we can meet most of them, but for instance, one of us is living in New York in the French community.
One of my friends is living in New York.
And he is not with us.
Participants take notes with a collaborative text editor , and use wiki markups to reduce publication effort.
We usually have, in each group of the sessions, someone who writes specifications, who writes down the results... And document is in the Ubuntu wiki and links from Launchpad or some other web servers, where can track the dependencies or the needs or that kind of stuff... We usually use the wiki markup language in the gobby document, so we can just copy and paste it to the wiki.
So, all the sessions, I think, nearly all of the sessions, are recorded, and broadcasted by the Internet.
So, there are public archives, so you can see them later on.
Because Ubuntu contributors regularly communicate online they have developed conventions to make communication more effective.
All participants agreed that their main communication channels are email and IRC, and that communication is predominantly text-based, in line with the findings of Gutwin et al.
Main source of communication is probably email with mailing lists.
Other big source of communication is IRC...
Especially, in Ubuntu, we have a very large, very comprehensive wiki, wiki.ubuntu.com.
Launchpad  is an important web-based medium used by this project to share ideas about the project, bugreports and information about the projects' members.
It is also used for creating diagrams .
P2 explained the different purposes to which IRC channels and mailing lists are put, also in line with .
Most of the time, online IRC conversation is an unofficial platform for communication because it's fairly hard to share the situation and conversation over IRC... Mailing lists, the platform to discuss and announce real problems and issues and solutions.
In some problems, the IRC channel is not used because it takes too much time to read and respond to questions.
We are just using mailing lists because it's far easier to keep track of the messages and we can filter out all other stuff.
There discussions center on process and project management, the next version of Ubuntu, and brainstorming new features.
Mainly technical issues like what new software we want to enable, how to improve process, how we develop, also how we communicate, how we handle bugs, mainly what features we want to implement in the next or subsequent release.
Interestingly, only a subset of these purposes were observed in our study.
In this section, we discuss how the reported uses of diagrams in co-located efforts manifest themselves in Ubuntu as described by participants in interviews.
In contrast to the observations of Cherubini et al., our participants infrequently used diagrams for understanding existing code .
We did, however, find evidence of diagram use for visualization of system structures in a similar way to what Cherubini described as understanding existing code.
We use diagrams to communicate the infrastructure that we have for the server... Because we have a lot of servers like system servers, we needed to work to have one clear view of them.
They have various names... To have a better view of the scheme.
Because it was  some quite long paragraphs and I really think that diagrams could be much easier to understand.
And I would say, it's a real image of my proposal.
That's why I did some drawings for that.
These sketches however tend not to be shared or maintained.
Generally I do not draw anything.
Only time I do that is for algorithm or like something very difficult and complex to draw picture of mine.
I made hand sketch on a piece of a paper with pencils.
It required me to do a lot of erasing, which is not really fun.
I did not get whole codes when I was doing that.
It probably was not the best work...
I mean, doing a piece of paper, while it could work, I think, I think it's just so counterproductive just because if you have to make one change, you basically change, could change the whole thing I don't even know.
You start to put it together, and oh, it's not wide enough.
Design reviews happen through feedback from other community members.
However, reviews are primarily done via text rather than using diagrams.
P7 expressed concerns with using diagrams in design reviews.
I got a lot of feedbacks from the community once I actually release it on subversion.
If testers give feedback, I find  something that I have not thought of.
If we use more diagrams, then testers want to give more feedbacks on them.
Then, the problem on the development cycle would be caused.
If there is feedback too late, it would make repositories delayed.
P8 had an experience where his project needed to reverse-engineer a USB module.
I did not know that how reverse engineering worked but they did.
So, we had huge information in written form.
We absolutely had diagrams that the USB interface was not drawn manually but they used tools to generate that from data set somehow.
Contributors have frequent informal discussions over email or IRC, in which diagrams can help them explain their ideas or opinions to others.
P5 created two different diagrams  to convey his idea of package maintenance to other developers.
At the time when I created this diagram, I noticed a lot of discussions in various mailing lists.
They argued about how was the better approach, what was the best tool, what was the best workflow.
I created the wiki page to explain my view on that matter so that in the discussion, I can point people to... "Well, I think this is the best one.
This is the best approach.
But it's fairly important to create diagrams in a project so that new incoming developers have a lower-level barrier to contribute to the project because it's easy to understand how the code works .
So, I like high-level documentation and high-level diagramming.
And it was quite needed because otherwise when new comers came to this list, they were completely lost.
So that's also where you create diagrams.
So, before I start typing codes, I also write diagrams.
He described a case where he needed to create a more sophisticated version of a low-fidelity diagram used within the team.
ASCII arts are often used for internal documentation in the project.
But website, which is used for marketing, for attracting new people and all kinds of stuff.
Our participants did not mention the use of diagrams to explain software to users and secondary stakeholders.
However, the Ubuntu project uses a project management service  with a feature called Blueprints.
This tool allows Ubuntu contributors to post feature requests, have discussions, and post specification changes.
Launchpad also automatically creates diagrams composed of different colored circles and lines, such as dependency trees.
Thus, these diagrams can and likely are used to communicate with secondary stakeholders in this community.
As seen in Figure 1, participants used different tools and techniques to create diagrams.
Only two participants  told us they used freehand sketches, though infrequently, a departure from the findings of .
Another two of our participants  used Dia , an opensource drawing tool for software development.
Figure 1  is a diagram created by P5 with Dia.
P3 explained that he recommended Dia to other developers in his project.
Honestly, two of the guys do diagrams and they also use the same tool I did.
Because they asked me how I made them , I told them, and they said, "that's great for me."
So they are using it.
Figure 1  shows the dependency tree created by Launchpad based on declarations by P4.
I just told the system which project is dependent on  and what is dependent on ... Based on the dependency that I declared.
Figure 1  is an ASCII diagram created by P2.
I do not use a tool I think is overkilled.
Everybody can change ASCII arts.
Everybody can delete ASCII arts.
Sometimes, it's not official or appealing...
Most of the time in the development, especially source code development and documentation and how the internal structure code works, you use ASCII arts.
Although none of the participants had taken screenshots of their projects, P7 told us that contributors working on UI themes shared screenshots within his development project.
They come up with design themes.
They have done more the main screen shots and ideas and present them in meetings.
However, this flexibility can also pose a problem, as P4 explained.
We found one instance of diagram use for this purpose.
We have some, I would say, some dedicated diagrams for roadmap for various things we have...
In the French community, we have a website, and we have a forum, and we have a wiki and something like that.
So, in each, we talk and we organize some of them and we have a roadmap for each of that.
Because code can be shared and modified by any developer, documentation is often used to assist developers in understanding code structure quickly and accurately.
Figure 1  is an example diagram created by P2 for the documentation of his project.
I found a document about some changes on package managers for debian.
And I think it was a few months ago.
And I created a very basic ASCII art, maybe a few weeks ago, to define some projects for documentation of the architecture in the OpenARM project.
He felt that a diagram created in the design stage should remain as a part of the project documentation.
This means that diagrams may serve different roles over their lifetime.
Creating the design of something is also documentation.
You know, I mean, it's very easy to waste time for making it look pretty that could've gone into just talking about what we want to do or waste time for arguing what format to use or what tool to use.
What has been most annoying is the inter-operability between different programs.
I mainly choose to use Dia because I can export it to SVG very easily and import it to Inkscape.
With Inkscape, I can do modifications I cannot do with Dia...
I have to choose Dia not because it is the best tool but because what I can get out of it, export functions... in that way, I can import it into other programs.
So, I don't expect any problem on updating the diagram.
Well, it's automatically updated whenever anyone changes the dependency of any of the stacks that are described there.
So, any stack can depend on any other stack, and it automatically draws the tree, the diagram by tracing those dependencies.
For instance, P5 told us that when he creates a diagram, he does not expect that he or others will ever update it.
These diagrams are part of the conversational record and therefore should remain static.
This specific diagram has not been updated.
To be honest, I don't intend to update this diagram because at the time when I created the diagram, it was the same time as I created this blog post, a complete wiki page.
And this helped the discussion with some friends of mine.
However, we did not find an example of regularly updated diagrams for documentation except those made by automatic diagram generation tools.
Two participants discussed potential problems updating diagrams, particularly in a collaborative manner.
What would be problematic is that someone else would take the source, and would modify on the earlier version of mine.
You would have a problem if two separate edits on the same file and then you want to merge these two diagrams...
Merging changes in a diagram would be exceptionally hard.
However, the same solutions have not been successfully applied to diagrams.
We have experience with handling diversions of all packages and software, and we have a pretty clever solution of how to merge or how to handle the diversions.
However, they don't really apply it to the diagrams or pictures but rather to... how to say... to plain text, to plain ASCII text in the source code.
I don't mind in that case because there are a few people within that .
But if we had a huge number  or it was open , it  would be definitely needed.
Our interviews revealed that sharing diagrams was usually done over the Internet, .
I just created it in PNG and attached it to the wiki.
We export the stuff and put it on the website.
We put  on the subversion system.
That's the ideal way... We are really in the best practice.
The best way is to put it on subversion.
Everybody can keep the track of the changes on the documentations, the website, the presentations and all kinds of stuff.
And it's centralized and everybody can access.
P2 described how sharing diagrams is done within community conventions.
And also I sent it via IRC...
It's a convention... You don't hook up the complete message you receive.
So, by using an external website, for pasting text and images and that website creates a link.
And that link, you can send it to the IRC website.
Then you can explain what kind of information can be found at that link.
So, all other people follow the text and the conversation can keep going on in the IRC channels.
As we describe in The Role of Diagrams section, diagrams are often generated on the fly and shared for discussion.
These same diagrams, therefore, do not necessarily lend themselves well for official documentation, where updates are necessary as the documented system is modified.
Some participants did not consider this a significant problem.
There's also how to edit, you know.
Different people use different tools to create diagrams.
And you wanna be able to communicate to everyone no matter how they are interacting with you.
Anyone would be able to modify it.
And it's kind of hard to agree on what tools to use.
There are many many different tools that people use for diagrams and many different formats which you can use for diagrams... That's because it's a real hassle to deal with a mass of different programs and formats and most are proprietary.
Determining which diagrams are current and which are outdated is often difficult.
As P4 points out, comparing two versions of a diagram can be challenging, at least compared to text files, for which tools exist.
Well, it's harder to compare two diagrams.
You know, if I want to have difference on what you said versus what he said...
When you use that program, the main goal of the diagram they fight is to try to compare two the totally different .
That interactivity may replace the desire for some static pictures...
I use Emacs to edit the code or look at the code.
Defined within the Emacs to... dependency things.
Tools that are programmed with Python with things like IPython to inquire or find out what functions I have or what the arguments are.
As discussed earlier, participants were more likely to use software, web-based systems, ASCII art, and screenshots to create diagrams than a piece of a paper.
Thus, diagrams for Ubuntu are more likely to be digital than analog.
This is different from what Cherubini et al.
This is a drawing tool that allows me to do open source collaboratively.
It has to be shared.
Although participants agreed that diagrams were useful in general, they were not willing to or did not feel the need to use them in all cases, or anywhere near as frequent as seen by Cherubini et al.
P3 discussed his reason for not using diagrams in his debugging tasks, claiming that sufficient information existed in other forms and sources.
There is not really a need for visual communication.
Most of the information is located in bug reports or something like that.
There is no need for visual one in that case.
In other words, a strict modularity strategy is adopted to limit the potential interactions any developer needs to consider with other modules.
It might be the case for people who work on a more complicated program to share diagrams that are standard for those programs.
But that's not something that I do.
Some systems that we tried out to explain code to somebody using pictures, you know, this function calls that function.
Sometimes, that kind of things is useful but not nearly as often we think.
Our study showed that five of the identified purposes of diagrams described by Cherubini et al.
However, we could not find clear evidence for two other purposes .
Although we found evidence of diagram use for understanding the structure of a system or algorithm, participants did not report a case where they used diagrams to understand existing code.
One possible reason is that participants have already established their own practices for examining code.
This circumvents the perceived high cost of standardizing methods and conventions for creating and editing diagrams.
Likewise, we found partial evidence of the use of diagrams for design review.
Beyond a reported instance of a design diagram that was reverse-engineered, no participant worked on system or user interface design, which may be one reason we could not find stronger evidence.
Another reason may be that design review usually involves updating diagrams, which most of our participants tried to avoid.
After a disappointing experience with a paper sketch, P7 has developed a practice of sharing his ideas for user interfaces without using diagrams.
He uses Glade , a user interface designer tool for GTK+ and GNOME.
He makes a draft user interface in it, shares the source code, and lets other contributors revise it.
If they can download source codes and look at it and look at the UI, then they can make tweak themselves.
Instead of making suggestions and sending those suggestions in text which what they are doing if I have given them screen shots, whereas if I give them source, they can give suggestions and they can make changes themselves.
One possible explanation for this is the strict modularity of the project.
In general, a project is divided into many small parts, and they are usually well segmented.
Each component is developed or maintained by a small group of developers or a single person.
Every developer can assume that all those involved understand how the components interact with each other .
Therefore, there is less need for explaining the details of each component.
Similarly, though no clear case of diagram use to explain to customers was seen in our study, it might be a prevalent practice among contributors working in marketing or user support.
For example, P2, who works for marketing, identified a gap in the level of investment in diagrams intended for internal vs. external use and publication.
This points to the fact that developers are divorced from the task of communicating directly with end-users.
This could of course lead to situations where the user documentation becomes out of synch with the reality of the software's inner workings.
The Ubuntu project is among a small minority of large , mature, and centrally managed OSS projects.
Smaller OSS teams may feel less need for diagramming for instance.
Our findings point to important differences in the practice of diagramming in a large distributed OSS project from that observed in co-located software teams, something which warrants further study, study which should explore the generalizability of our observations across OSS projects.
One reason some participants gave for not using diagrams more frequently was that merging different versions of a collaboratively edited diagram is difficult due to the lack of appropriate tools.
These problems made some participants turn to ASCII art, which though limiting and cumbersome, can be edited by anyone and handled by current version control systems.
One potential solution could be to share the "source code" for a diagram, textual codes which define a diagram, such as the XML of Glade, rather than binary files.
This would allow existing version control systems to track changes.
However, any tool to create a diagram from the source code must be widely available, which might impose other problems; contributors may have different preferences for tools and conventions.
Even if diagrams are distributed as editable and track-able text representations as described above, and important hurdle remains in developing the tools that would merge and represent change in a visually obvious, but non-jarring way.
Merging two diagrams with slight non-overlapping edits should not result in a complete re-distribution of the elements in the diagram unless strictly necessary..
We found conflicting attitudes towards the use and usefulness of diagrams in our study.
On one hand, participants who actively used diagrams saw their value: I'm a strong believer in creating good documentation with diagrams.
One thing you always have to remember is that creating a model or a diagram of something, it's simplified  better.
What I am saying is that it's not that important to me.
I just saw a diagram.
Have you seen it right now?"
People just use text to describe stuff they are working on.
For OSS, diagrams need to be shared online.
However, because the main communication channels used; emails and IRC, primarily focus on text, diagrams currently have to be uploaded to websites and their locations shared through those channels.
Although it might be necessary to reexamine these conventions, it is important to avoid unnecessary disruption to these communities.
Therefore, the process of sharing diagrams might have to continue along a parallel backchannel .
Establishing standards and managing expectations  could improve the situation.
There is also a high acceptance barrier that must be overcome, made lower if the tool itself is open source.
Many OSS projects are globally distributed.
Thanks to advances in communication technology, many OSS developers have broadband Internet connections.
However, there are still developers who have limited connectivity.
Therefore, tools to support the collaborative generation and sharing of diagrams should not assume a pervasive broadband connection.
Diagramming is a proven and valuable tool in software development.
We interviewed nine Ubuntu contributors to understand how and why they used diagrams.
We show that they had conflicting attitudes towards diagramming, and that even those who use diagrams in their work do not use them consistently, or for all of the purposes seen with colocated teams.
We also explored how developers have adapted to working without diagrams, and discussed the reasons why diagrams were not actively used in some cases.
This study shows that the use and practices of diagramming is influential in OSS development, but that its use is far from simple at times.
Further research is needed to develop a more comprehensive understanding of OSS diagram use.
Deploying and testing a system designed based on our findings is another interesting research direction.
We would like to thank Gary Bader, Rhys Causey, and Jeremy Handcock for participating in our pilot interview.
We also thank Steve Easterbrook and Jorge Aranda for helpful comments on this project, and David Dearman and Justin Ho for help on our paper.
We thank all the participants in our study for their help and cooperation, and the greater Ubuntu community for making their materials and practices public for study.
