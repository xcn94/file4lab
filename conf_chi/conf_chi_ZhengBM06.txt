Most co-authoring tools support basic annotations, such as edits and comments that are anchored at specific locations in the document.
However, they do not support metacommentary about a document  which gets separated from the document, often in the body of email messages.
This causes unnecessary overhead in the write-review-edit workflow inherent in co-authoring.
We present document-embedded structured annotations called "bundles" that incorporate the meta-commentary into a unified annotation model that meets a set of annotation requirements we identified through a small field investigation.
A usability study with 20 subjects evaluated the annotation reviewing stage of coauthoring and showed that annotation bundles in our highfidelity prototype reduced reviewing time and increased accuracy, compared to a system that only supports edits and comments.
While the purpose of annotations ranges from strictly personal   to more communal , Neuwirth suggests that the most important purpose of shared annotations is the fine-grained exchanges among co-authors creating a document .
We present a novel framework for co-authoring that fully integrates annotations into a document and introduces structured annotations that explicitly support workflow management within the co-authoring cycle.
Co-authors often make basic annotations using their word processors and then send the revised document to fellow co-authors via email as attachments, pathnames in a shared file system, or URLs on the web.
This is usually done asynchronously, one author at a time.
The annotate-andemail sequence is repeated until the document is completed.
The meta-commentary often takes place outside the document, usually in the bodies of the emails that are used to send the drafts back and forth.
This is problematic because it requires that co-authors maintain collaboration artifacts in different places  with no formal association between the two, which unnecessarily complicates workflow.
Valuable information can be buried and easily forgotten or misplaced .
Even if the appropriate emails are located, depending on the nature of information communicated, it can be difficult to navigate between the email and the document content.
The focus of our research is small, distributed groups collaborating asynchronously during the editing and reviewing stages of co-authoring, working on documents with a large volume of embedded annotations.
We began with a small field investigation of document annotation requirements.
We then designed document-embedded structured annotations called "bundles" that incorporate the meta-commentary into a unified annotation model that meets the requirements we identified.
A usability study with 20 subjects evaluated the annotation reviewing stage of co-authoring and showed that annotation bundles in our high-fidelity prototype reduced time and increased accuracy, compared to a system that only supports edits and comments.
Co-authoring academic papers, books, business reports, and even web pages is common practice .
Word processors and other tools provide some support for collaborative authoring, but not as effectively as we might desire.
Much of the effort in collaborative writing is spent reviewing and editing drafts .
Typical workflow involves co-authors annotating drafts and passing them back and forth.
Basic annotations are edits  and comments on specific parts of the document, but co-authors also communicate at a meta level about a document, for example, by making suggestions to change the document tone, clarifying previous annotations, or responding to other co-authors' document-related questions.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
None of these definitions extend beyond simple editing  or comment annotations.
There is no standardized annotation model, especially no agreed-upon convention for structuring annotations.
Previous research  has identified various attributes for annotations such as class, type, title, context, id, time, annotator, status, and priority.
Weng and Gennari developed an eleven-attribute annotation model  that uses annotation status to support awareness of in-progress reviewing and revision activity.
Unlike previous annotation data models for describing websites' metadata , their annotation model is process-oriented, designed to streamline workflow by keeping track of what has been done.
It is the only one we are aware of that allows annotations to be anchored to the entire document; most models assume that annotations will be anchored at a particular location within the document.
Various tools support collaborative authoring.
Brush  reviewed some of these annotation systems with a focus on issues such as online discussion in educational settings, notification strategies, and annotation re-positioning techniques in an evolving document.
We review systems from the point of view of how well they support collaborative authoring workflow.
Noel and Robert studied 42 users in May 2001  and found that most used individual word processors and e-mail as their main co-authoring tools.
Eighty-three percent of the subjects used Microsoft Word.
Word integrates editing and comment annotations into the document and assigns attributes automatically.
Annotations can be filtered by author or by type .
All annotations are listed in a reviewing pane below the document pane, ordered by position in the document.
Word incorporates an annotation into the document once it is accepted by one co-author, so other co-authors might not know it existed after the document is saved.
Word has a Web Discussion function for collaboration; however, Cadiz notes that it is limited in terms of where annotations can be anchored .
In contrast to Word, annotations in Adobe Acrobat Professional do not alter the document.
This must be done manually after reading the annotations.
Status indicators and more sophisticated filtering by annotation type, reviewer, or status are provided.
The reviewing pane in Acrobat uses a threaded display, not simple document order, so replies to an annotation are listed indented and below the original annotation.
Recently, numerous web-based collaborative authoring tools have been developed .
XMetal Reviewer, a new product by Blast Radius Inc. , is a representative system.
Designed for reviewing XML documents, it combines many of the advantages of Word and Acrobat.
Basic annotations are integrated with the document, and global comments appear at the top of the document.
Insertions and deletions can be incorporated into the document rather than kept as annotations, but this can always be reversed.
This makes annotations persistent, unlike Word where accepted changes lose their identities as annotations.
XMetal Reviewer facilitates discussion by letting coauthors reply to each other's annotations in real-time and in-context to reduce miscommunication.
Annotations can be filtered by type, author, or status.
XMetal is server-based to support collaboration among a large group of people.
This could be a drawback for small groups that want a lightweight solution.
In all three systems, annotations can only be grouped using system-defined filters such as filter-by-author or filter-bystatus.
Comments about some specific aspect of a document may be scattered throughout the document, so it would be useful to gather them together.
In a similar vein, there is only a partial record of the co-authors' annotating processes.
Some systems keep track of editing sessions, but do not otherwise capture ordering or relationships between individual annotations.
This was identified by Weng , who noted that "nnotations should be activity oriented."
Annotation systems fit within the broader research area of collaborative writing.
The classic collaborative writing systems such as PREP , Quilt , and SASSE  all support basic annotations, but do not support annotation grouping.
In contrast, the recent Anchored Conversations system  allows text chats to be anchored into documents so that co-authors can have conversations within their work context.
Although this is a real-time conversation tool rather than a shared annotation tool, it is an attempt to integrate meta-commentary with the document.
We investigated the email exchanges of three small groups of academics .
Each group had co-authored a conference paper, approximately 8 pages in length.
There were a total of 158 email exchanges analyzed, across the three groups.
Many of the emails included document attachments .
While we did look at the documents to understand the relationship between the text content of the email and the annotations, our analysis focused on the email content.
Below we categorize the most frequently-occurring content, and provide the percentage of the 158 emails to which each category and sub-category apply.
Note that these are not exclusive categories.
Most emails fell into more than one category.
To-do item describe what remains to be done, or what should be done next .
The ordering of the items implicitly prioritizes the work, and sometimes co-authors give explicit direction on priorities.
These often include collaborators' available times to work on the paper.
Summaries of edits that a co-author has just made to the document  often appear together with to-do lists.
Coauthors also summarize edits about issues that arise at multiple places in the document , such as global word replacements or spelling changes throughout a document.
Discussions about the document often include parts of the text copied into an email to provide context .
Discussions include two subcategories: questions are sometimes directed at a particular co-author ; general comments  pertain to the entire document .
Comments-on-comments are comments about one or more previous comments.
These most often concern comments that have not yet been addressed  or advice to coauthors on how to process the referred to comments .
The six task descriptions used in our evaluation  provide concrete examples of some of the above categories.
The information expressed as text embedded in email constitutes what we referred to at the outset as "metacommentary."
Co-authors devote a lot of effort to describing how annotations relate to each other because text is inefficient for expressing annotation location, type, or context, especially when an issue arises at multiple places in the document.
Currently, co-authors must describe associated annotations by writing comments .
There is no way to annotate multiple annotations directly.
Recognizing this, we gathered requirements to build an annotation model that would unify all document-related communication by adding structure to annotations.
Support document-related discussion with threaded annotations .
Support flexible filtering to allow co-authors to review more focused sets of annotations .
Allow annotations to be directed to specific coauthors .
Support general comments that anchor to the entire document .
Allow users to prioritize annotations .
Support the annotation of groups of annotations .
We evaluated the three systems discussed in the Related Work section  against these requirements.
The results are summarized in Table 1, which suggests that current tools do not support some of the requirements.
Based on our literature review and our field investigation , we have derived eleven design requirements for annotation systems that reflect co-authoring workflow.
The last four requirements address communication that is currently happening outside the document.
Support basic annotations such as edits and comments with specific anchors .
Provide an easy way to incorporate changes specified in annotations into the document .
Preserve the original annotations in case co-authors want to later refer back to them .
Support both a separate annotation list view as well as viewing annotations embedded in a document .
Support annotation status to assist co-authors keeping track of the reviewing process .
Using the requirements as a guide, we constructed a comprehensive model of annotations that encompasses the behaviors we observed in the field investigation.
Every annotation has a set of attributes.
Depending on the purpose of the annotation, some of the attributes can be empty.
Mandatory attributes are the creator of the annotation, a timestamp, reviewing status , and an anchor .
Multiple noncontiguous ranges are permitted as the anchor for a single annotation.
As a special case, the anchor can be the entire document.
Optional attributes are the name of the annotation , a list of recipients , a free-form text comment, modification , a priority, and substructure .
Each annotation must have at least one of the name, comment, modification, or substructure attributes in addition to the four mandatory attributes.
We classify annotations into two categories: single annotations that have no substructure, and bundled annotations that have substructure.
The latter are called bundles.
Recipients would be selected from a pull-down menu of co-authors.
Another application for automatic bundling as a side effect is the "track changes" feature in Word.
A user should be able to turn on tracking that automatically bundles all new edits  so that at the end of a session there is a ready-made bundle that can be turned into a worklist so the user can review just the changes from the current session, or highlight the changes for another coauthor to review.
The full power of structured annotations lies in the interplay between normal workflow  and the ability to capture that workflow and use it to manage future workflow.
In the annotation model proposed by Weng and Gennari  users can assign only one pre-defined category, such as "question" or "reply," to each annotation.
Our model allows users to define their own categories and bundle relevant annotations into the substructure of a new annotation whose name attribute identifies the category.
Moreover, any annotation can be assigned to multiple categories because the bundling substructure has no restrictions other than the requirement that it be acyclic.
The addition of optional user-defined annotation attributes may still be necessary.
It would be an easy extension to our model.
There are some common annotation types that correspond to traditional annotations.
An edit populates the modification attribute.
A comment has only the comment attribute with an anchor into specific document content, and a general comment has an anchor that is the entire document.
These are all single annotations .
A number of interesting new types of annotation arise from our model.
A meta-comment is a comment that has substructure, indicating the list of annotations to which it refers, and these in turn may have anchors into the document.
Meta-comments can have their own document anchors .
This nesting can be as many levels as desired, leading to the notion of inherited anchors by which a metacomment is recursively associated with the anchors of its substructures.
A reply is a special meta-comment that refers to just a single previous annotation.
Another special type of bundle is a worklist.
An example would be a bundle having the name "Check spelling" and comment text that says "I am not sure how we spell some of the people's names in our report --please make sure I have them right?"
The recipient list would indicate who is to do the spell-check, and the anchor would indicate all of the places in the document where the names in question appear.
Based on our model for annotations, we implemented a high fidelity prototype called the "Bundle Editor," which has a number of functions designed to support structured annotations .
The main features are a two-pane window with the document pane above and annotations below in the reviewing pane , filtering operations to select annotations, a mechanism for grouping annotations into bundles, and the ability to annotate previous annotations.
Every annotation has attributes  including an anchor into one or more locations in the document, and references to a set of previous annotations to which it applies.
Grouping and references provide the structure that is absent in other coauthoring systems, as well as providing explicit representation of user-defined workflow.
The reviewing panel is a multi-tabbed pane.
Each tab pane contains different information.
Two tabs in the reviewing panel are permanent.
The first tab is "All Annotations," which contains all single annotations .
General comments initially appear at the top of the list, the rest appear in the order in which their anchors occur in the document.
The second permanent tab is "All Bundles."
It lists all bundles, the annotations that have substructure.
The last bundle listed in this tab is named "all other annotations."
It is maintained automatically by the system.
It contains all the single annotations that do not belong to other bundles.
The spell-checking bundle just described could be created manually, but we envision it being created automatically as a side effect of running a document processor's spellchecking command.
The Bundle Editor has all of the basic functionality that a typical document editor has, such as insert, delete, and comment .
It also has specific functions to create a bundle .
Bundles are stored with the document and linked to various places in the document or to other annotations.
Co-authors can add/remove annotations from bundles by selecting the annotations of interest and then clicking on the add/remove button.
An annotation can be in more than one bundle and bundles can be in other bundles .
Co-authors annotate a group of annotations by including a comment in the appropriate bundle and directing the bundle to a particular set of co-authors .
The filtering function in the Bundle Editor is more flexible than the filtering functions in existing tools .
It allows co-authors to select annotations based on multiple attributes such as "all of Jennifer's and Brad's comments".
The result of filtering is a new bundle that is a subset of annotations in the reviewing pane to which the filter was applied.
The result can either replace the bundle in the reviewing pane or appear in a new reviewing pane.
Reviewing progress can be tracked by assigning a status to individual annotations .
Depending on co-authors' reviewing activities, the system tracks some of the annotation status automatically so an "unread" annotation becomes "read" by a co-author when it has been selected.
Co-authors can always over-ride a system-assigned status.
The Bundle Editor has functions for replying to annotations, which encourages discussion , and allows co-authors to make general comments to each other without leaving the document .
Bundle Editor with document & reviewing panes.
The user highlights a bundle in the reviewing pane, which highlights all its sub annotations in the document pane.
The bundle "Verb Tense Corrections" has two sub-bundles.
One was created by Mary and one was created by Jen.
Bundles can be created manually while annotating the document.
For example, if Jennifer finds recurring problems in a document, she can create a bundle by explicitly selecting all of the relevant annotations.
Temporary or working bundles are created by filtering and other operations.
They can be saved as permanent bundles just by clicking.
For example, Jennifer might want to look at the comments made by Brad.
She can create a working bundle by filtering on "Brad" and "comment" and save the result as a bundle for later reviewing.
Working bundles can also be created by normal editing commands, such as "Find/Replace."
Brad may want to replace all the occurrences of "Jennifer" with "Angelina" and then save the results as a bundle so that other coauthors can manipulate all of the annotations in a single operation, such as setting the status to "reject".
A bundle is created automatically at the end of every reviewing session.
So after Jennifer finishes her session, all her new annotations from that session form a bundle that other co-authors can review unless she elects to not save it.
This mechanism generalizes the "track changes" functionality in current editors and provides a uniform way to capture reviewing history.
Various techniques help users maintain a mental model of the document and its annotations.
In order to capture the structure of annotations, we employ a threaded list of annotations in the reviewing panel .
Users can expand or collapse any bundle to view or hide the annotations belonging to it.
A right-click on any annotation within the document or the reviewing panel gives users the option to view the bundles to which it belongs .
Users can select multiple bundles at a time and perform operations  on all the selected annotations.
If a bundle is selected, all its subannotations will be highlighted in the document .
Users can have several bundles active at the same time, each in separate tabs of the reviewing pane, and switch between them.
Each tab can be sorted according to author, date, order-within-document, or various other attributes.
Co-authors can prioritize annotations in a bundle using drag-and-drop techniques .
A total of 20 people  participated.
They were undergraduate and graduate students recruited through online mailing lists and newsgroups.
They were paid $20 for their time.
All spoke English as their native language.
Seventeen used a word processor  every 2-3 days, and 3 did so once a week.
All felt very confident about using their word processor, although 5 had never used any annotation functions.
They had all been involved in collaborative authoring, some fewer than 5 times and some more than 10 times.
Participants were instructed that reviewing annotations meant accepting the annotations they agreed with and rejecting the others, according to a prescribed task.
Each participant saw both systems, with a different document for each system.
The two documents used were chosen from ScienceDaily : docB  is about the growth of black holes, and docM  is about customer reaction to "on-hold music" when calling a customer service phone line.
The two documents have almost identical reading difficulty level, as determined by the Kincaid Readability Test and the Flesch Reading Ease Score.
A third document was used during two practice sessions.
Because this was common to all experimental configurations, we were not concerned with its similarity to the other two documents.
We compared two annotation systems: the bundle system, which supported structured annotations, and a simple system, which supported edits, and comments.
The simple system was intended to be representative of current coauthoring systems.
Both systems were created by modifying our Bundle Editor, so they differed only in their annotation functions.
The content in bundled annotations that could not be included in the simple system's annotations was displayed in a separate simulated email window, beside the system interface.
Table 2 summarizes the differences between the two systems.
There were six tasks to complete for each document.
The annotations for all tasks were present from the outset.
We controlled for the number, type, and authorship of annotations in the documents: 52 basic annotations ; Jennifer, John, and Mary made 15, 15, and 25 annotations respectively.
In addition we controlled for reviewing difficulty with respect to the amount of context required to accept/reject an annotation; some could be processed by reading a single sentence, whereas others required two sentences or a full paragraph.
All tasks were representative of the types of tasks we saw in our field investigation, where authors connected metacommentary in email with lower-level document-embedded annotations.
However, the difficulty in our tasks was primarily for the user to find/navigate to the right set of annotations to review, which was our main focus.
Because the subjects were not authors, our tasks minimized the difficulty of deciding whether to accept/reject annotations.
Bundle system: a bundle with a comment attached containing all relevant annotations.
Simple system: an email message containing location pointers for relevant annotations.
Better performance for both speed and accuracy in the bundle system.
Review all annotations in a paragraph.
Bundle system: a general comment describes which paragraph to review.
Simple System: an email message describes which paragraph to review.
Similar performance in both systems.
Review spelling edits in the document.
Bundle system: a bundle with a comment attached containing all relevant annotations.
Simple system: an email message describing relevant annotations.
Better performance for speed in the bundle system.
Similar performance for accuracy in both systems because spelling edits are easy to review.
Review all verb tense edits in the document.
Bundle system: a bundle with two bundles  in its substructure, each containing task-relevant annotations and comments attached to each bundle.
Simple system, two email messages  are shown  describing the relevant annotations.
Better performance for both speed and accuracy in the bundle system.
The experiment was a within-subjects 2x6  factorial design.
Document type was a within-subjects control variable, and both system and document presentation orders were between-subject controls.
A within-subjects design was chosen for its increased power and because it allowed us to collect comparative comments on the two systems.
To minimize learning effects we counterbalanced the order of presentation for both system type and document, resulting in four configurations.
The experiment was conducted on a single Linux machine running SUSE 9.0 with an Intel Pentium 4 CPU and 512 MB of RAM.
The software for both of the experimental systems was written in Java 1.5.1.
For each task, a task instruction screen was shown first.
Some tasks also had task background information to refresh participants on basic English grammar or words used in the document.
For example, task 1 in docM explains what the comparative and superlative forms are for adjectives.
For each document, the same task instructions were given for both the simple and bundle systems, but the two documents had different  task instructions.
Once a participant read the task instruction screen, s/he clicked on the "Start Task" button.
The system loaded and the data logging and timing function started.
After the participant finished a task, s/he clicked "End Task" and the next task instruction appeared.
Bundle system: a bundle with comment attached containing relevant annotations.
Simple system: an email message describing relevant annotations.
Better performance for speed in the bundle system.
Similar performance for accuracy in both systems because these replacements are easy to identify.
Review a co-author`s comments that have not been accepted or rejected.
Bundle system: a general comment describes which co-author's comments to review.
Simple System: an email message describes which co-author's comments to review.
Filtering functions are likely to be used in both systems.
Better performance for both speed and accuracy in the bundle system because of multi-attribute filtering.
Our main dependent variables were speed and accuracy.
Speed consisted of total completion time per task, which was the aggregate of navigation time and decision time.
Accuracy was assessed with three measures: the number of task-relevant annotations reviewed , the number of task-relevant annotations reviewed correctly, and the number of non-task related annotations reviewed.
We also recorded the number of times the filtering function was used.
The experiment was designed for a single two-hour session.
A questionnaire was administered to obtain information on past computer and writing experience.
Participants were then shown a training video on general concepts such as collaborative authoring and how to use the first system, followed by a practice session of six reviewing tasks using the first system.
The practice tasks were similar to the experimental tasks described previously, but in a different order and on a practice document different than either of the test documents.
Participants were next asked to read the original version of the task document , after which they had to perform a list of six tasks in the order they were given.
A second questionnaire was administered to collect feedback on the first system.
Participants were given a 5-minute break and were then shown a video on how to use the second system followed by six practice tasks using the same practice document, then six experiment tasks for the second document.
A final questionnaire solicited feedback on the second system and asked the participants to directly compare the two systems.
A short de-briefing was conducted with some of the participants based on their questionnaire data.
Our main hypotheses were as follows: H1.
The bundle system will reduce the time participants spend navigating to relevant annotations.
Some tasks  will be more affected than others.
Participants will perform more accurately in the bundle system than the simple system.
Some tasks  will be more affected than others.
T-tests revealed that tasks 3, 4, and 5 were all significantly faster in the bundle system .
There were no differences detected for tasks 2 and 6.
Consistent with hypothesis H2, accuracy was also significantly better with the bundle system.
Across all 5 tasks, participants reviewed more task-relevant annotations , they correctly processed more task-relevant annotations , and they made fewer identification errors, meaning they reviewed fewer non-task related annotations  in the bundle condition.
Means for these errors are shown in the bottom half of Table 3.
Here we report on both the quantitative data captured through software logging as well as the self-reported data from our questionnaires.
Before testing our hypotheses, we checked to make sure that there was no effect of document.
Investigation of an interaction effect between document and task on total time  = 4.706, p =.002, 2 = .227 revealed that task 1 was more difficult in docB than in docM.
Our goal had been to create two documents that were as equal in difficulty as possible, and so we removed task 1 from our remaining analyses, and focus exclusively on tasks 2 through 6.
To test our hypotheses we ran a 2 systems x 2 order of systems x 2 order of documents x 5 tasks ANOVA for our speed and accuracy measures.
System and tasks were within-subjects factors, and orders of system and document presentation were both between-subjects factors.
For our secondary analyses, a series of two-tailed t-tests were used to investigate performance differences between the two systems for each of the tasks.
Along with statistical significance, we report partial eta-squared , a measure of effect size, which is often more informative than statistical significance in applied human-computer interaction research .
Total navigation time  was significantly less in the bundle system .
Participant's decision time was not impacted by the two systems .
The large navigation time effect was sufficient to influence the total completion time, which was also significantly lower in the bundle system .
The means are given in the top half of Table 3.
T-tests showed that there were significantly more non-task related annotations reviewed in the simple system for task 4 and task 6 .
These differences are apparent in Figure 4.
We also found a number of multi-way interactions involving task, and system and document presentation orders.
Systematic investigation of each of the interactions revealed no clear interpretation of the interactions.
Based on their interaction sequences with the prototype and their feedback, it was clear that the bundle concept, and its fit within the task workflow, was intuitive.
Bundles Reduce Navigation Time: Once participants found a relevant bundle, locating each annotation in the document was a short single click away.
By contrast, in the simple system, most of the navigation time was spent searching through the document for the next relevant annotation, which was time consuming.
Bundling reduced the navigation time for tasks 3, 4, and 5, none of which were amenable to basic filtering.
For task 6, filtering was a good strategy in both systems.
Even though the bundle system had the advantage of filtering on both the comment and author attribute, it was easy in the simple system to filter on author and then identify the comments.
So it was not surprising that task 6 did not show a difference.
As one would hope, there was no difference in navigation time for tasks that were localized within the document .
Bundles Improve Accuracy: Once the correct bundle was found, users were guaranteed to find the task-relevant set of annotations.
This minimized the number of extra annotations reviewed, and allowed users to concentrate on reviewing the actual annotations.
The biggest difference was found in task 4 where 39 extra annotations were reviewed across all participants in the simple system, but no extras were reviewed in the bundle system.
The cause of this was users mistakenly identifying annotations to be verb tense changes; for example, in docB replacements between "grow" and "growth" were treated as verb tense changes.
This was quite surprising, given that all our participants were native English speakers.
But it shows that bundling can overcome even basic misunderstandings of the English language.
Users Group Annotations: Participants filtered significantly more often in the simple system than in the bundle system.
They did so to reduce the number of annotations under consideration for a task.
Participants were effectively creating their own temporary task-based annotation groups.
Not only might there be cost overhead to having the reviewer do the grouping , but current systems do not allow users to store filter results for subsequent usage.
Bundling supports the easy creation and reuse of annotation groups formed through filtering.
Scalability of Bundles: Our target context for bundles is heavily annotated documents.
We chose simpler documents for our experiment in order to keep the tasks manageable.
We speculate, however, that a comparison between the bundle and simple systems for sophisticated documents would be even more dramatic.
As a document increases in length, causing relevant annotations to be spread further apart, navigation time will increase without bundles.
Cost/Benefit Tradeoff: Our experiment only evaluated the annotation reviewing stage of authoring.
We ran the Wilcoxon Signed-Rank Test on the questionnaire data.
Consistent with our navigation and accuracy findings, analysis of the self-reported measures showed that with the bundle system participants found it easier to find annotations , easier to complete tasks , and were more confident in their answers .
They also had an overall preference for the bundle system .
But there was no significant difference in the ease of learning  or ease of use  between the two systems.
When asked which of the two systems they would prefer to continue using, 18 out of the 20 participants  chose the bundle system.
Participants provided free-form comments at the end of the questionnaire about what they liked and disliked about each system.
For the simple system, although not actually integrated with the system, most participants indicated that they liked the email window, which provided them more information to complete tasks.
Interestingly, many participants who used the simple system first indicated they liked the filtering function; however, of those participants who had first been exposed to the bundle system, almost all disliked the comparatively limited filtering functions in the simple system.
For the bundle system, participants noted the time saved using bundles and were surprised how easy it was to learn to use bundles.
They also liked the flexible filtering provided in the bundle system.
One suggestion for improvement in the bundle system was the small size of the reviewing panel; participants felt it required too much scrolling.
To summarize, the bundle system allowed participants to navigate among annotations significantly faster for tasks 3, 4 and 5.
Participants were also significantly more accurate with the bundle system; for example, they reviewed significantly fewer non-task related annotations for tasks 4 and 6.
Overall, 90% of participants preferred the bundle system.
At first glace this might appear to be a zero sum game, because effort is only being shifted within the authoring workflow.
We argue that authors are currently communicating a large amount of information through email, and that manually creating bundles should be more efficient than the overhead incurred in the inefficiencies of email.
Automatically generated bundles should clearly be faster than email communication.
A tradeoff to explore, however, is between the value of bundles and the increased overall complexity that they bring to the annotation system.
Evaluating bundle creation, and the impact of bundles on the complete co-authoring workflow, is an obvious next step in our work.
Bundles Provide a More Pleasant User Experience: When participants were asked which system they preferred, 90% stated that it was the bundle system.
The elements of the simple system they liked the most were the email message and filtering function.
We note that the experiment design provided a single email message per task, with clear instructions, which underestimates the workload in real situations when users need to locate the relevant email, and possibly an entire email thread describing the task.
The two participants who favored the simple system were both experienced Microsoft Word users, but neither had used the annotation functions.
They were excited by the functionality in the simple system, and they found the bundle system to be complex and confusing.
However, they both recognized the advantages of bundles and thought that after becoming accustomed to basic annotation functions, they might desire more complex ones.
We have presented a structured annotation model, which includes annotation groups called bundles.
Bundles are designed to improve co-authoring workflow.
We have implemented a preliminary prototype called the Bundle Editor and compared it to a system that only offers basic annotation functions.
Our study focused on annotation reviewing and showed that structured annotations can reduce the time it takes to navigate between task-relevant annotations and can improve reviewing accuracy.
Now that there are confirmed benefits on the reviewing side, our next step will be to investigate the usability of bundle creation and, more generally, how bundles support the full coauthoring workflow.
These include investigating how bundles might be extended to support version control and synchronous co-authoring, which are both classic problems in the collaborative writing literature.
