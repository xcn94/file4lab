Whiteboards serve an important role in supporting informal design, providing a fluid and flexible medium for collaborative design.
Interactive whiteboards offer the potential for enhanced support for manipulating content, managing sketches, and distributed work, but little is known about how this support affects the practice of informal design.
To understand the opportunities and challenges, we first conducted a literature review, identifying 14 behaviors that occur during informal design.
We then designed an interactive whiteboard system to support all of these behaviors and deployed the system to three groups of designers.
Through usage logs and interviews, we examined the effects of interactivity on whiteboard use across a wide spectrum of design behaviors, identifying ways in which interactive whiteboards support the practices used in physical whiteboards and where they enable designers to work more effectively.
We set out to understand the opportunities and challenges that interactive whiteboards afford in supporting informal software design.
What behaviors are important for an interactive whiteboard to support to provide increased utility?
How can interactive whiteboards effectively support these behaviors?
How does supporting these behaviors impact the practice of informal design?
What challenges remain inherent in the medium afforded by interactive whiteboards?
We first conducted a review of the software design literature, identifying 14 behaviors important to support in informal design.
We then designed a single unified tool - Calico - intended to preserve the fluidity and flexibility of the whiteboard while more effectively supporting the full range of sketching, navigating, and collaboration behaviors we identified.
Finally, we conducted a field deployment of Calico to three groups of designers, recording usage logs and interviewing designers about their experiences.
Our results illustrate the breadth and diversity of informal design at the whiteboard.
Designers used Calico to create a wide range of sketches .
The contexts in which designers worked - the nature of the design problems they faced, whether they were collocated or distributed - led to different usage of the features provided.
A key benefit of interactive whiteboards was the infinite number of canvases they can provide, allowing designers to consider more alternatives and maintain a record of their design.
Enabling designers to express relationships between canvases allowed designers to consider their design at a metalevel, providing context with which to interpret and reconstruct past designs.
Our results also identified behaviors that are important to more effectively support, such as juxtaposing sketches and identifying marks in collaborative settings.
Interaction designers and software developers generating and refining ideas engage in informal software design, turning to the whiteboard rather than tools for formal notations for the flexibility and fluidity it provides .
Yet while designers wish to manipulate content in more sophisticated ways than adding and erasing strokes , physical whiteboards remain a passive medium lacking active support for design.
Copyrights for components of this work owned by others than ACM must be honored.
Abstracting with credit is permitted.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Other work has focused on understanding the use of groupware on large displays - including for distributed sketching - in practice.
Sketch recognition systems interpret a user's strokes, translating them into a formal object.
Early systems used a predefined formal notation for interpreting sketches, such as UML diagrams  or user interface mockups , using the rules of the notation to provide feedback.
Later systems explored user-expandable notations  and increased flexibility by delaying interpretation until desired , sometimes even while retaining a sketchy appearance .
Many systems have explored support for managing the many and varied sketched artifacts that are produced during meetings.
Early approaches organized sketches using a filmstrip , hyperlinks , or hierarchical perspectives .
Later work automated particular aspects of managing sketches by automatically grouping clusters of sketches in close spatial proximity , shrinking sketches when moved to the periphery , or using metaphors such as Post-It Notes to organize and relate sketches .
Other systems capture and present the history of interactions with a whiteboard as a tree of storyboards  and allow designers to navigate a network visualization of canvases .
Several systems have also explored techniques for supporting synchronous and asynchronous design amongst collocated and distributed designers.
Tele-board  is a distributed whiteboard and Post-It Note tool that allows designers to generate sticky notes from remote locations, group them, and review whiteboards in a history viewer.
Designer's Outpost  helps communicate distributed designers' gestures and body language using shadows on the whiteboard.
Team Storm  allows designers to sketch in either private spaces or public spaces, allowing designers to interact with and provide feedback on others' sketches.
Gambit  allows designers to use a variety of devices together including large displays, laptops, tabletops, and phones.
A few studies have investigated the impact of groupware systems for supporting design with large format displays on practice.
A field deployment of Tele-Board  - using traditional computers rather than an interactive whiteboard - found that moving between synchronous and asynchronous modes of work allowed designers to use the system to prepare for meetings and saved time during meetings, as designers did not need to wait to sketch their ideas.
Another study  examined the use in practice of several large-
The study suggested the importance of supporting critical tasks, making the system's value evident, supporting a breadth of collaboration practices, deployment in visible ways, low barriers to use, and having a core group champion the system.
Our work builds on these studies, focusing specifically on the impact of interactive whiteboards on informal design.
Designers draw different kinds of diagrams.
To explore a design problem, software designers sketch many different types of diagrams, often within the same canvas , enabling designers to explore an issue from different angles.
Designers draw what they need, and no more.
Few sketches are created with extensive detail; rather, designers create sketches with the detail and notation necessary to help them reason  or to reinforce what they wish to communicate within the design session .
Working with low detail enables sketches to be created quickly and modified easily, providing rapid feedback .
Too much structure imposed by a formal notation too soon can create unconscious barriers to change, resulting in a less exploratory and broad search for solutions .
Designers refine and evolve sketches.
The level of detail designers require grows as designers expand their ideas .
Refinement is not uniform across a design: portions may exist at varying levels of maturity .
Designers appropriate existing sketches, adding new notational elements to capture decisions as they become more committed .
For example, designers appropriate lists, evolving them into class diagrams by first introducing boxes to denote entities and then lines to record relationships between entities .
Evolving sketches is unplanned, occurring in response to the needs of the design process .
Designers work not only with formal notations , but deliberately break with these to capture ideas in the moment .
Designers sometimes break away to asynchronously explore an idea by themselves .
Designers bring their work together.
After working asynchronously, designers may need to integrate separate ideas into a new unified design.
This may involve simply combining parts of several sketches or generating a new design that borrows conceptual aspects.
Designers explain their sketches to others.
When returning from independent work or when drawing on behalf of a group, designers must synchronize their mental models of the design by explaining their work to others .
Explanations are often supplemented by pointing or drawing on sketches, guiding attention to specific parts of a sketch.
Designers work with different perspectives.
Designers use sketches of varying types to present multiple perspectives on a design, making details hidden in one perspective pronounced and easier to understand in another .
For example, in designing a user interface component, designers simultaneously work with views of the user interface and a UML model describing its data model.
Designers generate sketches of competing alternatives, allowing them to manage their focus, compare alternatives, weigh their tradeoffs, and synthesize alternatives into new alternatives .
Designers work with sketches at different levels of abstraction.
As designs are often hierarchic, designers work with sketches spanning levels of abstraction, including sketches of user interfaces and architecture .
Mental simulation provides insight into the consequences of a design, allowing designers to "interrogate" their design by testing it with hypothetical scenarios and inputs, often annotating their sketches .
For example, while discussing the logic cars use to move through intersections, a designer may simulate the car's path by moving his finger along a path through a map while simultaneously enumerating the logic required to implement this behavior.
Mental simulations help to discover implicit assumptions and flaws in a design .
Designers often juxtapose sketches spanning perspectives, alternatives, and abstractions to reason about how a design might work, using information from one to identify inconsistences, omissions, and mistakes in others .
For example, designers may use a data model and map to understand how a car object is passed between entities as it travels through an intersection.
During a design session, designers sometimes pause to take a step back and consider the progress they have made and what they have yet to do .
For example, they may return to requirements lists, marking off those they have been addressed, enumerating those yet to be addressed, and adding additional items.
Designers retreat to previous ideas.
When designers become stuck or exhaust an alternative, designers may choose to return to a previous state of the design  .
Returning to past designs may bring new insight and a matured understanding to explore the past ideas further.
Designers use physical whiteboards for their fluidity and flexibility.
Our key goals in designing Calico were to maintain this fluidity and flexibility - allowing designers to focus on the content of their sketch rather than the tool used to make it - while enabling users to discover interactive features that help them to design more effectively.
Building on experiences with a previous version of Calico , this paper presents a new system redesigned and reimplemented from scratch to support not 4 but 14 distinct design behaviors.
To make manipulating content more fluid, we introduce selection scraps and posthoc scrap creation, make scrap interactions more discoverable through bubble menus, and introduce text and list scraps.
To support more effectively working with and navigating between perspectives, alternatives, and abstractions while performing mental simulations, juxtaposing, reviewing progress, and retreating to past ideas, we introduce the cluster view.
To support more effectively collaborating with sketches, we enable synchronous and asynchronous collaboration across multiple devices and introduce the fading highlighter to help designers explain sketches.
In the following sections we describe the features of Calico in detail.
As in a physical whiteboard, the most prominent feature of Calico is an open canvas, allowing designers to immediately create a stroke simply by dragging their pen.
Designers can select pen color, stroke width, and pen modes and may erase strokes, undo, and redo.
A central benefit of an interactive whiteboard is the interactivity it affords - the ability to move, copy, rotate, and resize.
Drawing tools often enable this through modes, allowing users to toggle between drawing and selection modes.
However, modes distract from the fluidity a whiteboard provides - designers can no longer stay focused on the design task at hand and must instead maintain awareness of and actively switch between modes.
When a stroke is sufficiently long, a landing zone appears ; ending the stroke inside creates a selection scrap.
Calico also enables scraps to be created from existing strokes, either to recover if the user has missed the landing zone or to promote previously created content into a scrap.
Pressing-and-holding the pen inside a stroke that circumscribes an area triggers a dotted red circle to appear, which can be tapped to create a scrap.
Scraps are inspired by Translucent Patches , which allows users to explicitly declare an area as a group.
Scraps are movable, copy-able, deletable, rotatable, and resizable, using the bubble menu surrounding the scrap .
When a selection scrap loses focus, it immediately disappears and returns its content to the canvas, providing interactivity benefits without forcing content to be a persistent object.
To permanently retain the scrap, users may tap either of the two scrap icons in the upper left of the bubble menu to transform it into a regular scrap , either retaining the original shape or creating a neater rectangle.
Once made a regular scrap, a scrap becomes a group that is manipulatable , stackable, and connectable.
For example, the ATM scrap in Figure 3d was first drawn on the canvas, then circumscribed by the stylus to create a regular scrap.
Moving a scrap to a position where it is entirely overlapped by another scrap attaches it to the scrap behind it, allowing users to quickly create a stack , as one would a pile of papers.
Continuing the example, the Deposit, Withdrawal, and CheckBalance scraps are stacked on the Transactions scrap; moving "Transactions" moves the entire stack.
Dragging a scrap off a stack ungroups it.
For example, moving the scrap labeled "Deposit" from its current location to "User Interface" re-parents it to the new scrap.
Scraps do not slide under other scraps; dragging a scrap implicitly moves it to the front.
Dragging the pen between scraps highlights the pen stroke, presenting the user with an option to transform the stroke into a connector, through an ignorable button.
As with scraps, this can also be done retroactively by press-andholding a stroke that connects scraps.
Connectors preserve the shape of the stroke, but are decorated with an arrowhead.
Connectors are persistent and anchored to scraps: moving a scrap resizes the connector.
List scraps enable users to organize a stack into a vertical list, whose boundaries are automatically updated .
Promoting a stack into a list organizes the immediate children of the parent scrap into a vertical list.
As with the implicit grouping of regular scraps, dragging a scrap onto a list adds it, refreshing the automatic layout.
List items also gain an associated box that can be checked and unchecked.
Lists can be nested to create multi-level hierarchies.
If a list scrap is selected, the text scrap is appended.
Calico also enables scraps to be created from images.
Calico provides a palette, allowing designers to save a scrap for reuse .
Dragging a scrap from the palette to the canvas creates a copy of the scrap.
The palette is global to all canvases and users, enabling scraps to be shared.
Calico allows designers to create and work with multiple canvases.
While working in a canvas, tapping "new canvas" or "copy canvas" navigates to the new canvas and allows sketching to continue.
Calico also provides a history stack with buttons to navigate forwards and backwards.
Designers may choose to name their canvas with a title.
As designers create many canvases, the set of canvases may become unwieldy.
To organize canvases, Calico provides a three level hierarchy: the wall, clusters, and canvases.
The wall provides a zoomable, high-level grid view of clusters, allowing designers to move between separate spaces for a project or person .
Dragging a canvas between clusters moves it, allowing users to create new clusters and automatically deleting empty clusters.
Tapping a cluster invokes the cluster view  providing a zoomable overview of a group of canvases.
Clusters automatically arrange canvases into a radial layout, ordering canvases along concentric circles.
Calico thus allows canvases to be manually repositioned, pinning their location.
Calico enables users to construct a narrative describing the relationships between canvases through tagging.
When a new canvas is created, users are prompted to tag the canvas with its relationship to the previously visited canvas .
The tag panel is populated with a set of tags drawn from ways in which designers have been found to relate sketches, including different alternatives, perspectives, and abstractions.
The user, however, may add, edit, or delete types of tags.
After choosing a tag, the new canvas is linked to the previous canvas in the cluster view, with a label denoting the tag .
Repeatedly creating and linking canvases forms a graph structure in the radial layout.
Calico also helps users to find canvases.
Navigation history is recorded, and the most recently visited canvas is highlighted with a blue halo in the cluster view .
The breadcrumb bar at the top of the canvas and cluster views  let designers directly navigate to any canvas within the hierarchy.
Calico supports collaborative work across multiple devices, allowing multiple designers to work synchronously on the same canvas or asynchronously on different canvases.
This allows designers working in a group to branch off to their own canvas, preventing designers from "spin their wheels" while others have the floor .
Calico allows user to copy or create a new canvas, work asynchronously, and later invite others to visit the new canvas.
Canvases can also be shared by email or by generating a unique URL.
A fading highlighter allows users to draw temporary marks immediately visible to all users currently viewing a canvas.
Marks disappear after 4 seconds.
This enables designers to annotate sketches during mental simulations, reviews of progress, and explanations, particularly when working in a group with multiple devices or distributed across locations.
Calico is implemented as a Java application, spanning approximately 100,000 lines of code and built on the Piccolo UI toolkit for zoomable interfaces .
Calico uses a clientserver architecture, supporting up to 20 simultaneously active users.
The Calico client is portable, supporting computers connected to electronic whiteboards, laptops, and tablets.
Calico is open source and freely available1.
We deployed Calico to three groups.
In the research group , three researchers designing a software development IDE used Calico for over a year, seven months of which was included in the study period.
The group was geographically distributed across two sites, but also made extensive use of Calico during a one-week collocated period.
In the interaction group, two designers at an interaction design firm used Calico over a five-day period.
The interaction group used a version of Calico for most of the study period that did not contain the cluster view ; we thus do not report on their use of the cluster view.
In the OSS group, five software developers at a healthcare open source software company used Calico for a four-week period.
The research, interaction, and OSS groups were setup with two Hitachi Starboard FXDUO77 whiteboards , one Hitachi Starboard FXDUO88, and one Hitachi Starboard FX, respectively.
Each group also had access to a traditional physical whiteboard, pen-based tablets, and a server instance of Calico.
During the study period, we collected usage logs of Calico, recording the complete history of designers' interactions with Calico.
After the study period was concluded, we conducted semi-structured interviews with designers in each group, focusing on memorable design experiences with Calico, explanations of interesting behavior observed in the usage logs, obstacles or surprises designers perceived in their use of Calico, how they felt Calico impacted their design process, and perceptions of Calico's features.
Designers made extensive use of Calico , with the research, interaction, and OSS groups creating a total of 79, 20, and 40 canvases, respectively.
Given the choice between Calico and their traditional physical whiteboards, the interaction designers exclusively used Calico while the research and OSS groups used both, more due to ease-ofaccess in the moment than due to a preference of use for specific tasks.
While designers used Calico over much of the study periods, use was highly concentrated in bursts of activity around meetings, where designers prepared sketches the day before, used Calico intensely during meetings, and reviewed sketches following the meeting.
While much of Calico's value came from sketching in the moment, all groups emailed images of canvases to archive their sketches.
The interaction and OSS groups did not arrange canvases into separate personal spaces; the research group, which used Calico over the longest period, did.
In the following sections, we examine Calico's effect on each of the design behaviors, challenges designers experienced using Calico, and designers' overall impression of Calico.
Designers made use of scraps to organize and arrange content.
For example, the interaction group created image scraps of people they had interviewed, organized them along themes, and drew on the diagrams to capture these ideas .
In the OSS group, designers used scraps to create box-and-arrow diagrams and user interface mockups while brainstorming the elements and appearance of a GUI .
They reported that depicting elements as scraps made them easier to move and resize, making them feel more like entities.
Designers draw what they need, and no more.
Use of Calico by the OSS and research groups .
Each unit of activity corresponds to a user action .
The overall row includes all interactions with Calico .
While designers from the OSS and research groups had difficulty identifying the meaning of some sketches, they recalled the overall objective, which they considered more important than the details.
These sketches were used to support activity while "in the moment".
For example, the OSS group expressed most of their software architectures using only boxes and arrows , only rarely labeling the connecting arrows.
Most design occurred verbally, and designers only added the detail required to have something to point at during discussion.
The OSS group made extensive use of the fading highlighter, permitting discussing and tracing paths over diagrams while preserving their low detail.
Designers varied in the level of detail they used.
When drawing similar sketches, designers used inconsistent levels of detail.
For example, the interaction group sometimes labeled the axes of plots in detail and other times in very little detail.
In other situations, designers created elaborate sketches that visually encoded a wide range of information.
A participant in the research group reported that scraps and connectors led them to create more complex sketches, helping them address a deeper level of complexity.
Designers refine and evolve sketches.
Designers sometimes began sketches simply, evolving them over time to more complex sketches.
For example, the OSS group first created a sketch containing only handwritten names.
It then evolved, as the sketched names became text scraps and connectors were added .
The interaction designers often began with pictures of faces, which they then categorized using visual structures.
In one example , they began with a single dimensional line, added categories to the line, and transformed it into a table.
While they did not set out to create a table, their design process ultimately led them to create it.
Scraps played an important role in this process, helping designers to organize and manipulate content as it evolved.
However, designers did not make all content into regular scraps.
Designers rarely made complex, handwritten structures such as plots regular scraps, as scraps were a poor fit for these structures.
All groups created visual languages in their designs, encoding their own meaning into notations.
For example, designers circled scraps ; used color coded lines, underlines , and boxes ; and dashed lines .
The meaning of the notations was often not obvious and sometimes forgotten.
A designer in the OSS group reported that he could not recall the meaning afterwards, but felt that it had supported his thinking during design.
Designers sometimes used the palette to record notations that could not be quickly sketched.
For example, the interaction designers saved and reused images of people, and the OSS group identified and reused "important entities".
Designers work with different perspectives.
All groups shifted their focus among multiple canvases representing different perspectives on their design.
For example, the interaction designers shifted focus between canvases categorizing their data using different visual structures .
All three groups found copying canvases useful, enabling, for example, the interaction designers to use a template canvas to rapidly create new canvases to explore new perspectives on their data.
The OSS group made frequent use of the cluster view to move between perspectives.
When working with canvases, they created chains, providing an order that helped convey a story.
This sometimes directly reflected the chronology of their exploration in the design space, while in other cases, designers inserted canvases when they returned to previous sketches and deviated to a new idea.
Designers in the OSS and research groups used multiple canvases to explore multiple alternatives.
In the OSS group, the alternatives were often generated as a result of conflicting opinions during discussion, inspiring a designer to copy a canvas and generate their own interpretation.
In contrast, the interaction designers did not use separate canvases to explore alternatives.
Unlike the other groups, the alternatives they considered were of different organizations and interpretations of data, which led them to negotiate alternatives verbally rather than through sketching.
Finally, one designer reported that not being limited to a single space on a physical whiteboard meant that "more random ideas get thrown on there," increasing the number of alternatives they sketched.
Designers used Calico's tagging feature to label canvases as alternatives.
A designer felt that maintaining past alternatives, even when ultimately rejected, was beneficial in providing a record of their design process.
Designers work with sketches at different levels of abstraction.
Designers used Calico to work with sketches at varying levels of abstraction, moving both to more and less abstract canvases.
For example, the OSS group dove into the behavior of components, copying canvases, and creating new canvases at a lower abstraction level.
Designers first started with a more abstract sketch of an event bus connected to event listeners  before considering the design of a specific "alert" event listener .
All groups used lists - either handwritten or list scraps - to summarize the contents of other canvases, which they re-
All groups reported that they mentally stepped through their sketches, both verbally in groups and on their own.
To do so, the OSS group made heavy use of the fading highlighter.
Displaying architectural sketches on the large electronic whiteboard during a meeting, they discussed a sketch at length, gesturing at components with their hands and using the fading highlighter from a tablet that was remotely connected to the same canvas.
In one instance, they discussed a single sketch for 30 minutes using the highlighter .
All groups juxtaposed sketches, either navigating back and forth between sketches or copying dispersed content onto a single canvas using the palette.
For example, a designer in the research group copied pieces of a process flow and used an adjacent table to step through the diagram .
In some cases, juxtaposed sketches served as a static reference in creating a new sketch; in other cases, designers evolved both in parallel.
All groups reported that they reviewed their progress.
Most used lists  to summarize aspects of their design, which they sometimes referenced and updated.
Designers also reviewed their progress by rapidly moving back and forth between several canvases or by using the cluster view for an overview.
While not sufficiently detailed to examine canvas content, the cluster view anchored discussion and allow designers to gesture at canvases, with the linkages between canvases helping designers to recall "how the session played-out".
Designers retreat to previous ideas.
Only designers in the multi-week, long-term design sessions  retreated to previous ideas, reporting that they did not return to previous ideas until a later design session, at which point Calico helped to refresh their memory of their past approaches.
Both reported that, since they did not feel a need to delete unused sketches, they returned to old sketches more often.
The graph structure provided by the cluster view helped designers to locate old sessions and remember their meaning, with linked canvases assisting in reconstructing meaning.
A designer in the research group reported: "Designs get very complex... you want to keep a history of what you've done, the branches that you've pruned...
If you're designing a complex thing with stages and you're trying to tell a story, you can say: okay we've tried that..
If you don't have the structure you'll have to create it somewhere else.
With multiple tablets, multiple team members could talk simultaneously without a single arbiter at the whiteboard blocking content production, an issue in whiteboard use .
In the distributed research group, this enabled remote participants to be more active by sketching ideas.
In contrast, the interaction designers were collocated and had an established culture of working in pairs, leading them to not break into groups.
The OSS group reported working asynchronously at least once every session and felt that it was an important benefit: "The fact that someone can work with their own tablet or computer... is something really powerful...
Especially when someone is already at the whiteboard discussing something and you want to bring in an alternative perspective but you need to wait until they're done."
Designers bring their work together.
Designers rarely did this, as the interaction group did not work asynchronously and the research group did not combine their work.
However, the OSS group twice combined work produced asynchronously, creating a new canvas, linking it to the previous canvases with tags, and summarizing their work.
Designers explain their sketches to others.
All groups explained their sketches to one another but varied in the situations in which they did so.
The interaction designers worked exclusively synchronously, explaining designs only when a designer challenged decisions.
The OSS group sometimes worked asynchronously and used explanations when returning to synchronous work.
The research group worked more independently and explained days of work to other team members.
In most cases, designers explained their sketches by pointing, gesturing in the air, or simply verbally, with the fading highlighter sometimes assisting.
Our study revealed a number of weaknesses in Calico, ranging from usability issues to challenges inherent to interactive whiteboards.
The interaction designers reported that rapidly rearranging many scraps was not well supported, as the gesture of moving scraps  could be slow.
Due to the cluster view's layout approach, it often zoomed out far to show all canvases, making it difficult or impossible to read the content on individual canvases.
This made juxtaposing sketches more challenging, forcing designers to explicitly copy canvases using the palette or to rapidly jump between canvases.
It also made simply navigating between canvases using the cluster view more challenging.
Designers also wanted the ability to more easily augment the set of tags, to for example, declare which alternative was chosen.
While the fading highlighter played an important role in several situations, designers often felt that they forgot to use it "in the heat of the moment".
Empirical Result Designers simulate and discuss scenarios very frequently.
Interactive whiteboards diminish handwriting quality.
Designers work simultaneously with several canvases.
While separating sketches across canvases has important benefits, multiple canvases are sometimes parts of a single sketch.
Designers use impromptu notations whose meaning is forgotten when sketches are reviewed.
Determining the authorship of content is challenging.
Designers work synchronously and asynchronously, moving together between canvases and working on separate canvases.
Design Recommendation Enable annotating sketches with multiple scenarios.
Enable alternative text input  Enable multiple canvases to be legibly viewed simultaneously.
Enable designers to expand canvases when necessary.
Enable designers to reconstruct meaning by recording and replaying audio from design sessions.
Provide authorship cues as content is created.
Enable designers to temporarily subscribe to a group focus.
While the cluster view depicted the current canvas of each device, the designers still felt slowed down when moving between canvases with multiple participants, requiring that they announce what canvas they were moving to.
Nearly all groups reported that the large electronic whiteboards diminished the quality of their handwriting, forcing them to write slower or larger, write with a tablet, or enter text using a keyboard.
The interaction designers found the space available too small, reporting that they were "blocked by the physical limitations of the  board."
Our field deployment revealed several challenges in supporting informal design, suggesting several design recommendations beyond supporting the design behaviors .
For example, designers constantly use general-purpose sketches to simulate and discuss scenarios, annotating and tracing paths over sketches.
This might be more effectively supported by allowing designers to use and reference multiple scenarios on top of general-purpose sketches.
As another example, diminished handwriting quality remains an important issue, suggesting the need to consider alternative mechanisms for text entry such as speech to text.
Together, the design behaviors and design recommendations provide guidance on how informal design can be effectively supported with interactive whiteboards.
The research group and OSS group both felt that, on balance, the benefits of using Calico outweighed its difficulties and wished to continue to use Calico in the future.
The research group felt that Calico helped support their meetings.
Prior to using Calico, the group used physical whiteboards and emailed picture of the whiteboard to the remotely located team member.
They preferred Calico over a formal diagramming tool as they wished to maintain informality and the ability to freely sketch.
The OSS group reported that they did not feel any loss of expressive control in using Calico in comparison to the whiteboard, and reported that they normally would have performed many of the same activities on physical whiteboards in their meeting spaces.
The interaction designers reported that they would not continue to use Calico, as it did not match their needs.
They wished to have infinitely sized canvases - which Calico did not provide - and felt trapped by the limited space.
Further, performance was slowed by using a large number of images on a single Canvas, making Calico less responsive.
Through a review of the software design literature, we identified 14 behaviors that characterize informal design at the whiteboard and designed an interactive whiteboard system - Calico - to support these behaviors.
Through a deployment of Calico to three groups of designers, we examined how supporting these behaviors impacts the practice of informal design.
We found that, by supporting these behav-
