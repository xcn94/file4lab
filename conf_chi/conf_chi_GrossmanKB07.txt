We investigate pointing at graphical targets of arbitrary shapes.
We first describe a previously proposed probabilistic Fitts' law model  which, unlike previous models that only account for rectangular targets, has the potential to handle arbitrary shapes.
Three methods of defining the centers of arbitrarily shaped targets for use within the model are developed.
We compare these methods of defining target centers, and validate the model using a pointing experiment in which the targets take on various shapes.
Results show that the model can accurately account for the varying target shapes.
We discuss the implications of our results to interface design.
Unfortunately, these extensions only handle bivariate targets.
While this is adequate for modeling interface elements that consist of square, rectangular, or even circular shapes, there are important scenarios in which a designer may wish to model pointing to targets of arbitrary shapes.
First, it is becoming common that interfaces are designed with an importance placed on the visual aesthetics, and include many non-rectangular shapes.
The advent of "skins" has made this especially popular .
Second, even if the visual appearance of a target is a square or rectangle, the motor space region, where the cursor can be positioned to select the target, may not be.
For example, when using the bubble cursor , users can select targets' surrounding voronoi regions, which are arbitrarily shaped convex polygons .
Thus, it would be useful if selection times for arbitrarilyshaped targets could be modeled, for the purposes of both the prediction and optimization of interface performance.
A newly proposed probabilistic model  has the potential to be directly applied to such tasks.
However, to date, the model has only been validated for rectangular targets.
In this paper, we first discuss the probabilistic model, and some issues that must be considered for applying it to nonrectangular targets.
Most importantly we discuss several techniques for defining the center of non-rectangular targets.
We then test these techniques and the model in an experiment where users point to various shaped targets.
Our study shows that the probabilistic model can indeed be used to predict acquisition times for arbitrarily shaped targets.
We conclude with a discussion of the implications of our findings to user interface design.
In today's user interfaces, pointing to targets such as menus, buttons, and text is a fundamental operation.
Fitts' law  is commonly used to model movement times for such target acquisition tasks.
It predicts the time MT taken to select a target of width W and distance  A from the cursor according to the equation:
The logarithmic term is the index of difficulty  of the task.
Numerous studies have validated this model for onedimensional pointing tasks .
It has also been used to optimize the layout in new interface designs .
A limitation of Fitts' model, from the perspective of an interface designer, is that in its original form it is inherently one-dimensional.
In contrast, most targeting tasks in user interfaces are typically two-dimensional.
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
When selecting rectangular targets on a two-dimensional screen, two factors must be considered beyond the target width and amplitude constraints of the one-dimensional Fitts' model .
First, the selection is constrained by both the target's width and height.
Second, the cursor must travel along a two-dimensional vector to the target.
MacKenzie and Buxton  conducted one of the earliest studies on bivariate pointing.
They examined several formulas for the index of difficulty for a rectangular target, and found two which correlated with their experimental data.
Their W model  considers the apparent width  of the target based on the movement angle.
The min model  considers the minimum dimension.
The relevant IDs are computed as follows:
While an improvement over previous models, the Euclidian model still does not completely account for all pertinent factors of a general two-dimensional pointing task.
First, it does not take into account the angle of movement towards the target.
A two-dimensional pointing model should consider this factor, particularly since previous work  indicates that the movement time will depend on the direction of movement.
Second, and of particular interest to our current work, the model only considers rectangular targets.
There is no clear way to apply the Euclidian model to targets that do not have well defined W and H values.
A more recent probabilistic model, developed by Grossman and Balakrishnan , addresses the two limitations of the Euclidian model.
In particular, although not yet confirmed through experimental evaluation, the model can potentially be applied to targets of arbitrary shapes.
In their studies, the probabilistic model was found to accurately model movement times when pointing at rectangles for various sizes, distances, and movement angles.
The min model had the highest correlation with their experimental data.
This model has been used in follow-up work , and was also proposed independently by Hoffman and Sheikh .
While the Mackenzie and Buxton models accounted for their data reasonably well, Accot and Zhai  identified various problems with the formulations.
The problem with the W model is that it completely ignores the constraints imposed by the dimension of the target perpendicular to the line of movement, also referred to as the directional constraint .
The problem with the min model is that it predicts that H does not affect the time as soon as it becomes greater than W. Similarly, the model is not affected by W as soon as it is larger than H. Thus, this model does not account for data reported by Sheikh and Hoffman  that showed that it is harder to acquire a square than a rectangle with equal height but larger width.
Accot and Zhai  thus developed and validated a weighted Euclidean model which alleviates the drawbacks of the Mackenzie and Buxton formulations:
To help the reader understand the work done in this paper, we first give an overview of the previously proposed probabilistic model, and discuss how we will be applying it for modeling the selection of arbitrarily-shaped targets.
We refer the reader to Grossman and Balakrishnan  for a full explanation of the probabilistic model.
The central idea behind the model is to map the probability of hitting a target with an open-loop movement to an index of difficulty value for that target.
The "open-loop" movement refers to the initial ballistic impulse towards the target, without any feedback-guided final adjustments .
A dart board analogy can help explain the concept of a probability of hitting a target .
If a dart is thrown at the bull's eye of a dart board, it may land close to the bull's eye, or it may land further away.
If a large number of darts are thrown, then a spread of hit locations will result.
From this spread of hits, the probability of hitting the bull's eye, or any other target on the dart board, could be predicted.
Similarly, if the spread of hits, S, when pointing at a graphical target, or region, R, using only ballistic and no corrective movement is well understood, then a probability of hitting that target without corrective movements, P, could be assigned.
The probabilistic model maps this probability value directly to an index of difficulty value using a function F:
This model considers  to be the "constraint vector".
By taking a weighted norm of this vector they incorporate both variables into an "appropriate distance in a two-dimensional space" .
The addition of the parameter  allows the model to weight the effect of the height differently from the effect of the width.
The Euclidian model provides a significant improvement over the min model as it allows the larger dimension to still affect the movement time.
The probabilistic index of difficulty is thus completely determined by calculating the probability that the target will be hit by an open-loop movement.
This is an intuitive idea, since a target which is less likely to be hit by an open-loop movement should be harder to select.
The spread is modeled by the bivariate normal distribution, N.
The means , again, are zero, corresponding to the target center.
The standard deviation X = cA, for some constant c, is measured from the center of the target, collinear with the direction of movement.
The standard deviation Y = dA, for some constant d, is measured from the center of the target, perpendicular to the direction of movement.
For simplicity, X and Y are assumed to be independent.
The resulting equation for the bivariate normal density function is:
Further, the spread of hits, , increased linearly with the target amplitude A.
This again is intuitive, since the spread of hits should diverge as the target distance increases.
Reverting to the dart board analogy, the points that the darts hit will become more spread out if they are thrown from further away.
The index of difficulty thus becomes:
The term inside the brackets is just the integral with respect to X' and Y' over the 2D region R. A desirable property of this model is that it does not require the target to have a well defined height and width.
The equation can provides IDs for targets of arbitrary shape by just integrating over a different region R.
Unfortunately, there is no closed formula for the cumulative normal distribution function, so F is computed numerically, by simply substituting different values of A and W. Figure 3 shows the F function generated by substituting different values of A and W into both sides of Equation 8.
Using this function, the index of difficulty can be calculated for any pointing task, by only calculating the probability of hitting that target with an open loop movement.
In the model, we calculate the probability of hitting a target using an open-loop ballistic movement.
As such, we consider the target center to be the point on the target where we would expect the user to initially aim.
The center of the distribution function which is to be integrated over is aligned with this target center .
Determining where the target center is will thus have an effect on the probabilistic model, as it will affect the probability, and in turn the index of difficulty, in two ways.
First, it will determine how the distribution of hits overlaps the target.
Second, it will affect the standard deviations of the distribution.
This is because the standard deviations are a function of A, the distance to the target center.
If the center is placed closer to the starting point of the cursor, then the distribution will become more compact .
The advantage of this strategy is that the centroid is very simple to calculate.
The disadvantage, however, is that applying this to arbitrary shapes may lead to undesirable results, as the defined centroid may be completely different from where a user would be expected to aim.
For example, with a wide target, it may be expected that users would click towards the closest side of the target.
In Figure 6, we illustrate the vertices of our example crescent shape, which are used in the calculation for the target centroid.
As can be seen, the resulting polygon centroid is horizontally centered.
This will be the case for any target which is symmetrical about the vertical axis.
Similarly, if the target were symmetrical about the horizontal axis, then the polygon center would be vertically centered.
As for the vertical alignment on the centroid in this example, it appears to be much higher than where we would actually expect a user to aim.
This demonstrates a possible disadvantage of using a strict mathematical definition of the target center.
Previously, the probabilistic model has only been used to model movement times to rectangular shapes, so the target center was easily defined as the center of the rectangle.
This may in fact be a simplification, as there is no existing evidence showing that users initially aim for the center of rectangles.
Regardless, if we are to use the probabilistic model for arbitrary shapes, we need a more formal method for defining the target center.
In the following sections we present three methods for defining the target center, and provide an example of how the center is calculated for an example "crescent" shape which is used in our experiment.
One possible method would be to use the mathematically defined polygon centroid, or "center of mass" of the 2D target.
This method was suggested for triangular targets by Grossman and Balakrishnan .
The centroid of a polygon is calculated by taking an average of the N vertices in the polygon , i = 0, ... N1, where the last vertex  is the same as the first, as the polygon is closed.
Using a standard calculation of the polygon centroid, we first define the area of the polygon A:
A potentially more accurate method for defining the target center would be to look at where users actually click when selecting the target.
The distribution of these points could be averaged to determine where the center of the target should be set.
The advantage of this technique is that it could account for effects such as the user tending to aim for portions of the target closer to the starting point of the cursor.
The main disadvantage of this method is that the center of a target could only be computed after acquisition data for that particular target has been obtained.
Another disadvantage is that it still may not be completely accurate as it is only estimating the final selection point, and not the initial point for which the user is aiming.
To illustrate this method, we provide example data of where a user's final selection points may occur when acquiring the "crescent" shape from the left .
While the selection center seems more suitable than the polygon centroid, it requires empirically measured data for the particular target of interest.
It would be desirable to find a method which is as accurate, but does not require existing data for the calculation.
The final method we explore is to choose the center such that the probability of hitting the target is maximized.
Humans are arguably quite good at optimizing their performance, so it may be reasonable to assume that users will initially aim for a point on the target which maximizes their chances of hitting anywhere on the target, with a single ballistic movement.
To determine the center with this method, we set the probability of hitting the target with a ballistic movement as a function of the coordinates of the center point on the target, cx and cy.
The center point is calculated by maximizing this function:
It is fairly intuitive that the function is skewed towards the left of the shape, as placing the center closer to the cursor will decrease the deviations of the distribution, increasing the probability of a hit, while placing it further away will increase the deviation of the distribution, reducing the probability of a hit .
The main disadvantage of this method is that this function, along with its maximum value and corresponding values for cx and cy, can only be determined using computational methods.
However our hope is that this method will provide results at least as accurate as the selection center, with the advantage that previously collected data is not required.
Figure 8 illustrates the calculation of the optimized center for our example crescent shape.
The calculation assumes that the cursor is approaching from the left.
In Figure 8a, we see a 3D plot of the function from Equation 14.
The maximum point of this function can be determined using computational software such as Maple.
The resulting value for the optimized center is illustrated in Figure 8b.
Even though the shape is symmetrical about the vertical axis, the function is slightly skewed towards the left, from where the cursor approaches.
This is better illustrated in Figure 8b, where the function is mapped onto the actual shape.
The gradient at each point represents the probability for that point, with lighter values representing higher probabilities.
The optimized center is the lightest point on this shape, as it has the highest probability.
The experiment was conducted on a 1.4 Ghz PC running Windows XP with OpenGL for graphics, and a 19-inch monitor at 1280 by 1024 pixels.
A puck on a WACOM tablet was used for input.
The puck and tablet were used with an absolute mapping, to prevent clutching actions that might occur if a relative mapping or regular mouse was used.
While such clutching actions do occur in practical settings, for the purposes of validating the pointing model, it is preferable to avoid potential confounds that might be introduced by clutching.
Only a portion of the tablet was mapped to the screen space, to create a control-gain ratio of 2.
This is the same hardware setup used by Grossman and Balakrishnan , allowing us to use their determined c and d values for the probabilistic model .
A reciprocal 2D pointing task required participants to select two fixed-sized targets back and forth in succession.
The target centroids were positioned equidistant from the centre of the display in opposite directions along the horizontal axis.
This controlled the movement angle, simplifying our experimental design.
When participants correctly selected a target, the targets would swap colors, as an indication that the participant had to now move to and select the other target.
Participants had to successfully select the green target before the colors would swap, even if it required multiple clicks.
This removes the possibility that participants may try to "race through the experiment by clicking anywhere".
The total error rate was presented to participants after each set of reciprocal trials, and they were told to balance speed and accuracy such that their error rate remained at approximately 4% throughout the experiment.
A repeated measures within-participant design was used.
A fully crossed design resulted in 90 combinations of shape, size, and distance.
Each participant performed the experiment in one session lasting approximately one hour.
The session was broken up into 4 blocks, within which each of the 90 conditions occurred exactly once in random order.
Each condition consisted of five reciprocal movements between the two targets, resulting in 1800 trials per subject.
To familiarize participants with the task and with the absolute mapping of the input device, participants were given a warm-up block before the actual experiment began.
To test the probabilistic model when pointing at targets with arbitrary shapes, it is desirable to use a variety of different shapes, each with their own unique visual properties.
To do so, we referred to computer vision literature in object classification.
In that field, classification systems are created by giving the system a set of example shapes.
Each example shape represents a unique class, and the classes are created such that given an arbitrary shape, a human would be able to distinguish which class it belongs to.
We have chosen a set of 8 object classes, which have been commonly used as the example shapes for such object classification algorithms .
Figure 9 illustrates the ten shapes which we included in our study based on these object classes.
The shapes were mirrored on opposite sides of the display, with the target on the left side shown in Figure 9.
Shapes 9 and 10 were included to mirror shapes 6 and 7, which were not symmetrical along the vertical axis.
In our analysis of movement time we first removed trials in which errors occurred, 3.9% of the data.
From this we then removed outliers more than 3 standard deviations from the group mean movement time, 0.8% of the data.
The fact that distance and size had such strong effects is not surprising, and could have been predicted from the original formulation of Fitts' law  .
What is more interesting is the effect of shape on movement time.
This also could have been somewhat expected, as each unique shape should provide its own index of difficulty.
This further validates our need for a predictive model which takes the shape of the target into account.
Figure 10 shows the movement times for each of our ten shapes.
Each target shape was presented at one of three sizes.
At the smallest size , each target would fit snugly into a 37  by 28  pixel bounding box.
Targets were also presented at two times , and three times  their smallest size.
It is important to note that the purpose of this experiment is not to compare movement times across the ten shapes, nor to worry too much about the sizes of the targets as measured by exact area; it is only important to determine if the probabilistic model works across a spectrum of shapes.
If it is shown that the model does work for arbitrary shapes, then the model could, in turn, be used to predict if a target of particular size and shape will be easier to select than another.
Although the goal of this experiment was not to compare movement times for the different shapes per se, there are some interesting observations which can be made.
Post hoc analysis shows that shape 3, the plus sign, had significantly higher movement times than any of the other shapes .
This is despite the fact that its total surface area, or screen real estate which it covers, is comparable to many of the other shapes.
This provides evidence that highly concave shapes which are segmented may be inefficient shapes for target acquisition.
It is also interesting to compare the results of shapes 6 and 9, and shapes 7 and 10, as they are both mirror images of each other.
In both cases, movement times did not differ significantly.
This demonstrates that for non-symmetrical targets, designers may not need to worry about which direction the cursor will be approaching from, as movement times will be similar.
However, it should be noted that, although the differences were not significant, the targets with the larger portion closer to the starting point  were slightly faster in both cases.
This effect could be significant for targets whose asymmetry is more extreme.
While it is useful to make such observations, and hypothesize as to their possible causes, the probabilistic model should provide a theoretical reasoning for why they were observed.
In particular, we will provide further discussion on why the plus sign had slower movement times when we discuss the modeling of the observed movement times.
It is interesting to note that in all cases, the three methods for defining the center provide very similar results.
In most cases, the optimized center is to the left of the polygon centroid, and very close to the selection center.
The similarity between the selection and optimized centers demonstrates that users are good at optimizing their performance by aiming at an optimal location.
Now that we have the target centers defined, we can use the probabilistic model to calculate the index of difficulty for each experimental condition.
This calculation is done using Equation 10, where the region of integration is set to the target shape, which was offset by the appropriate center point.
Table 1 shows the results using a least-squares fit method for the three target center methods.
The table shows parameter estimates and standard errors.
The last column provides R2 values for the regression.
We see each of the models provide a high fit to the data, with R2 values over 0.9.
The selection center performed slightly worse than the other two models.
The optimized center and polygon centroid performed best, both with R2 values of 0.94.
Figure 12 shows the regression analysis for the optimized center, for each of the shapes.
Before evaluating the probabilistic model on our obtained data we first need to define the target centers, using the three methods discussed previously.
Obviously, these centers must be calculated for each of our 10 shapes.
Moreover, we must also calculate the target centers for each distance and size combination.
While the polygon centroid for each shape will not change with the distance and size, the selection center and optimized center methods of calculation will likely result in different values depending on size and distance.
We therefore calculated the target centers for each of the 90 conditions in our experiment design, using each of the three described methods.
As an example, Figure 11 shows the target centers of each shape for distance = 512, size = 2.
This is in contrast to the rest of the shapes, for which the model seemed to work quite well.
Indeed, when we remove the data for shape 3, the R2 value for the optimized center goes up to 0.959.
In light of this, we further analyzed the data for shape 3, to try to understand why the model was underestimating its movement times.
Our hypothesis was that because shape 3 appears to have two distinct sections, a horizontal and vertical rectangle, users would bias their movements towards the easier of these two sections, the horizontal rectangle .
To support this hypothesis, we looked at the selection points for all of the trials with shape 3.
As seen in Figure 13, a large proportion of the selection points are within the bounds of the horizontal rectangle.
In fact, more than 90% of the time, users were selecting within the region defined by this section of the target.
In essence, in the majority of the trials, users were acting as if the rest of the target didn't even exist.
This would explain why the model underestimated movement times for this shape, as the model integrates the distribution over the entire target region.
The most important contribution of the presented work is that we have validated the probabilistic model for arbitrarily shaped targets.
We selected a range of shapes, each with their own unique visual properties, and found the probabilistic model to accurately predict movement times, with R2 values above 0.9 across all shapes.
Furthermore, we have proposed and tested three methods for defining the center of arbitrarily shaped targets.
The polygon centroid is simple to compute, and did better than expected, with an R2 value of 0.94.
The optimized center method was found to be just as good for predicting movement times, and has the advantage over the selection center method of requiring no previous user data for the target of interest.
If computational power is not an issue, we believe this method could be used with the probabilistic model, whereas the polygon centroid provides a simpler alternative with comparable results.
Aside from discussing the theoretical benefits of our model, it is also worth mentioning how our model compares to the Mackenzie and Buxton models from a practical standpoint  .
For some non-rectangular targets these models could potentially provide designers with simple and suitable estimates of movement times.
However, the very definitions of these models tell us that they cannot accurately model pointing to arbitrarily shaped targets.
For example, if modeling the plus sign shape, both the MIN and W' models would give this shape the same ID values as a 1D pointing task with the same horizontal width regardless of the thicknesses of the horizontal and vertical regions which the target consists of.
Without even conducting an experiment, we can conclude than in many situations these models will predict movement times that have little or no correlation to actual movement times.
As such, when considering non-rectangular targets, our model can provide sufficient benefit to be worthwhile for adoption in practice.
Given our results, it is now possible for interface designers to assess interface layouts which contain non-rectangular shapes.
For example, we can apply the probabilistic model to the interface illustrated in Figure 1, to calculate index of difficulty values for each of the targets.
To do so, we created a simple program which allows a user to sketch over regions of a bitmap image to define a target of interest.
The program triangulates this region, and the resulting triangles are used as the region of integration for determining the index of difficulty.
We used the optimized center method to calculate the indices of difficulty, and assumed the cursor approached each target from the left, from a distance of 640 pixels from the center of the interface .
In Figure 14b we see the resulting calculated index of difficulty for each of the targets.
Similarly, the model can be used to analyze the performance of selection techniques such as the bubble cursor, which increases the motor size of selection space to non-rectangular Voronoi regions .
To further validate this belief, we repeated the calculation of the index of difficulty for shape 3, using only the horizontal rectangle as the region of integration.
This resulted in a much tighter fit with the rest of the data, providing an overall R2 value of .961.
The result of this analysis is important, as it shows that users may not take full advantage of the screen real estate which a target with distinct segments takes up, making such a target inefficient.
The overall error rate across all trials was 3.9%, which is very close to the optimal 4% error rate value for target acquisition studies .
Post hoc analysis showed that this effect was caused by shape 5, the rectangular shape, which had a significantly higher error rate  than the rest of the shapes .
With the probabilistic model, such selection techniques can be studied with general non-rectangular layouts.
Such analysis could provide insight on how selection techniques could be modified or enhanced.
We believe this trend will continue, as more importance is placed on the aesthetics of a user interface, and as the proper tools are available to interface designers for creating such interfaces.
One justification for this belief is from an observation of this transition in the realm of user interface design of physical products.
For example, if we examine the early generation of mobile phones, almost all of the buttons were rectangular .
In contrast, it is most certainly challenging to find a single rectangular button in the current generation of mobile phones .
This transition has also been seen in the automotive industry.
In the early 1990's there was shift away from "boxy" shaped dashboards or control panels in cars.
Today's car dashboards and their buttons and display panels tend to be composed of smooth flowing shapes, containing few sharp corners, if any.
Calculating the indices of difficulty for an interface containing non-rectangular targets.
Along with predicting user performance for interface layouts, designers can also optimize their layouts for user performance using the probabilistic model.
For example, the Metropolis keyboard  could be further enhanced such that virtual keys are positioned and shaped in an optimal manner for user performance.
Another important finding from our results is that the model was not as accurate for the "plus sign" shape, as it underestimated movement times.
Further analysis revealed that this was likely due to the clearly distinguishable segments in the plus sign.
Users did not take full advantage of the entire surface area of the target, as they over-biased their movements towards the easier of these two segments.
This observation tells us that highly concave, or segmented shapes, are probably not the most appropriate for interface targets.
They will waste screen space as there will be parts of the target which will not be used for their selection.
There are two possible reasons for this transition.
First, when producing new technology such as cell phones, the majority of the attention in its production goes towards its technical implementation.
Once this has been perfected, the attention will shift towards the aesthetics.
Second, the increasing sophistication of 2D and 3D graphic design and modeling tools has given industrial designers the ability to easily create technical drawings and 3D models composed of smooth curves and surfaces.
Indeed, the prevalence of such tools has coincided in time with the shift towards more aesthetically pleasing designs.
We believe the majority of computer user interfaces are still in the early phase of this transition for the second of these two reasons.
Designers and programmers at software companies generally use standard toolkits.
These toolkits simplify the creation of interface elements, such as buttons and icons.
However toolkits generally limit these elements to, square or rectangular shapes.
When toolkits evolve to allow the use of arbitrarily shaped targets, it will be easier to create more aesthetically interesting user interfaces.
Our contributions will become increasingly important as the use of arbitrarily shaped targets in everyday interfaces increases.
There is already a transition towards aesthetically pleasing interfaces, although this is at an early stage.
In today's user interfaces, the majority of arbitrarily shaped targets are seen in skins and HTML image maps.
However, they are also starting to occur in general program user interfaces.
Of course, there is also an added cost of a more complex "hit test" when the targets are non-rectangular.
In fact, in some examples of today's non rectangular interface targets, the system still assumes a rectangular bounding box for performing the hit test.
However, with the speed of today's CPUs, a simple within-polygon algorithm would not cause any noticeable slow-down, and could be integrated into the toolkits which allow for the addition of arbitrary shapes.
There are also those who believe that interface designers who attend to the visual aesthetics of an interface may neglect its usability , or that the aesthetic elements themselves may degrade usability .
Contrary to this, however, it has been shown that there is a correlation between perceived aesthetics and perceived ease of use of an interface .
Using the probabilistic model, designers now have the ability to predict movement times for their aesthetically designed non-rectangular shapes, ensuring that they are not degrading the interface's usability.
We have presented a formal experiment which validates the use of a probabilistic Fitts' law model for arbitrarily shaped targets.
The model was found to accurately predict movement times across a range of non-rectangular shapes.
Furthermore, we discussed three methods for defining the center of arbitrarily shaped targets for the purposes of modeling, and found the polygon centroid and optimized center to be the most suitable techniques.
We also presented a discussion of the implications of our work towards user interface design.
Interface designers can use the model to both predict and optimize performance of their user interfaces, and HCI researchers can use the model to analyze and improve interaction techniques.
Finally, although not the goal of our paper, we have provided some rationale as to why we believe arbitrarily shaped targets will become more prevalent in user interfaces.
The work presented here will likely become all the more valuable when such a transition occurs.
