Pen-based computing has not yet taken off, partly because of the lack of fast and easy text input methods.
The situation is even worse for people using East Asian languages, where thousands of characters are used and handwriting recognition is extremely difficult.
In this paper, we propose a new fast text input method for pen-based computers, where text is not composed by entering characters one by one, but by selecting words from a menu of candidates created by filtering the dictionary and predicting from context.
Using our approach, users can enter Japanese text more than twice as fast as recognition-based and other existing text input methods.
User studies and detailed analysis of the method are also given.
On almost all the pen-based computers available in Japan, either RKC or handwriting recognition is supported.
Text input is slow and tiring using either of the techniques, for the following reasons.
Specifying the pronunciation of every input word using a soft keyboard takes a lot of time, and the user must convert the pronunciation to the desired Kanji strings with extra keystrokes.
Handwriting recognition has more problems.
First, the recognizer has to distinguish between thousands of characters, often making errors.
Many of the characters in the character sets have similar shapes, so it is inherently difficult to make recognition reliable.
Second, in many cases, users do not remember the shape or the stroke order of Kanji characters, even when they have no problem reading them.
Finally, writing many characters with many strokes on a tablet is very tiring.
With these difficulties, it is believed to be difficult to enter Japanese text faster than 30 characters a minute on pen-based computers, which is several times slower than using keyboards.
We have developed a new pen-based text input method called POBox , where users can efficiently enter text in any language, using menus, word prediction and approximate pattern matching.
The remainder of this paper demonstrates the details of POBox.
Although a variety of pen-based computers are available these days, they are not as widely used as keyboard-based computers, partly because entering text is much harder on pen-based machines.
Traditionally, handwriting recognition techniques and the soft keyboard  used to be the main techniques for entering characters on pen-based computers, although other techniques have also been proposed.
However, using any of these techniques takes much longer to enter text than with a standard keyboard.
The situation is worse for East Asian languages such as Chinese, Japanese, etc.
These, unlike European languages, have thousands of character faces.
Even with a keyboard, it is not easy to enter a character.
A variety of techniques for entering text into computer have been investigated.
There is a big difference between the speed of typing on keyboards and pointing to characters on soft keyboards of pen-based computers.
Computer users can easily type more than five characters per second, while it is very difficult to touch three character keys per second, accurately on the soft keyboard of a pen-based computer.
For this reason, forcing the user to enter many characters should be avoided on pen-based computers, while a better approach should allow the user to select a word from a list of candidates, in a minimum number of penstrokes.
We took the following approach.
As soon as the user specifies a portion of the pronunciation or the spelling of a word using the soft keyboard on the tablet, POBox shows a menu of candidate words that match the input.
The words which are most likely to appear at the insertion point in the text are shown at the top of the menu.
The likelihood is calculated from the term frequency and context.
For example, since the word "interface" tends to come after "user," it appears at the top of the menu after the user has selected "i" as the first character following "user."
This pattern matches words like "synergy" and "dynasty," but since "dynamic" has higher term frequency than these words, it is shown in the candidate word list for the selection.
The other is pattern matching allowing errors.
This strategy is effective when the user does not remember the correct spelling or the pronunciation of a word.
In this case, POBox automatically looks for words whose spelling or pronunciation is closest to the pattern and shows them as candidates.
Users can even specify only a portion of a word to get the desired word in the candidate list.
One is spatial approximation, where adjacent characters on the soft keyboard are treated equally in the search.
This strategy is effective especially when the soft keyboard is small and precise selection is difficult.
For example, if the user failed to tap the right position of a soft keyboard and selected "dtns" to enter "dynamic," no word in the dictionary matches "dtns" and POBox automatically searches the dictionary using the less strict pattern "," based on the arrangement of ASCII keyboard.
First, for explanatory purpose, we show how to use POBox for entering English text, although POBox is more effective for entering Japanese and other East Asian languages.
We used the ACM CHI'95 Electronic Proceedings CD-ROM to create an English dictionary with term and phrase frequencies.
We extracted plain text files from all the HTML files in the CD-ROM, counted the occurrences of words and word combinations, and created the dictionaries by sorting the entries by frequency order.
The remainder of this section uses the sentence 
Figure 1 shows the startup display of POBox.
When the user touches the "F" key, the display changes to Figure 2, showing the frequently used words that start with "F" in a pulldown menu.
Since the word "first" is a frequently used word and is found in the menu, the user can drag the pen and highlight the word "first" as shown in Figure 3, and then take the pen off the tablet to complete the selection.
Alternatively, if the user does not make a selection from the pulldown menu of Figure 3, he can choose the desired word from the popup menu as shown in Figure 4.
After selecting "first", the display changes to Figure 5.
In the menu at the bottom, the words that often come after "first" are listed in order of frequency.
The word combination "first the" appears 27 times in the CHI'95 CD-ROM, "first and" and "first time" appear 20 times, etc.
Since the next word, "we," happens to be in the list because "first we" appears 13 times in the CD-ROM, the user can directly select "we" by touching it in the menu.
After selecting "we", the display changes to Figure 6.
In this case, "show" is not found in the menu, but it can be selected from the pulldown menu by touching the "S" key as shown in Figure 7.
After this, "our", "technique" and "for" can be selected in a similar manner.
Touching the "E" key does not make the system display the next intended word  as shown in Figure 8, but touching the "N" key next narrows the search space of the dictionary and "entering" then appears in the menu for the selection .
With the approximate string matching feature, even when the user does not specify the correct spelling of a word, there is a good chance of finding the desired word among the candidates.
Also, the user can specify only part of the spelling to find the desired word.
For example, if the user does not remember the spelling of "Mediterranean," he can specify "mdtrn" to see the list of words which are close to the pattern and then can find the right word in the list 
The same technique can be used to enter a word that has a common prefix.
If the user tries to enter "complementary" and specifies "comple," he still cannot find the word in the candidates in Figure 11, since there are many commonly used words that begin with "comple."
Instead, the user can specify the characters that better represent the word.
As shown in Figure 12, the user can obtain "complementary" by specifying "cplm," although other patterns such as "cpmt" will also work.
Here, "context" means the word that precede the input word.
The top portion of the initial phrase dictionary is shown in Figure 17.
Of all the phrases , "of the" occurs most often and hence appears at the top of the phrase dictionary.
Whenever possible, POBox checks the context and the characters specified by the user, and generates the list of candidate words for the next user input.
First, it checks the phrase dictionary and looks for the dictionary entries whose context match the current context and whose spelling match the user input.
If such entries are found, POBox puts them into the candidate list.
Then it checks the word dictionary and looks for entries whose spelling match the user input.
If no entry is found in both of the dictionaries, POBox tries to find more candidate words by performing approximate string matching described in the next section.
After the user selects a word from the menu, the newly selected word and phrase are put at the top of the dictionaries.
A middle-sized natural language dictionary usually has 20,000 to 50,000 word entries, which occupies less than 500KB of memory without compression.
With appropriate compression and indexing techniques, a word dictionary plus a phrase dictionary can easily be packed into 1MB of memory.
Figure 13 shows the initial display of POBox in Japanese input mode.
A Hiragana character table is displayed for entering pronunciations, instead of the Roman alphabet in English mode.
The pronunciation of the first word " " is " ", and the user can select the word by choosing " " and " " from the Hiragana keyboard, just like in the English example.
Figure 14 shows how the user can select the word " " with the pulldown menu.
The user can select the next word " "  after selecting its pronunciation " " and " ".
In this way, the user can enter Japanese text by specifying the pronunciation of the first portion of the word and then selecting the desired word from the menu, just like specifying the spelling for English words.
The user can input the phrase " " in 7 penstrokes, whereas the ordinary RKC method requires at least 20 penstrokes.
The word dictionary is a set of 2-tuples fword, spelling/ pronunciationg sorted by the term frequency of the word.
The top portion of the English word dictionary is shown in Figure 16.
Since "the" appears more often than any other word in the corpus, it resides at the top of the dictionary, with its spelling "THE."
Our approximate string matching algorithm is based on BaezaYates' "shifter algorithm", with our extensions for allowing errors and handling simple wildcard characters.
The shifter algorithm is also used in an approximate string matching program agrep , where wildcard characters are treated differently from ours.
In our algorithm, we limit the wildcard to the basic ".
This state transition can be calculated with simple logic and shift operations.
For a short pattern with small ambiguity, POBox first creates a deterministic state transition table from the nondeterministic state transition diagram like the one shown in Figure 20, and uses the transition table instead, for faster processing.
For example, the state machine in Figure 20 can be converted to a deterministic state transition table with 32 states.
POBox currently runs on UNIX, Windows95, Newton, Java VM, and Pilot.
POBox for Pilot is the latest version, distributed to the public on the Web3 since July 1997, and downloaded by more than 10,000 people in two months.
Since it is the most widely-used version of POBox, we used it for the evaluation, although it lacks the pulldown menu feature because of its limited processing power.
A set of inquiries asking the user's background and impressions of POBox was also presented on the Web page for downloading POBox, and 1,057 people answered the questions.
Among the 967 people with experience in both POBox and Japanese handwriting recognition systems, 126 people  said they feel that POBox is as efficient as handwriting recognition systems, and 796 people  said POBox is more efficient.
Among the 899 people with experience in both POBox and RKC systems, 118 people  said they feel that POBox is as efficient as conversion-based systems, and 718 people  said POBox is more efficient.
Several people sent back comments saying that they feel POBox is the most effective pen-based Japanese input method they have ever used.
Of these users, we selected approximately 300 people who seemed to have reasonable experience with both POBox and handwriting recognition systems, independent of their performance on the two systems, and 31 people agreed to perform the experiment and sent back the test results.
All of them are adult male, and most of them are engineers in various Japanese companies.
About half are in their thirties, three are in their forties, all of them having enough experience on both POBox and handwriting recognition systems.
We asked the participants to measure the entry time of a sample Japanese text consisting of 53 Kanji/Kana characters and 2 punctuation characters, under the following conditions:
Figure 18 shows a nondeterministic state transition machine which accepts a regular expression "ab.*ca".
In the shifter algorithm, a bit string is used to represent the status of this state machine.
The state machine can be extended to perform spatial approximate search by adding transitions by adjacent characters 
The state machine can also be extended to allow errors by adding extra rows of states as shown in Figure 20.
A0 is the accept state with no errors, and A1 and A2 are the accept states with one and two errors, respectively.
Like most spelling correctors, POBox treats character insertion, deletion and substitution as errors.
Figure 21 shows the state transition by "abracadabra".
After reading "ab", state A2 becomes active, showing that "ab" matches "ab.
No correlation was observed between the speed of writing on paper and the speed of entering text using handwriting recognition systems.
The average text input speed using POBox was about 40 chars/min, which is approximately twice as fast as conventional RKC or Zaurus' handwriting recognition system.
While the fastest handwriting recognition times observed were shorter than the slowest POBox users, every individual tested performed better with POBox than with the handwriting recognition system.
The total number of words in the CHI'95 CD-ROM is about 650,000, and the distribution of the frequency conforms well to Zipf's rank-frequency law.
From the data, the probability of finding the desired word in the candidate menu after entering the top portion of the spelling can be calculated by summing up all the frequencies of words that appear in the menu after each penstroke.
This is the case when using POBox without the prediction from context feature.
The result is shown in Figure 23.
When the system shows 10 candidates after each penstroke, about 53% of the input words can be found in the menu after specifying one character, and about 92% of words can be found after three penstrokes.
This means that 92% of the words can be entered with four penstrokes, while about 50% of the words in the CHI'95 CD-ROM consist of more than four letters.
This result shows that the menu-based text input method of POBox is effective even without the prediction mechanism.
The same analysis for the Japanese dictionary is shown in Figure 24.
The second and third tests were performed on the Pilot, which does not have a Kanji handwriting recognition system.
Therefore, we asked the participants to use their favorite recognition systems, instead.
Among the 31 participants, 10 people used the same handwriting recognition system available on a Zaurus PDA5 .
Other people used various handwriting recognition systems on PCs and other PDAs, but the recognition time was longer than on the Zaurus.
The summary of the test result is shown in Figure 22.
Since not all participants completed all experiments for the same number of times, the area of the histogram differ among the tests.
Most of the participants could write the sample text on paper faster than with any of the electronic text input methods.
Writing speed does not vary significantly between people.
On the other hand, the text input speed using Zaurus' Kanji handwriting recognition system does vary considerably from person to person, the average being about 20 chars/min.
We assume that Ts  is proportional to n and Tk is a constant value, since POBox shows a menu of candidates according to the probability of the words, and the user cannot tell the ordering of the words in the menu beforehand.
We calculated T  using P  for the two cases of slow and fast character input.
Figure 26 shows the calculated average time for entering a word where character input speed is slow and Ts  can be estimated to be n=10 and Tk is the constant 1.
In this case, without prediction, the minimum text input time is obtained when i = 1 and n = 3, which means using a three-entry menu after one penstroke without a menu.
With prediction, the input time is minimized when i = 0 and n = 3, which means using a three-entry menu from the start.
This is because frequently-used words are displayed at the top of the menu even before the user specifies characters for filtering the dictionary.
The estimated average time for entering words is smaller with prediction than without prediction.
More accurate hit ratio of POBox menus can be calculated by simulating the prediction and adaptation mechanisms of POBox with real English text.
Figure 25 shows the hit ratio calculated by using all the texts in the CHI'95 CD-ROM.
The hit ratio with the prediction from context feature is shown in Figure 25, and the hit ratio with prediction and dictionary adaptation is shown in Figure 25.
Prediction from context is effective for increasing the hit ratio, especially when no input is specified for selecting words .
In this case, POBox displays the correct word among its 10 candidates 38% of the time, whereas this number drops to 26% when prediction is not used.
Greenberg argued that it is convenient to put frequently used tools close at hand, and showed that this technique is useful for issuing text commands in his WORKBENCH system.
POBox resembles the WORKBENCH system in that both frequently used words and recently used words always appear close at hand at the top of the candidate list for quick selection.
Although they reported that their prediction system could reduce input penstrokes from 10 to 40 percent, problems with handwriting recognition still remain and the text input speed does not increase dramatically.
We developed a new fast text input method for pen-based computers based on dynamic query of the dictionary and word prediction from context.
With our method, the speed of text input on pen-based computers greatly increases and for the first time, pen computing becomes a viable alternative to keyboard-based input methods.
Baeza-Yates, R. A., and Gonnet, G. H. A new approach to text searching.
Darragh, J. J., Witten, I. H., and James, M. L. The Reactive Keyboard: A predictive typing aid.
Fukushima, T., and Yamada, H. A predictive pen-based Japanese text input method and its evaluation.
Goldberg, D., and Richardson, C. Touch-typing with a stylus.
In Proceedings of ACM INTERCHI'93 Conference on Human Factors in Computing Systems  , Addison-Wesley, pp.
Greenberg, S. The Computer User as Toolsmith.
Cambridge Series on Human-Computer Interaction.
Cambridge University Press, March 1993.
Venolia, D., and Neiberg, F. T-Cube: A fast, self-disclosing pen-based alphabet.
In Proceedings of the ACM Conference on Human Factors in Computing Systems  , Addison-Wesley, pp.
Wu, S., and Manber, U. Agrep - a fast approximate patternmatching tool.
In Proceedings of USENIX Technical Conference , pp.
In this manner, the fastest method for entering text depends on the relation between Tk =Ts  and P .
Roughly speaking, when Tk =Ts  is very small  as with a keyboard, the fastest way of entering text is entering characters without the use of menus.
On the other hand, if Tk =Ts  is very large , using menus with many entries is faster.
The two cases shown in Figure 26 and Figure 27 are between these extremes, and POBox supports the entire spectrum.
Darragh's Reactive Keyboard predicts the user's next keystrokes from the statistical information gathered by the user's previous actions and shows the predicted data for the selection.
Unfortunately, the Reactive Keyboard is not usually useful for experienced computer users, since they can type much faster than selecting candidates from the menu.
On pen-based computers, however, people cannot enter characters as fast as with keyboards, thus predictive methods like POBox and the Reactive Keyboard are useful.
