Jade is a new interactive tool that automatically creates graphical input dialogs such as dialog boxes and menus.
Application programmerswrite a textual specification of a dialog's contents.
This specificationcontainsabsolutely no graphical information and thus is look-and-feel independent.
The graphic artist uses a direct manipulation graphical editor to define the rules, graphical objects, interaction techniques,and decorationsthat will govern the dialog's look-and-feel, and storesthe results in a look and feel database.
Jade combines the application programmer's specification with the look-and-feel databaseto automatically generatea graphical dialog.
If necessary,the graphic artist can then edit the resulting dialog using a graphical editor and these edits will be remembered by Jade, even if the original textual specification is modified.
By eliminating all graphical references from the dialog's content specification, Jade requires only the absolutely minimum specification from the application programmer.
This also allows a dialog box or menu's look and feel to be rapidly and effortlessly changed by simply switching look and feel databases.
Finally, Jade permits complex inter-field relationshipsto be specifiedin a simple manner.
Jade is a new tool that automatically createsand lays out graphical input dialogs, such as menus,palettes,buttons, and dialog boxes.
It does this by combining a textual specification of the dialog's contents, written by an application programmer, with look-and-feel databases prepared by a graphic artist or style expert.
The dialog can then be modified by a graphic artist using a direct manipulation, graphical editor, and Jade will maintain these edits, even if the original textual specification changes.
The specification that the application programmer writes is completely look-and-feel independent.
Indeed, there are no referencesin the specification to graphics of any kind.
Jade obtains all the graphic information it needs from the style files preparedby the graphic artists.
Thus the look-and-feel of a dialog can be effortlessly changed from a Garnet style to an OpenLook style by simply switching look and feel databases.
No changes to the textual specification are required.
By eliminating all graphical references from a dialog's specification,Jade requires only the absolutely minimum specification from the application programmer: the dialog's contents and the desired interaction techniques .
Jade also makes it possible to specify complex interrelationshipsin a compact,simple form.
For example,the programmercan specify that certain sectionsof the dialog should be disabled  unless another portion of the dialog has been selected.
This feature can be used to gray out the buttons that control the parametersin a moveor grow operationunlessthe correspondingoperation is selected.
It is also easy to specify how the be-
Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery.
To copy otherwise, or to republish requires a fee and/or specific permission.
For example, to control a move operation, the application programmer may present the user with three buttons-a "left" button that specifies that the x coordinate of the object should be changed, a "top" button that specifies that the y coordinateof the object should be changed,and a "formula" button that specifies that a formula will decide which coordinates should be changed.
The programmer can easily specify that the "left" and "top" buttons are mutually exclusive with the "formula" button, but that the "left" and "top" buttons can be simultaneously selected.
The graphic artist creates the look-and-feel for a dialog using a direct manipulation, graphical editor called Lapidary .
To create a look-and-feel, the designer works with an exampledialog that has been generatedby Jade.
The style expert can change the look-and-feel's graphics by creating custom graphical objects and associating them with interaction techniques that Jade recognizes,such as menu or number in a range behaviors.
Or if the interaction techniquedoesnot exist, the designer can make use of a number of tools that are provided with the graphical editor to createthe desiredbehavior.
The graphic artist specifies the look-and-feel's layout by either selectingpositioning rules from a dialog box or by demonstrating the rules graphically.
For example, a group of buttons that controls the dialog, such as "OK" and "Cancel", can be positioned by selecting a rule from the rules dialog box, or by moving the group to an ap prop&e position on the screenand asking Jade to infer the desired rule.
The graphic artist is also free to add decorationsto the look and feel, such as enclosing menus in rectanglesor placing the word "or" between mutually exclusive items.
Thus the graphic artist can visually experiment with different combinations of layout rules, decorations, and objects to obtain the desired look-andfeel.
Finally, the graphic artist is allowed to edit any dialog generatedby Jade, using the same graphical editor that creates the looks and feels.
Jade will remember these changes and ensure that they are applied to the dialog, evenif the original textual specificationis modified.
Garnet seeks to provide a comprehensiveenvironment for creating direct manipulation, graphical interfaces.
Garnet currently provides an object and constraint package, a graphics package, and an interactors package that handles input devices at a high level .
Jadecurrently generatesall the dialog boxes used in Lapidary, such as the one in Figure 2.
It is currently available under Allegro, Lucid, and CMU Common Lisps and it runs on both IBM RT and SUN workstations.
Garnet is designed to be portable so it should not be difficult to compile it under other versions of common lisps or to make it run on other machines.
The lower levels of Garnet  are available for free under license.
Contact the authors for more information.
Interface builders such as NeXT's, the Macintosh Prototyper by Smethers Barnes, and DialogEditor 131allow a designer to select objects from a predefmed set and position them by hand.
However, this can be a slow, inaccuratepmcess.
A dialog box created by Jade that is used by Lapidary to specify a move or grow behavior.
The application programmer has instructed Jade to gray out the parameters associatedwith the move or grow interactor unless the button corresponding to that interactor is chosen, and the graphic artist has enhanced the Jade-created dialog box by placing a rectangle around the Start-Where group and placing the word "or" between that group's items.
Jade also permits the graphic artist to quickly create new objects that can be immediatelyusedin the dialog.
Tools such as Mikey , the Interactive TransactionSystem , Scope, and Chisel  automatically generatedialog boxes from textual specifications.
Mikey generates Macintosh dialogs from the type descriptors found in a Pascal program and Scope generatesdialogs based on the Athena toolkit from C++ programs.
The Interactive Transaction System generates dialog boxes from a specification of the dialog's content and a set of style rules createdby a style expert.
Chisel automatically lays out the presentationcomponentof an interface based on a specification, of the dialog's contents, a set of guidelines establishedby a designer, and a list of user preferences.
Jade also differs from Mikey and Scope iu that it permits dialog specifications to be used with multiple looks and feels.
Figure 3 presents a high-level overview of Jade's architecture.
Jade takes a textual specificationpreparedby an application programmer,an optional file of exceptions, and a look-and-feel graphicsfile and a look-and-feelrules file preparedby a graphic artist.
As output it generatesa graphical layout for a dialog.
The Jade rule editor obtains its rules from a master rule database,which can be augmentedby rules that are demonstratedto Jade by the graphic artist and by interaction techniquesthat the graphic artist demonstrates or that the application programmer writes using Garnet's interactorspackage.
An application programmer writes a specification by giving the labels for the dialog items and the namesof the interaction techniquesthat these items represent.
Labels are provided as lists.
For example, the list  options for the style of a font.
Since several groups of options may be combined to produce one final result, label lists can be nested to obtain subgroups.
For example, a font is determinedby its family, its size, and its style.
Thus the portion of the dialog that determinesthe font might be written as:
Jadeautomatically selectsthe appropriategraphical object based on the value of the :behavior slot and information in the look-and-feel graphics file.
If these parametersare omitted, Jade will provide the default interaction technique, single-choice.
Every item on this list will exhibit the single-choiceor multiple-choice behavior, depending on the prefixing keyword.
For example, suppose that in the fumity group in Figure 1, the bold and italic options can be chosen simultaneously, but neither can be selected if the underline option is chosen.
Jadewill indent the Family, Size, and Style groups so that userscan visually recognize that they are related to Font, as shown in Figure 1.
After listing the contents of a group, the application programmercan provide a number of slot-valuepairs that define the group's interaction technique.
The : behavior slot selectsone of the following sevenbuilt-in interaction techniques: l Single-Choice: Allows a user to select only one item at a time from a group of items.
Jade will also automatically generate code to enable or disable groups of items based on the value of the : enable slot.
Disabled items might be "grayed out" .
The value of the :enable slot will generally depend on whether some other item in the dialog is selected.
Therefore, the application programmer will write a "formula" that expressesa relationship between the value of the :enable slot and the "enabling" item.
A formula can be any arbitrary Lisp expression.
The constraint layer of Garnet provides a special command called gv that can be used to accessthe value of a slot in Garnet o'bjects .
The Garnet constraint systemautomatically reevaluatesa formula when the value of the referencedslot changes.
In writing formulas it is also important to know that Jade usesa tree structureto representa dialog, with the groups as interior nodes and the items as leaves.
Jade labels these nodes with the names given to groups and items.
The application programmer can access these nodes through slots that are stored in the nodes' parents.
In this case, the names of the slots are the names of the nodes they point to.
For example, the Standard Fonts group in Figure 1 will havea slot named : standard-fonts in its parent that containsa pointer to the Standard Fonts group.
Multiple-Choice: Allows a user to select multiple items from a group of items.
Text: Allows the user to input a string of text.
Single-Choice-With-Texu Allows the application programmer to associatea type-in text field with the single-choice interaction techniqueso that the user can input a string of text.
This interaction techniqueis used in the "Start Where" portion of Figure 2.
Multiple-Choice-With-Text: Allows the application programmer to associatea type-in text field with the multiple-choice interaction techniqueso that the user can input a string of text.
As an example of how formulas might be used in the :enable Slot, consider the move/grow operation represented by Figure 2.
The group represented by Width, Height, and Formula should be enabled when the grow button is selected.
Or the application programmer can place a constraint in the : enable slot of a button that causes it to be dim unless a button in another dialog is selected.
Finally, a specification may have a special stop-group slot that specifies the functions that control the dialog, such as "OK" and "Cancel".
Jade treats the stop-group as a command behavior, To assist the programmer in implementing the stop functions, Jade maintains a list of the groups whose selections have been modified and passesthis list to the stop action.
Jade also positions the stop-group specially, using different layout rules than the rules used to lay out the other dialog groups.
The specification in Figure 4 generatesthe dialog box and menu shown in Figure 1.
The sublist  causes a submenu for "edit" to be "paste" created, which will appear after "Edit" has been selected.
In contrast, the sublist  causes a string of buttons to be laid out, prefixed by the non-selectable label Family.
The selectability of labels is determined by the interaction technique they are associated with.
Yet another slot that the application programmer may provide is the : stop-action slot, which gives the name of a function that should be called when the user selects one of the items in a group.
This function is called with the name of the selected object.
It may also access any other object in the dialog using the tree structure outlined earlier.
As an alternative to using stop action functions, the application programmer may place formulas that depend on the items in the dialog in application objects.
The objects will then be automatically updated by Garnet's constraint system when the user makes a new selection.
Constraints and stop-actions allow the application programmer to manage the flow-of-control in a larger application context with many dialogs.
In order to automatically lay out a dialog, Jade uses several heuristics based on the particular look-and-feel, such as where to position the stop group, whether to start each group on a new line, how to position subgroups,and how to position items within a group.
It also needs to know what types of graphical objects to use.
To help it make these decisions, Jade consults a rule base that is maintained in a look-and-feel file.
The rules in this lookand-feel file are in turn derived from a master rule base that Jade maintains.
A graphic artist can use a graphical editor, as describedin the next section,to createnew rules or the application programmer can write new interaction techniquesusing the Garnet interactorspackage.
There are rules for placing objects, determining when to break a line, for specifying horizontal and vertical offsets, and for determining what type of font should be used.
Theserules are of the form:
This rule positions an object to the right of the reference object.
The formula for : left finds the right margin of the reference object and adds to this a number of pixels equal to the offset.
The formula for : t op finds the top margin of the reference object.
Jade places these formulas and values directly into the dialog groups and objects.
The Garnet constraint system then evaluates the formulas and the resultsdictate the layout of the dialog.
The look-and-feel fire associates rules with layout parametersthat Jadeusesto position objects in the dialog.
These bindings may also restrict the scope of a rule.
For example, a rule may apply to the layout of a specific group of items, such as the Family group in the text properties dialog box, or to an interaction technique,such as single-choice items, or to the whole dialog.
The parametersare optional and may include things like objects and offsets that help the placementrules position objects with respectto anotherobject.
Sometimesthe rule body is as simple as a number indicating how many pixels should vertically separatetwo groups of items or how many pixels a subgroup should be indented.
Other times the rule body consists of a list of slot-names, such as : left or : top, that parameterizean object, and definitions for these slots, such as a formula indicating that the top of an object should be a certain number of pixels below the bottom of another object.
It is assumed that the graphic artist who creates these rules and bindings will not have much, if any, programming experience.
Therefore, as discussedin the next section, Jade provides a special editor that allows the graphics artist to demonstraterules and bindings.
Jade stores the demonstratedrules and bindings in the format just described.
In the event that a rule or binding cannot be expressedin this editor, the graphic artist can enlist the services of a programmer, who can write the rules or bindings using the above format, and add them to the appropriatedatabase.
If a name changes or disappears,Jade will ask the designer whether the decoration should be deleted, or whether it should be keyed to a new name.
The designer can also change the graphics that represent the various lade interaction techniquesby creating new graphical objects using Lapidary and then linking them to the appropriateJade interaction technique.
Jade will immediately insert the new graphical object into the dialog using the look-and-feel rules that the designer has defined.
If the desired interaction technique is not recognized by Jade, such as a two-choice behavior that allows the user to selectexactly two items, the graphic artist can either demonstrate the interaction technique using Lapidary, or ask the application programmer to code the interaction technique using Garnet's interactors package.
This interaction technique can then be added to Jade's rule baseand incorporatedinto other look-and-feels.
The changes the designer makes to the layout rules, decorations,graphical objects, and interaction techniques can affect multiple levels in Jade.
Graphical changescan be stored in an exceptions file, in which case they will only apply to the dialog being edited, or they can be stored in a look-and-feel graphics file, in which casethey will apply to all dialogs created with that look-and-feel.
Rule changescan be stored in an exceptionsfile, a lookand-feel rules file, or the master rule base.
If they are stored in the master rule base, they will affect all lookand-feels.
Within a dialog, the designer can control whether a rule changehasa local or global effect through the selectionof dialog groups.
If the designer preselects one or more groups, the rule change will only apply to these groups, otherwise the rule change will apply to the entire dialog.
Alternatively, the designer may want a rule change to apply to a specific kind of group, for example,any group that consists entirely of multiple-choice text objects.
In this case, the designer can select a representativegroup, apply the rule to it, and then ask Jadeto generalizeit to all groups of that type.
Once Jadehas laid out a dialog, a graphic artist may want to modify it.
For example,the designermay want to add decorations,such as rectanglesaround groups, or modify some aspectof the layout, such as the way items within a group are positioned with respect to one another.
Jade needs to remember these changes so that it can apply them, even if the application programmer edits the original specification.
The designer may also want some of thesechangesto modify the look-and-feel so that other dialogs can be modified in the samemanner.
Finally, the designer may want to change the graphical objects that representthe various interaction techniquesor createnew interaction techniques.
All of these adjustmentscan be accomplishedusing the Lapidary editor.
To modify the rules governing the layout of a dialog, the graphic artist can use a rule dialog box that shows the rules in the masterrule base,or the designer can demonstratethe rule.
Related rules are grouped together by the rule dialog box and the one that is currently used in the dialog is highlighted.
For example,the rules that can affect how items in a group are positioned will be displayed together.
When the designer selectsa new rule, the Jade generateddialog is immediately up dated to reflect the change.
The graphic artist can also change the rules in a direct manipulation manner by repositioning dialog objects, such as moving a stop-group to the bottom of the dialog and aligning it horizontally.
If none of the rules seemsto apply, Jade will ask the &signer if it should createa new ruIe to cover this situation.
The designer can then give this rule a name and Jade will record the rule in its rule database.
The designer is then free to incorporate this rule into the current look-and-feel, other look-and-feels, or only into this dialog.
To add decorations to a dialog, the graphic artist draws the objects in Lapidary and then positions them using Lapidary's constraint menus.
The constraintsrefer to the group's or item's name,so Jade can rememberthe excep tions by saving the decorations, the constraints, and the group's or item's name.
Jade is currently used to create the dialog boxes in Lapidary and was usedto generateall the dialog figures in this paper.
The present implementation of Jade consults look-and-feel databasesto determine which rules and graphical objects it should use.
Rules can also be changedlocally so that the modifications only apply to a particular group.
The master rule base has not been implemented so it is not currently possible to extend Jadeby adding new rules or interaction techniques.
CHI !3O proceedings have rules demonstratedto it.
However, it is possible to modify rules textually by placing the names of the ap propriate rules in a look-and-feel file, Similarly, graphical objects can be createdusing Lapidary, and then linked textually with Jadeinteraction techniques.
A possible future extension is to use Jade to generatea special editor for creating a Jadespecification.
Of course this editor would use Jade created menus and dialog boxes.
For example, the :behavior, stop-action and : enable slots could be placed in a dialog box along with fields for a group's label and the graphical objects' labels.
A mechanismfor defining subgroupscould also be established by creating multiple copies of the dialog box, one for each subgroup.
The advantageof this ap preach is that it would be easier for the designer to create a'syntactically correct specification.
The disadvantageis that it would not be as fast as simply typing in the specification.
Boies, John D. Gould, SharonL.
Transformationson a Dialog Tree: Rule-BasedMapping of Content to Style.
Proceedingsof the ACM SIGGRAPH Symposium on User Interface Software and Technology, Williamsburg, VA, Nov., 1989,pp.
Proceedings of the ACM SIGGRAPH Symposiumon User Interface Software and Technology, Williamsburg, VA, Nov., 1989,pp.
Building User Interfacesby Direct Manipulation.
Proceedingsof the ACM SIGGRAPH Symposiumon User Interface Software, Banff, Alberta, Canada,Ott, 1988,pp.
Creating User interfaces by Demonstration..
Brad A. Myers, Brad Vander Zanden,and Roger B. Dannenberg.
Creating Graphical Objects by Demonstration.
Proceedingsof the ACM SIGGRAPH Symposiumon User Interface Software and Technology, Williamsburg, VA,Nov., 1989, pp.
Brad A. Myers, Dario Giuse,Roger B. Dannenberg, Brad Vander Zanden, David Kosbie, Philippe Marchal, Ed Pervin, and John A. Kolojejchick.
The Garnet Toolkit ReferenceManuals: Support for Highly-Interactive, Graphical User Interfacesin Lisp.
An Object-Oriented,ConstraintBased,User Interface DevelopmentEnvironment for X in Common Lisp.
A ProgrammingLanguageBasis for User Interface Management.
Human Factors in Computing Systems,ProceedingsSIGCHI'89, Austin, TX, April, 1989,pp.
Gurminder Singh and Mark Green.
Chisel: A System for Creating Highly Interactive ScreenLayouts.
Proceedings of the ACM SIGGRAPH Symposiumon User Interface Software and Technology, Williamsburg, VA, Nov., 1989, pp.
CharlesWiecha,William Bennet, StephenBoies, and John Gould.
Human Factors in Computing Sys; terns,ProceedingsSIGCHI'89, Austin, TX, April, 1989, pp.
Jadepresentsa new techniquefor rapidly creating graphical dialogs with the same look-and-feel, allowing a graphic artist to modify the resulting dialog, and remembering these modifications even if the original specification is edited.
By providing look-and-feel databases, Jade allows the dialog specification itself to be completely look-and-feel independent.
Thus an application programmer can create dialogs by simply listing the contents of the dialog, and a graphic artist or style expert can create the rules, graphics, decorations, and interaction techniques that govern the look-and-feel of these dialogs.
In addition to allowing the style expert to alter the dialogs once they have been created, Jade will permit the style expert to create new rules, graphics, interaction techniques, and decorations using a graphical, direct manipulation interface.
Thus Jade will be extendableand will permit the graphic artist to visually experiment with different looks and feels when designing an application's graphical user interface.
We are grateful for the help we received from the other Garnet project members in designing Jade: Dario Giuse, Roger B. Dannenberg, David Kosbie, Philippe Marchal, and Ed Pervin.
This research was sponsoredby the Defense Advanced Research Projects Agency , ARPA Order No.
The views and conclusionscontained in this documentare those of the authors and should not be interpreted as representing the official policies, either expressedor im-
