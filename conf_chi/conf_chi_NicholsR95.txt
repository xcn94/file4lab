A useful approach towards improving interface design is to incorporate known HCI theory in design tools.
As a step toward this, we have created a tool incorporating several known psychological results .
The tool, simple additions to a spreadsheet developed for psychology, helps create theoretically motivated aliases for command line interfaces, and could be further extended to other interface types.
It was used to semi-automatically generate a set of aliases for the interface to a cognitive modelling system.
These aliases reduce typing time by approximately 50%.
Command frequency data, necessary for computing time savings and useful for arbitrating alias clashes, can be difficult to obtain.
We found that expert users can quickly provide useful and reasonably consistent estimates, and that the time savings predictions were robust across their predictions and when compared with a uniform command frequency distribution.
HCI results that could be applied, for example, about good and bad HCI interfaces , about problem solving and interface use , and about perceptual processes .
These results offer the opportunity to improve interface design at an early stage.
However, it may be beyond the grasp of a designer with a deadline to apply all these results, particularly if the designer has to find the results and then apply them by hand.
The appropriate approach, it appears to us, is to incorporate theories into a tool or set of tools to either design interfaces or to quickly inspect designs.
For an HCI tool to be beneficial, the utility has to be easy to use, cheap, automatic, honest, and complete for the task at hand.
The tool must also be flexible to incorporate additional results.
This affords fast implementation of psychological theory in an accessible and testable environment.
One often used and easily approached way to improve interfaces is by introducing aliases -- abbreviations of command names.
The use of aliases reduces the work required to execute a command and thus also lowers the possibility of error in expert users .
It is also an area where there are known constraints that can inform design, both from empirical research and from HCI theories .
Command line interfaces are a worthy area to serve as an example application of such a tool.
They are ubiquitous, and as we shall show, the payoff can be quite large.
The commands are often needlessly long, and typing mistakes can require a lengthy command to be re-entered.
We also chose this type of interface because it is easy to work with and, in this case, has practical use in our daily work.
The use of aliases is not a new concept, but as far as we are aware, there have been no tools put forward to create aliases automatically.
It would be useful to have tools that help in HCI related tasks in general -- some screen layout tools are available  but they are not used much.
We have created a tool incorporating several known psychological constraints for creating theoretically motivated aliases for command line interfaces.
The tool described here has been applied to the command line interface of Soar, a cognitive modelling system .
A set of principles for abbreviation method have been incorporated into an alias generating function, and the predicted execution times of the created aliases have been compared with the existing commands using the KeystrokeLevel Model.
The Keystroke-Level Model does make several suggestions about how the aliases should be generated consonant with the generation guidelines below.
If a rule set is used to generate the aliases, once the initial  rule set has been learned only a single mental operator is required to enter a command alias and that behaviour can become automated more quickly -- rather than having to learn by rote each alias, a rule can be applied .
The Keystroke-Level model does not specify where the rules or keystrokes come from, or how they are mapped onto the task.
This leaves the interface builder with a classic design problem of creating a set of aliases that are easily learned and quickly entered.
We used the Keystroke-Level Model  as a measure of design efficiency as it predicts the time taken for a set of commands or aliases to be executed based on sub-task speeds and frequency of tasks.
It is a useful and practical simplification of GOMS  analysis at the level of individual keystrokes , when the user's interaction sequence can be specified in detail, as it can here.
The Keystroke-Level Model has been shown to predict user performance with between 5 and 20% error .
There are several basic assumptions and restrictions associated with the Keystroke-Level Model that this domain and our approach satisfy: * * * The acquisition time and execution time for a task are independent.
No account is taken of errors or error recovery.
While the Keystroke-Level Model does not tell us how to create commands themselves, there are some results that make strong suggestions for how to create aliases of existing commands.
There are two main techniques commonly used for abbreviating command names -- truncation and contraction .
Truncation involves deleting the last few letters of the original command name, and contraction involves removing letters from the middle and end of the word.
In order to avoid confusion, the abbreviation length can be governed by a minimum-to-distinguish system, where a sufficient number of letters are used to form the abbreviation to ensure that the abbreviation is unique.
However, this means that users must know how many letters are required for each individual command.
Research into techniques of abbreviation has shown that abbreviations formed by truncation are more easy to encode  than abbreviations formed by contraction .
It has been suggested that this is because it is easier to have consistency between commands abbreviated by truncation  as opposed to contraction.
A GOMS analysis  has also shown that two letter truncation and minimum-todistinguish are the most efficient forms of abbreviation.
Watts  emphasises the need for consistency of abbreviation format within a system, and notes that it is vital to avoid confusion between aliases.
If all commands are to be shortened to single letters, then although time would undoubtedly be saved at a keystroke level the memory burden would be greatly increased as the user would have to remember which of the commands were abbreviated to a single letter and which were exceptions.
Ehrenreich and Porcu  state that if abbreviations are generated by a simple rule then the memory load is greatly reduced.
If rules are learned then once the rules are known by the user then their access becomes automated and there is no increase in mental operator time.
The total time taken for one task is considered to consist of the time taken to acquire the task  and the execution time.
The main components of command execution that are considered here are the physical motions required to input the command  and the number of mental operators that are necessary to remember and correctly execute the commands.
Our current model is adaptable for typing speed, but does not include the effect of different typing speeds for different letters.
The inclusion of mental operators is governed by heuristics specified by Card et al.
Payne and Green  have proposed a theory of learnability based on writing a task action grammar .
In their case, different types of subtasks would have different syntax, which would provide a basis for using different abbreviation mechanisms or rules for different types of subtasks.
This should decrease the number of clashes and make the resulting aliases more memorable.
Aliases presumably would then indicate their category, which would lengthen them.
However, if exceptions do occur, then they have to be dealt with using rules similar to the rules above, such as vowel deletion.
Since different rule generating mechanisms can be used across subtasks, the user must remember which category the command is in to retrieve the exception rule.
An experiment that they performed compared aliases generated for two interfaces, one with a fairly uniform TAG, and with a less uniform TAG.
The aliases for the more uniform interface yielded fewer errors, a lower rate of use of a help facility, and a more efficient solution of the problem than the less uniform interface.
But their paper by no means states the method supported by Ehrenreich and Porcu  produces bad aliases, merely that the command language itself should be regular as well.
In the development and application of this tool we were not prepared to include the redesign of command sets, which the application of TAG encourages, and which Payne and Green note may have to be done before alias creation.
We are not sure how easily the Soar commands would lend themselves to being divided up into different types of tasks, as would be necessary if a TAG approach was taken.
TAG grammars and semantics  could be included as a future extension, by providing a column to indicate a semantic category of each command, and a function that uses that category when automatically creating the alias set.
It can be difficult to apply these principles consistently and time-consuming to implement them by hand.
The Keystroke-Level Model notes that command frequency data needs to be gathered, new aliases need to be devised, and in order to assess how useful the aliases are, the time savings need to be computed.
Therefore the next step would appear to be to provide a flexible and extendible facility to create and assess aliases automatically.
The HCI theories were implemented by using two Lisp functions which were added to the Dismal spreadsheet.
The first -- key-val -- took a command and calculated the number of mental operators and keystrokes used in the execution of the command.
It then used the estimated typing speed to calculate a time prediction for the execution of the command according to the Keystroke-Level Model.
The second function -- make-alias -- used the specific rules noted below to automatically generate commands aliases.
However, human input was still needed to decide the best way to arbitrate clashes between aliases given the large command set examined here.
The command set initially optimised with this tool was taken from Soar , a unified theory of cognition realised as a cognitive modelling language.
It has previously been command line driven, and over 50 commands are available.
In the past year, a Soar Development Environment   has been developed, which is menu and keystroke driven.
The command line interface remains an important part of SDE however, as some members of the Soar community still prefer a command line interface.
Also, some Soar users cannot use SDE due to the limitations of the hardware that they use to run Soar.
The ideas behind the alias creation could in fact be applied to any command set, but Soar was a suitable candidate for modification for several reasons.
The Soar language is currently being used within our local environment and therefore it is worthwhile enhancing the system for both local users and the Soar community world-wide.
There is potential to get command use frequency information and usability feedback from the local users.
It is fair to assume that most Soar users can be considered "expert users" and are highly familiar with the commands.
Some of the commands that exist within Soar are quite long -- this suggests that users of the Soar Command Line interface would benefit greatly from the introduction of aliases.
Dismal  is a spreadsheet that was explicitly developed for manipulating psychology data.
Dismal is written in GNU-Emacs Lisp, making extensions and modifications such as computations based on the Keystroke-Level Model easy to incorporate.
This approach could be used within any programming language, but we prefer a spreadsheet to display the aliases.
This visual presentation and the use of functions to compute and display the expected times makes the process easy to follow and provides updates automatically to the designer.
The function aimed to minimise keystrokes while avoiding ambiguity.
The characteristics of the command language itself were also considered -- particularly with reference to the fact that many of the commands consisted of several words.
Therefore, we added the following additional guidelines to create a consistent alias set: * * Include in the alias the first letter of each word in the case of multi-word commands.
If the length of the command is 5 letters or less, a one letter alias may be provided if clashes do not occur as a result of the new abbreviation.
In general this means that already short, abbreviated commands , do not get shortened to one letter, but short one word commands  do get abbreviated to a single letter.
Therefore by shortening the command names we expect both to save time and reduce the likelihood of simple typing errors.
The Keystroke-Level Model uses task frequency to balance the time it takes to do each task in a set of unit-tasks.
An initial analysis of approximately two hours of actual subject data was performed to compute these frequencies.
In this session, commands were used while a specific problem was solved.
Perusal of additional transcripts suggested that command usage was highly dependent on the task, there were large individual differences, and in order to generate meaningful frequency data enormous amounts of keystroke logs would be required .
Steps have been taken to log this data in the latest version of the Soar Development Environment .
In an attempt to generate useful frequencies more quickly, four expert Soar users, all with more than three years experience working with Soar, were asked to provide frequency estimates for their own use of the original command set.
These were easy to provide, although they do not correlate very well with each other .
In future work we expect to validate this approach as an approximation to complete logs.
A rule based system for developing aliases is appropriate for both of these categories of users.
However, for the purposes of analysis, the times are only applicable to the experts' behaviour, as the Keystroke-Level Model can only be used to predict the speed of an expert completing a task.
The alias set is still useful for novices, but this cannot be quantitatively shown using the Keystroke-Level Model.
For experts, once the rules have been learned, no additional knowledge is required in order to be able to use the aliases and so time is instantly saved in the form of keystroke reduction without an increase in mental load from having different abbreviations to remember for different commands For novices, the meanings of the original commands can still be retained -- the aliases are both syntactically and semantically compatible.
This can be contrasted with control keystroke command type of aliases, which although reducing time, remove any semantic component of the original command.
This is particularly important when considering Soar, which is both a theory and a language, but is also relevant when considering other command line languages.
The automatic function generated 80% of the final aliases, where the rules could be strictly adhered to, and the exceptions were manually adjusted according to frequency information and the conventions shown in Table 1.
The complete alias set is shown in Table 2.
Figure 1 shows the estimated time savings based on the time to perform the original command set and the alias set balanced for each individual's frequency distribution.
The time taken to execute the original command set is represented by 100%.
This total time, based on the normalised command frequency distributions, varied between 245 s  to 458 s .
When the keystroke values of the commands and aliases were calculated and weighted using a uniform command distribution , it was found that the aliases provided a 55% saving in time over the original command set.
The letters here are included as footnotes in Table 2, indicating how the various aliases that could not have automatic aliases created were adjusted.
The same principle applies to warnings and watch with a warning being displayed if wa is typed.
However, if the user follows the rules then the result is not dangerous.
Overall, this tool appears to be a robust and inexpensive way of applying simple HCI theories to design to reduce command execution time.
Aliases can be constructed and tested very easily, and, with the use of an HCI tool, the principles behind the forms of command aliases can be applied routinely and uniformly.
Savings estimates can also be documented directly and used to guide design by hand when it is necessary or desirable.
The use of a system using guidelines to generate aliases means that the alias forms are easy to learn and can generally be predicted without the particular alias being specified.
The local Soar user group has found the alias set to be generally useful, and the aliases have also been distributed to the Soar community at large.
Aliases improve the interface at quite modest cost, there appears to be no reason not to take this efficiency gain.
Keystroke-Level Model's time predictions for the original command names was the number of mental operators in the original commands, one for each word.
Using single word or acronym aliases are faster not only because they are shorter, but because they require fewer mental operators to perform.
In the future, it may be more appropriate to include different types of mental operators for different parts of the task as occurs in the GOMS models .
Ideally, one might assume that these logs should come from actual users.
For large command sets, this appears to be unnecessary and considerably expensive.
No users type perfectly, and decreasing command length, if it is consistent, may also decrease errors for expert users .
While we do not have empirical evidence of this yet for our alias set, we can derive a simple prediction.
Our alias set reduced the number of keystrokes by 68%.
The simplest prediction is that the simple typing errors are related to the number of keystrokes, no matter what the users' typing accuracy or speed.
Although words are inherently easier to type, these aliases should be fairly easy to type.
The semantic component of the command is retained and they are generated in a regular way.
This suggests that the number of simple typing errors should significantly decrease as well.
As noted above, there are some differences in opinion about which alias generation rules are best, and we have ignored the possibilities of command frequency forcing inconsistencies as well.
The point of this paper and tool was not to provide the definitive alias generating function but to show how such a system would work, and provide the means for creating such a function.
In other words, the focus should be on our approach, not the specific details of our situation.
Since aliases are now cheap and easy to customise, it is not difficult to create additional alias sets for individual users to either adapt our set or create a new set based on their preferred generating rule based on their own cognitive style.
Some points about the Soar aliases do need to be clarified.
The Soar command set is a fairly small command set, which has two major implications.
First, there were not many clashes formed by the automatic alias generation rules, and second, expert users, for whom aliases are created for, are likely to know all the commands in the set.
When a larger command set is being considered, then the need for use of frequency data as a method of arbitration between alias clashes is increased.
However, the trade-off between increase in the size of the rule set and decrease in the number of exceptions must be considered.
If an additional rule had been introduced , then some of the exceptions would have been automatically generated, but this would have been at the expense of an increase in rules to be learned.
It is beyond the scope of this paper to consider the different cognitive burdens that these would impose.
One cannot enumerate all the causes of exceptions -- we suspect that this is an open set.
We found several here  and do not feel that we have even started to enumerate all the possible causes.
This is a problem that is likely to remain, and so while the use of automatic generation should be maximised, the ability for easy manual intervention, such as is provided here with the use of an accessible and flexible spreadsheet, must be retained.
While we can present a strong case for decreasing typing time, and these aliases appear to increase user satisfaction and reduce errors , this result may have a smaller effect on overall task time than might be implied for two reasons.
In the user logs we examined, only a small proportion of time was spent typing .
These are not considered here -- from a practical point of view, computing their average length is a difficult problem where individual and site differences will reign.
Including some estimate remains a necessary step, and the burden that we anticipate it to be suggests that providing them automatically would be a particularly fruitful action to include in the interface.
It is possible that this technique could be directly  extended to analyse menus and other forms of input, as both the Keystroke-Level Model and GOMS analysis could handle this level of complexity.
Indeed, the integrated and examinable nature of the menus in the spreadsheet we used  suggests that this would be an appropriate and reachable next step.
Simple Lisp functions were used to implement the command set generation and their analysis.
While not a problem in this tool, incorporating additional knowledge and extending the range of tasks that can be examined will become a serious problem quite soon given this representation.
A higher level language for representing the constraints on good design and a more complete time prediction system , will also be necessary steps.
Haunold, P. and Kuhn, W. A. Keystroke Level Analysis of a Graphics Application: Manual Map Digitizing.
In CHI '94, Human Factors in Computing Systems.
Hucka, M, The Soar Development Environment, 1994.
Artificial Intelligence Laboratory, University of Michigan: Ann Arbor.
Predicting the time to recall computer command abbreviations.
In CHI'87 Conference on Human Factors and Computing Systems.
1990, Cambridge, MA: Harvard University Press.
Task-action grammars: A model of the mental representation of task languages.
In Computers in Psychology '94.
York : CTI Centre for Psychology, U. of York.
Support for this work has been provided by the DRA, contract number 2024/004, and by the ESRC Centre for Research in Development, Instruction and Training.
Erik Altmann graciously provided access to transcriptions of Soar users.
Four anonymous expert Soar users kindly provided us with command frequency estimates.
Paul Tingle, Matt Southall and Rob Jones performed a preliminary analysis suggested by Kate Cook that inspired this work.
The anonymous CHI reviewers contributed comments that lead to greater clarity.
The latest versions of Dismal and the Soar alias command set are available via anonymous FTP from host unicorn.ccc.nott.ac.uk  in the directory "/pub/lpzfr".
The psychology of human-computer interaction.
The keystroke-level model for user performance time with interactive systems.
Cognitive efficiency considerations for good graphic design.
