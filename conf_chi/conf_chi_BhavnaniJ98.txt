Throughout history, inefficient methodsto use deviceshave beenreplaced by more efficient ones.
This shift typically occurswhen users discover how to &legate work to the powers of a tool, and to circumvent its liiitations.
Strategiesof delegationand circumvention,therefore, appear to be the core of efficientuse.
To show how this approach can expiain the relationship betweentools and strategiesin complex computer systems, we describe five ways to perform a real-world drawing task with current as well as 5.rturetools.
We then present five corresponding GOMS models that demonstratethe value of efficient strategies when comparedto the observedbehavior of a professional CAD user.
We conclude by presenting a generalized framework to characterize efficient strategies and discuss its relevanceto designand training.
However, we need a more systematic approachto understandthe relationship between computer tools and efficient strategies.
We begin by analyzing examples from history to understandthe relationship betweentools and the strategies to usethem efficiently.
Theseexamplessuggestthat as new and more powerful tools evolved in the past to improve product and performance, they often presented new limitations either due to inherent constraints, or due to the new tasks that were attempted.
The efficient use of such tools therefore required a combination of delegation strategiesthat exploited the powers of these tools, as well as circumvention'strategiesthat dealt with their limitations.
The circumvention strategies transformedeither the process, or the task, or triggered the developmentof a more powerful tool, in which case the processrepeated.
To show how the relationship betweentools and strategy is relevant to computerusage,we analyzea real-world CAD taskperformedby a user during an ethnographicstudy .
Starting from how such a drawing task would be done using manual tools, we explore the effectof the increasing sophistication in CAD tools on strategiesto complete the task In order to test the hypothesis that these strategiesam actually efficient and of value to users,we presentthe results from five GOMS models.Thesemodelsrange from how the userperformedthe task on a current version of the system, to how the sametask could be done in future versions.
The analysis demonstratesthat regardless of how powerful computer systems become, their efficient usage requires delegation and circumvention strategies.
However, while these strategies can have strong effects on product and performance, they may not be obvious to even experienced computerusers.
Records ii-am early civilizations show that humans throughout history have developeddevicesand processes to assist in the efficientperformance of tasks.
The Sumerians, for example, first began to write on clay tablets by scratching marks on their surface.
Over 700 years, this method of writing gradually changed into the cuneiform script comprising of wedge-shaped marks pressedinto clay with a reed stylus.
Historians suggestthat this changewas largely motivated by scribeswho discoveredthat pressing marks into de clay instead of scratching upon its surface was not only faster,but also more durable over time .
While the Sumeriansmay have had the luxury to gradually develop a more efficient method of writing on wet clay, today's users of computertools have lhr less attention and As complex time resources to become efficient applications such as CAD and word-processors continue to explode with a profusion of new tools, users level off into su&ient usagepatternsthat tend not to exploit potential efficiencies.
Furthermore, several longitudinal and real~em-kion to make di&Jhrd copies ofail or part oft& mat&d for Personal or cl~oom use is granted without fee provided that the copis .xe not made or diibuted for profit or c~mmem`al aavantage, the copye&t notk the title ofthepublicaion andits date appa, and no& is s;~`~ ht `=PJti&t is by permission of the ACM, Inc. To copy o&n%&, to repubhh, 10post on sewers or to redistribute to lists, requ& sppcific permission andfor fee.
We then present a f&rework of strategies focused on iterative tasks, and show how it can be generalized.In conclusionwe discusshow sucha frameworkcould be used to explain the relationship betweentools and strategiesto users, as well as to help designers more systematically explorethe effectsof their designs.
There are numerousexamplesthroughout history that show the relationship betweentools and efficientmethodsto use them.
The following three illustrate some important concepts aboutefficient methods.
According to surviving records, most scribes of ancient civilizations either wrote from right to left or from top to bottom.
What might have caused this gradualbut radical shift7 Historians and calligraphy scholars note that this change coincidedwith the replacementof the reedbrush by the reed pen as the dominant writing tool .
The reed pen, whose tip, if cut and usedproperly, o&red a more preciseway of making marks on papyrus.However,unlike the reed brush, the reed pen could easily catch in the fibers of rough papyrus.
Historians hypothesize that the Greeks, over a period of 200 years, realized that it was more efficient to pull the reed pen acrossthe rough papyrus rather than to push it.
For a right-handed scribe, this meant writing Ilom left to right.
Thereforethe Greeksused new methods to exploit the hard material of the reedpen to be more precise, and overcameits limitation by changing the direction of writing.
At a later stage in the history of writing, the reedpen and papyruswere replacedby the much more precisequill and smooth parchment, both of which 00bmda new range of possibilities to the medieval scribe.
Illuminated manuscriptsof that em show extremely detailed floral and abstract patterns in brilliant colors.
One of the incomplete pagesrevealshow its illuminators had spedup the process.
This page, like others, contained several independent patternsthat had to be painted in many colors.
Although the illuminator could have completedeachpattern in turn with all its colors, the page shows that all patterns across the page had been painted with yellow.
By finislrmg all areasof one color, the painter had reducedtool switching betweenpaint brushesor color.
In addition, this procedure may have allowed the yellow paint to dry on the first pattern while subsequent patterns were painted yellow; consequently another color paint could be applied immediately afterthe last pattern's yellow was complete.
Despitethis task organization,suchprocesses still remained time-consuming, and the replication of books was laboriously slow.
The production of books was radically changedwith the invention of the printing press.With-the adventof this new technology, the construction and replication of individual pages could be done fin more rapidly comparedto the manual process.However, early printers in Germany took time to realize that the way to exploit the iterative power provided by the presswas by not adding anything to the copies.
For instance,many early books tried to copy the style of scribedmanuscriptsby hand-painting first letters of paragraphs on pagesafter they were printed.
Later printers abandonedthis approach, making the book production process far moreefficient.
The above examples provide several insights into the evolution of efficient methods.
First, none of the efficient methods employedwere absolutely necessaryto complete the tasks but were employed as they improved either the quality of the product, or performance of the tasks.
Because such methods are goal-oriented and non-obligatory, they havebeendefinedas strategies .
Second, eachnew tool offerednew or increased powers and, by using the tools efficiently, userscould exploit these new powers.
These methods can therefore be referred to as delegation strategies.
In the caseof the reed pen and quill, by using proper strategiesto prepare and use the tools, users could delegate precision to the tools; with the printing press, users could delegatethe iterative task of replication to the printing process.
However, new limitations often accompanynew powers, either dueto inherent constraintsin the tool, or when new tasks am attempted with the new tools.
To demonstratehow drawing tools affect strategies, we presenta real-world task performedby a CAD user during an ethnographicstudy .
This task and user behavior is typical of 9 other users currently being analyzed  .
One of the users from that study, "Ll", had more than 2 years experiencein using a CAD system called MicroStationm .
His task was to edit a drawing containing ceiling panels in an architecturalplan that overlappedair-condition vents.
Such repetitive tasksare commonduring the detail drawing stage of a building design.As vents go vertically through ceiling panels,they both cannotoccupy the samespace.Therefore, as shown in Figure 1, the task is to remove all the line segments representing ceiling panels that overlap the rectangles representing the air-condition vents.
The panelclean-up task requiresall ceiling panel lines that overlapthe air-conditionventsto be modified.
The vents and panels are defined in two diflbrent drawing files that are simultaneously displayed on the screen to reveal their overlap.
The vents , were placed in a file by an engineer, and are displayed on the screenby Ll as a REFERENCE FILE, where elementscan be viewedandselected, but not edited The panels , were placed by an architect and viewed by Ll as an editablefile.
Ll canthereforemodify the panelswith respect to the vents.
The file has 21 such vents, all of them similar to those shown in Figure 1.
Ll zoomed in and promed a single window in order to &me sets of these vents to work on.
The rectangle around the vents in Figure 1 representsa typical example of such a window setup, with 3 of the 21 vents showing.
The remainderof this paper will refer to editing the panelsoverlapping thesethree vents asthe panel clean-laptask Depending on the tools available to an architect, the panel clean-up task can be performed in several ways'.
To understandthe relationship betweentools and efficientways to perform the task, we begin by descriimg strategies to use simple drawing tools available in manual drafting aswell as in CAD, and progress towards more sophisticated CAD tools that either exist or are being prototyped.At each stage we shall explore the powers and limits of the tools and discuss efficient strategies to deal with them.
It is important to remember that more sophisticated tools usually appear in cd&ion to less sophisticated tools in complex computerapplications.
The second approach is to makethe vents opaque and place them over the panel lines, therefore masking the overlap.
While this approach could pioduce a correct printed out drawing in some CAD systems, it does not produce an accurate CAD model on which other operations such as automatic dimensioning can be performed.
It is well-known that manual drafting tools provide users with the ability to create precise graphic elements.
For example, the T-square provides constraints to the movement of a pencil and enables a user to draw precise horizontal and parallel lines.
Therefore, given a T-square and a set-square, a user can delegate the act of achieving precision in horizontal and vertical lines to the tools.
With such manual drafting tools, one way to perform the panel clean-up task is to erase a segment of each line to an approximatedistance, followed by precisely redrawing the lines to meet accuratelyat the vents.
As shown in Figure 2a, this approachto the panel clean-up task can also be performed on CAD using equivalent precision tools.
The DELETE-PART-OF-ELEMENT tool could cut eachpanel line, and EXTEND-TO-INTERSECTION could extend it precisely to the boundary of the vent.
We call cutting and extending eachline in turn an instance of the Sequence-by-Element strategy.
The Sequence-by-Element strategy is sufficient for a small number of elements.However, when this strategy is used for iterative taskswith many elements,which are typical in the production of architectural designs,they can offerlittle assistance beyond precision.
The delete and extend tools offeronly the ability to apply single operationsto single elements,and thereforehave to be repeatedly applied to each line overlappin+ each vent.
One way to circumvent this liiitation, at least partially, is to reorganizethe task by reducing the number of times a tool is switched.
Therefore, instead of selecting the DELETE-PART-* F-ELEM tool and applying it to a line, then selecting EXTEND-TO-INTERSEC~ON and applying it to the line, a more efficient method as shown in Figure 2b, is to delete segmentsof all relevant lines, followed by an extensionof all the erasedlines to meet the vent boundary.
We call this method an instance of the Sequence-by Operation strategy.
Sequence-by-Operation addresses the problem of repeated tool-switching in the Sequence-by-Element strategy, but no matter how thesetasks are reorganized,precision tools just cannot assist much in iterative tasks.
A more general approachto circumvent the limitation of precision tools is to use an entirely diflbrent set of tools, which allow the delegationof iteration.
A wide range of applications such as CAD, spreadsheets, and word-processors provide assistancefor iterative tasks through aggregation.
Aggregation refa to the ability to group disjoint elementsin various ways and to manipulate thesegroupswith powerful operators.
There appearto be three types of aggregationtools: those that allow for the application of single operations on element aggregates, the application of operation aggregates on single elements,and the application of operation aggregates on element aggregates.
We call the general class of strategiesto use thesetools the Aggregate-Mod>  strategies.
Au example of a tool that allows a user to apply single operationson au aggregate of elementsis the PLACE-FENCE command provided by MicroStationm.
This command allows a userto place a shapeover any number of elements, set a mode of element selection  and manipulate or modifjl the resulting set.
As shown in Figure 2c, the FENCE tool could be used to perform the panel clean-uptask.
To usethe FENCE tool, the user must place a rectangularfenceon top of the vent by accuratelyselecting its vertices, setting the CLIP-MODE, and then applying the deleteoperationto the aggregate.
The computer respondsby deleting all the element segments within the boundary of the fence.
The crucial aspectof this strategy is to aggregatebefore modification, which relievesthe userfrom operatingon each element.However,the fencetool requires single operations  to be independently appliedto elementaggregates, andthere canbe only one fenceactive at a time.
One way to circumvent the single-operation limitation of the FENCE tool is to use the TRIM tool instead.
With this tool, a user can select any number of "cutting elements" which define the limits to which intersecting elementswill be deleted.Thereforethe deleteandthe extend operationare aggregated for the user over all the vents.
However, to disambiguate which segmentof an intersectingline is to be deleted, the commandrequires the user to click on the appropriate segment of eachelement.
These new powers and limitations allow for a different instantiation of the AM strategy.
As shown in Figure 2d, this new tool could be used by first selecting all the vents.
When the TRIMcommandis invoked, the selectedvents are interpreted as the limits to which the lines must be modified.
As the user selects each line, the aggregated operationis appliedto each line by deleting and extending eachline.
Therefore,while this new commandaddresses the limitation of the fencecommandwhich does not aggregate operations, it forces the user to once again iterate over single elements.
The fundamentallimitation of the FENCE and TRIM tools is that they deal with primitive elements such as lines and shapes, forcing the user in this caseto deal with eachvent.
Circumventing the limitations of FENCE and TRIM for complex iterative tasks requires a difF&ent paradigm of CAD, where users do not place lines and shapes, but domain objectssuch as ceiling panels and vents.
As these objects would reside in a database,users could petiorm sophisticated searches using queries enabling the aggregationand manipulation of information in a much morepowerful way .
This aggreg& of vents and panels can be processed by using anothercommandto petiorm a diflbmnce operationbetweenthe geometryof eachpanel and the vents that it overlaps.
The abovestrategiescanbe organizedin a matrix as shown in Figure 3.
Although Figure 3 allows easy identification and classification of sequence and AM strategies,it remains to be shown that the AM strategiesare actually more efficient for real-world tasks, and whether they have value for real users.
To rigorously understandthe effects of strategieson performance, we conductedanNGOMSL analysis  on all five strategiesto perform the panel clean-uptask.
Each model implemented one of the strategies in Figure 2 down to the keystroke level.
Goal: ExecuteDelete Command The execution times predicted by the NGOMSL models were then compared to Ll's real-world behavior to determinethe potential for improved productivity.
The five NGOMSL models developedusing GLEAN  , produced estimatesfor the execution times for eachof the strategieson the panel clean-uptask for three vents.
As shown in Figure 4, the execution time drops as more and more iterations are delegatedto the computer.
While Sequence-by-Operation saves some time by grouping operations,the AM strategiesproduce greater time savingsby delegating iteration.
The analysis however revealed one unexpected outcome.
The AM-Trim model predicts a time of almost 17 seconds lessthan the AM-Fence model.
Comparison of the predicted executiontimes for dierent strategies to performthe 3-ventpanel clean-uptask.
TheAM-Querystrategy modifiesthe panellinesthat overlap all 21 ventsinsteadof just 3. aswe expectedthe selection of individual lines to be more time consumingthan using a fence.Investigating the details of this prediction revealed a general principle of these strategies.
The models were most sensitive to an increase in the largestundelegatediteration.
As shown in Figure 3, the Sequenceand AM-Trim models did not support elementaggregationandthereforewere most sensitiveto the number of panel lines.
Becausethe AM-Fence model could not aggregate over operations, it was most sensitive to the number of vents.
The AM-Query strategy aggregates over both elements and operations, so its model is neither sensitive to the number of vents nor number of lines, and the time shown in Figure 4 for 3 vents would be the same for the entire 21-vent task.
The AM-Trim model and the Ah&Fence model are thereforein competition becausethe number of limesmore or less ofBetsthe number of vents in the 3-vent task.
To test this hypothesis, a series of AM-Trim models were executedwhile keeping the number of vents constant and increasing the number of lines.
Figure 5 shows that the predicted execution time for the AM-Trim model is equal to that of the AM-Fence model at around 32 lines, but this time steadily increasesas the number of lines increase.
Therefore, when the number of lines is small, and the operationsarerestrictedto cut and extend,the TRIM tool is advantageous.
But when the number of elementsincreases, the FENCEtool producesbetter performance.
Our 3-vent exampletask involves 11 lines, so the TRIM tool wins in Figure 4.
With this procedure all element segmentswithin the fence,regardlessof how visually closethey were to the vent boundary, would have beenselected.The errors related to precise line selection, and those of not noticing lines that had to be cut and extended, would not have occurred.
This would have reduced performance time and increased accuracy.
The above analyses demonstratetwo important points.
First, when work is delegatedto the computer, there am fewer opportunities for errors.
Second, even experienced userssuchas Ll, doing extremely repetitive tasks, tend to miss opportunitiesto delegatework to the computer.
The above analyses of strategies to deal with iterative tasks, their effects on performance, as well as the empirical data, provided the basis to develop a generalizedfimnework for iteration that might be useful acrossdomains.
While the execution time for theAM-Fence strategy remains constant, the execution time for the AM-Trim strategy is directly proportionateto the numberof panel lines.
MicroStation=' version 4, provided aggregationof elements with the FENCE tool, but no tools for the AM-Trim or AMQuery strategies.
However, although Ll had previously used the FENCE tool , he consistently used the Sequence-by-Operation strategy to delete and ex&endeach lime that overlappedall of the 21 vents.The Sequence-by-Operation model is within 11% of theerror-t&e*real-world data.If Ll had used the AM-Fence strategyto cut and extend groups of lines, it would have taken him 40% of the time to completethe task.
In addition, Ll committed many errorswhich added20.33 secondsto the error-free time.
He committed both errors of omission and commission.
First, he did not notice that a panel line located very close to the boundary of the upper right-hand vent overlappedthe vent; he had to return to it after the rest of the lines had beencut and extended Second, he accidentally selecteda panel line just above the lower right-hand vent insteadof the actual vent boundary, thereby extending a panel-line to the wrong location.
As discussed earlierwith referenceto Figure 3, the diflbmnt tools to assistin iteration could be characterizedin terms of single or aggregateoperatorsapplied to single or aggregate elements.It is combinations of these functionalities that produce various designs of tools which, in turn, require particular strategies to exploit them.
Figure 6 is an extension of Figure 3 to include these relationships in a more detailed framework.
Each row defines a particular combination of operator and element types, which is directly related to what can and cannot be delegatedto the computer.
The strategiesemanatefrom these powers and limitations.
The Aggregate-Modify strategies, exploit the power of iteration tools by delegatingiteration.
Circumventionstrategies canrangefrom transforminga task decomposition as demonstrated by the move to the Sequence-by-Operation strategy, to using an entirely di&rent set of tools .
CAD tools are shown as examples.
Because the framework shows the explicit relationship betweenabstractfunctionalities, tools, and strategies,it can be applied in four different ways: to identify strategyinstantiations in other domains, to explore the design of tools, to describe behavior, and to train users in the repercussions of strategies.
The iteration fi-ameworkshowing the relationship between abstract functionality, tools, and strategies for tasks requiring multiple operations on multiple elements.Precision tools  cannot delegate iteration.
This limitation can be partially circumvented by reorganizing the task as described by the Sequence-by-Operation strategy, but more fully addressedby using iteration tools with Ah4 strategies .
Iteration tools themselves have various limitations which can be circumvented by using increasingly sophisticated iteration tools, or through the use of future propagation tools .
To demonstrate the use of this tiework to inform desi&, consider the TRIM tool.
The specific operation of this tool was taken f?omMicroStatiorP version 5, and as shown in Figure 6, its limitation is that it doesnot allow aggregation over elements.
The previous analysis overcamethis limitation by going to an entirely new paradigm for CAD where domain-objects are manipulated in a dat&ase .
However, the tiework pinpoints tie limitation, which inspires are-design without changing underlag paradigms.In this re-design, a more specificversion of the TRIM tool could allow the selection of closed shapeswhich could act as cookie cutters on all elementsthat overlap them.
Sincethe lines to deletewould be encompassedby the closed shapes, this would be unambiguous and not require the user to identify each segment.Given this modification, the user could now select all vents and deleteall overlapping elements in one step, effectively delegatingall iteration to the computer.
The frameworkcould thereforebe used to design training.
For instance,userscan be taught to recognizeopportunities to delegate work to computer powers, as well as to circumvent their limitations Exercises could focus on planning and what we have called Learning-fo-5'ee .
In addition, userscan do tasksusing severaldifferent strategies in order to demonstrate the differences in pe&ormauce these strategiesafford.
Here, exercisescould focus on execution and what we call Learning-to-Do.
We are currently exploring this approachof Learning-to-Seeand Leaming-toDo in a courseon CAD for architecturegraduatestudents.
Clearly there are other powers of computer applications beyond precision and iteration.
Thus, we are developing a largerfi-ameworkof which the iteration fiamework is just a small segment.In addition to precision and iteration, we are currently investigating other powers such as propagation, visualization, and generation as discussed below.
Since the framework provides a continuum of powers starting from no delegation to the delegation of iteration over operations and elements, one cm identify explicitly the level at which a particular user petiorms a particular task.
Instructors could use this information to diagnoselack of knowledgeon the part of the user and decide which concepts and ski& to teach .
Often metaphors of older technologies are the only way to start exploring a new technology as its development,usage, and exploration go hand-in-hand.
Although me iteration tools that operate on domain objects with queries are poweifid, they also have limitations.
For instance, eachtime a changein the vent layout occurs, the user must remember to make the appropriatechanges to panels.
Furthermore, these tools can provide little help ifthe engineerdecidesto move the vents aj?er the panel lines have been modified.
Depending on the way the vents are moved, the panel lines could be in completedisarray; somewould be partially overlapping the vent, and somenot touching them at all.
This would force the user into a labor-intensive processto searchfor, and extend eachcut line that did not terminate at a vent.
PAPEFLS ceiling panels.However one canalreadyexpectproblems to emergein such systems.For instance,once ceiling panels are modified, they could violate some other constraint leading to endlesscycles of propagationwhere the user is completely out of control.
Tools and strategies to circumvent such limitations will therefore have to be defined.
One of the most important powers that make computer applications useful to architects is the power of visualization.
With this power, userscan visualize complex objectssuch as buildings in many difiknt ways without having to alter the underlying representation.
However the screensize of most current systemsputs a severeconstraint on how much information can be viewed at the sametime.
Users often fhcethe tradeoff betweenvisual detail and the scopeof information displayed on the screen.One way to circumvent this liiitation in CAD is to have two windows: one to always provide an overview of the entire building, and the other zoomed lhr into the details of a section.
Proceduresfor easily navigating between these views aheady occur in many CAD systems like MicroStation~Z.
From Sufficient to Efficient Usage: An Analysis of Strategic Knowledge.
The Psychology of Human-Computer Interaction.
Hillsdale, NJ: Lawrence Erlbaum Associates, 1983.
Expertise in a Computer Operating System: Conceptualization and Performance.Human-Computer Interaction 5 , 267304.
Mismatched Metaphor: User vs. System Model in Computer-Aided Drafting.
12.Kieras, D. A Guide to GOMS Model Usability Evaluation using NGOMSL.
The handbook of human-computer interaction .
While iteration and propagation can modify and replicate existing elements, computer applications with powetful algorithms can also generate new kinds of information not explicitly provided by the user.
For example, future systemswill enableusers to explore designs generated by computersbased on constraints and rules .
However such systems incur huge overheadsin their setup and modification, and appearto be usefbl mainly for recurring problem types .Thereforethey may require a whole new set of strategies that haveyet to be encountered.
Strategies of delegationand circumvention appearto be the coreof efficientuse of complex systems.Understandingthe relationship between abstract functionality, tools, and strategiescan assist us in the development,training, and efficient use of complex applications such as CAD.
Our analysis showedthat regardlessof how sophisticatedCAD tools may becomein the future, it appears they will always havepowersaswell as liiitations, which usersmust learn to delegateand circumvent.
