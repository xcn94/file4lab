ABSTRACT A bewildering variety of devices for communication from humans to computers now exists on the market.
In order to make sense of this variety, and to aid in the design of new input devices, we propose a framework for describing and analyzing input devices.
Following Mackinlay's semantic analysis of the design space for graphical presentations, our goal is to provide tools for the generation and test of input device designs.
The descriptive tools we have created allow us to describe the semantics of a device and measure its expressiveness.
Using these tools, we have built a taxonomy of input devices that goes beyond earlier taxonomies of Buxton & Baecker and Foley, Wallace, & Chan.
In this paper, we build on these descriptive tools, and proceed to the use of human performance theories and data for evaluation of the efleciiveness of points in this design space.
We focus on two figures of merit, footprint and bandwidth, to illustrate this evaluation.
The result is the systematic integration of methods for both generating and testing the design space of input devices.
Previous work on human-machine input devices has provided three lines of development in this area: toolkits, taxonomies, and performance studies.
User interface toolkits or user interface management systems help with a wide range of problems including the construction, runtime execution, and postruntime analysis of a user interface .
Sometimes, as in Anson , they even provide architectural models of input device interactions.
But the device models implicit in user interface toolkits sketch only a limited picture of the design space of input devices and their properties.
Even for the construction of interfaces, they present interface designers with many design alternatives, but do little to help with the design decisions themselves.
In order to achieve a systematic framework for input devices, toolkits need to be supported by technical abstractions about the user, the devices themselves, and the task they are used in performing.
Two recent attempts have been made to provide abstractions that systematize the design space of input devices.
Foley, Wallace, and Chan  focused on computer graphics subtasks.
They classified input devices under the graphics subtasks they were capable of performing .
They also reviewed experimental evaluations of input devices.
The limitation of the Foley, Wallace, and Chan scheme is that the categories, while reasonable, are somewhat ad hoc and there is no attempt at defining a notion of completeness for the design space.
INTRODUCTION Human-machine interface technology has developed to the point where it is appropriate to systematize existing research results and craft into a body of engineering and design knowledge.
A case in point is the design of input devices.
A bewildering variety of such devices now exist on the market, including typewriter keyboards, mice, headmice, pen and tablets, dialboxes, Polhemus cubes, gloves, and body suits.
Given an abundance of designs,
Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery.
To copy otherwise, or to republish requires a fee and/or specific permission.
Seve:ralstudies have been made of the performance of different pointing devices.
English & Englebart  studied several devices and found the mouse the fastest device.
Card, English, & Burr  confirmed these empirical results and discovered that pointing speed with the mouse is governed by Fitts's Law  with a bandwidth similar to that of the hand.
Unfortunately these have not always agreed and most studies have not attempted to disentangle task, subject, and human performance variables.
ANALYTIC DESIGN FRAMEWORK In order to understand how the above results could be accommodated in a single systematic framework, it is useful to consider the role of input devices in humanmachine communication.
An input device is part of the means used to engage in dialogue with a computer or other machine.
The dialogue is not, of course, in natural language, but is conducted in ways peculiarly suited to interaction between human and machine.
Unlike human-human conversation, the dialogue is between fundamentally dissimilar agents-both in terms of perception and processing.
Furthermore it takes place under conditions  that are different from the evanescent, sequential oral converslt tion that is often taken as the model for communication.
Instead of words, the user may move the mouse and press buttons.
Instead of words, the machine may show highlighted animated diagrams.
The design of human-machine dialogues is, at least in part, the design of artificial languages for this communication.
This analysis has direct consequences for the design of machines.
Semantic theories provide the means by which the design space can be generated.
Human performance studies provide the means by which design points in the space can be tested.
We can use this basic approach as a means for systematizing knowledge about human interface technology, including the integration of theoretical, human performance, and artifact design efforts.
In particular, we can use this approach to integrate knowledge gained from toolkit, taxonomy, and human performance literature.
In an earber paper , we addressed the semantic analysis of input devices and used this to generate the design space of input devices.
GENERATING THE DESIGN SPACE Conceptually the most general case of human-machine interaction is the case of a human interacting with an embedded computer .
Such an interaction can be modeled as the interaction in an artificial language among at least three agents : 1. a human, 2. a user dialogue machine, and 3. an application.
We can trace the semantics of an input device by tracing the mappings from human action through mappings inherent in the device and finally into changes in the pi+ rameters of the application.
There are two key ideas in modeling the language of input device interaction: 1.
A primitive movement vocabulary, and 2.
A set of composition operators.
The movement vocabulary gives the elementary sentences that can be expressed in the artificial language.
The composition operators give methods of combining this vocabulary into a combinatorically richer set.
Primitive Movement Vocabulary We begin with the observation inspired by Baecker and Buxton  that: Basically, an input device is a transducer from the physical properties of the world into logical values of an application.
Figure 1 lists the various manipulation operators possible for an input device.
They are an extension of the physical properties suggested by Baecker and Buxton 131.
They represent all combinations of linear and rotatary, absolute and relative, position and force.
Although other input devices are possible , virtually all input devices use some combination of these properties.
Figure 2 illustrates the description of a simple set of radio controls, using our primitive movement vocabulary.
The volume knob is rotated about the Z axis .
It is a continuous device and maps using the identify operator from an input domain set of 0 to 270 degrees into the same set.
The selector knob, on the other hand, maps from the set consisting of 0 to 90 degrees into the ordered sequence  degrees.
Finally, the station knob is a dial that moves any number of turns to the right or to the left.
It is presumed to connect to a slider that moves back and forth between 0 and 5 inches.
The station knob is a relative device.
It keeps turning after the slider is against one side and no longer moves.
But if the knob direction is reversed, then the slider reverses immediately.
The volume knob, the selection switch, and the slider each go through another mapping into the parameters of an application.
Merge composition is the combining of two devices such that the resulting input domain set is the cross product of the input domains of the two devices.
A mouse, for example, can be thought of as the merge composition of two orthogonal one-dimensional sliders.
Layout composition is the collocation of two devices on different places of a common panel.
For example, the three buttons of a mouse and the XY sensor are all four layoutcomposed together to form the mouse.
Connect composition occurs when the output domain of one device is mapped onto the input domain of another device.
For the mouse, the output is connected to the input for the screen cursor.
The screen cursor, of course, is not actually a physical device.
This illustrates another point about the modeling scheme, namely, that devices do not have to be physical devices, but can also be virtual devices implemented in software, such as the cursor.
The design space for input devices is basically the set of possible combinations of the composition operators with the primitive vocabulary.
We graph a simplified visualization of this space in Figure 3.
This is our equivalent to Foley, Wallace, & Chan's  and Buxton's  classification.
A device is represented in the figure as a set of circles connected together.
Each circle represents a transducer in the device, plotted according to the canonical physical property it transduces.
Each line indicates a composition operator: connection composition , layout composition  or merge composition .
We have plotted the devices of our radio example and the mouse on this diagram to illustrate its use.
The radio volume knob is in the cell in Figure 3 for sensors of angles relative to the Z axis.
It is located on the right side of the cell, showing that it is continuous.
This diagnm describes PP input device taxow~~~ tkt Is bud an tk analWs presented in this paper.
Lines are used to connect the clrcln 01 composlrr dwica.
Tk double line represents 1 co#mectioa composirkn.
Tk d&d on P moue.
The station knob is located in the cell for relative angle and is connected to a slider for the tuning mechanism.
A mouse is depicted in the figure as a circle on X Movement, a circle on Y Movement, and a circle containing the number 3 on Z positioning.
This says that the mouse is a layout composition of four devices: one device which is itself the merge composition of two elementary devices sensing change in X and Y and three other d,evices that are simple buttons.
The placement of the X and Y circles to the right of the column indicate nearly continuous resolution.
The location of the button circles to the left indicates controls with only two states.
To demonstrate the coverage of the taxonomy, we have reclassified the devices listed by Foley, Wallace, & Chen and Buxton .
With the exception of voice, we have been able to position on the diagram all of the devices considered so far.
Furthermore, it is possible by placing circles in,various cells of the diagram to generate potential new devices.
Of course many of these devices might not be good ones, but the point is that Figure 3 is a sufficiently rich depiction of the design space for input devices that it can be used both to classify nearly all existing devices and to generate ideas for new ones not yet invented.
We now turn to testing it.
There are several sorts of expressiveness problems that can arise with input devices.
One sort of problem arises when the number of elements in the Out set does not match the number of elements in the In set to which it is connected.
If the projection of the Out set includes elements that are not in the In set, the user can specify illegal values; and if the In set includes values that are not in the projection, the user cannot specify legal values.
For example, if the user wishes to convey the meaning to the system "Select point ~105, y=32", but the device he is using has a resolution of l/4 inch , then he will not be able to express his requests exactly and there will be some loss of expressivenessserious or not depending on the situation.
An input device requires a certain amount of space on a desk.
Since a workspace, such as a desk, is a small, finite resource, smaller footprints are usually better.
The actual amount of space required to operate a device depends on the sequence of actions in an application.
But for design purposes, we can index this by taking an extreme application parameter manipulation, then mapping this backward through the input device to determine what input device manipulation would be required to make this change in the application parameter.
As an example, let us compare the relative desk footprint of different input devices for pull-down menus on the original Macintosh  and the SuperMac .
The mouse must be able to move from any point of the screen to the menu bar, which is at the extreme top of the screen.
The footprint is therefore an image of virtually the entire screen in the movement of the device.
For various devices, we can estimate this, as below.
This increase in footprint size might profitably cause designers to consider whether the original pull-down menu design is the most appropriate for the larger screen.
Now let us turn to another figure of merit, bandwidth.
It is usually desirable for an input device to be as fast to use as possible.
But it is not quite accurate to characterize input devices in terms of speed of use.
The time to do something is actually a joint product of all these elements in our model: the human, the device, and the application.
For the moment, we restrict ourselves to tasks which involve pointing to a target with a continuous device.
The speed and error performance of a particular device may depend on a number of subtleties, such as the relationship between the geometry of the device and the geometry of the hand or coefficients of friction.
But we can give a rough characterization of input device design effectiveness in terms of human and device bandwidth and application precision requirements: 1.
We can use Figure 6 as a rough index for the bandwidth of different parts of the body.
An approximate measure of the difficulty of many input activities can be estimated by selecting one, or a few, extreme subtasks as design benchmarks .
For example, in text editing, we might select the subtask of pointing to a character  as our design benchmark.
We can index the difhculty of a task by using Fitts's Index of Difficulty , which, in Welford's  reformulation is given as: ID = log, bits,
We can then move horizontally to find the Fitts's Law line associated with the muscles connected to the transducer of another input device.
From this intersection, we can move back down to the abscissa to find the Index of Difficulty value that this device could point to in the same time that the arm could point to a character.
As a result, we say that an input device will be matched with the precision requirements of a pointing task, if the pointing device  is as good as the pointing hand.
This calculation has been used to set the size of circles that characterize both device bandwidths and application precision requirements in the following example.
The quantity B is often given for Fitts's Law in terms of its reciprocal.
Values of the Index of Difficulty for some common graphics subtasks are located on the abscissa of Figure 6.
We now go one step farther.
Using the bandwidth of the arm  as a reference, we can compare device bandwidth and task precision requirements.
We take an application task such as pointing to a character on a display.
This task has an associated In index of difficulty number as indicated in Figure 6 on the abscissa.
Suppose the user is located in a virtual 3D environment .
Moving the mouse forward and back rotates the virtual head up and down; moving the mouse left and right rotates the head to the left or to the right.
The screen contains a fixed circle cursor on its center.
Moving the mouse thus moves the world, keeping the cursor fixed.
This simulates moving the user's direction of gaze aroun,d in this virtual world.
Pressing a button on the mouse selects whatever object is inside the circle.
An interesting alternative to the mouse for this application is the "headmouse" device.
A headmouse has a pair of ultrasonic sensors worn on the head like earphones, a transmitter mounted on the display, and plugs into the mouse port.
Moving the head changes the XY coordinates of the mouse in the appropriate way.
It seems like an obvious device for this application, but analysis shows that it is only appropriate for half of the task.
Figure 8 shows the set of connected devices implied by the above description of the use of the mouse.
In this paper, we have illustrated a way of systematizing knowledge about input devices.
We have provided a method for helping to generate points in the design space.
We have shown how designs can be critiqued in terms of expressiveness and effectiveness and have used two effectiveness metrics, footprint and bandwidth to illustrate how regions of the space can be systematically analyzed.
The design of human-machine interfaces, it has been argued, can be at least partially viewed as the design of artificial languages for communicating between human and machine.
This paper has analyzed the basic semantics of one component of such artificial languagesinput devices.
There are, of course, many additional complexities to humanmachine communication that have not been dealt with , but the techniques used in these studies seem likely to be useful for future systematic treatments of other areas.
In particular, it allows us to accumulate theory, empirical results, and design in a coherent framework.
It is interesting to note that somewhat similar methods have been used in other areas of engineering, for example, to design jet engines .
A technique similar to ours  was used to define several design spaces and, it is claimed, led to a number of surprising and novel inventions.
In the figure, the circles of all these virtual devices are drawn to indicate the precision with which pointing can be done-a smaller circle indicates tighter precision computed according to Figure 6.
Filled circles represent the precision requirements of the application.
In this task there are essentially two application precision requirements: loose precision for controlling the virtual head looking around and tight precision for pointing at a position on the whiteboard.
A white circle and a filled circle of the same size indicate a fit.
A filled circle larger than a white circle indicates that the device has more precision than needed.
But a filled circle smaller than a white circle indicates that the task requires more pecision than is being provided.
In Figure 8, we see that the mouse provides more than enough precision for moving the head and is a match for pointing to the whiteboard.
But when we make the equivalent diagram for the headmouse in Figure 9, we see that the headmouse.
If we want to use the headmouse, we should separate out the pointing task and put it on some other, more precise device.
Human motor performance in precise microscopic work.
Also published by the MTM Association, Fairlawn, New Jersey, 1973.
Automatic design of graphical presentations.
Computer Science Dept., Stanford University.
A semantic analysis of the design space of input devices.
To appear in Human-Computer Interaction, Lawrence Erlbaum.
ACM SIGGRAPH workshop on software tools for user interface management.
